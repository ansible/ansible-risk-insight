server {
    listen 0.0.0.0:{{ NGINX_PROXY_PUBLIC_PORT }}{% if NGINX_PROXY_USE_SSL %} ssl http2{% endif %};
    server_name {{ NGINX_PROXY_SERVER_NAME }};

    access_log {{ NGINX_PROXY_ACCESS_LOG }};
    error_log {{ NGINX_PROXY_ERROR_LOG }} error;

    {% if NGINX_PROXY_USE_SSL -%}
    ssl_certificate {{ NGINX_PROXY_SSL_CERT }};
    ssl_certificate_key {{ NGINX_PROXY_SSL_KEY }};
    add_header Strict-Transport-Security "max-age=31536000";
    {%- endif %}

    {{ NGINX_PROXY_EXTRA_CONFIG }}

    set $expected_origin false;
    {% if NGINX_PROXY_ORIGIN_REGEX -%}
        if ($http_origin ~ {{ NGINX_PROXY_ORIGIN_REGEX }}) {
            set $expected_origin true;
        }
    {%- endif %}

    {% for response_code in NGINX_PROXY_CORS_HEADERS_FOR_RESPONSE_CODES -%}
    location @{{ response_code }}_cors_header {
        if ($expected_origin = true) {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET,POST,DELETE,OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }

        return {{ response_code }};
    }
    {%- endfor %}

    location / {
        proxy_pass {{ NGINX_PROXY_INTERNAL_SCHEME }}://{{ NGINX_PROXY_INTERNAL_DOMAIN }}:{{ NGINX_PROXY_INTERNAL_PORT }}/;
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_send_timeout {{ NGINX_PROXY_SEND_TIMEOUT }};
        proxy_read_timeout {{ NGINX_PROXY_READ_TIMEOUT }};

        proxy_set_header Host {{ NGINX_PROXY_SET_HEADER_HOST }};
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        {% if NGINX_PROXY_PASSWORD is not none -%}
        auth_basic "{{ NGINX_PROXY_AUTH_DOMAIN }}";
        auth_basic_user_file {{ NGINX_PROXY_HTPASSWD_PATH }};
        {%- endif %}

        {% if NGINX_PROXY_UPGRADE_CONNECTION -%}
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        {%- endif %}

        # Add CORS headers for the response code does not have a correct CORS header.
        {% for response_code in NGINX_PROXY_CORS_HEADERS_FOR_RESPONSE_CODES -%}
        error_page {{ response_code }} = @{{ response_code }}_cors_header;
        {%- endfor %}
    }
}
