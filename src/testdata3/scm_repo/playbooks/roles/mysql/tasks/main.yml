---
# This task can be removed once we move to the latest version of the geerlingguy.mysql role.  The
# version we are currently using only installs the Python2 version of python-mysqldb.
- name: Install python3-mysqldb package
  apt:
    name: python3-mysqldb

- name: Create mysql group
  group:
    name: mysql
    system: yes

- name: Create mysql user
  user:
    name: mysql
    group: mysql
    system: yes

- name: Create a ext4 filesystem on MYSQL_OPENSTACK_DB_DEVICE
  when: MYSQL_OPENSTACK_DB_DEVICE is defined and MYSQL_OPENSTACK_DB_DEVICE != ""
  filesystem:
    fstype: ext4
    dev: "{{ MYSQL_OPENSTACK_DB_DEVICE }}"

- name: Mount MySQL home
  when: MYSQL_OPENSTACK_DB_DEVICE is defined and MYSQL_OPENSTACK_DB_DEVICE != ""
  mount:
    name: "/var/lib/mysql"
    src: "{{ MYSQL_OPENSTACK_DB_DEVICE }}"
    fstype: ext4
    state: mounted

- name: chown -R /var/lib/mysql
  file:
    path: /var/lib/mysql
    owner: mysql
    group: mysql
    recurse: yes
    state: directory

- name: chmod /var/lib/mysql
  file:
    path: /var/lib/mysql
    mode: 0700
    state: directory

- name: Allow required ports
  ufw:
    rule: allow
    port: 3306
    proto: tcp

# Parameters to set the maximum number of open files
- name: Creating directory for Mysql files limit configuration
  file:
    path: /etc/systemd/system/mysql.service.d/
    state: directory
    mode: 0755

# The limits of processes started by systemd are governed by systemd configuration
# files and not from security/limits.d
- name: Set open files limit in mysql through systemd
  copy:
    dest: /etc/systemd/system/mysql.service.d/override.conf
    content: |
      # cf https://duntuk.com/how-raise-ulimit-open-files-and-mysql-openfileslimit
      [Service]
      LimitNOFILE={{ MYSQL_OPEN_FILES_LIMIT }}
      LimitNPROC={{ MYSQL_PROCESSES_LIMIT }}

- name: Copy pre-backup script
  template:
    src: backup-pre-mysql.sh
    dest: /usr/local/sbin/backup-pre.sh
    mode: 0500

- name: Copy post-backup script
  template:
    src: backup-post-mysql.sh
    dest: /usr/local/sbin/backup-post.sh
    mode: 0500

- name: Install Prometheus MySQL exporter
  when: MYSQL_EXPORTER_ENABLED
  block:

    - name: Download MySQL exporter
      unarchive:
        src: "{{ MYSQL_EXPORTER_DOWNLOAD_URL }}"
        remote_src: yes
        dest: /opt
        creates: "{{ MYSQL_EXPORTER_BINARY }}"
      notify: restart mysqld_exporter

    - name: Append MySQL exporter user to list of MySQL users
      # Note that the database will only be installed later, so we need to rely on the
      # external role to create the users.
      set_fact:
        mysql_users: "{{ mysql_users + MYSQL_EXPORTER_MYSQL_USERS }}"

    - name: Create MySQL exporter environment file
      copy:
        content: |
          DATA_SOURCE_NAME='exporter:{{ MYSQL_EXPORTER_MYSQL_PASSWORD }}@(localhost:3306)/'
        dest: /etc/mysqld_exporter.conf
        mode: 0640
        owner: root
        group: mysql
      notify: restart mysqld_exporter

    - name: Copy MySQL exporter service definition
      template:
        src: mysqld_exporter.service.j2
        dest: /etc/systemd/system/mysqld_exporter.service
      notify: restart mysqld_exporter

    - name: Start MySQL exporter
      systemd:
        daemon-reload: yes
        name: mysqld_exporter.service
        state: started
        enabled: yes

    - name: Create Consul service definition file
      when: COMMON_SERVER_INSTALL_CONSUL is defined and COMMON_SERVER_INSTALL_CONSUL
      copy:
        content: "{{ MYSQL_EXPORTER_CONSUL_SERVICE | to_nice_json }}"
        dest: /etc/consul/mysqld-exporter.json
      notify:
        - reload consul

- name: Install MySQL binaries from debian
  apt:
    deb: "{{item.url}}"
    state: present
  with_items:
    - "{{MYSQL_URLS}}"

- name: Created pinned version file
  when: MYSQL_PINNED_VERSION != ""
  template:
    src: pinned_versions.j2
    dest: /etc/apt/preferences.d/mysql
    mode: 0500
