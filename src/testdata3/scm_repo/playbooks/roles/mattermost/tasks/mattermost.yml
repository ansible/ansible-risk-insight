---
- name: create mattermost group
  group:
    name: mattermost
    system: yes

- name: create mattermost user
  user:
    name: mattermost
    group: mattermost
    createhome: no
    system: yes

- name: create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: mattermost
    group: mattermost
  with_items:
    - "{{ MATTERMOST_STATUS_DIR }}"
    - "{{ MATTERMOST_LOG_DIR }}"

# The configuration file is managed via the web interface, and schema updates are performed
# automatically by the Mattermost platform.  For this reason, we only provide an initial version
# of the configuration file and leave the file alone once it exists (in virtue of "force: no").
- name: create config file if it does not exist yet
  template:
    src: config.json.j2
    dest: "{{ MATTERMOST_CONFIG_FILE }}"
    owner: mattermost
    group: mattermost
    force: no

# This autolink configuration is NOT used UNLESS you are installing MM from scratch.
# This is because the playbook never updates config.json on an existing installation.
# You must MANUALLY copy it from /var/lib/mattermost/autolink.json to the correct place
# in /var/lib/mattermost/config.json and restart MM.
# This is explained in autolink.json.j2 but repeated here to be helpful.
- name: generate autolink configuration
  template:
    src: autolink.json.j2
    dest: "{{ MATTERMOST_STATUS_DIR }}/autolink.json"
    owner: mattermost
    group: mattermost

- name: create Mattermost systemd service file
  template:
    src: mattermost.service.j2
    dest: /etc/systemd/system/mattermost.service

- name: check whether previous installation was completed
  stat:
    path: "{{ MATTERMOST_INSTALL_TAG_FILE }}"
  register: mattermost_installation_complete

- name: check installed version of Mattermost
  copy:
    dest: "{{ MATTERMOST_VERSION_FILE }}"
    content: "{{ MATTERMOST_VERSION }}"
    owner: mattermost
    group: mattermost
  register: mattermost_version

# This block is only run when either the previous installation attempt wasn't completed or a new
# version of Mattermost needs to be installed.  In the latter case it performs a fully automated
# upgrade.
- name: install new version of Mattermost
  when: mattermost_version.changed or not mattermost_installation_complete.stat.exists
  block:

    - name: mark Mattermost installation as incomplete
      file:
        path: "{{ MATTERMOST_INSTALL_TAG_FILE }}"
        state: absent

    - name: download Mattermost distribution tarball
      get_url:
        url: "{{ MATTERMOST_DOWNLOAD_URL }}"
        dest: "{{ MATTERMOST_DOWNLOAD_DEST }}"

    - name: stop Mattermost service (if it is already running)
      service:
        name: mattermost
        state: stopped

    - name: remove Mattermost installation directory
      file:
        path: "{{ MATTERMOST_INSTALL_DIR }}/mattermost"
        state: absent

    - name: unpack Mattermost distribution tarball
      unarchive:
        src: "{{ MATTERMOST_DOWNLOAD_DEST }}"
        remote_src: yes
        dest: "{{ MATTERMOST_INSTALL_DIR }}"
        owner: mattermost
        group: mattermost

    - name: create symlink to config file
      file:
        src: "{{ MATTERMOST_CONFIG_FILE }}"
        dest: "{{ MATTERMOST_INSTALL_DIR }}/mattermost/config/config.json"
        state: link
        force: yes

    - name: download Mattermost autolink distribution tarball
      get_url:
        url: "{{ MATTERMOST_UNLINK_DOWNLOAD_URL }}"
        dest: "{{ MATTERMOST_UNLINK_DOWNLOAD_DEST }}"

    - name: create plugin directory
      file:
        path: "{{ MATTERMOST_INSTALL_DIR }}/mattermost/plugins"
        state: directory
        owner: mattermost
        group: mattermost

    - name: unpack Mattermost autolink plugin
      unarchive:
        src: "{{ MATTERMOST_UNLINK_DOWNLOAD_DEST }}"
        remote_src: yes
        dest: "{{ MATTERMOST_INSTALL_DIR }}/mattermost/plugins"
        owner: mattermost
        group: mattermost

    - name: start Mattermost service
      service:
        name: mattermost
        state: started
        enabled: yes

    - name: mark Mattermost installation as complete
      file:
        path: "{{ MATTERMOST_INSTALL_TAG_FILE }}"
        state: touch
        owner: mattermost
        group: mattermost

- name: cleanup old Mattermost installer files to save disk space
  block:
    - name: find old Mattermost autolink installer files in /tmp
      find:
        path: /tmp
        pattern: 'mattermost-autolink.+\.tar\.gz'
        recurse: no
        use_regex: yes
      register: all_mm_autolink
      tags:
        - cleanup_tmp
      
    - name: find old Mattermost team installer files in /tmp
      find:
        path: /tmp
        pattern: 'mattermost-team.+\.tar\.gz'
        recurse: no
        use_regex: yes
      register: all_mm_team
      tags:
        - cleanup_tmp

    - name: select all but the latest 2 installers for cleanup
      set_fact:
        autolink_delete: "{{ (all_mm_autolink.files|sort(attribute='mtime')|map(attribute='path')|list)[:all_mm_autolink.matched-2] }}"
        team_delete: "{{ (all_mm_team.files|sort(attribute='mtime')|map(attribute='path')|list)[:all_mm_team.matched-2] }}"
      tags:
        - cleanup_tmp

    - name: perform tmp cleanup of old installer files
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ autolink_delete }}"
        - "{{ team_delete }}"
      tags:
        - cleanup_tmp
