- name: install apt packages
  apt:
    name: "{{ RABBITMQ_APT_PACKAGES }}"

- name: Open RabbitMQ firewall ports
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  with_items:
    - "{{ RABBITMQ_TLS_PORT }}"
    - "{{ RABBITMQ_HTTPS_PORT }}"

- name: add rabbitmq repositories
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items:
    - "{{ ERLANG_REPO }}"
    - "{{ RABBITMQ_REPO }}"
  tags:
    - install_rabbitmq

- name: add trusted repository keys
  apt_key:
    url: "{{ item }}"
    state: present
  with_items:
    - "{{ ERLANG_REPO_KEY }}"
    - "{{ RABBITMQ_REPO_KEY }}"
  tags:
    - install_rabbitmq

- name: Unlock erlang and rabbitmq
  dpkg_selections:
    name: "{{ item }}"
    selection: install
  with_items:
    - esl-erlang
    - rabbitmq-server
  ignore_errors: yes
  tags:
    - install_rabbitmq

- name: install rabbitmq
  apt:
    name:
      - "esl-erlang={{ ERLANG_VERSION }}"
      - "rabbitmq-server={{ RABBITMQ_VERSION }}"
    update_cache: yes
    force: yes
  tags:
    - install_rabbitmq

- name: Lock erlang and rabbitmq
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - esl-erlang
    - rabbitmq-server
  tags:
    - install_rabbitmq

- name: Create directory for RabbitMQ service overrides
  file:
    path: /etc/systemd/system/rabbitmq-server.service.d/
    state: directory
    mode: 0755
    owner: root
    group: root
  tags:
    - fd_limit

- name: Set the file descriptor limit to a high value in the systemd service
  ini_file:
    dest: /etc/systemd/system/rabbitmq-server.service.d/limits.conf
    section: Service
    option: "{{ item }}"
    value: 65535
    mode: 0644
    owner: root
    group: root
  with_items:
    - LimitNOFILE
    - LimitNPROC
  notify:
    - reload systemd
    - restart rabbitmq
  tags:
    - fd_limit

- name: add rabbitmqadmin config
  template:
    src: rabbitmqadmin.conf.j2
    dest: /etc/rabbitmqadmin.conf
    owner: root
    group: root
    mode: 0600

- name: add rabbitmq import/export scripts
  template:
    src: "{{ item }}.j2"
    dest: "{{ RABBITMQ_SCRIPTS_DIR }}/{{ item }}"
    owner: root
    group: root
    mode: 0700
  with_items:
    - "{{ RABBITMQ_BACKUP_COMMAND }}"
    - "{{ RABBITMQ_RESTORE_COMMAND }}"

- name: add rabbitmq export directory
  file:
    path: "{{ RABBITMQ_EXPORT_DIR }}"
    state: directory
    owner: root
    group: root
    mode: 0700

- name: set letsencrypt directory owner
  file:
    path: "/etc/letsencrypt"
    owner: rabbitmq
    state: directory
    recurse: yes

- name: write rabbitmq configuration
  template:
    src: rabbitmq.config.j2
    dest: /etc/rabbitmq/rabbitmq.config
  notify:
    - restart rabbitmq

- name: enable rabbitmq plugins
  rabbitmq_plugin:
    names: rabbitmq_management,rabbitmq_tracing,rabbitmq_federation
    state: enabled
  notify:
    - restart rabbitmq

- name: create default admin user
  rabbitmq_user:
    user: "{{ RABBITMQ_ADMIN_USERNAME }}"
    tags: "administrator,{{ RABBITMQ_ADMIN_USERNAME }}"
    password: "{{ RABBITMQ_ADMIN_PASSWORD }}"
    vhost: /
    configure_priv: .*
    write_priv: .*
    read_priv: .*
    state: present

# RabbitMQ must be restarted after installing the rabbitmq_management plugin in order to use the
# HTTP API, and we need the HTTP API to fetch the rabbitmqadmin tool, so the handlers are flushed here.
- meta: flush_handlers

- name: download rabbitmqadmin executable
  command: wget -P "{{ RABBITMQ_SCRIPTS_DIR }}" "{{ RABBITMQADMIN_URL }}"
  args:
    creates: "{{ RABBITMQ_SCRIPTS_DIR }}/rabbitmqadmin"

- name: remove default guest user
  rabbitmq_user:
    user: guest
    state: absent

# TODO: what is this used for?
- name: ensure vhost /test is present
  rabbitmq_vhost:
    name: /test
    state: present

- name: ensure newrelic rabbitmq monitoring is present
  apt:
    pkg: "nri-rabbitmq"
    state: present
  register: rabbit_newrelic
  tags:
    - rabbitmq-newrelic

- name: ensure /etc/newrelic-infra/integrations.d/rabbitmq-config.yml is present
  template:
    src: rabbitmq-config-newrelic-infra.yml.j2
    dest: "/etc/newrelic-infra/integrations.d/rabbitmq-config.yml"
  register: rabbit_newrelic_config
  tags:
    - rabbitmq-newrelic

- name: restart newrelic-infra if changed
  systemd:
    name: newrelic-infra
    state: restarted
  when: rabbit_newrelic.changed or rabbit_newrelic_config.changed
  tags:
    - rabbitmq-newrelic
