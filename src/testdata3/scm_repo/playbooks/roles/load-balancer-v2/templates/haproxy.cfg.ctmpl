#jinja2:variable_start_string:'{{!', variable_end_string:'!}}'
global
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 2m
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3

    tune.ssl.default-dh-param 2048

defaults
    mode http
    option http-server-close
    option forwardfor
    balance roundrobin
    log global
    option httplog
    option dontlognull
    option dontlog-normal
    option redispatch
    retries 3
    timeout connect 5000
    timeout client  50000
    timeout server  2m
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

frontend fe_http
    bind *:80
    acl lb_domain hdr_reg(host) -i {{! haproxy_domain_regex !}}
    acl acme_challenge path_beg /.well-known/acme-challenge/
    redirect scheme https code 301 unless acme_challenge
    use_backend be_acme_challenge_local if lb_domain
    use_backend be_acme_challenge if acme_challenge

frontend fe_https
    bind *:443 ssl crt /etc/haproxy/certs.pem crt /etc/haproxy/certs crt /etc/haproxy/certs/ocim

    # X-Forwarded-For is added by "option forwardfor"
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https

    # Use the error backend if the path begins with /error
    acl error_mode path_beg /error
    use_backend error if error_mode

    # If the backend raises a 50x error redirect to /error so the error backend is used.
    acl backend_fail status 500:599
    acl error_backend res.hdr(X-Maintenance) yes
    acl maint_backend req.hdr(host),lower,map_dom(/etc/haproxy/maint.map) -m found
    http-response redirect location /error if backend_fail !error_backend
    use_backend %[req.hdr(host),lower,map_dom(/etc/haproxy/maint.map)] if maint_backend
    use_backend %[req.hdr(host),lower,map_dom(/etc/haproxy/backend.map)]

    # For errors raised by HAProxy redirect to /error so they will go to the error backend.
    errorloc 500 /error
    errorloc 502 /error
    errorloc 503 /error
    errorloc 504 /error

{% if haproxy_enable_stats_page %}
frontend stats
    bind *:{{! haproxy_stats_port !}} ssl crt /etc/haproxy/certs.pem crt /etc/haproxy/certs
    stats enable
    stats uri /stats
    stats refresh 10s
    stats auth {{! haproxy_stats_page_username !}}:{{! haproxy_stats_page_password !}}
{% endif %}

backend be_acme_challenge
    server srv_lets_encrypt {{! cert_manager_server_address !}}

backend be_acme_challenge_local
    server srv_lets_encrypt 127.0.0.1:8080

# When the AppServer raises the "sinking ship" 50x error this backend gets
# activated and serves an alternate error page that can be customised
# per-instance.
backend error
    server error-page 127.0.0.1:{{! maintenance_server_port !}}

# The following backends can be manually activated during times of scheduled
# or unscheduled maintenance. The instructions for how to activate them can be
# found here: https://gitlab.com/opencraft/documentation/private/blob/master/ops/incidents.md
backend scheduled-maintenance
    http-response redirect location / unless { capture.req.uri / }
    server scheduled-maintenance-page 127.0.0.1:{{! maintenance_scheduled_server_port !}}

backend unscheduled-maintenance
    http-response redirect location / unless { capture.req.uri / }
    server unscheduled-maintenance-page 127.0.0.1:{{! maintenance_unscheduled_server_port !}}

# This backend can be used when an instance is being provisioned
backend provisioning
    http-response redirect location / unless { capture.req.uri / }
    server provisioning-page 127.0.0.1:{{! maintenance_provisioning_server_port !}}

{{- $prefix := "/ocim/instances" }}
{{- /* Print config in the form of a single K/V value. */ -}}
{{- range ls $prefix }}
  {{- with $config := .Value | parseJSON }}
    {{- if and $config $config.active_app_servers }}
    {{ $health_check := $config.health_checks_enabled }}
# Backend configuration for {{ $config.domain }}
backend be-{{$config.domain_slug}}
    cookie openedx-backend insert postonly indirect
    acl has-authorization req.hdr(Authorization) -m found
    http-request set-header Authorization 'Basic {{ $config.basic_auth }}' unless has-authorization
    option httpchk /heartbeat
    {{- /* Loop over all active appservers for this instance. */ -}}
    {{- /* Each appserver in this list is a dict of the form {id: int, public_ip: str}. */ -}}
    {{- range $config.active_app_servers }}
      {{- if .public_ip }}
    server appserver-{{ .id }} {{ .public_ip }}:80 cookie appserver-{{ .id }} {{ if $health_check }}check{{ end }}
      {{- else}}
    http-response redirect location / unless { capture.req.uri / }
    server unscheduled-maintenance-page 127.0.0.1:{{! maintenance_unscheduled_server_port !}}
      {{- end }}
    {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
