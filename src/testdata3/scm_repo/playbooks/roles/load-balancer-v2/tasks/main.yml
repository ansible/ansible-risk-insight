---
# !!!    Important     !!!
# Run this role only on a single server at a time,
# using
# `ansible-playbook -v deploy/playbooks/load-balancer-v2.yml \
# -l haproxy-a-1.net.opencraft.hosting`, etc.
# Test each server before continuing to the next.

- name: Add HAProxy PPA
  apt_repository:
    repo: "{{ haproxy_ppa }}"
  when: haproxy_ppa != ""

- name: Install HAProxy
  apt:
    name: haproxy={{ haproxy_version }}

- name: Install other essential or handy packages
  apt:
    name: "{{ item }}"
  with_items:
    - inotify-tools
    - python3-openssl
    - socat
    - ssl-cert
    - jq

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    mode: "0700"
  with_items:
    - "/etc/haproxy/certs"
    - "/etc/haproxy/certs/ocim"
    - "/etc/haproxy/conf.d"
    - "/etc/haproxy/backends"
    - "/etc/letsencrypt/live"

- name: Copy over Go templates for generating HAProxy configuration files
  # The ctmpl files use `{{` and `}}` as Go template start- and end- strings.
  # So for Jinja2 rendering we'll use `!` next to the original delimiters.
  # Using the ansible variables `variable_start_string ` and `variable_end_string`
  # for some reason didn't work, so we use Jinja2 headers to specify them.
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items:
    - src: "backend.map.ctmpl"
      dest: "/etc/consul-template/templates/backend.map.ctmpl"
      mode: "0644"
    - src: "haproxy.cfg.ctmpl"
      dest: "/etc/consul-template/templates/haproxy.cfg.ctmpl"
      mode: "0644"
  tags: 'haproxy-config'

- name: Copy over Hashicorp Configuration Language files
  # These HCL files instruct consul-watch where to find the templates,
  # where to put them when they are filled in, and
  # what to do after: which is to reload HAProxy
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items:
    - src: "backend.map.hcl.j2"
      dest: "/etc/consul-template/config/backend.map.hcl"
      mode: "0644"
    - src: "haproxy.cfg.hcl.j2"
      dest: "/etc/consul-template/config/haproxy.cfg.hcl"
      mode: "0644"
  tags: 'haproxy-config'

- name: Copy over Consul watcher scripts
  # The template watcher watches for appserver configuration
  # written by Ocim, and renders HAProxy configuration.
  # The certifcate watcher watches for certificates written
  # by the cert-manager, which get copied into HAProxy's cert dir.
  # Both watchers reload HAProxy.
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items:
    - src: "consul-template-render.sh"
      dest: "/usr/local/sbin/consul-template-render.sh"
      mode: "0755"
    - src: "consul-certificates-render.sh"
      dest: "/usr/local/sbin/consul-certificates-render.sh"
      mode: "0755"

- name: Copy over the local filesystem watcher
  # The load balancer's own certificate is saved locally by certbot,
  # so this watcher (not a Consul watcher!) moves it to
  # HAProxy's cert dir as needed and reloads HAProxy.
  template:
    src: "cert-watcher"
    dest: "/usr/local/sbin/cert-watcher"
    mode: "0755"

- name: Copy over systemd service files
  # The watchers run as services.
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items:
    - src: "consul-template-render.service"
      dest: "/lib/systemd/system/consul-template-render.service"
      mode: "0644"
    - src: "consul-certificates-render.service"
      dest: "/lib/systemd/system/consul-certificates-render.service"
      mode: "0644"
    - src: "cert-watcher.service"
      dest: "/lib/systemd/system/cert-watcher.service"
      mode: "0644"

- name: Copy over snakeoil certificate
  # Haproxy refuses to start when there are no valid SSL certificates in the
  # /etc/haproxy directory, so we copy a bogus cert there.
  shell: "cat ssl-cert-snakeoil.pem ../private/ssl-cert-snakeoil.key > /etc/haproxy/certs.pem"
  args:
    chdir: /etc/ssl/certs/

- name: Copy over bespoke HAProxy config blocks
  copy:
    content: "{{ item.rule }}"
    dest: "/etc/haproxy/conf.d/{{ item.filename }}"
    mode: 0644
  with_items: "{{ haproxy_custom_rules }}"
  when: haproxy_custom_rules

- name: Copy over extra certs for prod
  # HAProxy will serve, for any given domain, the first matching cert it finds.
  # If it finds no matching cert, it will serve the first cert it finds, period.
  # Filenames are base64 encoded to avoid storing client names in cleartext.
  # Names are a human convenience, HAProxy does not care (except for `.pem` ext).
  # If `echo -n "filename" | base64` produces a filename with "/"s, pick another.
  # See the README.md in files/ for more detailed instructions.
  copy:
    src: "{{ item }}"
    dest: "/etc/haproxy/certs/{{ item | basename | splitext | first | b64decode }}.pem"
    mode: 0644
  with_fileglob:
    - "prod/*.pem"
  when: inventory_hostname in groups['load-balancer-v2-prod']

- name: Copy over extra certs for stage
  # See "Copy over extra certs for prod"
  copy:
    src: "{{ item }}"
    dest: "/etc/haproxy/certs/{{ item | basename | splitext | first | b64decode }}.pem"
    mode: 0644
  with_fileglob:
    - "stage/*.pem"
  when: inventory_hostname in groups['load-balancer-v2-stage']

- name: Ensure HAProxy picks up conf.d rules
  lineinfile:
    path: /etc/default/haproxy
    line: EXTRAOPTS="-f /etc/haproxy/conf.d"
    create: yes

- name: Enable and start the services
  systemd:
    daemon_reload: yes
    enabled: yes
    state: restarted
    name: "{{ item }}"
  with_items:
    - cert-watcher
    - consul-template-render
    - consul-certificates-render

- name: Check if we must bootstrap the local certificate
  stat:
    path: "/etc/letsencrypt/live/{{ CERTBOT_DOMAIN_NAME }}/fullchain.pem"
  register: lb_cert_p

- import_tasks: maintenance.yml
  tags: 'site-is-down'

- name: Bootstrap the local certificate
  block:
    - name: Find config files that will stop nginx from reloading
      find:
        paths: /etc/nginx/sites-enabled
        file_type: link
      register: nginx_sites_enabled

    - name: Disable config files that will stop nginx from reloading
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ nginx_sites_enabled.files }}"
  when: lb_cert_p.stat.exists == False

- import_role:
    name: certbot
  tags: 'certbot'

- name: Restore config files after bootstrapping
  file:
    src: "/etc/nginx/sites-available/{{ item.path | basename }}"
    dest: "/etc/nginx/sites-enabled/{{ item.path | basename }}"
    state: link
  with_items: "{{ nginx_sites_enabled.files }}"
  notify:
    - reload nginx
  when: lb_cert_p.stat.exists == False

- import_tasks: exporter.yml
  when: haproxy_exporter_enabled

- name: Restart rsyslog
  # Ensures that haproxy logs to /var/log
  service:
    name: rsyslog
    state: restarted
  changed_when: false

- name: Open HTTP and HTTPS port on the firewall
  ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: tcp
  with_items:
    - enabled: true
      port: 80
    - enabled: true
      port: 443
    - enabled: "{{ haproxy_enable_stats_page }}"
      port: "{{ haproxy_stats_port }}"
  when: item.enabled

# Tag 'never' prevents these two from being run except
# when explicitly called with `--tag` on the cmdline:

- import_tasks: site-is-down.yml
  tags: [ 'never', 'site-is-down' ]

- import_tasks: site-is-up.yml
  tags: [ 'never', 'site-is-up' ]
