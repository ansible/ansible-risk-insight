---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Gather variables for each operating system
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_version'] | lower }}.yml"
        - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_major_version'] | lower }}.yml"
        - "{{ ansible_facts['os_family'] | lower }}-{{ ansible_facts['distribution_major_version'] | lower }}.yml"
        - "{{ ansible_facts['distribution'] | lower }}.yml"
        - "{{ ansible_facts['os_family'] | lower }}-{{ ansible_facts['distribution_version'].split('.')[0] }}.yml"
        - "{{ ansible_facts['os_family'] | lower }}.yml"
      paths:
        - "{{ role_path }}/vars"
  tags:
    - always

- name: Fail if service was deployed using a different installation method
  fail:
    msg: "Switching installation methods for OpenStack services is not supported"
  when:
    - ansible_local is defined
    - ansible_local.openstack_ansible is defined
    - ansible_local.openstack_ansible.swift is defined
    - ansible_local.openstack_ansible.swift.install_method is defined
    - ansible_local.openstack_ansible.swift.install_method != swift_install_method

- name: Gather variables for installation method
  include_vars: "{{ swift_install_method }}_install.yml"
  tags:
    - always

# Check the swift_hash_path_* variables haven't changed
- import_tasks: swift_check_hashes.yml
  when:
    - "not swift_force_change_hashes | bool"
  tags:
    - swift-config

- import_tasks: swift_pre_install.yml
  when:
    - "swift_do_setup | bool"
    - "'swift_all' in group_names"
  tags:
    - swift-install

- import_tasks: swift_install.yml
  when:
    - "swift_do_setup | bool"
    - "'swift_all' in group_names"
  tags:
    - swift-install

- import_tasks: swift_post_install.yml
  when:
    - "swift_do_setup | bool"
    - "'swift_all' in group_names"
  tags:
    - swift-config

- import_tasks: swift_calculate_addresses.yml
  when:
    - "'swift_hosts' in group_names"
  tags:
    - always

- import_tasks: swift_storage_hosts.yml
  when:
    - "swift_do_setup | bool"
    - "'swift_hosts' in group_names"
  tags:
    - swift-config

- import_tasks: swift_proxy_hosts.yml
  when:
    - "swift_do_setup | bool"
    - "'swift_proxy' in group_names"
  tags:
    - swift-config

- import_tasks: swift_key_setup.yml
  when:
    - "swift_do_sync | bool"
  tags:
    - swift-config

- import_tasks: swift_rings.yml
  when:
    - "swift_do_sync | bool"
  tags:
    - swift-config
    - swift-rings

- name: Run the systemd service role
  import_role:
    name: systemd_service
  vars:
    systemd_user_name: "{{ swift_system_user_name }}"
    systemd_group_name: "{{ swift_system_group_name }}"
    systemd_tempd_prefix: openstack
    systemd_slice_name: "{{ swift_system_slice_name }}"
    systemd_lock_dir: "{{ swift_lock_dir }}"
    systemd_CPUAccounting: true
    systemd_BlockIOAccounting: true
    systemd_MemoryAccounting: true
    systemd_TasksAccounting: true
    systemd_services: |-
      {% set services = [] %}
      {% for service in filtered_swift_services %}
      {%
        set _ = service.update(
          {
            'enabled': 'yes',
            'state': 'started',
            'config_overrides': swift_service_defaults | combine(service.init_config_overrides, recursive=True)
          }
        )
      %}
      {%   set _ = service.pop('init_config_overrides') -%}
      {%   set _ = services.append(service) -%}
      {% endfor %}
      {{ services }}
  tags:
    - swift-config
    - systemd-service

- include_role:
    name: openstack.osa.mq_setup
    apply:
      tags:
        - common-mq
        - swift-config
  when:
    - _swift_proxy_is_first_play_host
  vars:
    _oslomsg_configure_notify: "{{ swift_ceilometer_enabled | bool }}"
    _oslomsg_notify_setup_host: "{{ swift_oslomsg_notify_setup_host }}"
    _oslomsg_notify_userid: "{{ swift_oslomsg_notify_userid }}"
    _oslomsg_notify_password: "{{ swift_oslomsg_notify_password }}"
    _oslomsg_notify_vhost: "{{ swift_oslomsg_notify_vhost }}"
    _oslomsg_notify_transport: "{{ swift_oslomsg_notify_transport }}"
  tags:
    - always

- include_role:
    name: openstack.osa.service_setup
    apply:
      tags:
        - common-service
        - swift-config
  vars:
    _service_adminuri_insecure: "{{ keystone_service_adminuri_insecure }}"
    _service_in_ldap: "{{ swift_service_in_ldap }}"
    _service_setup_host: "{{ swift_service_setup_host }}"
    _service_setup_host_python_interpreter: "{{ swift_service_setup_host_python_interpreter }}"
    _service_project_name: "{{ swift_service_project_name }}"
    _service_region: "{{ swift_service_region }}"
    _service_users:
      - name: "{{ swift_service_user_name }}"
        password: "{{ swift_service_password }}"
        role: "{{ swift_service_role_names }}"
      - name: "{{ swift_dispersion_user }}"
        password: "{{ swift_dispersion_password }}"
        role: "{{ swift_operator_role }}"
      - name: "{{ ceilometer_service_user_name | default('ceilometer') }}"
        role: "{{ swift_reselleradmin_role }}"
        project: "{{ ceilometer_service_project_name | default('service') }}"
        condition: "{{ swift_ceilometer_enabled | bool }}"
    _service_endpoints:
      - service: "{{ swift_service_name }}"
        interface: "public"
        url: "{{ swift_service_publicurl }}"
      - service: "{{ swift_service_name }}"
        interface: "internal"
        url: "{{ swift_service_internalurl }}"
      - service: "{{ swift_service_name }}"
        interface: "admin"
        url: "{{ swift_service_adminurl }}"
    _service_catalog:
      - name: "{{ swift_service_name }}"
        type: "{{ swift_service_type }}"
        description: "{{ swift_service_description }}"
  when:
    - "swift_do_setup | bool"
    - '"keystoneauth" in swift_middleware_list'
    - _swift_proxy_is_first_play_host
  tags:
    - always

- name: Flush handlers
  meta: flush_handlers
