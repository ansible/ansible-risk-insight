---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE(cloudnull): This task is required to copy rootwrap filters that we need
#                  and cinder does not provide by default.
- name: Create aux cinder dir
  file:
    path: "/etc/cinder/rootwrap.d"
    state: "directory"
    owner: "root"
    group: "root"

- name: Generate cinder config
  openstack.config_template.config_template:
    src: "cinder.conf.j2"
    dest: "/etc/cinder/cinder.conf"
    owner: "root"
    group: "{{ cinder_system_group_name }}"
    mode: "0640"
    config_overrides: "{{ cinder_cinder_conf_overrides }}"
    config_type: "ini"
  notify:
    - Restart cinder services
    - Restart uwsgi services
  tags:
    - cinder-config
    - cinder-post-install

# TODO(cloudnull): Once "master" OSA is using a recent pull for
#                  cinder this task and templte can be removed.
- name: Copy cinder configs
  openstack.config_template.config_template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "root"
    group: "{{ item.group|default(cinder_system_group_name) }}"
    mode: "0640"
    config_overrides: "{{ item.config_overrides }}"
    config_type: "{{ item.config_type }}"
  with_items:
    - src: "resource_filters.json.j2"
      dest: "/etc/cinder/resource_filters.json"
      config_overrides: "{{ cinder_resource_filters_overrides }}"
      config_type: "json"
  notify:
    - Restart cinder services
    - Restart uwsgi services
  tags:
    - cinder-config
    - cinder-post-install

- name: Implement policy.yaml if there are overrides configured
  openstack.config_template.config_template:
    content: "{{ cinder_policy_overrides }}"
    dest: "/etc/cinder/policy.yaml"
    owner: "root"
    group: "{{ cinder_system_group_name }}"
    mode: "0640"
    config_type: yaml
  when:
    - cinder_policy_overrides | length > 0
  tags:
    - cinder-config
    - cinder-policy-override

- name: Remove legacy policy.yaml file
  file:
    path: "/etc/cinder/policy.yaml"
    state: absent
  when:
    - cinder_policy_overrides | length == 0
  tags:
    - cinder-policy-override

# NOTE(cloudnull): This is using "cp" instead of copy with a remote_source
#                  because we only want to copy the original files once. and we
#                  don't want to need multiple tasks.
- name: Preserve original configuration file(s)
  command: "cp {{ item.target_f }} {{ item.target_f }}.original"
  args:
    creates: "{{ item.target_f }}.original"
  with_items: "{{ cinder_core_files }}"

- name: Fetch override files
  fetch:
    src: "{{ item.target_f }}.original"
    dest: "{{ item.tmp_f }}"
    flat: yes
  changed_when: false
  with_items: "{{ cinder_core_files }}"
  run_once: true
  check_mode: false

- name: Copy common config
  openstack.config_template.config_template:
    src: "{{ item.tmp_f }}"
    dest: "{{ item.target_f }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default(cinder_system_group_name) }}"
    mode: "{{ item.mode | default('0640') }}"
    config_overrides: "{{ item.config_overrides }}"
    config_type: "{{ item.config_type }}"
  with_items: "{{ cinder_core_files }}"
  notify:
    - Restart cinder services
    - Restart uwsgi services

- name: Cleanup fetched temp files
  file:
    path: "{{ item.tmp_f }}"
    state: absent
  changed_when: false
  delegate_to: localhost
  with_items: "{{ cinder_core_files }}"

# NOTE(cloudnull): This will ensure strong permissions on all rootwrap files.
# NOTE(noonedeadpunk): X keeps execute permissions for rootwrap.d itself.
- name: Set rootwrap.d permissions
  file:
    path: "/etc/cinder/rootwrap.d"
    owner: "root"
    group: "root"
    mode: "u=rwX,g=rX,o="
    recurse: true

- name: Ensure cinder tgt include
  lineinfile:
    dest: /etc/tgt/targets.conf
    line: "include /var/lib/cinder/volumes/*"
    state: present
  notify: Ensure tgt service restarted
  when:
    - "cinder_services['cinder-volume']['group'] in group_names"
    - "cinder_target_helper == 'tgtadm'"
    - cinder_backend_lvm_inuse | bool

- name: Create nfs shares export file
  template:
    src: nfs_shares.j2
    dest: "{{ item.value.nfs_shares_config }}"
  with_dict: "{{ cinder_backends | default({}) }}"
  when:
    - "cinder_services['cinder-volume']['group'] in group_names"
    - item.value.nfs_shares_config is defined
  tags:
    - cinder-nfs

- name: Drop sudoers file
  template:
    src: "sudoers.j2"
    dest: "/etc/sudoers.d/{{ cinder_system_user_name }}_sudoers"
    mode: "0440"
    owner: "root"
    group: "root"
