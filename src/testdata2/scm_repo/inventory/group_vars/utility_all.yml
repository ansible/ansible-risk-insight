---
# Copyright 2016, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Set this if ssh access from the utility container to all other hosts is
# desired
# utility_ssh_private_key: "{{ lookup('file', '/root/.ssh/id_rsa') }}"

galera_client_drop_config_file: true

# Ensure that the package state matches the global setting
utility_package_state: "{{ package_state }}"
utility_pip_package_state: "latest"

# Path to the utility host openstack client venv binaries
utility_venv_bin: "/openstack/venvs/utility-{{ openstack_release }}/bin"

# Distribution packages to be installed into the utility container
utility_distro_packages:
  - bash-completion
  - "{{ (ansible_facts['pkg_mgr'] == 'apt') | ternary('debianutils', 'which') }}"

# Distribution packages needed for the utility pip package wheel build
_utility_devel_distro_packages_debian: []

_utility_devel_distro_packages_redhat:
  - libselinux-python3

utility_devel_distro_packages: "{{ (ansible_facts['os_family'] == 'RedHat') | ternary(_utility_devel_distro_packages_redhat, _utility_devel_distro_packages_debian) }}"

# Client packages required for distro installs
utility_distro_openstack_clients_packages:
    - python3-keystoneclient
    - python3-cinderclient
    - python3-muranoclient
    - python3-neutronclient
    - python3-novaclient
    - python3-openstackclient
    - "{{ (ansible_os_family | lower == 'redhat') | ternary('python3-PyMySQL', 'python3-pymysql') }}"

# Python packages to be installed into the utility container
utility_pip_packages:
  - cryptography
  - pip
  - PyMySQL
  - python-memcached
  - selinux
  - setuptools
  - wheel
  - openstacksdk

# Determines whether Cinder backup should be tested
cinder_service_backup_program_enabled: "{{ hostvars['localhost']['cinder_service_backup_program_enabled'] }}"

#
# Tempest settings
#

tempest_log_dir: /var/log/utility

# This sets the tempest group to the utility group
tempest_main_group: utility_all

# NOTE(jrosser)
#
# The os_tempest role now defaults to running the smoke tests which breaks some of the roles
# Overriding the test includelist here puts the behaviour back, but leaves the default in os_tempest
# being the smoke tests.
#
# Remove this override when the tempest smoke test passes for all OSA repos.
#
# Tests to execute:
# This sets up a list of tests to execute based on what's deployed in the environment.
# The list gets added to the includelist which tempest executes.
tempest_test_includelist:
  - "{{ (ansible_facts['pkg_mgr'] == 'apt' and tempest_install_method == 'distro') |
         ternary('(?!.*\\.test_list_all_implied_roles)', '') ~ 'tempest.api.identity.admin.v3' }}"
  - "tempest.api.identity.v3"
  - "{{ (tempest_service_available_ceilometer | bool) | ternary('tempest.api.telemetry', '') }}"
  - "{{ (tempest_service_available_heat | bool) | ternary('tempest.api.orchestration.stacks.test_non_empty_stack', '') }}"
  # TODO(odyssey4me):
  # Once the issue with this test is worked out, re-enable it.
  #- "{{ (tempest_service_available_nova | bool) | ternary('tempest.scenario.test_minimum_basic', '') }}"
  - "{{ (tempest_service_available_nova | bool) | ternary('tempest.scenario.test_server_basic_ops', '') }}"
  - "{{ (tempest_service_available_swift | bool) | ternary('tempest.scenario.test_object_storage_basic_ops', '') }}"
