---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Install nova-conductor services
  import_playbook: common-playbooks/nova.yml
  vars:
    nova_hosts: "nova_conductor:nova_scheduler:nova_api_os_compute:nova_api_metadata:nova_console"
    nova_serial: "{{ nova_conductor_serial | default(['1', '100%']) }}"


- name: Install nova compute
  import_playbook: common-playbooks/nova.yml
  vars:
    nova_hosts: "nova_compute:!nova_conductor:!nova_scheduler:!nova_api_os_compute:!nova_api_metadata:!nova_console"
    nova_serial: "{{ nova_compute_serial | default('100%') }}"



# These facts are set against the deployment host to ensure that
# they are fast to access. This is done in preference to setting
# them against each target as the hostvars extraction will take
# a long time if executed against a large inventory.
- name: Refresh local facts after all software changes are made
  hosts: nova_all
  gather_facts: no
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  vars_files:
    - "defaults/{{ install_method }}_install.yml"
  tags:
    - nova
  tasks:
    - name: refresh local facts
      setup:
        filter: ansible_local
        gather_subset: "!all"

    # This variable contains the values of the local fact set for the cinder
    # venv tag for all hosts in the 'cinder_all' host group.
    - name: Gather software version list
      set_fact:
        nova_all_software_versions: "{{ (groups['nova_all'] | map('extract', hostvars, ['ansible_local', 'openstack_ansible', 'nova', 'venv_tag'])) | list }}"
      delegate_to: localhost
      run_once: yes

    # This variable outputs a boolean value which is True when
    # nova_all_software_versions contains a list of defined
    # values. If they are not defined, it means that not all
    # hosts have their software deployed yet.
    - name: Set software deployed fact
      set_fact:
        nova_all_software_deployed: "{{ (nova_all_software_versions | select('defined')) | list == nova_all_software_versions }}"
      delegate_to: localhost
      run_once: yes

    # This variable outputs a boolean when all the values in
    # nova_all_software_versions are the same and the software
    # has been deployed to all hosts in the group.
    - name: Set software updated fact
      set_fact:
        nova_all_software_updated: "{{ ((nova_all_software_versions | unique) | length == 1) and (nova_all_software_deployed | bool) }}"
      delegate_to: localhost
      run_once: yes


# Note that the console services do not understand how to reload, so they fail
# when you try to make them do so. We therefore restart them instead.
- name: Reload all nova services which support a reload to ensure new RPC object version is used
  hosts: "nova_all:!nova_console"
  gather_facts: no
  serial: "{{ nova_serial | default('100%') }}"
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  vars_files:
    - "defaults/{{ install_method }}_install.yml"
  tags:
    - nova
  tasks:
    - name: Execute nova service reload
      import_tasks: common-tasks/restart-service.yml
      vars:
        service_name: "nova"
        # NOTE(mnaser): There is a bug in oslo.service which actually restarts
        #               the entire service instead of resetting it, but it
        #               leaves Nova in a broken state.  This should be moved
        #               to "reloaded" once it's resolved.
        #
        #               https://bugs.launchpad.net/openstack-ansible/+bug/1715374
        #
        service_action: "restarted"
        service_negate: "{{ ['nova-novncproxy.service', 'nova-spicehtml5proxy.service' ] + nova_service_negate | default([]) }}"
      when:
        - "nova_all_software_updated | bool"
        - "ansible_local['openstack_ansible']['nova']['need_service_restart'] | bool"



# Note that the console services do not understand how to reload, so they fail
# when you try to make them do so. We therefore restart them instead.
- name: Restart the remaining nova services to ensure new RPC object version is used
  hosts: "nova_console"
  gather_facts: no
  serial: "{{ nova_api_serial | default(['1', '100%']) }}"
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  vars_files:
    - "defaults/{{ install_method }}_install.yml"
  tags:
    - nova
  tasks:
    - name: Execute nova service restart
      import_tasks: common-tasks/restart-service.yml
      vars:
        service_name: "nova"
        service_action: "restarted"
        service_fact: "nova"
      when:
        - "nova_all_software_updated | bool"
        - "ansible_local['openstack_ansible']['nova']['need_service_restart'] | bool"



- name: Perform online database migrations
  hosts: nova_conductor
  gather_facts: no
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  vars_files:
    - "defaults/{{ install_method }}_install.yml"
  tags:
    - nova
  tasks:
    - name: Perform online data migrations
      command: "{{ nova_bin }}/nova-manage db online_data_migrations"
      become: yes
      become_user: "{{ nova_system_user_name | default('nova') }}"
      when:
        - "nova_all_software_updated | bool"
        - "ansible_local['openstack_ansible']['nova']['need_online_data_migrations'] | bool"
      changed_when: false
      run_once: yes
      register: data_migrations

    - name: Disable the online migrations requirement
      ini_file:
        dest: "/etc/ansible/facts.d/openstack_ansible.fact"
        section: nova
        option: need_online_data_migrations
        value: False
      when:
        - data_migrations  is succeeded
