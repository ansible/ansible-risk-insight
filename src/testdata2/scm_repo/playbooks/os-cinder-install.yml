---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Install cinder scheduler services
  import_playbook: common-playbooks/cinder.yml
  vars:
    cinder_hosts: "cinder_scheduler:!cinder_api"
    cinder_serial: "{{ cinder_scheduler_serial | default(['1', '100%']) }}"



- name: Install cinder volume services
  import_playbook: common-playbooks/cinder.yml
  vars:
    cinder_hosts: "cinder_volume:!cinder_scheduler:!cinder_api"
    cinder_serial: "{{ cinder_backend_serial | default(['1', '100%']) }}"



- name: Install cinder backup services
  import_playbook: common-playbooks/cinder.yml
  vars:
    cinder_hosts: "cinder_backup:!cinder_volume:!cinder_scheduler:!cinder_api"
    cinder_serial: "{{ cinder_backend_serial | default(['1', '100%']) }}"



- name: Install cinder API services
  import_playbook: common-playbooks/cinder.yml
  vars:
    cinder_hosts: "cinder_api"
    cinder_serial: "{{ cinder_api_serial | default(['1', '100%']) }}"



# These facts are set against the deployment host to ensure that
# they are fast to access. This is done in preference to setting
# them against each target as the hostvars extraction will take
# a long time if executed against a large inventory.
- name: Refresh local facts after all software changes are made
  hosts: cinder_all
  gather_facts: no
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  vars_files:
    - "defaults/{{ install_method }}_install.yml"
  tags:
    - cinder
  tasks:
    - name: refresh local facts
      setup:
        filter: ansible_local
        gather_subset: "!all"

    # This variable contains the values of the local fact set for the cinder
    # venv tag for all hosts in the 'cinder_all' host group.
    - name: Gather software version list
      set_fact:
        cinder_all_software_versions: "{{ (groups['cinder_all'] |
                                           map('extract', hostvars, ['ansible_local', 'openstack_ansible', 'cinder', 'venv_tag'])) |
                                           list }}"
      delegate_to: localhost
      run_once: yes

    # This variable outputs a boolean value which is True when
    # cinder_all_software_versions contains a list of defined
    # values. If they are not defined, it means that not all
    # hosts have their software deployed yet.
    - name: Set software deployed fact
      set_fact:
        cinder_all_software_deployed: "{{ (cinder_all_software_versions | select('defined')) | list == cinder_all_software_versions }}"
      delegate_to: localhost
      run_once: yes

    # This variable outputs a boolean when all the values in
    # cinder_all_software_versions are the same and the software
    # has been deployed to all hosts in the group.
    - name: Set software updated fact
      set_fact:
        cinder_all_software_updated: "{{ ((cinder_all_software_versions | unique) | length == 1) and (cinder_all_software_deployed | bool) }}"
      delegate_to: localhost
      run_once: yes



- name: Restart cinder agents to ensure new RPC object version is used
  hosts: cinder_backup,cinder_volume,cinder_scheduler
  gather_facts: no
  serial: "{{ cinder_backend_serial | default(['1', '100%']) }}"
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  vars_files:
    - "defaults/{{ install_method }}_install.yml"
  tags:
    - cinder
  tasks:
    - name: Execute cinder service reload
      include_tasks: common-tasks/restart-service.yml
      vars:
        service_name: "{{ item.name }}"
        service_action: "{{ item.action }}"
        service_fact: "cinder"
      with_items:
        - { name: "cinder-scheduler", action: "restarted" }
        - { name: "cinder-volume", action: "reloaded" }
        - { name: "cinder-backup", action: "reloaded" }
      when:
        - "cinder_all_software_updated is defined"
        - "cinder_all_software_updated | bool"
        - "ansible_local['openstack_ansible']['cinder']['need_service_restart'] | bool"



- name: Restart cinder API to ensure new RPC object version is used
  hosts: cinder_api
  gather_facts: no
  serial: "{{ cinder_api_serial | default(['1','100%']) }}"
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  vars_files:
    - "defaults/{{ install_method }}_install.yml"
  tags:
    - cinder
  tasks:
    # In order to ensure that the service restart does not
    # cause an unexpected outage, we drain the load balancer
    # back end for this container.
    - include_tasks: common-tasks/haproxy-endpoint-manage.yml
      vars:
        haproxy_state: disabled
      when:
        - "cinder_all_software_updated | bool"
        - "ansible_local['openstack_ansible']['cinder']['need_service_restart'] | bool"
        - "groups['cinder_api'] | length > 1"

    - name: Execute cinder service restart
      include_tasks: common-tasks/restart-service.yml
      vars:
        service_name: "cinder-api"
        service_action: "restarted"
        service_fact: "cinder"
      when:
        - "cinder_all_software_updated | bool"
        - "ansible_local['openstack_ansible']['cinder']['need_service_restart'] | bool"

    # Now that service restart is done, we can set
    # the load balancer back end for this container
    # to available again.
    - include_tasks: common-tasks/haproxy-endpoint-manage.yml
      vars:
        haproxy_state: enabled
      when: "groups['cinder_api'] | length > 1"



- name: Perform online database migrations
  hosts: cinder_api[0]
  gather_facts: no
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  vars_files:
    - "defaults/{{ install_method }}_install.yml"
  tags:
    - cinder
  tasks:
    - name: Perform online data migrations
      command: "{{ cinder_bin }}/cinder-manage db online_data_migrations"
      become: yes
      become_user: "{{ cinder_system_user_name | default('cinder') }}"
      when:
        - "cinder_all_software_updated | bool"
        - "ansible_local['openstack_ansible']['cinder']['need_online_data_migrations'] | bool"
      changed_when: false
      register: data_migrations

    - name: Disable the online migrations requirement
      ini_file:
        dest: "/etc/ansible/facts.d/openstack_ansible.fact"
        section: cinder
        option: need_online_data_migrations
        value: False
      when:
        - data_migrations  is succeeded
