---
# Copyright (C) 2016 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2016 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Ensure that configuration directory exists
  ansible.builtin.file:
    path:  '/etc/gunicorn'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode:  '0755'

- name: Ensure that required groups exist
  ansible.builtin.group:
    name: '{{ item.group }}'
    system: '{{ (item.system|d(True)) | bool }}'
    state: 'present'
  with_flattened:
    - '{{ gunicorn__applications }}'
    - '{{ gunicorn__dependent_applications }}'
  when: item.name|d() and item.state|d('present') != 'absent' and
        item.group|d()

- name: Ensure that required users exist
  ansible.builtin.user:
    name: '{{ item.user }}'
    group: '{{ item.group | d(omit) }}'
    home: '{{ item.home }}'
    system: '{{ (item.system|d(True)) | bool }}'
    state: 'present'
  with_flattened:
    - '{{ gunicorn__applications }}'
    - '{{ gunicorn__dependent_applications }}'
  when: item.name|d() and item.state|d('present') != 'absent' and
        item.user|d() and item.home|d()

- name: Create log directories
  ansible.builtin.file:
    path: '/var/log/gunicorn/{{ item.name }}'
    state: 'directory'
    owner: '{{ item.user | d(gunicorn__user) }}'
    group: '{{ item.group | d(gunicorn__group) }}'
    mode: '0775'
  with_flattened:
    - '{{ gunicorn__applications }}'
    - '{{ gunicorn__dependent_applications }}'
  when: item.name|d() and item.state|d('present') != 'absent'

- name: Create logrotate configs
  ansible.builtin.template:
    src: 'etc/logrotate.d/gunicorn.j2'
    dest: '/etc/logrotate.d/gunicorn-{{ item.name }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_flattened:
    - '{{ gunicorn__applications }}'
    - '{{ gunicorn__dependent_applications }}'
  when: item.name|d() and item.state|d('present') != 'absent'

- name: Check if systemd instances for Green Unicorn are configured
  ansible.builtin.stat:
    path: '/etc/systemd/system/gunicorn@.service'
  register: gunicorn__register_systemd_templated

- name: Stop and disable Green Unicorn instances if requested
  ansible.builtin.systemd:
    name: 'gunicorn@{{ item.name }}.service'
    state: 'stopped'
    enabled: False
  with_flattened:
    - '{{ gunicorn__applications }}'
    - '{{ gunicorn__dependent_applications }}'
  notify: [ 'Reload systemd daemon (gunicorn)' ]
  when: ansible_service_mgr == 'systemd' and
        gunicorn__register_systemd_templated.stat|d() and
        gunicorn__register_systemd_templated.stat.exists|bool and
        item.name|d() and item.state|d('present') == 'absent'

- name: Generate systemd configuration files
  ansible.builtin.template:
    src: 'etc/systemd/system/{{ item }}.j2'
    dest: '/etc/systemd/system/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: [ 'gunicorn.service', 'gunicorn@.service' ]
  notify: [ 'Reload systemd daemon (gunicorn)' ]
  when: ansible_service_mgr == 'systemd'

- name: Remove per-instance systemd configuration
  ansible.builtin.file:
    path: '/etc/systemd/system/gunicorn@{{ item.name }}.service.d'
    state: 'absent'
  with_flattened:
    - '{{ gunicorn__applications }}'
    - '{{ gunicorn__dependent_applications }}'
  notify: [ 'Reload systemd daemon (gunicorn)' ]
  when: ansible_service_mgr == 'systemd' and
        item.name|d() and item.state|d('present') == 'absent'

- name: Create per-instance systemd directory
  ansible.builtin.file:
    path: '/etc/systemd/system/gunicorn@{{ item.name }}.service.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  with_flattened:
    - '{{ gunicorn__applications }}'
    - '{{ gunicorn__dependent_applications }}'
  when: ansible_service_mgr == 'systemd' and
        item.name|d() and item.state|d('present') != 'absent'

- name: Generate per-instance systemd configuration
  ansible.builtin.template:
    src: 'etc/systemd/system/gunicorn@application.service.d/instance.conf.j2'
    dest: '/etc/systemd/system/gunicorn@{{ item.name }}.service.d/instance.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_flattened:
    - '{{ gunicorn__applications }}'
    - '{{ gunicorn__dependent_applications }}'
  notify: [ 'Reload systemd daemon (gunicorn)', 'Start Green Unicorn instances' ]
  when: ansible_service_mgr == 'systemd' and
        item.name|d() and item.state|d('present') != 'absent'

- name: Remove Unicorn instance configuration
  ansible.builtin.file:
    path: '/etc/gunicorn/{{ item.name }}.conf.py'
    state: 'absent'
  with_flattened:
    - '{{ gunicorn__applications }}'
    - '{{ gunicorn__dependent_applications }}'
  when: item.name|d() and item.state|d('present') == 'absent'

- name: Generate Unicorn instance configuration
  ansible.builtin.template:
    src: 'etc/gunicorn/application.conf.py.j2'
    dest: '/etc/gunicorn/{{ item.name }}.conf.py'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Start Green Unicorn instances' ]
  with_flattened:
    - '{{ gunicorn__applications }}'
    - '{{ gunicorn__dependent_applications }}'
  when: item.name|d() and item.state|d('present') != 'absent'

- name: Reload systemd configuration
  ansible.builtin.meta: 'flush_handlers'

- name: Enable Unicorn instances in systemd
  ansible.builtin.systemd:
    name: 'gunicorn@{{ item.name }}.service'
    enabled: True
  notify: [ 'Start Green Unicorn instances' ]
  with_flattened:
    - '{{ gunicorn__applications }}'
    - '{{ gunicorn__dependent_applications }}'
  when: ansible_service_mgr == 'systemd' and
        item.name|d() and item.state|d('present') != 'absent'
