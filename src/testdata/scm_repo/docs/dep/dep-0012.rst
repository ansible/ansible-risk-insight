.. Copyright (C) 2018 Maciej Delmanowski <drybjed@gmail.com>
.. Copyright (C) 2018 DebOps <https://debops.org/>
.. SPDX-License-Identifier: GPL-3.0-or-later

.. _dep-0012:

DEP 12 - Sample reStructuredText DEP Template
=============================================

:DEP:          12
:Title:        Sample reStructuredText DEP Template
:Author:       Maciej Delmanowski
:Status:       Active
:Type:         Process
:Created:      2018-04-20
:Post-History: none


Abstract
--------

This DEP provides a boilerplate or sample template for creating your
own reStructuredText DEPs. In conjunction with the content guidelines
in DEP 1 [1]_, this should make it easy for you to conform your own
DEPs to the format outlined below.

Note: if you are reading this DEP via the web, you should first grab
the text (reStructuredText) source of this DEP in order to complete
the steps below. **DO NOT USE THE HTML FILE AS YOUR TEMPLATE!**

The source for this (or any) DEP can be found in the DEPs repository,
viewable on the web at https://github.com/debops/debops/tree/master/docs/dep/ .


Rationale
---------

If you intend to submit a DEP, you MUST use this template, in
conjunction with the format guidelines below, to ensure that your DEP
submission won't get automatically rejected because of form.

ReStructuredText provides DEP authors with useful functionality and
expressively, while maintaining easy readability in the source text.
The processed HTML form makes the functionality accessible to readers:
live hyperlinks, styled text, tables, images, and automatic tables of
contents, among other advantages.


How to Use This Template
------------------------

To use this template you must first decide whether your DEP is going
to be an Informational or Standards Track DEP. Most DEPs are
Standards Track because they propose a new feature for the DebOps
environment or codebase. When in doubt, read DEP 1 for details
or contact the DEP editors. The editors should also reserve a DEP number
in :ref:`DEP 0 <dep-0000>`, so that your pull request with a GPG-signed
commit can be merged into the main repository without changes that would
void the signature.

Once you've decided which type of DEP yours is going to be, follow the
directions below.

- Make a copy of this file (``.rst`` file, **not** HTML!)
  and perform the following edits.

- Replace the ":DEP: 12" header with ":DEP: <number>" using your
  reserved DEP number.

- Replace the "_dep-0012:" reference at the top of the file with
  "_dep-<number>:" to allow generation of the documentation without
  errors.

- Change the document title and the Title header to the title of your
  DEP.

- Change the Author header to include your name, and optionally your
  email address. Be sure to follow the format carefully: your name
  must appear first, and it must not be contained in parentheses.
  Your email address may appear second (or it can be omitted) and if
  it appears, it must appear in angle brackets. It is okay to
  obfuscate your email address.

- If there is a mailing list for discussion of your new feature, add a
  Discussions-To header right after the Author header. You should not
  add a Discussions-To header if the mailing list to be used is
  debops-users@lists.debops.org, or if discussions should be sent to you
  directly. Most Informational DEPs don't have a Discussions-To header.

- Change the Status header to "Draft".

- For Standards Track DEPs, change the Type header to "Standards
  Track".

- For Informational DEPs, change the Type header to "Informational".

- For Standards Track DEPs, if your feature depends on the acceptance
  of some other currently in-development DEP, add a Requires header
  right after the Type header. The value should be the DEP number of
  the DEP yours depends on. Don't add this header if your dependent
  feature is described in a Final DEP.

- Change the Created header to today's date. Be sure to follow the
  format carefully: it must be in ``yyyy-mm-dd`` format.

- For Standards Track DEPs, after the Created header, add a
  DebOps-Version header and set the value to the next planned version
  of DebOps, i.e. the one your new feature will hopefully make its
  first appearance in. Do not use an alpha or beta release
  designation here. Thus, if the last version of DebOps was 2.2 alpha
  1 and you're hoping to get your new feature into DebOps 2.2, set the
  header to:

  .. code-block:: rst

     :DebOps-Version: 2.2

- Leave Post-History alone for now; you'll add dates to this header
  each time you post your DEP to debops-users@lists.debops.org. If you posted
  your DEP to the list on August 14, 2001 and September 3, 2001, the
  Post-History header would look like:

  .. code-block:: rst

     :Post-History: 2001-08-14, 2001-09-03

  You must manually add new dates and check them in. If you don't
  have check-in privileges, send your changes to the DEP editors.

- Add a Replaces header if your DEP obsoletes an earlier DEP. The
  value of this header is the number of the DEP that your new DEP is
  replacing. Only add this header if the older DEP is in "final"
  form, i.e. is either Accepted, Final, or Rejected. You aren't
  replacing an older open DEP if you're submitting a competing idea.

- Now write your Abstract, Rationale, and other content for your DEP,
  replacing all this gobbledygook with your own text. Be sure to
  adhere to the format guidelines below, specifically on the
  prohibition of tab characters and the indentation requirements.

- Update your References and Copyright section. Usually you'll place
  your DEP into the public domain, in which case just leave the
  Copyright section alone. Alternatively, you can use the
  `GNU General Public License v3`__, which is preferred as the default license
  used by DebOps.

  .. __: https://www.gnu.org/licenses/gpl-3.0.en.html

- Leave the Vim modeline at the end of this file alone.

- Send your DEP submission to the DEP editors, preferably via a GitHub pull
  request.


ReStructuredText DEP Formatting Requirements
--------------------------------------------

The following is a DEP-specific summary of reStructuredText syntax.
For the sake of simplicity and brevity, much detail is omitted. For
more detail, see `Resources`_ below. `Literal blocks`_ (in which no
markup processing is done) are used for examples throughout, to
illustrate the plaintext markup.


General
~~~~~~~

You should fill your paragraphs to column 72, but under no circumstances
should your lines extend past column 79. If your code samples spill
over column 79, you should rewrite them.

Tab characters must never appear in the document at all.


Section Headings
~~~~~~~~~~~~~~~~

DEP headings must begin in column zero and the initial letter of each
word must be capitalized as in book titles. Acronyms should be in all
capitals. Section titles must be adorned with an underline, a single
repeated punctuation character, which begins in column zero and must
extend at least as far as the right edge of the title text (4
characters minimum). First-level section titles are underlined with
"-" (hyphens), second-level section titles with "~" (tilde),
and third-level section titles with "'" (single quotes or
apostrophes). For example:

.. code-block:: rst

   First-Level Title
   -----------------

   Second-Level Title
   ~~~~~~~~~~~~~~~~~~

   Third-Level Title
   '''''''''''''''''

If there are more than three levels of sections in your DEP, you may
insert overline/underline-adorned titles for the first and second
levels as follows:

.. code-block:: rst

   ----------------------------
   First-Level Title (optional)
   ----------------------------

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   Second-Level Title (optional)
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Third-Level Title
   -----------------

   Fourth-Level Title
   ~~~~~~~~~~~~~~~~~~

   Fifth-Level Title
   '''''''''''''''''

You shouldn't have more than five levels of sections in your DEP. If
you do, you should consider rewriting it.

You must use two blank lines between the last line of a section's body
and the next section heading. If a subsection heading immediately
follows a section heading, a single blank line in-between is
sufficient.

The body of each section is not normally indented, although some
constructs do use indentation, as described below. Blank lines are
used to separate constructs.


Paragraphs
~~~~~~~~~~

Paragraphs are left-aligned text blocks separated by blank lines.
Paragraphs are not indented unless they are part of an indented
construct (such as a block quote or a list item).


Inline Markup
~~~~~~~~~~~~~

Portions of text within paragraphs and other text blocks may be
styled. For example:

.. code-block:: rst

   Text may be marked as *emphasized* (single asterisk markup,
   typically shown in italics) or **strongly emphasized** (double
   asterisks, typically boldface). ``Inline literals`` (using double
   backquotes) are typically rendered in a monospaced typeface. No
   further markup recognition is done within the double backquotes,
   so they're safe for any kind of code snippets.


Block Quotes
~~~~~~~~~~~~

Block quotes consist of indented body elements. For example:

.. code-block:: rst

   This is a paragraph.

       This is a block quote.

       A block quote may contain many paragraphs.

Block quotes are used to quote extended passages from other sources.
Block quotes may be nested inside other body elements. Use 4 spaces
per indent level.


Code Blocks
~~~~~~~~~~~

Code blocks are used for code samples or preformatted ASCII art. The
code block syntax allows indication of the language or a file type
a given text block contains, which then can be rendered with syntax
highlighting using `Pygments`__.

.. __: http://pygments.org/

Code blocks are indicated by using ``.. code-block::`` at the beginning
of the section, optionally followed by the syntax type to use, written
in lowercase. The indented section is the content of the code block,
usually indented by 3 spaces. For example:

.. code-block:: rst

   .. code-block:: yaml

      yaml_list: [ 'string1', 'string2' ]
      yaml_dict:
        'key1': 'value1'
        'key2': 'value2'


Literal Blocks
~~~~~~~~~~~~~~

..
    In the text below, double backquotes are used to denote inline
    literals. "``::``" is written so that the colons will appear in a
    monospaced font; the backquotes (``) are markup, not part of the
    text. See "Inline Markup" above.

    By the way, this is a comment, described in "Comments" below.

Literal blocks are used as an alternative syntax for code samples or
preformatted ASCII art, code blocks are preferred. To indicate a literal
block, preface the indented text block with "``::``" (two colons). The
literal block continues until the end of the indentation. Indent the
text block by 4 spaces. For example:

.. code-block:: rst

   This is a typical paragraph. A literal block follows.

   ::

       for a in [5,4,3,2,1]:   # this is program code, shown as-is
           print a
       print "it's..."
       # a literal block continues until the indentation ends

The paragraph containing only "``::``" will be completely removed from
the output; no empty paragraph will remain. "``::``" is also
recognized at the end of any paragraph. If immediately preceded by
whitespace, both colons will be removed from the output. When text
immediately precedes the "``::``", *one* colon will be removed from
the output, leaving only one colon visible (i.e., "``::``" will be
replaced by "``:``"). For example, one colon will remain visible
here:

.. code-block:: rst

   Paragraph::

       Literal block


Lists
~~~~~

Bullet list items begin with one of "-", "*", or "+" (hyphen,
asterisk, or plus sign), followed by whitespace and the list item
body. List item bodies must be left-aligned and indented relative to
the bullet; the text immediately after the bullet determines the
indentation. For example:

.. code-block:: rst

   This paragraph is followed by a list.

   * This is the first bullet list item. The blank line above the
     first list item is required; blank lines between list items
     (such as below this paragraph) are optional.

   * This is the first paragraph in the second item in the list.

     This is the second paragraph in the second item in the list.
     The blank line above this paragraph is required. The left edge
     of this paragraph lines up with the paragraph above, both
     indented relative to the bullet.

     - This is a sublist. The bullet lines up with the left edge of
       the text blocks above. A sublist is a new list so requires a
       blank line above and below.

   * This is the third item of the main list.

   This paragraph is not part of the list.

Enumerated (numbered) list items are similar, but use an enumerator
instead of a bullet. Enumerators are numbers (1, 2, 3, ...), letters
(A, B, C, ...; uppercase or lowercase), or Roman numerals (i, ii, iii,
iv, ...; uppercase or lowercase), formatted with a period suffix
("1.", "2."), parentheses ("(1)", "(2)"), or a right-parenthesis
suffix ("1)", "2)"). For example:

.. code-block:: rst

   1. As with bullet list items, the left edge of paragraphs must
      align.

   2. Each list item may contain multiple paragraphs, sublists, etc.

      This is the second paragraph of the second list item.

      a) Enumerated lists may be nested.
      b) Blank lines may be omitted between list items.

Definition lists are written like this:

.. code-block:: rst

   what
       Definition lists associate a term with a definition.

   how
       The term is a one-line phrase, and the definition is one
       or more paragraphs or body elements, indented relative to
       the term.


Tables
~~~~~~

Simple tables are easy and compact:

.. code-block:: rst

   =====  =====  =======
     A      B    A and B
   =====  =====  =======
   False  False  False
   True   False  False
   False  True   False
   True   True   True
   =====  =====  =======

There must be at least two columns in a table (to differentiate from
section titles). Column spans use underlines of hyphens ("Inputs"
spans the first two columns):

.. code-block:: rst

   =====  =====  ======
      Inputs     Output
   ------------  ------
     A      B    A or B
   =====  =====  ======
   False  False  False
   True   False  True
   False  True   True
   True   True   True
   =====  =====  ======

Text in a first-column cell starts a new row. No text in the first
column indicates a continuation line; the rest of the cells may
consist of multiple lines. For example:

.. code-block:: rst

   =====  =========================
   col 1  col 2
   =====  =========================
   1      Second column of row 1.
   2      Second column of row 2.
          Second line of paragraph.
   3      - Second column of row 3.

          - Second item in bullet
            list (row 3, column 2).
   =====  =========================


Hyperlinks
~~~~~~~~~~

When referencing an external web page in the body of a DEP, you should
include the title of the page in the text, with either an inline
hyperlink reference to the URL or a footnote reference (see
`Footnotes`_ below). Do not include the URL in the body text of the
DEP.

Hyperlink references use backquotes and a trailing underscore to mark
up the reference text; backquotes are optional if the reference text
is a single word. For example:

.. code-block:: rst

   In this paragraph, we refer to the `DebOps web site`_.

An explicit target provides the URL. Put targets in a References
section at the end of the DEP, or immediately after the reference.
Hyperlink targets begin with two periods and a space (the "explicit
markup start"), followed by a leading underscore, the reference text,
a colon, and the URL (absolute or relative):

.. code-block:: rst

   .. _DebOps web site: https://www.debops.org/

The reference text and the target text must match (although the match
is case-insensitive and ignores differences in whitespace). Note that
the underscore trails the reference text but precedes the target text.
If you think of the underscore as a right-pointing arrow, it points
*away* from the reference and *toward* the target.

The same mechanism can be used for internal references. Every unique
section title implicitly defines an internal hyperlink target. We can
make a link to the Abstract section like this:

.. code-block:: rst

   Here is a hyperlink reference to the `Abstract`_ section. The
   backquotes are optional since the reference text is a single word;
   we can also just write: Abstract_.

   An alternative syntax can also be used for internal links with named
   references: :ref:`reference_name`. The string will be replaced during
   HTML generation by the actual document title. If you want to specify
   a custom link label, use: :ref:`Label <reference_name>`.

Footnotes containing the URLs from external targets will be generated
automatically at the end of the References section of the DEP, along
with footnote references linking the reference text to the footnotes.

Text of the form "DEP x" or "RFC x" (where "x" is a number) will be
linked automatically to the appropriate URLs (this might need to be
implemented in the current DebOps documentation system).


Footnotes
~~~~~~~~~

Footnote references consist of a left square bracket, a number, a
right square bracket, and a trailing underscore:

.. code-block:: rst

   This sentence ends with a footnote reference [1]_.

Whitespace must precede the footnote reference. Leave a space between
the footnote reference and the preceding word.

When referring to another DEP, include the DEP number in the body
text, such as "DEP 1". The title may optionally appear. Add a
footnote reference following the title. For example:

.. code-block:: rst

   Refer to DEP 1 [2]_ for more information.

Add a footnote that includes the DEP's title and author. It may
optionally include the explicit URL on a separate line, but only in
the References section. Footnotes begin with ".. " (the explicit
markup start), followed by the footnote marker (no underscores),
followed by the footnote body. For example:

.. code-block:: rst

   References
   ==========

   .. [2] DEP 1, "DEP Purpose and Guidelines", Maciej Delmanowski
      (https://docs.debops.org/en/latest/dep/dep-0001.html)

If you decide to provide an explicit URL for a DEP, please use this as
the URL template:

.. code-block:: rst

   https://docs.debops.org/dep/dep-xxxx.html

DEP numbers in URLs must be padded with zeros from the left, so as to
be exactly 4 characters wide, however DEP numbers in the text are
never padded.

During the course of developing your DEP, you may have to add, remove,
and rearrange footnote references, possibly resulting in mismatched
references, obsolete footnotes, and confusion. Auto-numbered
footnotes allow more freedom. Instead of a number, use a label of the
form "#word", where "word" is a mnemonic consisting of alphanumerics
plus internal hyphens, underscores, and periods (no whitespace or
other characters are allowed). For example:

.. code-block:: rst

   Refer to DEP 1 [#DEP-1]_ for more information.

   References
   ==========

   .. [#DEP-1] DEP 1, "DEP Purpose and Guidelines", Maciej Delmanowski

      https://docs.debops.org/en/latest/dep/dep-0001.html

Footnotes and footnote references will be numbered automatically, and
the numbers will always match. Once a DEP is finalized, auto-numbered
labels should be replaced by numbers for simplicity.


Images
~~~~~~

If your DEP contains a diagram, you may include it in the processed
output using the "image" directive:

.. code-block:: rst

   .. image:: diagram.png

Any browser-friendly graphics format is possible: .png, .jpeg, .gif,
.tiff, etc.

Since this image will not be visible to readers of the DEP in source
text form, you should consider including a description or ASCII art
alternative, using a comment (below).


Comments
~~~~~~~~

A comment block is an indented block of arbitrary text immediately
following an explicit markup start: two periods and whitespace. Leave
the ".." on a line by itself to ensure that the comment is not
misinterpreted as another explicit markup construct. Comments are not
visible in the processed document. For the benefit of those reading
your DEP in source form, please consider including a descriptions of
or ASCII art alternatives to any images you include. For example:

.. code-block:: rst

   .. image:: dataflow.png

   ..
      Data flows from the input module, through the "black box"
      module, and finally into (and through) the output module.

The Vim modeline at the bottom of this document is inside a comment.


Escaping Mechanism
~~~~~~~~~~~~~~~~~~

reStructuredText uses backslashes ("``\``") to override the special
meaning given to markup characters and get the literal characters
themselves. To get a literal backslash, use an escaped backslash
("``\\``"). There are two contexts in which backslashes have no
special meaning: `literal blocks`_ and inline literals (see `Inline
Markup`_ above). In these contexts, no markup recognition is done,
and a single backslash represents a literal backslash, without having
to double up.

If you find that you need to use a backslash in your text, consider
using inline literals or a literal block instead.


Habits to Avoid
---------------

Many programmers who are familiar with TeX often write quotation marks
like this:

.. code-block:: rst

   `single-quoted' or ``double-quoted''

Backquotes are significant in reStructuredText, so this practice
should be avoided. For ordinary text, use ordinary 'single-quotes' or
"double-quotes". For inline literal text (see `Inline Markup`_
above), use double-backquotes:

.. code-block:: rst

   ``literal text: in here, anything goes!``


Resources
---------

Many other constructs and variations are possible. For more details
about the reStructuredText markup, in increasing order of
thoroughness, please see:

* `A ReStructuredText Primer`__, a gentle introduction.

  __ http://docutils.sourceforge.net/docs/rst/quickstart.html

* `Quick reStructuredText`__, a users' quick reference.

  __ http://docutils.sourceforge.net/docs/rst/quickref.html

* `reStructuredText Markup Specification`__, the final authority.

  __ http://docutils.sourceforge.net/spec/rst/reStructuredText.html

The processing of reStructuredText DEPs is done using Docutils_. If
you have a question or require assistance with reStructuredText or
Docutils, please `post a message`_ to the `Docutils-users mailing
list`_. The `Docutils project web site`_ has more information.

.. _Docutils:
.. _Docutils project web site: http://docutils.sourceforge.net/
.. _post a message:
   mailto:docutils-users@lists.sourceforge.net?subject=PEPs
.. _Docutils-users mailing list:
   http://docutils.sf.net/docs/user/mailing-lists.html#docutils-users


References
----------

.. [1] DEP 1, DEP Purpose and Guidelines, Maciej Delmanowski
   (:ref:`dep-0001`)


Copyright
---------

.. code-block:: none

   Copyright (C) 2018 Maciej Delmanowski <drybjed@gmail.com>
   Copyright (C) 2018 DebOps https://debops.org/

   This document is part of DebOps.

   DebOps is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License version 3, as
   published by the Free Software Foundation.

   DebOps is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with DebOps. If not, see https://www.gnu.org/licenses/.

..
   vim: tw=72:
