---
## https://github.com/ansible/ansible/issues/22397
## Ansible 2.3 generates a WARNING when using {{ }} in defaults variables of role
## this workarounds it until Ansible resolves the issue:
- name: Initialize variables
  set_fact:
    stop_non_migratable_vms: "{{ stop_non_migratable_vms }}"
    provided_token: "{{ engine_token | default(lookup('env','OVIRT_TOKEN')) | default('') }}"

- block:
    - name: Login to oVirt
      ovirt_auth:
        url: "{{ engine_url | default(lookup('env','OVIRT_URL')) | default(omit) }}"
        username: "{{ engine_user | default(lookup('env','OVIRT_USERNAME')) | default(omit) }}"
        hostname: "{{ engine_fqdn | default(lookup('env','OVIRT_HOSTNAME')) | default(omit) }}"
        password: "{{ engine_password | default(lookup('env','OVIRT_PASSWORD')) | default(omit) }}"
        ca_file: "{{ engine_cafile | default(lookup('env','OVIRT_CAFILE')) | default(omit) }}"
        token: "{{ engine_token | default(lookup('env','OVIRT_TOKEN')) | default(omit) }}"
        insecure: "{{ engine_insecure | default(true) }}"
      when: ovirt_auth is undefined or not ovirt_auth
      register: login_result
      tags:
        - always

    - name: Get API info
      ovirt_api_info:
        auth: "{{ ovirt_auth }}"
      register: api_info
      check_mode: "no"

    - name: Get cluster info
      ovirt_cluster_info:
        auth: "{{ ovirt_auth }}"
        pattern: "name={{ cluster_name }}"
        fetch_nested: True
        nested_attributes: name
      check_mode: "no"
      register: cluster_info

    - name: Set cluster upgrade status in progress
      no_log: true
      uri:
        url: "{{ ovirt_auth.url }}/clusters/{{ cluster_info.ovirt_clusters[0].id }}/upgrade"
        method: POST
        body_format: json
        validate_certs: false
        headers:
          Authorization: "Bearer {{ ovirt_auth.token }}"
        body:
          upgrade_action: start
      register: upgrade_set
      when: api_info.ovirt_api.product_info.version.major >= 4 and api_info.ovirt_api.product_info.version.minor >= 3

    - name: Log event cluster upgrade has started
      ovirt_event:
        auth: "{{ ovirt_auth }}"
        state: present
        description: "Cluster upgrade started for {{ cluster_name }}."
        origin: "cluster_upgrade"
        custom_id: "{{ 2147483647 | random | int }}"
        severity: normal
        cluster: "{{ cluster_info.ovirt_clusters[0].id }}"

    - name: Get hosts
      ovirt_host_info:
        auth: "{{ ovirt_auth }}"
        pattern: "cluster={{ cluster_name | mandatory }} {{ check_upgrade | ternary('', 'update_available=true') }} {{ host_names | map('regex_replace', '^(.*)$', 'name=\\1') | list | join(' or ') }} {{ host_statuses | map('regex_replace', '^(.*)$', 'status=\\1') | list | join(' or ') }}"
      check_mode: "no"
      register: host_info

    - block:
      - name: Print - no hosts to be updated
        debug:
          msg: "No hosts to be updated"

      - name: Log event - no hosts to be updated
        ovirt_event:
          auth: "{{ ovirt_auth }}"
          state: present
          description: "There are no hosts to be updated for cluster {{ cluster_name }}."
          origin: "cluster_upgrade"
          custom_id: "{{ 2147483647 | random | int }}"
          severity: normal
          cluster: "{{ cluster_info.ovirt_clusters[0].id }}"
      when: host_info.ovirt_hosts | length == 0

    - block:
        - name: Log event about hosts that are marked to be updated
          ovirt_event:
            auth: "{{ ovirt_auth }}"
            state: present
            description: "Hosts {{ host_info.ovirt_hosts | map(attribute='name') | join(',') }} are marked to be updated in cluster {{ cluster_name }}."
            origin: "cluster_upgrade"
            custom_id: "{{ 2147483647 | random | int }}"
            severity: normal
            cluster: "{{ cluster_info.ovirt_clusters[0].id }}"

        - include_tasks: cluster_policy.yml
          when: use_maintenance_policy

        - name: Get list of VMs in cluster
          ovirt_vm_info:
            auth: "{{ ovirt_auth }}"
            pattern: "cluster={{ cluster_name }}"
          check_mode: "no"
          register: vms_in_cluster

        - include_tasks: pinned_vms.yml

        - name: Start ovirt job session
          ovirt_job:
            auth: "{{ ovirt_auth }}"
            description: "Upgrading hosts"

        # Update only those hosts that aren't in list of hosts were VMs are pinned
        # or if stop_non_migratable_vms is enabled, which means we stop pinned VMs
        - include_tasks: upgrade.yml
          with_items:
            - "{{ host_info.ovirt_hosts }}"
          when: "item.id not in host_ids or stop_non_migratable_vms"

        - name: Start ovirt job session
          ovirt_job:
            auth: "{{ ovirt_auth }}"
            description: "Upgrading hosts"
            state: finished

        - name: Log event about cluster upgrade finished successfully
          ovirt_event:
            auth: "{{ ovirt_auth }}"
            state: present
            description: "Upgrade of cluster {{ cluster_name }} finished successfully."
            origin: "cluster_upgrade"
            severity: normal
            custom_id: "{{ 2147483647 | random | int }}"
            cluster: "{{ cluster_info.ovirt_clusters[0].id }}"

      when: host_info.ovirt_hosts | length > 0
      rescue:
        - name: Log event about cluster upgrade failed
          ovirt_event:
            auth: "{{ ovirt_auth }}"
            state: present
            description: "Upgrade of cluster {{ cluster_name }} failed."
            origin: "cluster_upgrade"
            custom_id: "{{ 2147483647 | random | int }}"
            severity: error
            cluster: "{{ cluster_info.ovirt_clusters[0].id }}"

        - name: Update job failed
          ovirt_job:
            auth: "{{ ovirt_auth }}"
            description: "Upgrading hosts"
            state: failed

      always:
        - name: Set original cluster policy
          ovirt_cluster:
            auth: "{{ ovirt_auth }}"
            name: "{{ cluster_name }}"
            scheduling_policy: "{{ cluster_scheduling_policy }}"
            scheduling_policy_properties: "{{ cluster_scheduling_policy_properties }}"
          when: use_maintenance_policy and cluster_policy.changed | default(false)

        - name: Start again stopped VMs
          ovirt_vm:
            auth: "{{ ovirt_auth }}"
            name: "{{ item }}"
            state: running
          ignore_errors: "yes"
          with_items:
            - "{{ stopped_vms | default([]) }}"

        - name: Start again pin to host VMs
          ovirt_vm:
            auth: "{{ ovirt_auth }}"
            name: "{{ item }}"
            state: running
          ignore_errors: "yes"
          with_items:
            - "{{ pinned_vms_names | default([]) }}"
          when: "stop_non_migratable_vms"

  always:
    - name: Set cluster upgrade status to finished
      no_log: true
      uri:
        url: "{{ ovirt_auth.url }}/clusters/{{ cluster_info.ovirt_clusters[0].id }}/upgrade"
        validate_certs: false
        method: POST
        body_format: json
        headers:
          Authorization: "Bearer {{ ovirt_auth.token }}"
        body:
          upgrade_action: finish
      when:
        - upgrade_set is defined and not upgrade_set.failed | default(false)
        - api_info.ovirt_api.product_info.version.major >= 4 and api_info.ovirt_api.product_info.version.minor >= 3

    - name: Logout from oVirt
      ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"
      when:
        - login_result.skipped is defined and not login_result.skipped
        - provided_token != ovirt_auth.token
      tags:
        - always
