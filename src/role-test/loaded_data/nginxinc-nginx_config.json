{"py/object": "struct4.Repository", "name": "", "path": "", "my_collection_name": "", "playbooks": [], "roles": [], "installed_collections_path": "", "installed_collections": [], "installed_roles_path": "./role-test/testdata/nginxinc-nginx_config", "installed_roles": [{"py/object": "struct4.Role", "name": "nginxinc.nginx_config", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config", "fqcn": "nginxinc.nginx_config", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Set up SELinux", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Set up SELinux", "when": ["nginx_config_selinux | bool", "'selinux' in ansible_facts", "ansible_facts['selinux']['mode'] is defined", "ansible_facts['os_family'] in ['RedHat', 'Suse']"], "tags": "nginx_config_selinux"}, "module_options": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Cleanup NGINX config", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Cleanup NGINX config", "when": "nginx_config_cleanup | bool", "tags": "nginx_config_cleanup"}, "module_options": "{{ role_path }}/tasks/config/cleanup-config.yml", "executable": "{{ role_path }}/tasks/config/cleanup-config.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload NGINX config", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Upload NGINX config", "when": "nginx_config_upload_enable | bool or nginx_config_upload_html_enable | bool or nginx_config_upload_ssl_enable | bool", "tags": "nginx_config_upload"}, "module_options": "{{ role_path }}/tasks/config/upload-config.yml", "executable": "{{ role_path }}/tasks/config/upload-config.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create NGINX config", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Create NGINX config", "when": "nginx_config_main_template_enable | bool or nginx_config_http_template_enable | bool or nginx_config_stream_template_enable | bool or nginx_config_status_enable | bool or nginx_config_rest_api_enable | bool or nginx_config_html_demo_template_enable | bool or nginx_config_modules is defined and nginx_config_modules | length > 0", "tags": "nginx_config_template"}, "module_options": "{{ role_path }}/tasks/config/template-config.yml", "executable": "{{ role_path }}/tasks/config/template-config.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX is running", "module": "ansible.builtin.meta", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Ensure NGINX is running"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "Debug output", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Debug output", "when": "nginx_config_debug_output | bool", "tags": "nginx_config_debug_output"}, "module_options": "{{ role_path }}/tasks/config/debug-output.yml", "executable": "{{ role_path }}/tasks/config/debug-output.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-selinux.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "tasks": [{"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install dependencies", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "(CentOS/RHEL) Install dependencies", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": ["libselinux-utils", "policycoreutils", "selinux-policy-targeted"]}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set SELinux mode to permissive", "module": "ansible.posix.selinux", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to permissive", "when": "not (ansible_check_mode and nginx_config_selinux_enforcing)"}, "module_options": {"state": "permissive", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux HTTP network connections", "module": "ansible.posix.seboolean", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux HTTP network connections", "loop": ["httpd_can_network_connect", "httpd_can_network_relay"]}, "module_options": {"name": "{{ item }}", "state": true, "persistent": true}, "executable": "ansible.posix.seboolean", "executable_type": "Module", "fqcn": "ansible.posix.seboolean", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on status ports", "module": "community.general.seport", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on status ports", "when": "nginx_config_status_port is defined"}, "module_options": {"ports": "{{ nginx_config_status_port }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on Rest API ports", "module": "community.general.seport", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on Rest API ports", "when": "nginx_config_rest_api_port is defined"}, "module_options": {"ports": "{{ nginx_config_rest_api_port }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on specific ports", "module": "community.general.seport", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on specific ports", "when": "nginx_config_selinux_tcp_ports is defined"}, "module_options": {"ports": "{{ nginx_config_selinux_tcp_ports }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux UDP connections on specific ports", "module": "community.general.seport", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux UDP connections on specific ports", "when": "nginx_config_selinux_udp_ports is defined"}, "module_options": {"ports": "{{ nginx_config_selinux_udp_ports }}", "proto": "udp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set SELinux mode to enforcing", "module": "ansible.posix.selinux", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to enforcing", "when": "nginx_config_selinux_enforcing"}, "module_options": {"state": "enforcing", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "debug-output.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml", "tasks": [{"py/object": "struct4.Task", "name": "Register NGINX config", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml", "options": {"name": "Register NGINX config", "ignore_errors": "{{ ansible_check_mode }}", "check_mode": false, "changed_when": false, "register": "config_full"}, "module_options": "nginx -T", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Print NGINX config", "module": "ansible.builtin.debug", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml", "options": {"name": "Print NGINX config", "when": "config_full.stdout_lines is defined"}, "module_options": {"var": "config_full.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "template-config.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure HTML directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure HTML directory exists", "loop": "{{ nginx_config_html_demo_template }}", "when": "nginx_config_html_demo_template_enable | bool"}, "module_options": {"path": "{{ item.deployment_location | default('/usr/share/nginx/html') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate HTML files", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate HTML files", "loop": "{{ nginx_config_html_demo_template }}", "when": "nginx_config_html_demo_template_enable | bool"}, "module_options": {"src": "{{ item.template_file | default('www/index.html.j2') }}", "dest": "{{ item.deployment_location | default('/usr/share/nginx/html/index.html') }}", "backup": "{{ item.backup  | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NGINX modules", "module": "ansible.builtin.lineinfile", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Configure NGINX modules", "loop": "{{ nginx_config_modules }}", "when": ["nginx_config_modules is defined", "nginx_config_modules | length > 0"], "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"path": "/etc/nginx/nginx.conf", "insertbefore": "BOF", "line": "load_module {{ item }};"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX main directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX main directory exists", "when": "nginx_config_main_template_enable | bool"}, "module_options": {"path": "{{ nginx_config_main_template.deployment_location | default('/etc/nginx') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX main configuration file", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX main configuration file", "when": "nginx_config_main_template_enable | bool", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ nginx_config_main_template.template_file | default('nginx.conf.j2') }}", "dest": "{{ nginx_config_main_template.deployment_location | default('/etc/nginx/nginx.conf') }}", "backup": "{{ nginx_config_main_template.backup  | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX client body cache directories exist", "module": "ansible.builtin.file", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX client body cache directories exist", "loop": "{{ nginx_config_http_template }}", "loop_control": {"label": "{{ item.config.core.client_body_temp_path.path | default('config.core.client_body_temp_path.path undefined') }}"}, "when": ["nginx_config_http_template_enable | bool", "item.config.core.client_body_temp_path.path is defined"]}, "module_options": {"path": "{{ item.config.core.client_body_temp_path.path }}", "state": "directory", "owner": "{{ nginx_config_main_template.user | default('nginx') }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX proxy cache directories exist", "module": "ansible.builtin.file", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX proxy cache directories exist", "loop": "{{ nginx_config_http_template | subelements('config.proxy.cache_path', skip_missing=True) }}", "loop_control": {"label": "{{ item.1.path | default('config.proxy.cache_path.path undefined') }}"}, "when": "nginx_config_http_template_enable | bool"}, "module_options": {"path": "{{ item.1.path }}", "state": "directory", "owner": "{{ nginx_config_main_template.user | default('nginx') }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX HTTP directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX HTTP directory exists", "loop": "{{ nginx_config_http_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}"}, "when": "nginx_config_http_template_enable | bool"}, "module_options": {"path": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX HTTP config files", "module": "ansible.builtin.template", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX HTTP config files", "loop": "{{ nginx_config_http_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/default.conf') }}"}, "when": "nginx_config_http_template_enable | bool", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ item.template_file | default('http/default.conf.j2') }}", "dest": "{{ item.deployment_location | default('/etc/nginx/conf.d/default.conf') }}", "backup": "{{ item.backup  | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX stub status config file", "module": "ansible.builtin.template", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX stub status config file", "notify": "(Handler - NGINX Config) Run NGINX", "when": "nginx_config_status_enable | bool"}, "module_options": {"src": "{{ nginx_config_status_template_file | default('http/status.conf.j2') }}", "dest": "{{ nginx_config_status_file_location | default('/etc/nginx/conf.d/status.conf') }}", "backup": "{{ nginx_config_status_backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX API config file", "module": "ansible.builtin.template", "index": 10, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX API config file", "notify": "(Handler - NGINX Config) Run NGINX", "when": "nginx_config_rest_api_enable | bool"}, "module_options": {"src": "{{ nginx_config_rest_api_template_file | default('http/api.conf.j2') }}", "dest": "{{ nginx_config_rest_api_file_location | default('/etc/nginx/conf.d/api.conf') }}", "backup": "{{ nginx_config_rest_api_backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX stream directory exists", "module": "ansible.builtin.file", "index": 11, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX stream directory exists", "loop": "{{ nginx_config_stream_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}"}, "when": "nginx_config_stream_template_enable | bool"}, "module_options": {"path": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX stream config files", "module": "ansible.builtin.template", "index": 12, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX stream config files", "loop": "{{ nginx_config_stream_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/stream_default.conf') }}"}, "notify": "(Handler - NGINX Config) Run NGINX", "when": "nginx_config_stream_template_enable | bool"}, "module_options": {"src": "{{ item.template_file | default('stream/default.conf.j2') }}", "dest": "{{ item.deployment_location | default('/etc/nginx/conf.d/stream_default.conf') }}", "backup": true, "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "upload-config.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure NGINX config snippet directories exist", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Ensure NGINX config snippet directories exist", "loop": "{{ nginx_config_upload }}"}, "module_options": {"path": "{{ item.dest | dirname if item.dest.endswith('.conf') else item.dest | default('/etc/nginx') }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload NGINX config snippet files", "module": "ansible.builtin.copy", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload NGINX config snippet files", "loop": "{{ nginx_config_upload }}", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/etc/nginx/') }}", "backup": "{{ item.backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure HTML directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Ensure HTML directory exists", "loop": "{{ nginx_config_upload_html }}"}, "module_options": {"path": "{{ item.dest | dirname if item.dest.endswith('.html') else item.dest | default('/usr/share/nginx/html') }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload HTML files", "module": "ansible.builtin.copy", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload HTML files", "loop": "{{ nginx_config_upload_html }}", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/usr/share/nginx/html') }}", "backup": "{{ item.backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure SSL certificate and key directories exist", "module": "ansible.builtin.file", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Ensure SSL certificate and key directories exist", "loop": "{{ nginx_config_upload_ssl_crt +  nginx_config_upload_ssl_key }}"}, "module_options": {"path": "{{ item.dest }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload NGINX SSL certificates", "module": "ansible.builtin.copy", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload NGINX SSL certificates", "loop": "{{ nginx_config_upload_ssl_crt }}"}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/etc/ssl/certs') }}", "backup": "{{ item.backup | default(true) }}", "mode": 416}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload NGINX SSL keys", "module": "ansible.builtin.copy", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload NGINX SSL keys", "loop": "{{ nginx_config_upload_ssl_key }}", "no_log": true}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/etc/ssl/private') }}", "backup": "{{ item.backup | default(true) }}", "mode": 416}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "cleanup-config.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml", "tasks": [{"py/object": "struct4.Task", "name": "Find NGINX config files", "module": "ansible.builtin.find", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml", "options": {"name": "Find NGINX config files", "loop": "{{ nginx_config_cleanup_paths }}", "when": "nginx_config_cleanup_paths is defined", "register": "nginx_config_files"}, "module_options": {"paths": "{{ item.directory }}", "patterns": "*.conf", "recurse": "{{ item.recurse | default(false) }}"}, "executable": "ansible.builtin.find", "executable_type": "Module", "fqcn": "ansible.builtin.find", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove NGINX config files", "module": "ansible.builtin.file", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml", "options": {"name": "Remove NGINX config files", "loop": "{{ nginx_config_files.results | map(attribute='files') | sum(start=[]) | map(attribute='path') | list + nginx_config_cleanup_files | default('') | list }}", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}], "modules": [], "taskfiles": [], "version": "", "module_dict": {}, "task_dict": {"{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Set up SELinux", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Set up SELinux", "when": ["nginx_config_selinux | bool", "'selinux' in ansible_facts", "ansible_facts['selinux']['mode'] is defined", "ansible_facts['os_family'] in ['RedHat', 'Suse']"], "tags": "nginx_config_selinux"}, "module_options": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Cleanup NGINX config", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Cleanup NGINX config", "when": "nginx_config_cleanup | bool", "tags": "nginx_config_cleanup"}, "module_options": "{{ role_path }}/tasks/config/cleanup-config.yml", "executable": "{{ role_path }}/tasks/config/cleanup-config.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Upload NGINX config", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Upload NGINX config", "when": "nginx_config_upload_enable | bool or nginx_config_upload_html_enable | bool or nginx_config_upload_ssl_enable | bool", "tags": "nginx_config_upload"}, "module_options": "{{ role_path }}/tasks/config/upload-config.yml", "executable": "{{ role_path }}/tasks/config/upload-config.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Create NGINX config", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Create NGINX config", "when": "nginx_config_main_template_enable | bool or nginx_config_http_template_enable | bool or nginx_config_stream_template_enable | bool or nginx_config_status_enable | bool or nginx_config_rest_api_enable | bool or nginx_config_html_demo_template_enable | bool or nginx_config_modules is defined and nginx_config_modules | length > 0", "tags": "nginx_config_template"}, "module_options": "{{ role_path }}/tasks/config/template-config.yml", "executable": "{{ role_path }}/tasks/config/template-config.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Ensure NGINX is running", "module": "ansible.builtin.meta", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Ensure NGINX is running"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Debug output", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Debug output", "when": "nginx_config_debug_output | bool", "tags": "nginx_config_debug_output"}, "module_options": "{{ role_path }}/tasks/config/debug-output.yml", "executable": "{{ role_path }}/tasks/config/debug-output.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install dependencies", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "(CentOS/RHEL) Install dependencies", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": ["libselinux-utils", "policycoreutils", "selinux-policy-targeted"]}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Set SELinux mode to permissive", "module": "ansible.posix.selinux", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to permissive", "when": "not (ansible_check_mode and nginx_config_selinux_enforcing)"}, "module_options": {"state": "permissive", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Allow SELinux HTTP network connections", "module": "ansible.posix.seboolean", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux HTTP network connections", "loop": ["httpd_can_network_connect", "httpd_can_network_relay"]}, "module_options": {"name": "{{ item }}", "state": true, "persistent": true}, "executable": "ansible.posix.seboolean", "executable_type": "Module", "fqcn": "ansible.posix.seboolean", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on status ports", "module": "community.general.seport", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on status ports", "when": "nginx_config_status_port is defined"}, "module_options": {"ports": "{{ nginx_config_status_port }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on Rest API ports", "module": "community.general.seport", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on Rest API ports", "when": "nginx_config_rest_api_port is defined"}, "module_options": {"ports": "{{ nginx_config_rest_api_port }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on specific ports", "module": "community.general.seport", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on specific ports", "when": "nginx_config_selinux_tcp_ports is defined"}, "module_options": {"ports": "{{ nginx_config_selinux_tcp_ports }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Allow SELinux UDP connections on specific ports", "module": "community.general.seport", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux UDP connections on specific ports", "when": "nginx_config_selinux_udp_ports is defined"}, "module_options": {"ports": "{{ nginx_config_selinux_udp_ports }}", "proto": "udp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Set SELinux mode to enforcing", "module": "ansible.posix.selinux", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to enforcing", "when": "nginx_config_selinux_enforcing"}, "module_options": {"state": "enforcing", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Register NGINX config", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml", "options": {"name": "Register NGINX config", "ignore_errors": "{{ ansible_check_mode }}", "check_mode": false, "changed_when": false, "register": "config_full"}, "module_options": "nginx -T", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Print NGINX config", "module": "ansible.builtin.debug", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml", "options": {"name": "Print NGINX config", "when": "config_full.stdout_lines is defined"}, "module_options": {"var": "config_full.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure HTML directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure HTML directory exists", "loop": "{{ nginx_config_html_demo_template }}", "when": "nginx_config_html_demo_template_enable | bool"}, "module_options": {"path": "{{ item.deployment_location | default('/usr/share/nginx/html') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Dynamically generate HTML files", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate HTML files", "loop": "{{ nginx_config_html_demo_template }}", "when": "nginx_config_html_demo_template_enable | bool"}, "module_options": {"src": "{{ item.template_file | default('www/index.html.j2') }}", "dest": "{{ item.deployment_location | default('/usr/share/nginx/html/index.html') }}", "backup": "{{ item.backup  | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Configure NGINX modules", "module": "ansible.builtin.lineinfile", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Configure NGINX modules", "loop": "{{ nginx_config_modules }}", "when": ["nginx_config_modules is defined", "nginx_config_modules | length > 0"], "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"path": "/etc/nginx/nginx.conf", "insertbefore": "BOF", "line": "load_module {{ item }};"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Ensure NGINX main directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX main directory exists", "when": "nginx_config_main_template_enable | bool"}, "module_options": {"path": "{{ nginx_config_main_template.deployment_location | default('/etc/nginx') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Dynamically generate NGINX main configuration file", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX main configuration file", "when": "nginx_config_main_template_enable | bool", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ nginx_config_main_template.template_file | default('nginx.conf.j2') }}", "dest": "{{ nginx_config_main_template.deployment_location | default('/etc/nginx/nginx.conf') }}", "backup": "{{ nginx_config_main_template.backup  | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Ensure NGINX client body cache directories exist", "module": "ansible.builtin.file", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX client body cache directories exist", "loop": "{{ nginx_config_http_template }}", "loop_control": {"label": "{{ item.config.core.client_body_temp_path.path | default('config.core.client_body_temp_path.path undefined') }}"}, "when": ["nginx_config_http_template_enable | bool", "item.config.core.client_body_temp_path.path is defined"]}, "module_options": {"path": "{{ item.config.core.client_body_temp_path.path }}", "state": "directory", "owner": "{{ nginx_config_main_template.user | default('nginx') }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Ensure NGINX proxy cache directories exist", "module": "ansible.builtin.file", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX proxy cache directories exist", "loop": "{{ nginx_config_http_template | subelements('config.proxy.cache_path', skip_missing=True) }}", "loop_control": {"label": "{{ item.1.path | default('config.proxy.cache_path.path undefined') }}"}, "when": "nginx_config_http_template_enable | bool"}, "module_options": {"path": "{{ item.1.path }}", "state": "directory", "owner": "{{ nginx_config_main_template.user | default('nginx') }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Ensure NGINX HTTP directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX HTTP directory exists", "loop": "{{ nginx_config_http_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}"}, "when": "nginx_config_http_template_enable | bool"}, "module_options": {"path": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "Dynamically generate NGINX HTTP config files", "module": "ansible.builtin.template", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX HTTP config files", "loop": "{{ nginx_config_http_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/default.conf') }}"}, "when": "nginx_config_http_template_enable | bool", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ item.template_file | default('http/default.conf.j2') }}", "dest": "{{ item.deployment_location | default('/etc/nginx/conf.d/default.conf') }}", "backup": "{{ item.backup  | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "Dynamically generate NGINX stub status config file", "module": "ansible.builtin.template", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX stub status config file", "notify": "(Handler - NGINX Config) Run NGINX", "when": "nginx_config_status_enable | bool"}, "module_options": {"src": "{{ nginx_config_status_template_file | default('http/status.conf.j2') }}", "dest": "{{ nginx_config_status_file_location | default('/etc/nginx/conf.d/status.conf') }}", "backup": "{{ nginx_config_status_backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "Dynamically generate NGINX API config file", "module": "ansible.builtin.template", "index": 10, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX API config file", "notify": "(Handler - NGINX Config) Run NGINX", "when": "nginx_config_rest_api_enable | bool"}, "module_options": {"src": "{{ nginx_config_rest_api_template_file | default('http/api.conf.j2') }}", "dest": "{{ nginx_config_rest_api_file_location | default('/etc/nginx/conf.d/api.conf') }}", "backup": "{{ nginx_config_rest_api_backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 11}": {"py/object": "struct4.Task", "name": "Ensure NGINX stream directory exists", "module": "ansible.builtin.file", "index": 11, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX stream directory exists", "loop": "{{ nginx_config_stream_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}"}, "when": "nginx_config_stream_template_enable | bool"}, "module_options": {"path": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml\", \"index\": 12}": {"py/object": "struct4.Task", "name": "Dynamically generate NGINX stream config files", "module": "ansible.builtin.template", "index": 12, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX stream config files", "loop": "{{ nginx_config_stream_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/stream_default.conf') }}"}, "notify": "(Handler - NGINX Config) Run NGINX", "when": "nginx_config_stream_template_enable | bool"}, "module_options": {"src": "{{ item.template_file | default('stream/default.conf.j2') }}", "dest": "{{ item.deployment_location | default('/etc/nginx/conf.d/stream_default.conf') }}", "backup": true, "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure NGINX config snippet directories exist", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Ensure NGINX config snippet directories exist", "loop": "{{ nginx_config_upload }}"}, "module_options": {"path": "{{ item.dest | dirname if item.dest.endswith('.conf') else item.dest | default('/etc/nginx') }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Upload NGINX config snippet files", "module": "ansible.builtin.copy", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload NGINX config snippet files", "loop": "{{ nginx_config_upload }}", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/etc/nginx/') }}", "backup": "{{ item.backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Ensure HTML directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Ensure HTML directory exists", "loop": "{{ nginx_config_upload_html }}"}, "module_options": {"path": "{{ item.dest | dirname if item.dest.endswith('.html') else item.dest | default('/usr/share/nginx/html') }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Upload HTML files", "module": "ansible.builtin.copy", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload HTML files", "loop": "{{ nginx_config_upload_html }}", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/usr/share/nginx/html') }}", "backup": "{{ item.backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Ensure SSL certificate and key directories exist", "module": "ansible.builtin.file", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Ensure SSL certificate and key directories exist", "loop": "{{ nginx_config_upload_ssl_crt +  nginx_config_upload_ssl_key }}"}, "module_options": {"path": "{{ item.dest }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Upload NGINX SSL certificates", "module": "ansible.builtin.copy", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload NGINX SSL certificates", "loop": "{{ nginx_config_upload_ssl_crt }}"}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/etc/ssl/certs') }}", "backup": "{{ item.backup | default(true) }}", "mode": 416}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Upload NGINX SSL keys", "module": "ansible.builtin.copy", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload NGINX SSL keys", "loop": "{{ nginx_config_upload_ssl_key }}", "no_log": true}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/etc/ssl/private') }}", "backup": "{{ item.backup | default(true) }}", "mode": 416}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Find NGINX config files", "module": "ansible.builtin.find", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml", "options": {"name": "Find NGINX config files", "loop": "{{ nginx_config_cleanup_paths }}", "when": "nginx_config_cleanup_paths is defined", "register": "nginx_config_files"}, "module_options": {"paths": "{{ item.directory }}", "patterns": "*.conf", "recurse": "{{ item.recurse | default(false) }}"}, "executable": "ansible.builtin.find", "executable_type": "Module", "fqcn": "ansible.builtin.find", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Remove NGINX config files", "module": "ansible.builtin.file", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml", "options": {"name": "Remove NGINX config files", "loop": "{{ nginx_config_files.results | map(attribute='files') | sum(start=[]) | map(attribute='path') | list + nginx_config_cleanup_files | default('') | list }}", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}}, "taskfile_dict": {"./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml": {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Set up SELinux", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Set up SELinux", "when": ["nginx_config_selinux | bool", "'selinux' in ansible_facts", "ansible_facts['selinux']['mode'] is defined", "ansible_facts['os_family'] in ['RedHat', 'Suse']"], "tags": "nginx_config_selinux"}, "module_options": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Cleanup NGINX config", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Cleanup NGINX config", "when": "nginx_config_cleanup | bool", "tags": "nginx_config_cleanup"}, "module_options": "{{ role_path }}/tasks/config/cleanup-config.yml", "executable": "{{ role_path }}/tasks/config/cleanup-config.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload NGINX config", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Upload NGINX config", "when": "nginx_config_upload_enable | bool or nginx_config_upload_html_enable | bool or nginx_config_upload_ssl_enable | bool", "tags": "nginx_config_upload"}, "module_options": "{{ role_path }}/tasks/config/upload-config.yml", "executable": "{{ role_path }}/tasks/config/upload-config.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create NGINX config", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Create NGINX config", "when": "nginx_config_main_template_enable | bool or nginx_config_http_template_enable | bool or nginx_config_stream_template_enable | bool or nginx_config_status_enable | bool or nginx_config_rest_api_enable | bool or nginx_config_html_demo_template_enable | bool or nginx_config_modules is defined and nginx_config_modules | length > 0", "tags": "nginx_config_template"}, "module_options": "{{ role_path }}/tasks/config/template-config.yml", "executable": "{{ role_path }}/tasks/config/template-config.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX is running", "module": "ansible.builtin.meta", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Ensure NGINX is running"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "Debug output", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Debug output", "when": "nginx_config_debug_output | bool", "tags": "nginx_config_debug_output"}, "module_options": "{{ role_path }}/tasks/config/debug-output.yml", "executable": "{{ role_path }}/tasks/config/debug-output.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml": {"py/object": "struct4.TaskFile", "name": "setup-selinux.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "tasks": [{"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install dependencies", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "(CentOS/RHEL) Install dependencies", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": ["libselinux-utils", "policycoreutils", "selinux-policy-targeted"]}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set SELinux mode to permissive", "module": "ansible.posix.selinux", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to permissive", "when": "not (ansible_check_mode and nginx_config_selinux_enforcing)"}, "module_options": {"state": "permissive", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux HTTP network connections", "module": "ansible.posix.seboolean", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux HTTP network connections", "loop": ["httpd_can_network_connect", "httpd_can_network_relay"]}, "module_options": {"name": "{{ item }}", "state": true, "persistent": true}, "executable": "ansible.posix.seboolean", "executable_type": "Module", "fqcn": "ansible.posix.seboolean", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on status ports", "module": "community.general.seport", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on status ports", "when": "nginx_config_status_port is defined"}, "module_options": {"ports": "{{ nginx_config_status_port }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on Rest API ports", "module": "community.general.seport", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on Rest API ports", "when": "nginx_config_rest_api_port is defined"}, "module_options": {"ports": "{{ nginx_config_rest_api_port }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on specific ports", "module": "community.general.seport", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on specific ports", "when": "nginx_config_selinux_tcp_ports is defined"}, "module_options": {"ports": "{{ nginx_config_selinux_tcp_ports }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux UDP connections on specific ports", "module": "community.general.seport", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux UDP connections on specific ports", "when": "nginx_config_selinux_udp_ports is defined"}, "module_options": {"ports": "{{ nginx_config_selinux_udp_ports }}", "proto": "udp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set SELinux mode to enforcing", "module": "ansible.posix.selinux", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to enforcing", "when": "nginx_config_selinux_enforcing"}, "module_options": {"state": "enforcing", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml": {"py/object": "struct4.TaskFile", "name": "debug-output.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml", "tasks": [{"py/object": "struct4.Task", "name": "Register NGINX config", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml", "options": {"name": "Register NGINX config", "ignore_errors": "{{ ansible_check_mode }}", "check_mode": false, "changed_when": false, "register": "config_full"}, "module_options": "nginx -T", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Print NGINX config", "module": "ansible.builtin.debug", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml", "options": {"name": "Print NGINX config", "when": "config_full.stdout_lines is defined"}, "module_options": {"var": "config_full.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml": {"py/object": "struct4.TaskFile", "name": "template-config.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure HTML directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure HTML directory exists", "loop": "{{ nginx_config_html_demo_template }}", "when": "nginx_config_html_demo_template_enable | bool"}, "module_options": {"path": "{{ item.deployment_location | default('/usr/share/nginx/html') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate HTML files", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate HTML files", "loop": "{{ nginx_config_html_demo_template }}", "when": "nginx_config_html_demo_template_enable | bool"}, "module_options": {"src": "{{ item.template_file | default('www/index.html.j2') }}", "dest": "{{ item.deployment_location | default('/usr/share/nginx/html/index.html') }}", "backup": "{{ item.backup  | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NGINX modules", "module": "ansible.builtin.lineinfile", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Configure NGINX modules", "loop": "{{ nginx_config_modules }}", "when": ["nginx_config_modules is defined", "nginx_config_modules | length > 0"], "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"path": "/etc/nginx/nginx.conf", "insertbefore": "BOF", "line": "load_module {{ item }};"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX main directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX main directory exists", "when": "nginx_config_main_template_enable | bool"}, "module_options": {"path": "{{ nginx_config_main_template.deployment_location | default('/etc/nginx') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX main configuration file", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX main configuration file", "when": "nginx_config_main_template_enable | bool", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ nginx_config_main_template.template_file | default('nginx.conf.j2') }}", "dest": "{{ nginx_config_main_template.deployment_location | default('/etc/nginx/nginx.conf') }}", "backup": "{{ nginx_config_main_template.backup  | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX client body cache directories exist", "module": "ansible.builtin.file", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX client body cache directories exist", "loop": "{{ nginx_config_http_template }}", "loop_control": {"label": "{{ item.config.core.client_body_temp_path.path | default('config.core.client_body_temp_path.path undefined') }}"}, "when": ["nginx_config_http_template_enable | bool", "item.config.core.client_body_temp_path.path is defined"]}, "module_options": {"path": "{{ item.config.core.client_body_temp_path.path }}", "state": "directory", "owner": "{{ nginx_config_main_template.user | default('nginx') }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX proxy cache directories exist", "module": "ansible.builtin.file", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX proxy cache directories exist", "loop": "{{ nginx_config_http_template | subelements('config.proxy.cache_path', skip_missing=True) }}", "loop_control": {"label": "{{ item.1.path | default('config.proxy.cache_path.path undefined') }}"}, "when": "nginx_config_http_template_enable | bool"}, "module_options": {"path": "{{ item.1.path }}", "state": "directory", "owner": "{{ nginx_config_main_template.user | default('nginx') }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX HTTP directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX HTTP directory exists", "loop": "{{ nginx_config_http_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}"}, "when": "nginx_config_http_template_enable | bool"}, "module_options": {"path": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX HTTP config files", "module": "ansible.builtin.template", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX HTTP config files", "loop": "{{ nginx_config_http_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/default.conf') }}"}, "when": "nginx_config_http_template_enable | bool", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ item.template_file | default('http/default.conf.j2') }}", "dest": "{{ item.deployment_location | default('/etc/nginx/conf.d/default.conf') }}", "backup": "{{ item.backup  | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX stub status config file", "module": "ansible.builtin.template", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX stub status config file", "notify": "(Handler - NGINX Config) Run NGINX", "when": "nginx_config_status_enable | bool"}, "module_options": {"src": "{{ nginx_config_status_template_file | default('http/status.conf.j2') }}", "dest": "{{ nginx_config_status_file_location | default('/etc/nginx/conf.d/status.conf') }}", "backup": "{{ nginx_config_status_backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX API config file", "module": "ansible.builtin.template", "index": 10, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX API config file", "notify": "(Handler - NGINX Config) Run NGINX", "when": "nginx_config_rest_api_enable | bool"}, "module_options": {"src": "{{ nginx_config_rest_api_template_file | default('http/api.conf.j2') }}", "dest": "{{ nginx_config_rest_api_file_location | default('/etc/nginx/conf.d/api.conf') }}", "backup": "{{ nginx_config_rest_api_backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX stream directory exists", "module": "ansible.builtin.file", "index": 11, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX stream directory exists", "loop": "{{ nginx_config_stream_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}"}, "when": "nginx_config_stream_template_enable | bool"}, "module_options": {"path": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX stream config files", "module": "ansible.builtin.template", "index": 12, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX stream config files", "loop": "{{ nginx_config_stream_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/stream_default.conf') }}"}, "notify": "(Handler - NGINX Config) Run NGINX", "when": "nginx_config_stream_template_enable | bool"}, "module_options": {"src": "{{ item.template_file | default('stream/default.conf.j2') }}", "dest": "{{ item.deployment_location | default('/etc/nginx/conf.d/stream_default.conf') }}", "backup": true, "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml": {"py/object": "struct4.TaskFile", "name": "upload-config.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure NGINX config snippet directories exist", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Ensure NGINX config snippet directories exist", "loop": "{{ nginx_config_upload }}"}, "module_options": {"path": "{{ item.dest | dirname if item.dest.endswith('.conf') else item.dest | default('/etc/nginx') }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload NGINX config snippet files", "module": "ansible.builtin.copy", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload NGINX config snippet files", "loop": "{{ nginx_config_upload }}", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/etc/nginx/') }}", "backup": "{{ item.backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure HTML directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Ensure HTML directory exists", "loop": "{{ nginx_config_upload_html }}"}, "module_options": {"path": "{{ item.dest | dirname if item.dest.endswith('.html') else item.dest | default('/usr/share/nginx/html') }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload HTML files", "module": "ansible.builtin.copy", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload HTML files", "loop": "{{ nginx_config_upload_html }}", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/usr/share/nginx/html') }}", "backup": "{{ item.backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure SSL certificate and key directories exist", "module": "ansible.builtin.file", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Ensure SSL certificate and key directories exist", "loop": "{{ nginx_config_upload_ssl_crt +  nginx_config_upload_ssl_key }}"}, "module_options": {"path": "{{ item.dest }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload NGINX SSL certificates", "module": "ansible.builtin.copy", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload NGINX SSL certificates", "loop": "{{ nginx_config_upload_ssl_crt }}"}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/etc/ssl/certs') }}", "backup": "{{ item.backup | default(true) }}", "mode": 416}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload NGINX SSL keys", "module": "ansible.builtin.copy", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload NGINX SSL keys", "loop": "{{ nginx_config_upload_ssl_key }}", "no_log": true}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/etc/ssl/private') }}", "backup": "{{ item.backup | default(true) }}", "mode": 416}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml": {"py/object": "struct4.TaskFile", "name": "cleanup-config.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml", "tasks": [{"py/object": "struct4.Task", "name": "Find NGINX config files", "module": "ansible.builtin.find", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml", "options": {"name": "Find NGINX config files", "loop": "{{ nginx_config_cleanup_paths }}", "when": "nginx_config_cleanup_paths is defined", "register": "nginx_config_files"}, "module_options": {"paths": "{{ item.directory }}", "patterns": "*.conf", "recurse": "{{ item.recurse | default(false) }}"}, "executable": "ansible.builtin.find", "executable_type": "Module", "fqcn": "ansible.builtin.find", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove NGINX config files", "module": "ansible.builtin.file", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml", "options": {"name": "Remove NGINX config files", "loop": "{{ nginx_config_files.results | map(attribute='files') | sum(start=[]) | map(attribute='path') | list + nginx_config_cleanup_files | default('') | list }}", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}}, "role_dict": {"nginxinc.nginx_config": {"py/object": "struct4.Role", "name": "nginxinc.nginx_config", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config", "fqcn": "nginxinc.nginx_config", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Set up SELinux", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Set up SELinux", "when": ["nginx_config_selinux | bool", "'selinux' in ansible_facts", "ansible_facts['selinux']['mode'] is defined", "ansible_facts['os_family'] in ['RedHat', 'Suse']"], "tags": "nginx_config_selinux"}, "module_options": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Cleanup NGINX config", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Cleanup NGINX config", "when": "nginx_config_cleanup | bool", "tags": "nginx_config_cleanup"}, "module_options": "{{ role_path }}/tasks/config/cleanup-config.yml", "executable": "{{ role_path }}/tasks/config/cleanup-config.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload NGINX config", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Upload NGINX config", "when": "nginx_config_upload_enable | bool or nginx_config_upload_html_enable | bool or nginx_config_upload_ssl_enable | bool", "tags": "nginx_config_upload"}, "module_options": "{{ role_path }}/tasks/config/upload-config.yml", "executable": "{{ role_path }}/tasks/config/upload-config.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create NGINX config", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Create NGINX config", "when": "nginx_config_main_template_enable | bool or nginx_config_http_template_enable | bool or nginx_config_stream_template_enable | bool or nginx_config_status_enable | bool or nginx_config_rest_api_enable | bool or nginx_config_html_demo_template_enable | bool or nginx_config_modules is defined and nginx_config_modules | length > 0", "tags": "nginx_config_template"}, "module_options": "{{ role_path }}/tasks/config/template-config.yml", "executable": "{{ role_path }}/tasks/config/template-config.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX is running", "module": "ansible.builtin.meta", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Ensure NGINX is running"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "Debug output", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/main.yml", "options": {"name": "Debug output", "when": "nginx_config_debug_output | bool", "tags": "nginx_config_debug_output"}, "module_options": "{{ role_path }}/tasks/config/debug-output.yml", "executable": "{{ role_path }}/tasks/config/debug-output.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-selinux.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "tasks": [{"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install dependencies", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "(CentOS/RHEL) Install dependencies", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": ["libselinux-utils", "policycoreutils", "selinux-policy-targeted"]}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set SELinux mode to permissive", "module": "ansible.posix.selinux", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to permissive", "when": "not (ansible_check_mode and nginx_config_selinux_enforcing)"}, "module_options": {"state": "permissive", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux HTTP network connections", "module": "ansible.posix.seboolean", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux HTTP network connections", "loop": ["httpd_can_network_connect", "httpd_can_network_relay"]}, "module_options": {"name": "{{ item }}", "state": true, "persistent": true}, "executable": "ansible.posix.seboolean", "executable_type": "Module", "fqcn": "ansible.posix.seboolean", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on status ports", "module": "community.general.seport", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on status ports", "when": "nginx_config_status_port is defined"}, "module_options": {"ports": "{{ nginx_config_status_port }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on Rest API ports", "module": "community.general.seport", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on Rest API ports", "when": "nginx_config_rest_api_port is defined"}, "module_options": {"ports": "{{ nginx_config_rest_api_port }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on specific ports", "module": "community.general.seport", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on specific ports", "when": "nginx_config_selinux_tcp_ports is defined"}, "module_options": {"ports": "{{ nginx_config_selinux_tcp_ports }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux UDP connections on specific ports", "module": "community.general.seport", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux UDP connections on specific ports", "when": "nginx_config_selinux_udp_ports is defined"}, "module_options": {"ports": "{{ nginx_config_selinux_udp_ports }}", "proto": "udp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set SELinux mode to enforcing", "module": "ansible.posix.selinux", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to enforcing", "when": "nginx_config_selinux_enforcing"}, "module_options": {"state": "enforcing", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "debug-output.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml", "tasks": [{"py/object": "struct4.Task", "name": "Register NGINX config", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml", "options": {"name": "Register NGINX config", "ignore_errors": "{{ ansible_check_mode }}", "check_mode": false, "changed_when": false, "register": "config_full"}, "module_options": "nginx -T", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Print NGINX config", "module": "ansible.builtin.debug", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/debug-output.yml", "options": {"name": "Print NGINX config", "when": "config_full.stdout_lines is defined"}, "module_options": {"var": "config_full.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "template-config.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure HTML directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure HTML directory exists", "loop": "{{ nginx_config_html_demo_template }}", "when": "nginx_config_html_demo_template_enable | bool"}, "module_options": {"path": "{{ item.deployment_location | default('/usr/share/nginx/html') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate HTML files", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate HTML files", "loop": "{{ nginx_config_html_demo_template }}", "when": "nginx_config_html_demo_template_enable | bool"}, "module_options": {"src": "{{ item.template_file | default('www/index.html.j2') }}", "dest": "{{ item.deployment_location | default('/usr/share/nginx/html/index.html') }}", "backup": "{{ item.backup  | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NGINX modules", "module": "ansible.builtin.lineinfile", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Configure NGINX modules", "loop": "{{ nginx_config_modules }}", "when": ["nginx_config_modules is defined", "nginx_config_modules | length > 0"], "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"path": "/etc/nginx/nginx.conf", "insertbefore": "BOF", "line": "load_module {{ item }};"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX main directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX main directory exists", "when": "nginx_config_main_template_enable | bool"}, "module_options": {"path": "{{ nginx_config_main_template.deployment_location | default('/etc/nginx') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX main configuration file", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX main configuration file", "when": "nginx_config_main_template_enable | bool", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ nginx_config_main_template.template_file | default('nginx.conf.j2') }}", "dest": "{{ nginx_config_main_template.deployment_location | default('/etc/nginx/nginx.conf') }}", "backup": "{{ nginx_config_main_template.backup  | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX client body cache directories exist", "module": "ansible.builtin.file", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX client body cache directories exist", "loop": "{{ nginx_config_http_template }}", "loop_control": {"label": "{{ item.config.core.client_body_temp_path.path | default('config.core.client_body_temp_path.path undefined') }}"}, "when": ["nginx_config_http_template_enable | bool", "item.config.core.client_body_temp_path.path is defined"]}, "module_options": {"path": "{{ item.config.core.client_body_temp_path.path }}", "state": "directory", "owner": "{{ nginx_config_main_template.user | default('nginx') }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX proxy cache directories exist", "module": "ansible.builtin.file", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX proxy cache directories exist", "loop": "{{ nginx_config_http_template | subelements('config.proxy.cache_path', skip_missing=True) }}", "loop_control": {"label": "{{ item.1.path | default('config.proxy.cache_path.path undefined') }}"}, "when": "nginx_config_http_template_enable | bool"}, "module_options": {"path": "{{ item.1.path }}", "state": "directory", "owner": "{{ nginx_config_main_template.user | default('nginx') }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX HTTP directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX HTTP directory exists", "loop": "{{ nginx_config_http_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}"}, "when": "nginx_config_http_template_enable | bool"}, "module_options": {"path": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX HTTP config files", "module": "ansible.builtin.template", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX HTTP config files", "loop": "{{ nginx_config_http_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/default.conf') }}"}, "when": "nginx_config_http_template_enable | bool", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ item.template_file | default('http/default.conf.j2') }}", "dest": "{{ item.deployment_location | default('/etc/nginx/conf.d/default.conf') }}", "backup": "{{ item.backup  | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX stub status config file", "module": "ansible.builtin.template", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX stub status config file", "notify": "(Handler - NGINX Config) Run NGINX", "when": "nginx_config_status_enable | bool"}, "module_options": {"src": "{{ nginx_config_status_template_file | default('http/status.conf.j2') }}", "dest": "{{ nginx_config_status_file_location | default('/etc/nginx/conf.d/status.conf') }}", "backup": "{{ nginx_config_status_backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX API config file", "module": "ansible.builtin.template", "index": 10, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX API config file", "notify": "(Handler - NGINX Config) Run NGINX", "when": "nginx_config_rest_api_enable | bool"}, "module_options": {"src": "{{ nginx_config_rest_api_template_file | default('http/api.conf.j2') }}", "dest": "{{ nginx_config_rest_api_file_location | default('/etc/nginx/conf.d/api.conf') }}", "backup": "{{ nginx_config_rest_api_backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure NGINX stream directory exists", "module": "ansible.builtin.file", "index": 11, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Ensure NGINX stream directory exists", "loop": "{{ nginx_config_stream_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}"}, "when": "nginx_config_stream_template_enable | bool"}, "module_options": {"path": "{{ item.deployment_location | default('/etc/nginx/conf.d/') | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Dynamically generate NGINX stream config files", "module": "ansible.builtin.template", "index": 12, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/template-config.yml", "options": {"name": "Dynamically generate NGINX stream config files", "loop": "{{ nginx_config_stream_template }}", "loop_control": {"label": "{{ item.deployment_location | default('/etc/nginx/conf.d/stream_default.conf') }}"}, "notify": "(Handler - NGINX Config) Run NGINX", "when": "nginx_config_stream_template_enable | bool"}, "module_options": {"src": "{{ item.template_file | default('stream/default.conf.j2') }}", "dest": "{{ item.deployment_location | default('/etc/nginx/conf.d/stream_default.conf') }}", "backup": true, "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "upload-config.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure NGINX config snippet directories exist", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Ensure NGINX config snippet directories exist", "loop": "{{ nginx_config_upload }}"}, "module_options": {"path": "{{ item.dest | dirname if item.dest.endswith('.conf') else item.dest | default('/etc/nginx') }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload NGINX config snippet files", "module": "ansible.builtin.copy", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload NGINX config snippet files", "loop": "{{ nginx_config_upload }}", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/etc/nginx/') }}", "backup": "{{ item.backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure HTML directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Ensure HTML directory exists", "loop": "{{ nginx_config_upload_html }}"}, "module_options": {"path": "{{ item.dest | dirname if item.dest.endswith('.html') else item.dest | default('/usr/share/nginx/html') }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload HTML files", "module": "ansible.builtin.copy", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload HTML files", "loop": "{{ nginx_config_upload_html }}", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/usr/share/nginx/html') }}", "backup": "{{ item.backup | default(true) }}", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure SSL certificate and key directories exist", "module": "ansible.builtin.file", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Ensure SSL certificate and key directories exist", "loop": "{{ nginx_config_upload_ssl_crt +  nginx_config_upload_ssl_key }}"}, "module_options": {"path": "{{ item.dest }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload NGINX SSL certificates", "module": "ansible.builtin.copy", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload NGINX SSL certificates", "loop": "{{ nginx_config_upload_ssl_crt }}"}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/etc/ssl/certs') }}", "backup": "{{ item.backup | default(true) }}", "mode": 416}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload NGINX SSL keys", "module": "ansible.builtin.copy", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/upload-config.yml", "options": {"name": "Upload NGINX SSL keys", "loop": "{{ nginx_config_upload_ssl_key }}", "no_log": true}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest | default('/etc/ssl/private') }}", "backup": "{{ item.backup | default(true) }}", "mode": 416}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "cleanup-config.yml", "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml", "tasks": [{"py/object": "struct4.Task", "name": "Find NGINX config files", "module": "ansible.builtin.find", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml", "options": {"name": "Find NGINX config files", "loop": "{{ nginx_config_cleanup_paths }}", "when": "nginx_config_cleanup_paths is defined", "register": "nginx_config_files"}, "module_options": {"paths": "{{ item.directory }}", "patterns": "*.conf", "recurse": "{{ item.recurse | default(false) }}"}, "executable": "ansible.builtin.find", "executable_type": "Module", "fqcn": "ansible.builtin.find", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove NGINX config files", "module": "ansible.builtin.file", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx_config/nginxinc.nginx_config/tasks/config/cleanup-config.yml", "options": {"name": "Remove NGINX config files", "loop": "{{ nginx_config_files.results | map(attribute='files') | sum(start=[]) | map(attribute='path') | list + nginx_config_cleanup_files | default('') | list }}", "notify": "(Handler - NGINX Config) Run NGINX"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "nginxinc.nginx_config", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}}, "annotations": {}}