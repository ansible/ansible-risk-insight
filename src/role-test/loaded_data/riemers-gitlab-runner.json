{"py/object": "struct4.Repository", "name": "", "path": "", "my_collection_name": "", "playbooks": [], "roles": [], "installed_collections_path": "", "installed_collections": [], "installed_roles_path": "./role-test/testdata/riemers-gitlab-runner", "installed_roles": [{"py/object": "struct4.Role", "name": "riemers.gitlab-runner", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner", "fqcn": "riemers.gitlab-runner", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "section-config-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner-windows.yml", "options": {"vars": {"line_name_prefix": "{{ sect_name_prefix }} line:[{{ (line_index|int) + 1 }}/{{ gitlab_runner.extra_configs[section]|list|length }}]: "}, "loop": "{{ gitlab_runner.extra_configs[section] | list }}", "loop_control": {"loop_var": "line", "index_var": "line_index"}}, "module_options": "line-config-runner-windows.yml", "executable": "line-config-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "Windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "Install GitLab Runner (Windows)", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "Install GitLab Runner (Windows)"}, "module_options": "install-windows.yml", "executable": "install-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) List configured runners", "module": "win_command", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) List configured runners", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "register": "configured_runners", "changed_when": false, "check_mode": false}, "module_options": "{{ gitlab_runner_executable }} list", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Check runner is registered", "module": "win_command", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Check runner is registered", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "register": "verified_runners", "ignore_errors": true, "changed_when": false, "check_mode": false}, "module_options": "{{ gitlab_runner_executable }} verify", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Register GitLab Runner", "module": "include_tasks", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Register GitLab Runner", "when": "gitlab_runner.token is defined or gitlab_runner_registration_token | string | length > 0", "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "register-runner-windows.yml", "executable": "register-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Set global options", "module": "import_tasks", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Set global options"}, "module_options": "global-setup-windows.yml", "executable": "global-setup-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Configure GitLab Runner", "module": "import_tasks", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Configure GitLab Runner"}, "module_options": "config-runners-windows.yml", "executable": "config-runners-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Start GitLab Runner", "module": "win_command", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Start GitLab Runner", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}}, "module_options": "{{ gitlab_runner_executable }} start", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "update-config-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set concurrent limit option", "module": "lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set concurrent limit option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*limit =", "line": "  limit = {{ gitlab_runner.concurrent_specific|default(0) }}", "state": "present", "insertafter": "^\\s*name =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set coordinator URL", "module": "lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set coordinator URL", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*url =", "line": "  url = {{ gitlab_runner.url|default(gitlab_runner_coordinator_url) | to_json }}", "state": "present", "insertafter": "^\\s*limit =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set clone URL", "module": "lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set clone URL", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.clone_url is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*clone_url =", "line": "  clone_url = {{ gitlab_runner.clone_url | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set environment option", "module": "lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set environment option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*environment =", "line": "  environment = {{ gitlab_runner.env_vars|default([]) | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set pre_clone_script", "module": "lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set pre_clone_script", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.pre_clone_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_clone_script =", "line": "  pre_clone_script = {{ gitlab_runner.pre_clone_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set pre_build_script", "module": "lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set pre_build_script", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.pre_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_build_script =", "line": "  pre_build_script = {{ gitlab_runner.pre_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set tls_ca_file", "module": "lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set tls_ca_file", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.tls_ca_file is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*tls-ca-file =", "line": "  tls-ca-file = {{ gitlab_runner.tls_ca_file | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set post_build_script", "module": "lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set post_build_script", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.post_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*post_build_script =", "line": "  post_build_script = {{ gitlab_runner.post_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner executor option", "module": "lineinfile", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner executor option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*executor =", "line": "  executor = {{ gitlab_runner.executor|default(\"shell\") | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner shell option", "module": "lineinfile", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner shell option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*shell =", "line": "  shell = {{ gitlab_runner.shell|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.shell is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner executor section", "module": "lineinfile", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner executor section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.{{ gitlab_runner.executor|default(\"shell\") }}\\]", "line": "  [runners.{{ gitlab_runner.executor|replace(\"docker+machine\",\"machine\")|default(\"shell\") }}]", "state": "{{ 'absent' if (gitlab_runner.executor|default('shell')) == 'shell' else 'present' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set output_limit option", "module": "lineinfile", "index": 11, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set output_limit option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*output_limit =", "line": "  output_limit = {{ gitlab_runner.output_limit|default(4096) }}", "state": "present", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner docker image option", "module": "lineinfile", "index": 12, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner docker image option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*image =", "line": "    image = {{ gitlab_runner.docker_image|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_image is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker helper image option", "module": "lineinfile", "index": 13, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker helper image option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*helper_image =", "line": "    helper_image = {{ gitlab_runner.docker_helper_image|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_helper_image is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker privileged option", "module": "lineinfile", "index": 14, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker privileged option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*privileged =", "line": "    privileged = {{ gitlab_runner.docker_privileged|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_privileged is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker wait_for_services_timeout option", "module": "lineinfile", "index": 15, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker wait_for_services_timeout option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*wait_for_services_timeout =", "line": "    wait_for_services_timeout = {{ gitlab_runner.docker_wait_for_services_timeout|default(30) }}", "state": "{{ 'present' if gitlab_runner.docker_wait_for_services_timeout is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker tlsverify option", "module": "lineinfile", "index": 16, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker tlsverify option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*tls_verify =", "line": "    tls_verify = {{ gitlab_runner.docker_tlsverify|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_tlsverify is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker shm_size option", "module": "lineinfile", "index": 17, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker shm_size option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*shm_size =", "line": "    shm_size = {{ gitlab_runner.docker_shm_size|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_shm_size is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker disable_cache option", "module": "lineinfile", "index": 18, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker disable_cache option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*disable_cache =", "line": "    disable_cache = {{ gitlab_runner.docker_disable_cache|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_disable_cache is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker DNS option", "module": "lineinfile", "index": 19, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker DNS option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*dns =", "line": "    dns = {{ gitlab_runner.docker_dns|default(false) | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_dns is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker DNS search option", "module": "lineinfile", "index": 20, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker DNS search option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*dns_search =", "line": "    dns_search = {{ gitlab_runner.docker_dns_search|default(false) | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_dns_search is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker pull_policy option", "module": "lineinfile", "index": 21, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker pull_policy option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pull_policy =", "line": "    pull_policy = {{ gitlab_runner.docker_pull_policy|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_pull_policy is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker volumes option", "module": "lineinfile", "index": 22, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker volumes option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*volumes =", "line": "    volumes = {{ gitlab_runner.docker_volumes|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_volumes is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker devices option", "module": "lineinfile", "index": 23, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker devices option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*devices =", "line": "    devices = {{ gitlab_runner.docker_devices|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_devices is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner docker network option", "module": "lineinfile", "index": 24, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner docker network option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*network_mode =", "line": "    network_mode = {{ gitlab_runner.docker_network_mode|default(\"bridge\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_network_mode is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set custom_build_dir section", "module": "lineinfile", "index": 25, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set custom_build_dir section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.custom_build_dir\\]", "line": "  [runners.custom_build_dir]", "state": "{{ 'present' if gitlab_runner.custom_build_dir_enabled is defined else 'absent' }}", "insertafter": "EOF", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker custom_build_dir-enabled option", "module": "lineinfile", "index": 26, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker custom_build_dir-enabled option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*enabled =", "line": "    enabled = {{ gitlab_runner.custom_build_dir_enabled|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.custom_build_dir_enabled is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.custom_build_dir\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache section", "module": "lineinfile", "index": 27, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\]", "line": "  [runners.cache]", "state": "present", "insertafter": "EOF", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 section", "module": "lineinfile", "index": 28, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\.s3\\]", "line": "    [runners.cache.s3]", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs section", "module": "lineinfile", "index": 29, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\.gcs\\]", "line": "    [runners.cache.gcs]", "state": "{{ 'present' if gitlab_runner.cache_gcs_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure section", "module": "lineinfile", "index": 30, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\.azure\\]", "line": "    [runners.cache.azure]", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache type option", "module": "lineinfile", "index": 31, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache type option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Type =", "line": "    Type = {{ gitlab_runner.cache_type|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache path option", "module": "lineinfile", "index": 32, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache path option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Path =", "line": "    Path = {{ gitlab_runner.cache_path|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_path is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache shared option", "module": "lineinfile", "index": 33, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache shared option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Shared =", "line": "    Shared = {{ gitlab_runner.cache_shared|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_shared is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 server addresss", "module": "lineinfile", "index": 34, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 server addresss", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*ServerAddress =", "line": "      ServerAddress = {{ gitlab_runner.cache_s3_server_address|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_server_address is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 access key", "module": "lineinfile", "index": 35, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 access key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccessKey =", "line": "      AccessKey = {{ gitlab_runner.cache_s3_access_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_access_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 secret key", "module": "lineinfile", "index": 36, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 secret key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*SecretKey =", "line": "      SecretKey = {{ gitlab_runner.cache_s3_secret_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_secret_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 bucket name option", "module": "lineinfile", "index": 37, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 bucket name option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.cache_type is defined and gitlab_runner.cache_type == 's3'"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketName =", "line": "      BucketName = {{ gitlab_runner.cache_s3_bucket_name|default(\"\")  | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 bucket location option", "module": "lineinfile", "index": 38, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 bucket location option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketLocation =", "line": "      BucketLocation = {{ gitlab_runner.cache_s3_bucket_location|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_location is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 insecure option", "module": "lineinfile", "index": 39, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 insecure option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Insecure =", "line": "      Insecure = {{ gitlab_runner.cache_s3_insecure|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_s3_insecure is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs bucket name", "module": "lineinfile", "index": 40, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs bucket name", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.cache_type is defined and gitlab_runner.cache_type == 'gcs'"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketName =", "line": "      BucketName = {{ gitlab_runner.cache_gcs_bucket_name|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs credentials file", "module": "lineinfile", "index": 41, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs credentials file", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*CredentialsFile =", "line": "      CredentialsFile = {{ gitlab_runner.cache_gcs_credentials_file|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_credentials_file is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs access id", "module": "lineinfile", "index": 42, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs access id", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccessID =", "line": "      AccessID = {{ gitlab_runner.cache_gcs_access_id|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_access_id is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs private key", "module": "lineinfile", "index": 43, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs private key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*PrivateKey =", "line": "      PrivateKey = {{ gitlab_runner.cache_gcs_private_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_private_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure account name", "module": "lineinfile", "index": 44, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure account name", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccountName =", "line": "      AccountName = {{ gitlab_runner.cache_azure_account_name|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_account_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure account key", "module": "lineinfile", "index": 45, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure account key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccountKey =", "line": "      AccountKey = {{ gitlab_runner.cache_azure_account_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_account_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure container name", "module": "lineinfile", "index": 46, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure container name", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*ContainerName =", "line": "      ContainerName = {{ gitlab_runner.cache_azure_container_name|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_container_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure storage domain", "module": "lineinfile", "index": 47, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure storage domain", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*StorageDomain =", "line": "      StorageDomain = {{ gitlab_runner.cache_azure_storage_domain|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_storage_domain is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh user option", "module": "lineinfile", "index": 48, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh user option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*user =", "line": "  user = {{ gitlab_runner.ssh_user|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_user is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh host option", "module": "lineinfile", "index": 49, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh host option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*host =", "line": "  host = {{ gitlab_runner.ssh_host|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_host is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh port option", "module": "lineinfile", "index": 50, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh port option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*port =", "line": "  port = \"{{ gitlab_runner.ssh_port|default(\"\") | to_json }}\"", "state": "{{ 'present' if gitlab_runner.ssh_port is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh password option", "module": "lineinfile", "index": 51, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh password option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*password =", "line": "  password = {{ gitlab_runner.ssh_password|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_password is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh identity file option", "module": "lineinfile", "index": 52, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh identity file option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*identity_file =", "line": "  identity_file = {{ gitlab_runner.ssh_identity_file|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_identity_file is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox base name option", "module": "lineinfile", "index": 53, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox base name option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*base_name =", "line": "    base_name = {{ gitlab_runner.virtualbox_base_name | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_base_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox base snapshot option", "module": "lineinfile", "index": 54, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox base snapshot option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*base_snapshot =", "line": "    base_snapshot = {{ gitlab_runner.virtualbox_base_snapshot | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_base_snapshot is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox base folder option", "module": "lineinfile", "index": 55, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox base folder option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*base_folder =", "line": "    base_folder = {{ gitlab_runner.virtualbox_base_folder | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_base_folder is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox disable snapshots option", "module": "lineinfile", "index": 56, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox disable snapshots option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*disable_snapshots =", "line": "    disable_snapshots = {{ gitlab_runner.virtualbox_disable_snapshots|default(false) | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_disable_snapshots is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set builds dir file option", "module": "lineinfile", "index": 57, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set builds dir file option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*builds_dir =", "line": "  builds_dir = {{ gitlab_runner.builds_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.builds_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache dir file option", "module": "lineinfile", "index": 58, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache dir file option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*cache_dir =", "line": "  cache_dir = {{ gitlab_runner.cache_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Ensure directory permissions", "module": "file", "index": 59, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Ensure directory permissions", "loop": ["{{ gitlab_runner.builds_dir | default(\"\") }}", "{{ gitlab_runner.cache_dir | default(\"\") }}"], "when": "item|length"}, "module_options": {"dest": "{{ item }}", "state": "directory", "owner": "{{ gitlab_runner_runtime_owner|default(omit) }}", "group": "{{ gitlab_runner_runtime_group|default(omit) }}", "mode": 504, "modification_time": "preserve", "access_time": "preserve", "recurse": true}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Ensure directory access test", "module": "command", "index": 60, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Ensure directory access test", "loop": ["{{ gitlab_runner.builds_dir | default(\"\") }}", "{{ gitlab_runner.cache_dir | default(\"\") }}"], "when": "item|length", "changed_when": false, "become": true, "become_user": "{{ gitlab_runner_runtime_owner|default(omit) }}", "register": "ensure_directory_access", "ignore_errors": true}, "module_options": "/usr/bin/test -r {{ item }}", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Ensure directory access fail on error", "module": "fail", "index": 61, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Ensure directory access fail on error", "loop": "{{ ensure_directory_access.results }}", "when": ["item.rc is defined and item.rc != 0"]}, "module_options": {"msg": "Error: user gitlab-runner failed to test access to {{ item.item }}. Check parent folder(s) permissions"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 62, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"vars": {"sect_name_prefix": "{{ runn_name_prefix }} section[{{ (section_index|int) + 1 }}/{{ gitlab_runner.extra_configs|list|length }}]:"}, "loop": "{{ gitlab_runner.extra_configs|list }}", "loop_control": {"loop_var": "section", "index_var": "section_index"}, "when": ["gitlab_runner.extra_configs is defined", "gitlab_runner.extra_configs|list|length > 0"]}, "module_options": "section-config-runner.yml", "executable": "section-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "config-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) {{ conf_name_prefix }} Create temporary file", "module": "win_tempfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"name": "(Windows) {{ conf_name_prefix }} Create temporary file", "register": "temp_runner_config", "check_mode": false, "changed_when": false}, "module_options": {"state": "file", "path": "{{ temp_runner_config_dir.path }}", "prefix": "gitlab-runner.{{ runner_config_index }}."}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ conf_name_prefix }} Isolate runner configuration", "module": "win_copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"name": "(Windows) {{ conf_name_prefix }} Isolate runner configuration", "check_mode": false, "changed_when": false}, "module_options": {"dest": "{{ temp_runner_config.path }}", "content": "{{ runner_config }}"}, "executable": "win_copy", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"vars": {"runn_name_prefix": "{{ conf_name_prefix }} runner[{{ (gitlab_runner_index|int) + 1 }}/{{ gitlab_runner_runners|length }}]:"}, "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'present'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "update-config-runner-windows.yml", "executable": "update-config-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ conf_name_prefix }} Remove runner config", "module": "win_file", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"name": "(Windows) {{ conf_name_prefix }} Remove runner config", "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'absent'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": {"path": "{{ temp_runner_config.path }}", "state": "absent"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "systemd-reload.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure /etc/systemd/system/gitlab-runner.service.d/ exists", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Ensure /etc/systemd/system/gitlab-runner.service.d/ exists", "become": true}, "module_options": {"path": "/etc/systemd/system/gitlab-runner.service.d", "state": "directory", "owner": "root", "group": "root", "mode": 493}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add reload command to GitLab Runner system service", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Add reload command to GitLab Runner system service", "become": true, "register": "gitlab_runner_exec_reload"}, "module_options": {"dest": "/etc/systemd/system/gitlab-runner.service.d/exec-reload.conf", "content": "[Service]\nExecReload=/bin/kill -HUP $MAINPID\n"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure graceful stop for GitLab Runner system service", "module": "copy", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Configure graceful stop for GitLab Runner system service", "become": true, "when": "gitlab_runner_timeout_stop_seconds > 0", "register": "gitlab_runner_kill_timeout"}, "module_options": {"dest": "/etc/systemd/system/gitlab-runner.service.d/kill.conf", "content": "[Service]\nTimeoutStopSec={{ gitlab_runner_timeout_stop_seconds }}\nKillSignal=SIGQUIT\n"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Force systemd to reread configs", "module": "systemd", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Force systemd to reread configs", "become": true, "when": "gitlab_runner_exec_reload.changed or gitlab_runner_kill_timeout"}, "module_options": {"daemon_reload": true}, "executable": "systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "global-setup.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "tasks": [{"py/object": "struct4.Task", "name": "Create .gitlab-runner dir", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Create .gitlab-runner dir", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory", "mode": "0700"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure config.toml exists", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Ensure config.toml exists", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set concurrent option", "module": "lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Set concurrent option", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s*)concurrent =", "line": "\\1concurrent = {{ gitlab_runner_concurrent }}", "state": "present", "backrefs": true}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add listen_address to config", "module": "lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add listen_address to config", "when": "gitlab_runner_listen_address | length > 0", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^listen_address =", "line": "listen_address = \"{{ gitlab_runner_listen_address }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add log_format to config", "module": "lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add log_format to config", "when": "gitlab_runner_log_format is defined", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^log_format =", "line": "log_format = \"{{ gitlab_runner_log_format|default(\"runner\") }}\"", "insertbefore": "BOF", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add sentry dsn to config", "module": "lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add sentry dsn to config", "when": "gitlab_runner_sentry_dsn | length > 0", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^sentry_dsn =", "line": "sentry_dsn = \"{{ gitlab_runner_sentry_dsn }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add session server listen_address to config", "module": "lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add session server listen_address to config", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s+)listen_address =", "line": "  listen_address = \"{{ gitlab_runner_session_server_listen_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_listen_address | length > 0 else 'absent' }}"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add session server advertise_address to config", "module": "lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add session server advertise_address to config", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*advertise_address =", "line": "  advertise_address = \"{{ gitlab_runner_session_server_advertise_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_advertise_address | length > 0 else 'absent' }}"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add session server session_timeout to config", "module": "lineinfile", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add session server session_timeout to config", "when": "gitlab_runner_session_server_session_timeout", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*session_timeout =", "line": "  session_timeout = {{ gitlab_runner_session_server_session_timeout }}", "insertafter": "^\\s*\\[session_server\\]", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "global-setup-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) Create .gitlab-runner dir", "module": "win_file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Create .gitlab-runner dir"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Ensure config.toml exists", "module": "win_file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Ensure config.toml exists"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Set concurrent option", "module": "win_lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Set concurrent option", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s*)concurrent =.*", "line": "$1concurrent = {{ gitlab_runner_concurrent }}", "state": "present", "backrefs": true}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add listen_address to config", "module": "win_lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add listen_address to config", "when": "gitlab_runner_listen_address | length > 0", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^listen_address =.*", "line": "listen_address = \"{{ gitlab_runner_listen_address }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add sentry dsn to config", "module": "win_lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add sentry dsn to config", "when": "gitlab_runner_sentry_dsn | length > 0", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^sentry_dsn =.*", "line": "sentry_dsn = \"{{ gitlab_runner_sentry_dsn }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add session server listen_address to config", "module": "win_lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add session server listen_address to config", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s+)listen_address =", "line": "  listen_address = \"{{ gitlab_runner_session_server_listen_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_listen_address | length > 0 else 'absent' }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add session server advertise_address to config", "module": "win_lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add session server advertise_address to config", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*advertise_address =", "line": "  advertise_address = \"{{ gitlab_runner_session_server_advertise_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_advertise_address | length > 0 else 'absent' }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add session server session_timeout to config", "module": "win_lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add session server session_timeout to config", "when": "gitlab_runner_session_server_session_timeout", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*session_timeout =", "line": "  session_timeout = {{ gitlab_runner_session_server_session_timeout }}", "insertafter": "^\\s*\\[session_server\\]", "state": "present"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "Unix.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "tasks": [{"py/object": "struct4.Task", "name": "Install GitLab Runner (Debian)", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (Debian)", "when": "ansible_os_family == 'Debian'"}, "module_options": "install-debian.yml", "executable": "install-debian.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (RedHat)", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (RedHat)", "when": "ansible_os_family == 'RedHat'"}, "module_options": "install-redhat.yml", "executable": "install-redhat.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (macOS)", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (macOS)", "when": "ansible_os_family == 'Darwin'"}, "module_options": "install-macos.yml", "executable": "install-macos.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (Arch)", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (Arch)", "when": "ansible_os_family == 'Archlinux'"}, "module_options": "install-arch.yml", "executable": "install-arch.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Unix) List configured runners", "module": "command", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) List configured runners", "register": "configured_runners", "changed_when": false, "check_mode": false, "become": true}, "module_options": "{{ gitlab_runner_executable }} list", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Unix) Check runner is registered", "module": "command", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) Check runner is registered", "register": "verified_runners", "ignore_errors": true, "changed_when": false, "check_mode": false, "become": true}, "module_options": "{{ gitlab_runner_executable }} verify", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Unix) Register GitLab Runner", "module": "include_tasks", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) Register GitLab Runner", "when": "gitlab_runner.token is defined or gitlab_runner_registration_token | string | length > 0", "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "register-runner.yml", "executable": "register-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set global options (macOS/Debian/RedHat)", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Set global options (macOS/Debian/RedHat)"}, "module_options": "global-setup.yml", "executable": "global-setup.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Unix) Configure GitLab Runner", "module": "import_tasks", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) Configure GitLab Runner"}, "module_options": "config-runners.yml", "executable": "config-runners.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Container) Pull Image from Registry", "module": "docker_image", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml", "options": {"name": "(Container) Pull Image from Registry"}, "module_options": {"name": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "source": "pull"}, "executable": "docker_image", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Define Container volume Path", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml", "options": {"name": "(Container) Define Container volume Path"}, "module_options": {"state": "directory", "path": "{{ gitlab_runner_container_mount_path }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "line-config-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) {{ line_name_prefix }} Ensure section exists", "module": "win_lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml", "options": {"name": "(Windows) {{ line_name_prefix }} Ensure section exists"}, "module_options": {"path": "{{ temp_runner_config.path }}", "regexp": "^(\\s*)\\[{{ section|regex_escape }}\\]$", "line": "{{ \"  \" * (section.split(\".\")|length -1) }}[{{ section }}]"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ line_name_prefix }} Modify existing line", "module": "win_lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml", "options": {"name": "(Windows) {{ line_name_prefix }} Modify existing line", "register": "modified_config_line"}, "module_options": {"path": "{{ temp_runner_config.path }}", "insertafter": "\\s+\\[{{ section | regex_escape }}\\]", "regexp": "^(\\s*)({{ line | to_json | regex_escape }}|{{ line | regex_escape }}) =.*", "line": "{{ \"  \" * (section.split(\".\")|length) }}{{ line | to_json }} = {{ gitlab_runner.extra_configs[section][line] | to_json }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "line-config-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ line_name_prefix }} Ensure section exists", "module": "lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml", "options": {"name": "{{ line_name_prefix }} Ensure section exists"}, "module_options": {"path": "{{ temp_runner_config.path }}", "regexp": "^(\\s*)\\[{{ section|regex_escape }}\\]$", "line": "{{ \"  \" * (section.split(\".\")|length -1) }}[{{ section }}]"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ line_name_prefix }} Modify existing line", "module": "lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml", "options": {"name": "{{ line_name_prefix }} Modify existing line", "register": "modified_config_line"}, "module_options": {"path": "{{ temp_runner_config.path }}", "insertafter": "\\s+\\[{{ section | regex_escape }}\\]", "regexp": "^(\\s*)({{ line | to_json | regex_escape }}|{{ line | regex_escape }}) =", "line": "{{ \"  \" * (section.split(\".\")|length) }}{{ line | to_json }} = {{ gitlab_runner.extra_configs[section][line] | to_json }}"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-debian.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian) Get Gitlab repository installation script", "module": "get_url", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Get Gitlab repository installation script", "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": {"url": "https://packages.gitlab.com/install/repositories/runner/{{ gitlab_runner_package_name }}/script.deb.sh", "dest": "/tmp/gitlab-runner.script.deb.sh", "mode": 484}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Install Gitlab repository", "module": "command", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Install Gitlab repository", "args": {"creates": "/etc/apt/sources.list.d/runner_{{ gitlab_runner_package_name }}.list"}, "become": true, "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": "bash /tmp/gitlab-runner.script.deb.sh", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Update gitlab_runner_package_name", "module": "set_fact", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Update gitlab_runner_package_name", "when": "gitlab_runner_package_version is defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}={{ gitlab_runner_package_version }}", "gitlab_runner_package_state": "present"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Set gitlab_runner_package_name", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Set gitlab_runner_package_name", "when": "gitlab_runner_package_version is not defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}", "gitlab_runner_package_state": "latest"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Install GitLab Runner", "module": "apt", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Install GitLab Runner", "become": true, "environment": {"GITLAB_RUNNER_DISABLE_SKEL": "true"}, "when": "ansible_distribution_release in [\"buster\", \"focal\"]"}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Install GitLab Runner", "module": "apt", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Install GitLab Runner", "become": true, "when": "ansible_distribution_release not in [\"buster\", \"focal\"]"}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Remove ~/gitlab-runner/.bash_logout on debian buster and ubuntu focal", "module": "file", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Remove ~/gitlab-runner/.bash_logout on debian buster and ubuntu focal", "when": "ansible_distribution_release in [\"buster\", \"focal\"]"}, "module_options": {"path": "/home/gitlab-runner/.bash_logout", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set systemd reload options", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "Set systemd reload options"}, "module_options": "systemd-reload.yml", "executable": "systemd-reload.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "config-runners.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "tasks": [{"py/object": "struct4.Task", "name": "Get existing config.toml", "module": "slurp", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Get existing config.toml", "register": "runner_config_file", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"src": "{{ gitlab_runner_config_file }}"}, "executable": "slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get pre-existing runner configs", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Get pre-existing runner configs"}, "module_options": {"runner_configs": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]\n') }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create temporary directory", "module": "tempfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Create temporary directory", "register": "temp_runner_config_dir", "check_mode": false, "changed_when": false}, "module_options": {"state": "directory", "suffix": "gitlab-runner-config"}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Write config section for each runner", "module": "vars", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Write config section for each runner", "include_tasks": "config-runner.yml", "loop": "{{ runner_configs }}", "loop_control": {"index_var": "runner_config_index", "loop_var": "runner_config"}}, "module_options": {"conf_name_prefix": "conf[{{ (runner_config_index|int) + 1 }}/{{ runner_configs|length }}]:"}, "executable": "vars", "executable_type": "Module", "fqcn": "ansible.builtin.vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "Assemble new config.toml", "module": "assemble", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Assemble new config.toml", "become": "{{ gitlab_runner_system_mode }}", "diff": "{{ gitlab_runner_show_config_diff|bool }}"}, "module_options": {"src": "{{ temp_runner_config_dir.path }}", "dest": "{{ gitlab_runner_config_file }}", "delimiter": "[[runners]]\\n", "backup": true, "validate": "{{ gitlab_runner_executable }} verify -c %s", "mode": 384}, "executable": "assemble", "executable_type": "Module", "fqcn": "ansible.builtin.assemble", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "config-runners-container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "tasks": [{"py/object": "struct4.Task", "name": "Get existing config.toml", "module": "slurp", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Get existing config.toml", "register": "runner_config_file"}, "module_options": {"src": "{{ gitlab_runner_config_file }}"}, "executable": "slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get pre-existing runner configs", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Get pre-existing runner configs"}, "module_options": {"runner_configs": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]\n') }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create temporary directory", "module": "tempfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Create temporary directory", "register": "temp_runner_config_dir", "check_mode": false, "changed_when": false}, "module_options": {"state": "directory", "suffix": "gitlab-runner-config"}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Write config section for each runner", "module": "vars", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Write config section for each runner", "include_tasks": "config-runner-container.yml", "loop": "{{ runner_configs }}", "loop_control": {"index_var": "runner_config_index", "loop_var": "runner_config"}}, "module_options": {"conf_name_prefix": "conf[{{ (runner_config_index|int) + 1 }}/{{ runner_configs|length }}]:"}, "executable": "vars", "executable_type": "Module", "fqcn": "ansible.builtin.vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "Assemble new config.toml", "module": "assemble", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Assemble new config.toml"}, "module_options": {"src": "{{ temp_runner_config_dir.path }}", "dest": "{{ gitlab_runner_config_file }}", "delimiter": "[[runners]]\\n", "backup": true, "validate": "docker run -i --rm -v %s:/gitlab-runner.conf\n{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}\nverify -c /gitlab-runner.conf\n", "mode": 384}, "executable": "assemble", "executable_type": "Module", "fqcn": "ansible.builtin.assemble", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "register-runner-container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "tasks": [{"py/object": "struct4.Task", "name": "remove config.toml file", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "options": {"name": "remove config.toml file"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure config.toml exists", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "options": {"name": "Ensure config.toml exists"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Register runner to GitLab", "module": "docker_container", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "options": {"name": "Register runner to GitLab", "when": "(verified_runners.container.Output.find(\"Verifying runner... is removed\") != -1) or ((configured_runners.container.Output.find('\\n' + gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)) == -1) and (gitlab_runner.state|default('present') == 'present'))", "no_log": false}, "module_options": {"name": "{{ gitlab_runner_container_name }}", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "command": "register\n--non-interactive\n--url '{{ gitlab_runner.url | default(gitlab_runner_coordinator_url) }}'\n--registration-token '{{ gitlab_runner.token|default(gitlab_runner_registration_token) }}'\n--description '{{ gitlab_runner.name|default(ansible_hostname+\"-\"+gitlab_runner_index|string) }}'\n--tag-list '{{ gitlab_runner.tags|default([]) | join(\",\") }}'\n{% if gitlab_runner.clone_url|default(false) %}\n--clone-url \"{{ gitlab_runner.clone_url }}\"\n{% endif %}\n{% if gitlab_runner.run_untagged|default(true) %}\n--run-untagged\n{% endif %}\n{% if gitlab_runner.protected|default(false) %}\n--access-level=\"ref_protected\"\n{% endif %}\n--executor '{{ gitlab_runner.executor|default(\"shell\") }}'\n--limit '{{ gitlab_runner.concurrent_specific|default(0) }}'\n--output-limit '{{ gitlab_runner.output_limit|default(4096) }}'\n--locked='{{ gitlab_runner.locked|default(false) }}'\n{% for env_var in gitlab_runner.env_vars|default([]) %}\n--env '{{ env_var }}'\n{% endfor %}\n{% if gitlab_runner.pre_clone_script|default(false) %}\n--pre-clone-script \"{{ gitlab_runner.pre_clone_script }}\"\n{% endif %}\n{% if gitlab_runner.pre_build_script|default(false) %}\n--pre-build-script \"{{ gitlab_runner.pre_build_script }}\"\n{% endif %}\n{% if gitlab_runner.post_build_script|default(false) %}\n--post-build-script \"{{ gitlab_runner.post_build_script }}\"\n{% endif %}\n--docker-image '{{ gitlab_runner.docker_image|default(\"alpine\") }}'\n{% if gitlab_runner.docker_privileged|default(false) %}\n--docker-privileged\n{% endif %}\n{% if gitlab_runner.docker_tlsverify|default(false) %}\n--docker-tlsverify '{{ gitlab_runner.docker_tlsverify|default(\"true\") }}'\n{% endif %}\n{% if gitlab_runner.docker_dns|default(false) %}\n--docker-dns '{{ gitlab_runner.docker_dns|default(\"1.1.1.1\") }}'\n{% endif %}\n{% if gitlab_runner.docker_dns_search|default(false) %}\n--docker-dns-search '{{ gitlab_runner.docker_dns_search|default([]) }}'\n{% endif %}\n{% if gitlab_runner.docker_disable_cache|default(false) %}\n--docker-disable-cache\n{% endif %}\n{% if gitlab_runner.docker_oom_kill_disable|default(false) %}\n--docker-oom-kill-disable '{{ gitlab_runner.docker_oom_kill_disable|default(\"false\") }}'\n{% endif %}\n{% for volume in gitlab_runner.docker_volumes | default([]) %}\n--docker-volumes \"{{ volume }}\"\n{% endfor %}\n{% for device in gitlab_runner.docker_devices | default([]) %}\n--docker-devices \"{{ device }}\"\n{% endfor %}\n--ssh-user '{{ gitlab_runner.ssh_user|default(\"\") }}'\n--ssh-host '{{ gitlab_runner.ssh_host|default(\"\") }}'\n--ssh-port '{{ gitlab_runner.ssh_port|default(\"\") }}'\n--ssh-password '{{ gitlab_runner.ssh_password|default(\"\") }}'\n--ssh-identity-file '{{ gitlab_runner.ssh_identity_file|default(\"\") }}'\n{% if gitlab_runner.cache_type is defined %}\n--cache-type '{{ gitlab_runner.cache_type }}'\n{% endif %}\n{% if gitlab_runner.cache_shared|default(false) %}\n--cache-shared\n{% endif %}\n{% if gitlab_runner.cache_path is defined %}\n--cache-path '{{ gitlab_runner.cache_path }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_server_address is defined %}\n--cache-s3-server-address '{{ gitlab_runner.cache_s3_server_address }}'\n{% if gitlab_runner.cache_s3_access_key is defined %}\n--cache-s3-access-key '{{ gitlab_runner.cache_s3_access_key }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_secret_key is defined %}\n--cache-s3-secret-key '{{ gitlab_runner.cache_s3_secret_key }}'\n{% endif %}\n{% endif %}\n{% if gitlab_runner.cache_s3_bucket_name is defined %}\n--cache-s3-bucket-name '{{ gitlab_runner.cache_s3_bucket_name }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_bucket_location is defined %}\n--cache-s3-bucket-location '{{ gitlab_runner.cache_s3_bucket_location }}'\n{% endif %}\n{% if gitlab_runner.builds_dir|default(false) %}\n--builds-dir '{{ gitlab_runner.builds_dir }}'\n{% endif %}\n{% if gitlab_runner.cache_dir|default(false) %}\n--cache-dir '{{ gitlab_runner.cache_dir }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_insecure|default(false) %}\n--cache-s3-insecure\n{% endif %}\n{% if gitlab_runner.extra_registration_option is defined %}\n{{ gitlab_runner.extra_registration_option }}\n{% endif %}\n", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}], "cleanup": true, "auto_remove": true, "network_mode": "{{ gitlab_runner_container_network }}"}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) Check gitlab-runner executable exists", "module": "win_stat", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Check gitlab-runner executable exists", "register": "gitlab_runner_exists"}, "module_options": {"path": "{{ gitlab_runner_executable }}"}, "executable": "win_stat", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Set fact -> gitlab_runner_exists", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Set fact -> gitlab_runner_exists"}, "module_options": {"gitlab_runner_exists": "{{ gitlab_runner_exists.stat.exists }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Get existing version", "module": "win_shell", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Get existing version", "register": "existing_version_shell", "failed_when": false, "check_mode": false, "changed_when": false}, "module_options": "{{ gitlab_runner_executable }} --version | Select-String 'Version:' -CaseSensitive | %{ $_.Line.Split(' ')[-1].Trim(); }", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Set fact -> gitlab_runner_existing_version", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Set fact -> gitlab_runner_existing_version"}, "module_options": {"gitlab_runner_existing_version": "{{ existing_version_shell.stdout | trim if existing_version_shell.rc == 0 else '0' }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Ensure install directory exists", "module": "win_file", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Ensure install directory exists"}, "module_options": {"path": "{{ gitlab_runner_install_directory }}", "state": "directory"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Download GitLab Runner", "module": "win_get_url", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "win_get_url", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Install GitLab Runner", "module": "win_command", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Install GitLab Runner", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "when": "(gitlab_runner_windows_service_user | length == 0) or (gitlab_runner_windows_service_password | length == 0)"}, "module_options": "{{ gitlab_runner_executable }} install", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Install GitLab Runner", "module": "win_command", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Install GitLab Runner", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "when": ["gitlab_runner_windows_service_user | length > 0", "gitlab_runner_windows_service_password | length > 0"]}, "module_options": "{{ gitlab_runner_executable }} install --user \"{{ gitlab_runner_windows_service_user }}\" --password \"{{ gitlab_runner_windows_service_password }}\"", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Make sure runner is stopped", "module": "win_command", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Make sure runner is stopped", "ignore_errors": true, "when": ["gitlab_runner_exists"]}, "module_options": "{{ gitlab_runner_executable }} stop", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Download GitLab Runner", "module": "win_get_url", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "win_get_url", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "register-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "remove config.toml file", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "remove config.toml file", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create .gitlab-runner dir", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Create .gitlab-runner dir", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory", "mode": "0700"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure config.toml exists", "module": "file", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Ensure config.toml exists", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Construct the runner command without secrets", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Construct the runner command without secrets"}, "module_options": {"command": "{{ gitlab_runner_executable }} register --non-interactive --url '{{ gitlab_runner.url|default(gitlab_runner_coordinator_url) }}' --description '{{ gitlab_runner.name|default(ansible_hostname+\"-\"+gitlab_runner_index|string) }}' --tag-list '{{ gitlab_runner.tags|default([]) | join(\",\") }}' {% if gitlab_runner.clone_url|default(false) %} --clone-url \"{{ gitlab_runner.clone_url }}\" {% endif %} {% if gitlab_runner.run_untagged|default(true) %} --run-untagged {% endif %} {% if gitlab_runner.protected|default(false) %} --access-level=\"ref_protected\" {% endif %} --executor '{{ gitlab_runner.executor|default(\"shell\") }}' {% if gitlab_runner.shell is defined %} --shell '{{ gitlab_runner.shell }}' {% endif %} --limit '{{ gitlab_runner.concurrent_specific|default(0) }}' --output-limit '{{ gitlab_runner.output_limit|default(4096) }}' --locked='{{ gitlab_runner.locked|default(false) }}' {% for env_var in gitlab_runner.env_vars|default([]) %} --env '{{ env_var }}' {% endfor %} {% if gitlab_runner.pre_clone_script|default(false) %} --pre-clone-script \"{{ gitlab_runner.pre_clone_script }}\" {% endif %} {% if gitlab_runner.pre_build_script|default(false) %} --pre-build-script \"{{ gitlab_runner.pre_build_script }}\" {% endif %} {% if gitlab_runner.tls_ca_file|default(false) %} --tls-ca-file \"{{ gitlab_runner.tls_ca_file }}\" {% endif %} {% if gitlab_runner.post_build_script|default(false) %} --post-build-script \"{{ gitlab_runner.post_build_script }}\" {% endif %} --docker-image '{{ gitlab_runner.docker_image|default(\"alpine\") }}' {% if gitlab_runner.docker_helper_image is defined %} --docker-helper-image \"{{ gitlab_runner.docker_helper_image }}\" {% endif %} {% if gitlab_runner.docker_privileged|default(false) %} --docker-privileged {% endif %} {% if gitlab_runner.docker_wait_for_services_timeout|default(false) %} --docker-wait-for-services-timeout '{{ gitlab_runner.docker_wait_for_services_timeout|default(30) }}' {% endif %} {% if gitlab_runner.docker_tlsverify|default(false) %} --docker-tlsverify '{{ gitlab_runner.docker_tlsverify|default(\"true\") }}' {% endif %} {% if gitlab_runner.docker_disable_cache|default(false) %} --docker-disable-cache '{{ gitlab_runner.docker_disable_cache|default(\"false\") }}' {% endif %} {% if gitlab_runner.docker_dns|default(false) %} --docker-dns '{{ gitlab_runner.docker_dns|default(\"1.1.1.1\") }}' {% endif %} {% if gitlab_runner.docker_dns_search|default(false) %} --docker-dns-search '{{ gitlab_runner.docker_dns_search|default([]) }}' {% endif %} {% if gitlab_runner.docker_disable_cache|default(false) %} --docker-disable-cache {% endif %} {% if gitlab_runner.docker_oom_kill_disable|default(false) %} --docker-oom-kill-disable '{{ gitlab_runner.docker_oom_kill_disable|default(\"false\") }}' {% endif %} {% for policy in gitlab_runner.docker_pull_policy|default([]) %} --docker-pull-policy \"{{ policy }}\" {% endfor %} {% for volume in gitlab_runner.docker_volumes|default([]) %} --docker-volumes \"{{ volume }}\" {% endfor %} {% for device in gitlab_runner.docker_devices|default([]) %} --docker-devices \"{{ device }}\" {% endfor %} --ssh-user '{{ gitlab_runner.ssh_user|default(\"\") }}' --ssh-host '{{ gitlab_runner.ssh_host|default(\"\") }}' --ssh-port '{{ gitlab_runner.ssh_port|default(\"\") }}' --ssh-identity-file '{{ gitlab_runner.ssh_identity_file|default(\"\") }}' {% if gitlab_runner.executor == \"virtualbox\" and gitlab_runner.virtualbox_base_name %}\n    --virtualbox-base-name '{{ gitlab_runner.virtualbox_base_name }}'\n    --virtualbox-base-snapshot '{{ gitlab_runner.virtualbox_base_snapshot|default(\"\") }}'\n    --virtualbox-base-folder '{{ gitlab_runner.virtualbox_base_folder|default(\"\") }}'\n    --virtualbox-disable-snapshots='{{ gitlab_runner.virtualbox_disable_snapshots|default(false) }}'\n{% endif %} {% if gitlab_runner.cache_type is defined %} --cache-type '{{ gitlab_runner.cache_type }}' {% endif %} {% if gitlab_runner.cache_shared|default(false) %} --cache-shared {% endif %} {% if gitlab_runner.cache_path is defined %} --cache-path '{{ gitlab_runner.cache_path }}' {% endif %} {% if gitlab_runner.cache_s3_server_address is defined %} --cache-s3-server-address '{{ gitlab_runner.cache_s3_server_address }}' {% if gitlab_runner.cache_s3_access_key is defined %} --cache-s3-access-key '{{ gitlab_runner.cache_s3_access_key }}' {% endif %} {% endif %} {% if gitlab_runner.cache_s3_bucket_name is defined %} --cache-s3-bucket-name '{{ gitlab_runner.cache_s3_bucket_name }}' {% endif %} {% if gitlab_runner.cache_s3_bucket_location is defined %} --cache-s3-bucket-location '{{ gitlab_runner.cache_s3_bucket_location }}' {% endif %} {% if gitlab_runner.builds_dir|default(false) %} --builds-dir '{{ gitlab_runner.builds_dir }}' {% endif %} {% if gitlab_runner.custom_build_dir_enabled|default(false) %} --custom_build_dir-enabled '{{ gitlab_runner.custom_build_dir_enabled }}' {% endif %} {% if gitlab_runner.cache_dir|default(false) %} --cache-dir '{{ gitlab_runner.cache_dir }}' {% endif %} {% if gitlab_runner.cache_s3_insecure|default(false) %} --cache-s3-insecure {% endif %} {% if gitlab_runner.extra_registration_option is defined %} {{ gitlab_runner.extra_registration_option }} {% endif %}\n"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Register runner to GitLab", "module": "command", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Register runner to GitLab", "when": "(verified_runners.stderr.find(\"Verifying runner... is removed\") != -1) or ((configured_runners.stderr.find('\\n' + gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)) == -1) and (gitlab_runner.state|default('present') == 'present'))", "no_log": true, "become": "{{ gitlab_runner_system_mode }}"}, "module_options": "{{ command }} --registration-token '{{ gitlab_runner.token|default(gitlab_runner_registration_token) }}' {% if gitlab_runner.cache_s3_secret_key is defined %} --cache-s3-secret-key '{{ gitlab_runner.cache_s3_secret_key }}' {% endif %} --ssh-password '{{ gitlab_runner.ssh_password|default(\"\") }}'\n", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "section-config-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner.yml", "options": {"vars": {"line_name_prefix": "{{ sect_name_prefix }} line:[{{ (line_index|int) + 1 }}/{{ gitlab_runner.extra_configs[section]|list|length }}]: "}, "loop": "{{ gitlab_runner.extra_configs[section] | list }}", "loop_control": {"loop_var": "line", "index_var": "line_index"}}, "module_options": "line-config-runner.yml", "executable": "line-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "config-runner-container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Create temporary file", "module": "tempfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"name": "{{ conf_name_prefix }} Create temporary file", "register": "temp_runner_config", "check_mode": false, "changed_when": false}, "module_options": {"state": "file", "path": "{{ temp_runner_config_dir.path }}", "prefix": "gitlab-runner.{{ runner_config_index }}."}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Isolate runner configuration", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"name": "{{ conf_name_prefix }} Isolate runner configuration", "check_mode": false, "changed_when": false}, "module_options": {"dest": "{{ temp_runner_config.path }}", "content": "{{ runner_config }}"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"vars": {"runn_name_prefix": "{{ conf_name_prefix }} runner[{{ (gitlab_runner_index|int) + 1 }}/{{ gitlab_runner_runners|length }}]:"}, "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'present'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "update-config-runner.yml", "executable": "update-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Remove runner config", "module": "file", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"name": "{{ conf_name_prefix }} Remove runner config", "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'absent'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": {"path": "{{ temp_runner_config.path }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "Container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Container) Install Gitlab Runner", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Install Gitlab Runner", "when": "gitlab_runner_container_install"}, "module_options": "install-container.yml", "executable": "install-container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) List configured runners", "module": "docker_container", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) List configured runners", "register": "configured_runners", "changed_when": false, "check_mode": false}, "module_options": {"name": "{{ gitlab_runner_container_name }}-list", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "command": "list", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}], "cleanup": true, "interactive": true, "tty": true, "detach": false}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Check runner is registered", "module": "docker_container", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Check runner is registered", "register": "verified_runners", "ignore_errors": true, "changed_when": false, "check_mode": false}, "module_options": {"name": "{{ gitlab_runner_container_name }}-check", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "command": "verify", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}], "cleanup": true, "interactive": true, "tty": true, "detach": false}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "configured_runners?", "module": "debug", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "configured_runners?"}, "module_options": {"msg": "{{ configured_runners.container.Output }}"}, "executable": "debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, {"py/object": "struct4.Task", "name": "verified_runners?", "module": "debug", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "verified_runners?"}, "module_options": {"msg": "{{ verified_runners.container.Output }}"}, "executable": "debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Register GitLab Runner", "module": "include_tasks", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Register GitLab Runner", "when": "gitlab_runner.token is defined or gitlab_runner_registration_token | string | length > 0", "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "register-runner-container.yml", "executable": "register-runner-container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Set global options", "module": "import_tasks", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Set global options"}, "module_options": "global-setup.yml", "executable": "global-setup.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Configure GitLab Runner", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Configure GitLab Runner"}, "module_options": "config-runners-container.yml", "executable": "config-runners-container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Start the container", "module": "docker_container", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Start the container"}, "module_options": {"name": "{{ gitlab_runner_container_name }}", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "restart_policy": "{{ gitlab_runner_container_restart_policy }}", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}, {"type": "bind", "source": "/var/run/docker.sock", "target": "/var/run/docker.sock"}], "network_mode": "{{ gitlab_runner_container_network }}"}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "register-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) remove config.toml file", "module": "win_file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) remove config.toml file"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "absent"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Create .gitlab-runner dir", "module": "win_file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) Create .gitlab-runner dir"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Ensure config.toml exists", "module": "win_file", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) Ensure config.toml exists"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Register runner to GitLab", "module": "win_shell", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) Register runner to GitLab", "when": "(verified_runners.stderr.find(\"Verifying runner... is removed\") != -1) or ((configured_runners.stderr.find('\\n' + gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)) == -1) and (gitlab_runner.state|default('present') == 'present'))", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}}, "module_options": "{{ gitlab_runner_executable }} register --non-interactive --url '{{ gitlab_runner.url|default(gitlab_runner_coordinator_url) }}' --registration-token '{{ gitlab_runner.token|default(gitlab_runner_registration_token) }}' --description '{{ gitlab_runner.name|default(ansible_hostname+\"-\"+gitlab_runner_index|string) }}' --tag-list '{{ gitlab_runner.tags|default([]) | join(\",\") }}' {% if gitlab_runner.clone_url|default(false) %} --clone-url \"{{ gitlab_runner.clone_url }}\" {% endif %} {% if gitlab_runner.run_untagged|default(true) %} --run-untagged {% endif %} {% if gitlab_runner.protected|default(false) %} --access-level=\"ref_protected\" {% endif %} --executor '{{ gitlab_runner.executor|default(\"shell\") }}' {% if gitlab_runner.shell is defined %} --shell '{{ gitlab_runner.shell }}' {% endif %} --limit '{{ gitlab_runner.concurrent_specific|default(0) }}' --output-limit '{{ gitlab_runner.output_limit|default(4096) }}' --locked='{{ gitlab_runner.locked|default(false) }}' {% for env_var in gitlab_runner.env_vars|default([]) %} --env '{{ env_var }}' {% endfor %} {% if gitlab_runner.pre_clone_script|default(false) %} --pre-clone-script \"{{ gitlab_runner.pre_clone_script }}\" {% endif %} {% if gitlab_runner.pre_build_script|default(false) %} --pre-build-script \"{{ gitlab_runner.pre_build_script }}\" {% endif %} {% if gitlab_runner.post_build_script|default(false) %} --post-build-script \"{{ gitlab_runner.post_build_script }}\" {% endif %} --docker-image '{{ gitlab_runner.docker_image|default(\"alpine\") }}' {% if gitlab_runner.docker_privileged|default(false) %} --docker-privileged {% endif %} {% for volume in gitlab_runner.docker_volumes | default([]) %} --docker-volumes \"{{ volume }}\" {% endfor %} {% for device in gitlab_runner.docker_devices | default([]) %} --docker-devices \"{{ device }}\" {% endfor %} {% if gitlab_runner.ssh_user is defined %} --ssh-user '{{ gitlab_runner.ssh_user }}' {% endif %} {% if gitlab_runner.ssh_host is defined %} --ssh-host '{{ gitlab_runner.ssh_host }}' {% endif %} {% if gitlab_runner.ssh_port is defined %} --ssh-port '{{ gitlab_runner.ssh_port }}' {% endif %} {% if gitlab_runner.ssh_password is defined %} --ssh-password '{{ gitlab_runner.ssh_password }}' {% endif %} {% if gitlab_runner.ssh_identity_file is defined %} --ssh-identity-file '{{ gitlab_runner.ssh_identity_file }}' {% endif %} {% if gitlab_runner.cache_type is defined %} --cache-type '{{ gitlab_runner.cache_type }}' {% endif %} {% if gitlab_runner.cache_shared|default(false) %} --cache-shared {% endif %} {% if gitlab_runner.cache_path is defined %} --cache-path '{{ gitlab_runner.cache_path }}' {% endif %} {% if gitlab_runner.cache_s3_server_address is defined %} --cache-s3-server-address '{{ gitlab_runner.cache_s3_server_address }}' {% endif %} {% if gitlab_runner.cache_s3_access_key is defined %} --cache-s3-access-key '{{ gitlab_runner.cache_s3_access_key }}' {% endif %} {% if gitlab_runner.cache_s3_secret_key is defined %} --cache-s3-secret-key '{{ gitlab_runner.cache_s3_secret_key }}' {% endif %} {% if gitlab_runner.cache_s3_bucket_name is defined %} --cache-s3-bucket-name '{{ gitlab_runner.cache_s3_bucket_name }}' {% endif %} {% if gitlab_runner.cache_s3_bucket_location is defined %} --cache-s3-bucket-location '{{ gitlab_runner.cache_s3_bucket_location }}' {% endif %} {% if gitlab_runner.builds_dir|default(false) %} --builds-dir '{{ gitlab_runner.builds_dir }}' {% endif %} {% if gitlab_runner.cache_dir|default(false) %} --cache-dir '{{ gitlab_runner.cache_dir }}' {% endif %} {% if gitlab_runner.cache_s3_insecure|default(false) %} --cache-s3-insecure {% endif %} {% if gitlab_runner.extra_registration_option is defined %} {{ gitlab_runner.extra_registration_option }} {% endif %}\n", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-macos.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "tasks": [{"py/object": "struct4.Task", "name": "(MacOS) Check gitlab-runner executable exists", "module": "stat", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Check gitlab-runner executable exists", "register": "gitlab_runner_exists"}, "module_options": {"path": "{{ gitlab_runner_executable }}"}, "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Set fact -> gitlab_runner_exists", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Set fact -> gitlab_runner_exists"}, "module_options": {"gitlab_runner_exists": "{{ gitlab_runner_exists.stat.exists }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Get existing version", "module": "shell", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Get existing version", "register": "existing_version_shell", "failed_when": false, "check_mode": false, "changed_when": false}, "module_options": "{{ gitlab_runner_executable }} --version | awk '/Version: ([\\d\\.]*)/{print $2}'", "executable": "shell", "executable_type": "Module", "fqcn": "ansible.builtin.shell", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Set fact -> gitlab_runner_existing_version", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Set fact -> gitlab_runner_existing_version"}, "module_options": {"gitlab_runner_existing_version": "{{ existing_version_shell.stdout if existing_version_shell.rc == 0 else '0' }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Precreate gitlab-runner log directory", "module": "file", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Precreate gitlab-runner log directory", "become": true, "when": "gitlab_runner_arch == 'arm64'"}, "module_options": {"path": "/usr/local/var/log", "state": "directory", "owner": "{{ ansible_user_id | string }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Download GitLab Runner", "module": "get_url", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Setting Permissions for gitlab-runner executable", "module": "file", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Setting Permissions for gitlab-runner executable"}, "module_options": {"path": "{{ gitlab_runner_executable }}", "owner": "{{ ansible_user_id | string }}", "group": "{{ ansible_user_gid | string }}", "mode": "+x"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Install GitLab Runner", "module": "command", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Install GitLab Runner"}, "module_options": "{{ gitlab_runner_executable }} install", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Start GitLab Runner", "module": "command", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Start GitLab Runner", "when": "gitlab_runner_macos_start_runner"}, "module_options": "{{ gitlab_runner_executable }} start", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Stop GitLab Runner", "module": "command", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Stop GitLab Runner"}, "module_options": "{{ gitlab_runner_executable }} stop", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Download GitLab Runner", "module": "get_url", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Setting Permissions for gitlab-runner executable", "module": "file", "index": 11, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Setting Permissions for gitlab-runner executable", "become": true}, "module_options": {"path": "{{ gitlab_runner_executable }}", "owner": "{{ ansible_user_id | string }}", "group": "{{ ansible_user_gid | string }}", "mode": "+x"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Start GitLab Runner", "module": "command", "index": 12, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Start GitLab Runner"}, "module_options": "{{ gitlab_runner_executable }} start", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "update-config-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set \"[[runners]]\" section", "module": "win_lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set \"[[runners]]\" section", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "\\n", "line": "[[runners]]", "state": "present", "insertbefore": "^\\s*name =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set concurrent limit option", "module": "win_lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set concurrent limit option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*limit =.*", "line": "  limit = {{ gitlab_runner.concurrent_specific|default(0) }}", "state": "present", "insertafter": "^\\s*name =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set coordinator URL", "module": "win_lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set coordinator URL", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*url =.*", "line": "  url = {{ gitlab_runner.url|default(gitlab_runner_coordinator_url) | to_json }}", "state": "present", "insertafter": "^\\s*limit =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set clone URL", "module": "win_lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set clone URL", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.clone_url is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*clone_url =", "line": "  clone_url = {{ gitlab_runner.clone_url | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set environment option", "module": "win_lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set environment option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*environment =.*", "line": "  environment = {{ gitlab_runner.env_vars|default([]) | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set pre_clone_script", "module": "win_lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set pre_clone_script", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.pre_clone_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_clone_script =", "line": "  pre_clone_script = {{ gitlab_runner.pre_clone_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set pre_build_script", "module": "win_lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set pre_build_script", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.pre_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_build_script =", "line": "  pre_build_script = {{ gitlab_runner.pre_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set post_build_script", "module": "win_lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set post_build_script", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.post_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*post_build_script =", "line": "  post_build_script = {{ gitlab_runner.post_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set runner executor option", "module": "win_lineinfile", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set runner executor option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*executor =.*", "line": "  executor = {{ gitlab_runner.executor|default(\"shell\") | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set runner shell option", "module": "win_lineinfile", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set runner shell option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*shell =.*", "line": "  shell = {{ gitlab_runner.shell|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.shell is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set output_limit option", "module": "win_lineinfile", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set output_limit option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*output_limit =.*", "line": "  output_limit = {{ gitlab_runner.output_limit|default(4096) }}", "state": "present", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set runner docker image option", "module": "win_lineinfile", "index": 11, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set runner docker image option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*image =.*", "line": "  image = {{ gitlab_runner.docker_image|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_image is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set docker privileged option", "module": "win_lineinfile", "index": 12, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set docker privileged option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*privileged =.*", "line": "  privileged = {{ gitlab_runner.docker_privileged|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_privileged is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set docker volumes option", "module": "win_lineinfile", "index": 13, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set docker volumes option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*volumes =.*", "line": "  volumes = {{ gitlab_runner.docker_volumes|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_volumes is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set docker devices option", "module": "win_lineinfile", "index": 14, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set docker devices option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*devices =.*", "line": "  devices = {{ gitlab_runner.docker_devices|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_devices is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache type option", "module": "win_lineinfile", "index": 15, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache type option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Type =.*", "line": "  Type = {{ gitlab_runner.cache_type|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache path option", "module": "win_lineinfile", "index": 16, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache path option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Path =.*", "line": "  Path = {{ gitlab_runner.cache_path|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_path is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 server address", "module": "win_lineinfile", "index": 17, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 server address", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*ServerAddress =.*", "line": "  ServerAddress = {{ gitlab_runner.cache_s3_server_address|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_server_address is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 access key", "module": "win_lineinfile", "index": 18, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 access key", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccessKey =.*", "line": "  AccessKey = {{ gitlab_runner.cache_s3_access_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_access_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 secret key", "module": "win_lineinfile", "index": 19, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 secret key", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*SecretKey =.*", "line": "  SecretKey = {{ gitlab_runner.cache_s3_secret_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_secret_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache shared option", "module": "win_lineinfile", "index": 20, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache shared option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Shared =.*", "line": "  Shared = {{ gitlab_runner.cache_shared|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_shared is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket name option", "module": "win_lineinfile", "index": 21, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket name option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketName =.*", "line": "  BucketName = {{ gitlab_runner.cache_s3_bucket_name|default(\"\")  | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket location option", "module": "win_lineinfile", "index": 22, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket location option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketLocation =.*", "line": "  BucketLocation = {{ gitlab_runner.cache_s3_bucket_location|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_location is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 insecure option", "module": "win_lineinfile", "index": 23, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 insecure option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Insecure =.*", "line": "  Insecure = {{ gitlab_runner.cache_s3_insecure|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_s3_insecure is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh user option", "module": "win_lineinfile", "index": 24, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh user option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*user =.*", "line": "  user = {{ gitlab_runner.ssh_user|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_user is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh host option", "module": "win_lineinfile", "index": 25, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh host option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*host =.*", "line": "  host = {{ gitlab_runner.ssh_host|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_host is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh port option", "module": "win_lineinfile", "index": 26, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh port option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*port =.*", "line": "  port = {{ gitlab_runner.ssh_port|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_port is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh password option", "module": "win_lineinfile", "index": 27, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh password option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*password =.*", "line": "  password = {{ gitlab_runner.ssh_password|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_password is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh identity file option", "module": "win_lineinfile", "index": 28, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh identity file option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*identity_file =.*", "line": "  identity_file = {{ gitlab_runner.ssh_identity_file|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_identity_file is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set builds dir file option", "module": "win_lineinfile", "index": 29, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set builds dir file option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*builds_dir =.*", "line": "  builds_dir = {{ gitlab_runner.builds_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.builds_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache dir file option", "module": "win_lineinfile", "index": 30, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache dir file option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*cache_dir =.*", "line": "  cache_dir = {{ gitlab_runner.cache_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Remove empty lines", "module": "win_shell", "index": 31, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) Remove empty lines"}, "module_options": "(Get-Content {{ temp_runner_config.path }}) | ? {$_.trim() -ne \"\" } | Set-Content {{ temp_runner_config.path }}", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 32, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"vars": {"sect_name_prefix": "{{ runn_name_prefix }} section[{{ (section_index|int) + 1 }}/{{ gitlab_runner.extra_configs|list|length }}]:"}, "loop": "{{ gitlab_runner.extra_configs|list }}", "loop_control": {"loop_var": "section", "index_var": "section_index"}, "when": ["gitlab_runner.extra_configs is defined", "gitlab_runner.extra_configs|list|length > 0"]}, "module_options": "section-config-runner-windows.yml", "executable": "section-config-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Load platform-specific variables", "module": "include_vars", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Load platform-specific variables", "vars": {"possible_files": {"files": ["{{ ansible_distribution }}.yml", "{{ ansible_os_family }}.yml", "default.yml"], "paths": ["vars"]}}}, "module_options": "{{ lookup('first_found', possible_files) }}", "executable": "include_vars", "executable_type": "Module", "fqcn": "ansible.builtin.include_vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Gitlab Runner (Container)", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Install Gitlab Runner (Container)", "when": "gitlab_runner_container_install"}, "module_options": "Container.yml", "executable": "Container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (Unix)", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Install GitLab Runner (Unix)", "when": "ansible_os_family != 'Windows' and not gitlab_runner_container_install"}, "module_options": "Unix.yml", "executable": "Unix.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (Windows)", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Install GitLab Runner (Windows)", "when": "ansible_os_family == 'Windows' and not gitlab_runner_container_install"}, "module_options": "Windows.yml", "executable": "Windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-arch.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Arch) Set gitlab_runner_package_name", "module": "set_fact", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "options": {"name": "(Arch) Set gitlab_runner_package_name", "when": "gitlab_runner_package_version is not defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}", "gitlab_runner_package_state": "latest"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Arch) Install GitLab Runner", "module": "package", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "options": {"name": "(Arch) Install GitLab Runner", "become": true}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set systemd reload options", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "options": {"name": "Set systemd reload options"}, "module_options": "systemd-reload.yml", "executable": "systemd-reload.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-redhat.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "tasks": [{"py/object": "struct4.Task", "name": "(RedHat) Get Gitlab repository installation script", "module": "get_url", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Get Gitlab repository installation script", "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": {"url": "https://packages.gitlab.com/install/repositories/runner/{{ gitlab_runner_package_name }}/script.rpm.sh", "dest": "/tmp/gitlab-runner.script.rpm.sh", "mode": 484}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RedHat) Install Gitlab repository", "module": "command", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Install Gitlab repository", "args": {"creates": "/etc/yum.repos.d/runner_{{ gitlab_runner_package_name }}.repo"}, "become": true, "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": "{% if ansible_distribution == \"Rocky\" %} env os=el dist={{ ansible_distribution_major_version }} {% endif %} bash /tmp/gitlab-runner.script.rpm.sh\n", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RedHat) Update gitlab_runner_package_name", "module": "set_fact", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Update gitlab_runner_package_name", "when": "gitlab_runner_package_version is defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}-{{ gitlab_runner_package_version }}", "gitlab_runner_package_state": "present"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RedHat) Set gitlab_runner_package_name", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Set gitlab_runner_package_name", "when": "gitlab_runner_package_version is not defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}", "gitlab_runner_package_state": "latest"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RedHat) Install GitLab Runner", "module": "package", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Install GitLab Runner", "become": true}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set systemd reload options", "module": "import_tasks", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "Set systemd reload options"}, "module_options": "systemd-reload.yml", "executable": "systemd-reload.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "config-runners-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) Get existing config.toml", "module": "slurp", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Get existing config.toml", "register": "runner_config_file"}, "module_options": {"src": "{{ gitlab_runner_config_file }}"}, "executable": "slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Get pre-existing global config", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Get pre-existing global config"}, "module_options": {"runner_global_config": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]')[0] }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Get pre-existing runner configs", "module": "set_fact", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Get pre-existing runner configs"}, "module_options": {"runner_configs": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]')[1:] }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Create temporary directory", "module": "win_tempfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Create temporary directory", "register": "temp_runner_config_dir", "check_mode": false, "changed_when": false}, "module_options": {"state": "directory", "suffix": "gitlab-runner-config"}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Write config section for each runner", "module": "vars", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Write config section for each runner", "include_tasks": "config-runner-windows.yml", "loop": "{{ runner_configs }}", "loop_control": {"index_var": "runner_config_index", "loop_var": "runner_config"}}, "module_options": {"conf_name_prefix": "conf[{{ (runner_config_index|int) + 1 }}/{{ runner_configs|length }}]:"}, "executable": "vars", "executable_type": "Module", "fqcn": "ansible.builtin.vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Create temporary file config.toml", "module": "win_tempfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Create temporary file config.toml", "register": "config_toml_temp"}, "module_options": {"state": "file", "suffix": "temp"}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Write global config to file", "module": "win_lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Write global config to file"}, "module_options": {"insertbefore": "BOF", "path": "{{ config_toml_temp.path }}", "line": "{{ runner_global_config }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Create temporary file runners-config.toml", "module": "win_tempfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Create temporary file runners-config.toml", "register": "runners_config_toml_temp"}, "module_options": {"state": "file", "suffix": "temp"}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Assemble runners files in config dir", "module": "win_shell", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Assemble runners files in config dir", "args": {"chdir": "{{ temp_runner_config_dir.path }}"}}, "module_options": "dir -rec | gc | out-file \"{{ runners_config_toml_temp.path }}\"", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Assemble new config.toml", "module": "win_shell", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Assemble new config.toml"}, "module_options": "gc \"{{ config_toml_temp.path }}\",\"{{ runners_config_toml_temp.path }}\" | Set-Content \"{{ gitlab_runner_config_file }}\"", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Verify config", "module": "win_command", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Verify config", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}}, "module_options": "{{ gitlab_runner_executable }} verify", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "config-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Create temporary file", "module": "tempfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"name": "{{ conf_name_prefix }} Create temporary file", "register": "temp_runner_config", "check_mode": false, "changed_when": false}, "module_options": {"state": "file", "path": "{{ temp_runner_config_dir.path }}", "prefix": "gitlab-runner.{{ runner_config_index }}."}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Isolate runner configuration", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"name": "{{ conf_name_prefix }} Isolate runner configuration", "check_mode": false, "changed_when": false}, "module_options": {"dest": "{{ temp_runner_config.path }}", "content": "{{ runner_config }}"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"vars": {"runn_name_prefix": "{{ conf_name_prefix }} runner[{{ (gitlab_runner_index|int) + 1 }}/{{ gitlab_runner_runners|length }}]:"}, "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'present'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "update-config-runner.yml", "executable": "update-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Remove runner config", "module": "file", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"name": "{{ conf_name_prefix }} Remove runner config", "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'absent'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": {"path": "{{ temp_runner_config.path }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}], "modules": [], "taskfiles": [], "version": "", "module_dict": {}, "task_dict": {"{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner-windows.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner-windows.yml", "options": {"vars": {"line_name_prefix": "{{ sect_name_prefix }} line:[{{ (line_index|int) + 1 }}/{{ gitlab_runner.extra_configs[section]|list|length }}]: "}, "loop": "{{ gitlab_runner.extra_configs[section] | list }}", "loop_control": {"loop_var": "line", "index_var": "line_index"}}, "module_options": "line-config-runner-windows.yml", "executable": "line-config-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Install GitLab Runner (Windows)", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "Install GitLab Runner (Windows)"}, "module_options": "install-windows.yml", "executable": "install-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Windows) List configured runners", "module": "win_command", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) List configured runners", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "register": "configured_runners", "changed_when": false, "check_mode": false}, "module_options": "{{ gitlab_runner_executable }} list", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Windows) Check runner is registered", "module": "win_command", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Check runner is registered", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "register": "verified_runners", "ignore_errors": true, "changed_when": false, "check_mode": false}, "module_options": "{{ gitlab_runner_executable }} verify", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(Windows) Register GitLab Runner", "module": "include_tasks", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Register GitLab Runner", "when": "gitlab_runner.token is defined or gitlab_runner_registration_token | string | length > 0", "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "register-runner-windows.yml", "executable": "register-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(Windows) Set global options", "module": "import_tasks", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Set global options"}, "module_options": "global-setup-windows.yml", "executable": "global-setup-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(Windows) Configure GitLab Runner", "module": "import_tasks", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Configure GitLab Runner"}, "module_options": "config-runners-windows.yml", "executable": "config-runners-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "(Windows) Start GitLab Runner", "module": "win_command", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Start GitLab Runner", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}}, "module_options": "{{ gitlab_runner_executable }} start", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set concurrent limit option", "module": "lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set concurrent limit option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*limit =", "line": "  limit = {{ gitlab_runner.concurrent_specific|default(0) }}", "state": "present", "insertafter": "^\\s*name =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set coordinator URL", "module": "lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set coordinator URL", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*url =", "line": "  url = {{ gitlab_runner.url|default(gitlab_runner_coordinator_url) | to_json }}", "state": "present", "insertafter": "^\\s*limit =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set clone URL", "module": "lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set clone URL", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.clone_url is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*clone_url =", "line": "  clone_url = {{ gitlab_runner.clone_url | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set environment option", "module": "lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set environment option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*environment =", "line": "  environment = {{ gitlab_runner.env_vars|default([]) | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set pre_clone_script", "module": "lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set pre_clone_script", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.pre_clone_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_clone_script =", "line": "  pre_clone_script = {{ gitlab_runner.pre_clone_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set pre_build_script", "module": "lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set pre_build_script", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.pre_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_build_script =", "line": "  pre_build_script = {{ gitlab_runner.pre_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set tls_ca_file", "module": "lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set tls_ca_file", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.tls_ca_file is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*tls-ca-file =", "line": "  tls-ca-file = {{ gitlab_runner.tls_ca_file | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set post_build_script", "module": "lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set post_build_script", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.post_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*post_build_script =", "line": "  post_build_script = {{ gitlab_runner.post_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner executor option", "module": "lineinfile", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner executor option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*executor =", "line": "  executor = {{ gitlab_runner.executor|default(\"shell\") | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner shell option", "module": "lineinfile", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner shell option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*shell =", "line": "  shell = {{ gitlab_runner.shell|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.shell is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner executor section", "module": "lineinfile", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner executor section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.{{ gitlab_runner.executor|default(\"shell\") }}\\]", "line": "  [runners.{{ gitlab_runner.executor|replace(\"docker+machine\",\"machine\")|default(\"shell\") }}]", "state": "{{ 'absent' if (gitlab_runner.executor|default('shell')) == 'shell' else 'present' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 11}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set output_limit option", "module": "lineinfile", "index": 11, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set output_limit option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*output_limit =", "line": "  output_limit = {{ gitlab_runner.output_limit|default(4096) }}", "state": "present", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 12}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner docker image option", "module": "lineinfile", "index": 12, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner docker image option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*image =", "line": "    image = {{ gitlab_runner.docker_image|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_image is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 13}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker helper image option", "module": "lineinfile", "index": 13, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker helper image option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*helper_image =", "line": "    helper_image = {{ gitlab_runner.docker_helper_image|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_helper_image is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 14}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker privileged option", "module": "lineinfile", "index": 14, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker privileged option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*privileged =", "line": "    privileged = {{ gitlab_runner.docker_privileged|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_privileged is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 15}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker wait_for_services_timeout option", "module": "lineinfile", "index": 15, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker wait_for_services_timeout option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*wait_for_services_timeout =", "line": "    wait_for_services_timeout = {{ gitlab_runner.docker_wait_for_services_timeout|default(30) }}", "state": "{{ 'present' if gitlab_runner.docker_wait_for_services_timeout is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 16}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker tlsverify option", "module": "lineinfile", "index": 16, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker tlsverify option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*tls_verify =", "line": "    tls_verify = {{ gitlab_runner.docker_tlsverify|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_tlsverify is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 17}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker shm_size option", "module": "lineinfile", "index": 17, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker shm_size option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*shm_size =", "line": "    shm_size = {{ gitlab_runner.docker_shm_size|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_shm_size is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 18}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker disable_cache option", "module": "lineinfile", "index": 18, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker disable_cache option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*disable_cache =", "line": "    disable_cache = {{ gitlab_runner.docker_disable_cache|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_disable_cache is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 19}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker DNS option", "module": "lineinfile", "index": 19, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker DNS option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*dns =", "line": "    dns = {{ gitlab_runner.docker_dns|default(false) | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_dns is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 20}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker DNS search option", "module": "lineinfile", "index": 20, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker DNS search option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*dns_search =", "line": "    dns_search = {{ gitlab_runner.docker_dns_search|default(false) | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_dns_search is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 21}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker pull_policy option", "module": "lineinfile", "index": 21, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker pull_policy option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pull_policy =", "line": "    pull_policy = {{ gitlab_runner.docker_pull_policy|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_pull_policy is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 22}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker volumes option", "module": "lineinfile", "index": 22, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker volumes option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*volumes =", "line": "    volumes = {{ gitlab_runner.docker_volumes|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_volumes is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 23}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker devices option", "module": "lineinfile", "index": 23, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker devices option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*devices =", "line": "    devices = {{ gitlab_runner.docker_devices|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_devices is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 24}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner docker network option", "module": "lineinfile", "index": 24, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner docker network option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*network_mode =", "line": "    network_mode = {{ gitlab_runner.docker_network_mode|default(\"bridge\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_network_mode is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 25}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set custom_build_dir section", "module": "lineinfile", "index": 25, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set custom_build_dir section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.custom_build_dir\\]", "line": "  [runners.custom_build_dir]", "state": "{{ 'present' if gitlab_runner.custom_build_dir_enabled is defined else 'absent' }}", "insertafter": "EOF", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 26}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker custom_build_dir-enabled option", "module": "lineinfile", "index": 26, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker custom_build_dir-enabled option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*enabled =", "line": "    enabled = {{ gitlab_runner.custom_build_dir_enabled|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.custom_build_dir_enabled is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.custom_build_dir\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 27}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache section", "module": "lineinfile", "index": 27, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\]", "line": "  [runners.cache]", "state": "present", "insertafter": "EOF", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 28}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 section", "module": "lineinfile", "index": 28, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\.s3\\]", "line": "    [runners.cache.s3]", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 29}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs section", "module": "lineinfile", "index": 29, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\.gcs\\]", "line": "    [runners.cache.gcs]", "state": "{{ 'present' if gitlab_runner.cache_gcs_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 30}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure section", "module": "lineinfile", "index": 30, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\.azure\\]", "line": "    [runners.cache.azure]", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 31}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache type option", "module": "lineinfile", "index": 31, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache type option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Type =", "line": "    Type = {{ gitlab_runner.cache_type|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 32}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache path option", "module": "lineinfile", "index": 32, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache path option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Path =", "line": "    Path = {{ gitlab_runner.cache_path|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_path is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 33}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache shared option", "module": "lineinfile", "index": 33, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache shared option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Shared =", "line": "    Shared = {{ gitlab_runner.cache_shared|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_shared is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 34}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 server addresss", "module": "lineinfile", "index": 34, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 server addresss", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*ServerAddress =", "line": "      ServerAddress = {{ gitlab_runner.cache_s3_server_address|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_server_address is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 35}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 access key", "module": "lineinfile", "index": 35, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 access key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccessKey =", "line": "      AccessKey = {{ gitlab_runner.cache_s3_access_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_access_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 36}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 secret key", "module": "lineinfile", "index": 36, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 secret key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*SecretKey =", "line": "      SecretKey = {{ gitlab_runner.cache_s3_secret_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_secret_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 37}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 bucket name option", "module": "lineinfile", "index": 37, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 bucket name option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.cache_type is defined and gitlab_runner.cache_type == 's3'"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketName =", "line": "      BucketName = {{ gitlab_runner.cache_s3_bucket_name|default(\"\")  | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 38}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 bucket location option", "module": "lineinfile", "index": 38, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 bucket location option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketLocation =", "line": "      BucketLocation = {{ gitlab_runner.cache_s3_bucket_location|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_location is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 39}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 insecure option", "module": "lineinfile", "index": 39, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 insecure option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Insecure =", "line": "      Insecure = {{ gitlab_runner.cache_s3_insecure|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_s3_insecure is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 40}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs bucket name", "module": "lineinfile", "index": 40, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs bucket name", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.cache_type is defined and gitlab_runner.cache_type == 'gcs'"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketName =", "line": "      BucketName = {{ gitlab_runner.cache_gcs_bucket_name|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 41}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs credentials file", "module": "lineinfile", "index": 41, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs credentials file", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*CredentialsFile =", "line": "      CredentialsFile = {{ gitlab_runner.cache_gcs_credentials_file|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_credentials_file is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 42}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs access id", "module": "lineinfile", "index": 42, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs access id", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccessID =", "line": "      AccessID = {{ gitlab_runner.cache_gcs_access_id|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_access_id is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 43}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs private key", "module": "lineinfile", "index": 43, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs private key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*PrivateKey =", "line": "      PrivateKey = {{ gitlab_runner.cache_gcs_private_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_private_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 44}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure account name", "module": "lineinfile", "index": 44, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure account name", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccountName =", "line": "      AccountName = {{ gitlab_runner.cache_azure_account_name|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_account_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 45}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure account key", "module": "lineinfile", "index": 45, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure account key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccountKey =", "line": "      AccountKey = {{ gitlab_runner.cache_azure_account_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_account_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 46}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure container name", "module": "lineinfile", "index": 46, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure container name", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*ContainerName =", "line": "      ContainerName = {{ gitlab_runner.cache_azure_container_name|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_container_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 47}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure storage domain", "module": "lineinfile", "index": 47, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure storage domain", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*StorageDomain =", "line": "      StorageDomain = {{ gitlab_runner.cache_azure_storage_domain|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_storage_domain is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 48}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh user option", "module": "lineinfile", "index": 48, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh user option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*user =", "line": "  user = {{ gitlab_runner.ssh_user|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_user is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 49}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh host option", "module": "lineinfile", "index": 49, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh host option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*host =", "line": "  host = {{ gitlab_runner.ssh_host|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_host is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 50}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh port option", "module": "lineinfile", "index": 50, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh port option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*port =", "line": "  port = \"{{ gitlab_runner.ssh_port|default(\"\") | to_json }}\"", "state": "{{ 'present' if gitlab_runner.ssh_port is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 51}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh password option", "module": "lineinfile", "index": 51, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh password option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*password =", "line": "  password = {{ gitlab_runner.ssh_password|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_password is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 52}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh identity file option", "module": "lineinfile", "index": 52, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh identity file option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*identity_file =", "line": "  identity_file = {{ gitlab_runner.ssh_identity_file|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_identity_file is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 53}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox base name option", "module": "lineinfile", "index": 53, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox base name option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*base_name =", "line": "    base_name = {{ gitlab_runner.virtualbox_base_name | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_base_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 54}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox base snapshot option", "module": "lineinfile", "index": 54, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox base snapshot option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*base_snapshot =", "line": "    base_snapshot = {{ gitlab_runner.virtualbox_base_snapshot | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_base_snapshot is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 55}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox base folder option", "module": "lineinfile", "index": 55, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox base folder option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*base_folder =", "line": "    base_folder = {{ gitlab_runner.virtualbox_base_folder | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_base_folder is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 56}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox disable snapshots option", "module": "lineinfile", "index": 56, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox disable snapshots option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*disable_snapshots =", "line": "    disable_snapshots = {{ gitlab_runner.virtualbox_disable_snapshots|default(false) | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_disable_snapshots is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 57}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set builds dir file option", "module": "lineinfile", "index": 57, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set builds dir file option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*builds_dir =", "line": "  builds_dir = {{ gitlab_runner.builds_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.builds_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 58}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache dir file option", "module": "lineinfile", "index": 58, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache dir file option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*cache_dir =", "line": "  cache_dir = {{ gitlab_runner.cache_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 59}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Ensure directory permissions", "module": "file", "index": 59, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Ensure directory permissions", "loop": ["{{ gitlab_runner.builds_dir | default(\"\") }}", "{{ gitlab_runner.cache_dir | default(\"\") }}"], "when": "item|length"}, "module_options": {"dest": "{{ item }}", "state": "directory", "owner": "{{ gitlab_runner_runtime_owner|default(omit) }}", "group": "{{ gitlab_runner_runtime_group|default(omit) }}", "mode": 504, "modification_time": "preserve", "access_time": "preserve", "recurse": true}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 60}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Ensure directory access test", "module": "command", "index": 60, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Ensure directory access test", "loop": ["{{ gitlab_runner.builds_dir | default(\"\") }}", "{{ gitlab_runner.cache_dir | default(\"\") }}"], "when": "item|length", "changed_when": false, "become": true, "become_user": "{{ gitlab_runner_runtime_owner|default(omit) }}", "register": "ensure_directory_access", "ignore_errors": true}, "module_options": "/usr/bin/test -r {{ item }}", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 61}": {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Ensure directory access fail on error", "module": "fail", "index": 61, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Ensure directory access fail on error", "loop": "{{ ensure_directory_access.results }}", "when": ["item.rc is defined and item.rc != 0"]}, "module_options": {"msg": "Error: user gitlab-runner failed to test access to {{ item.item }}. Check parent folder(s) permissions"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml\", \"index\": 62}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 62, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"vars": {"sect_name_prefix": "{{ runn_name_prefix }} section[{{ (section_index|int) + 1 }}/{{ gitlab_runner.extra_configs|list|length }}]:"}, "loop": "{{ gitlab_runner.extra_configs|list }}", "loop_control": {"loop_var": "section", "index_var": "section_index"}, "when": ["gitlab_runner.extra_configs is defined", "gitlab_runner.extra_configs|list|length > 0"]}, "module_options": "section-config-runner.yml", "executable": "section-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Windows) {{ conf_name_prefix }} Create temporary file", "module": "win_tempfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"name": "(Windows) {{ conf_name_prefix }} Create temporary file", "register": "temp_runner_config", "check_mode": false, "changed_when": false}, "module_options": {"state": "file", "path": "{{ temp_runner_config_dir.path }}", "prefix": "gitlab-runner.{{ runner_config_index }}."}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Windows) {{ conf_name_prefix }} Isolate runner configuration", "module": "win_copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"name": "(Windows) {{ conf_name_prefix }} Isolate runner configuration", "check_mode": false, "changed_when": false}, "module_options": {"dest": "{{ temp_runner_config.path }}", "content": "{{ runner_config }}"}, "executable": "win_copy", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"vars": {"runn_name_prefix": "{{ conf_name_prefix }} runner[{{ (gitlab_runner_index|int) + 1 }}/{{ gitlab_runner_runners|length }}]:"}, "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'present'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "update-config-runner-windows.yml", "executable": "update-config-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(Windows) {{ conf_name_prefix }} Remove runner config", "module": "win_file", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"name": "(Windows) {{ conf_name_prefix }} Remove runner config", "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'absent'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": {"path": "{{ temp_runner_config.path }}", "state": "absent"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure /etc/systemd/system/gitlab-runner.service.d/ exists", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Ensure /etc/systemd/system/gitlab-runner.service.d/ exists", "become": true}, "module_options": {"path": "/etc/systemd/system/gitlab-runner.service.d", "state": "directory", "owner": "root", "group": "root", "mode": 493}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Add reload command to GitLab Runner system service", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Add reload command to GitLab Runner system service", "become": true, "register": "gitlab_runner_exec_reload"}, "module_options": {"dest": "/etc/systemd/system/gitlab-runner.service.d/exec-reload.conf", "content": "[Service]\nExecReload=/bin/kill -HUP $MAINPID\n"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Configure graceful stop for GitLab Runner system service", "module": "copy", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Configure graceful stop for GitLab Runner system service", "become": true, "when": "gitlab_runner_timeout_stop_seconds > 0", "register": "gitlab_runner_kill_timeout"}, "module_options": {"dest": "/etc/systemd/system/gitlab-runner.service.d/kill.conf", "content": "[Service]\nTimeoutStopSec={{ gitlab_runner_timeout_stop_seconds }}\nKillSignal=SIGQUIT\n"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Force systemd to reread configs", "module": "systemd", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Force systemd to reread configs", "become": true, "when": "gitlab_runner_exec_reload.changed or gitlab_runner_kill_timeout"}, "module_options": {"daemon_reload": true}, "executable": "systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Create .gitlab-runner dir", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Create .gitlab-runner dir", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory", "mode": "0700"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure config.toml exists", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Ensure config.toml exists", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Set concurrent option", "module": "lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Set concurrent option", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s*)concurrent =", "line": "\\1concurrent = {{ gitlab_runner_concurrent }}", "state": "present", "backrefs": true}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Add listen_address to config", "module": "lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add listen_address to config", "when": "gitlab_runner_listen_address | length > 0", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^listen_address =", "line": "listen_address = \"{{ gitlab_runner_listen_address }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Add log_format to config", "module": "lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add log_format to config", "when": "gitlab_runner_log_format is defined", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^log_format =", "line": "log_format = \"{{ gitlab_runner_log_format|default(\"runner\") }}\"", "insertbefore": "BOF", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Add sentry dsn to config", "module": "lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add sentry dsn to config", "when": "gitlab_runner_sentry_dsn | length > 0", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^sentry_dsn =", "line": "sentry_dsn = \"{{ gitlab_runner_sentry_dsn }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Add session server listen_address to config", "module": "lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add session server listen_address to config", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s+)listen_address =", "line": "  listen_address = \"{{ gitlab_runner_session_server_listen_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_listen_address | length > 0 else 'absent' }}"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Add session server advertise_address to config", "module": "lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add session server advertise_address to config", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*advertise_address =", "line": "  advertise_address = \"{{ gitlab_runner_session_server_advertise_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_advertise_address | length > 0 else 'absent' }}"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "Add session server session_timeout to config", "module": "lineinfile", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add session server session_timeout to config", "when": "gitlab_runner_session_server_session_timeout", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*session_timeout =", "line": "  session_timeout = {{ gitlab_runner_session_server_session_timeout }}", "insertafter": "^\\s*\\[session_server\\]", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Windows) Create .gitlab-runner dir", "module": "win_file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Create .gitlab-runner dir"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Windows) Ensure config.toml exists", "module": "win_file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Ensure config.toml exists"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Windows) Set concurrent option", "module": "win_lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Set concurrent option", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s*)concurrent =.*", "line": "$1concurrent = {{ gitlab_runner_concurrent }}", "state": "present", "backrefs": true}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(Windows) Add listen_address to config", "module": "win_lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add listen_address to config", "when": "gitlab_runner_listen_address | length > 0", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^listen_address =.*", "line": "listen_address = \"{{ gitlab_runner_listen_address }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(Windows) Add sentry dsn to config", "module": "win_lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add sentry dsn to config", "when": "gitlab_runner_sentry_dsn | length > 0", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^sentry_dsn =.*", "line": "sentry_dsn = \"{{ gitlab_runner_sentry_dsn }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(Windows) Add session server listen_address to config", "module": "win_lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add session server listen_address to config", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s+)listen_address =", "line": "  listen_address = \"{{ gitlab_runner_session_server_listen_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_listen_address | length > 0 else 'absent' }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "(Windows) Add session server advertise_address to config", "module": "win_lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add session server advertise_address to config", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*advertise_address =", "line": "  advertise_address = \"{{ gitlab_runner_session_server_advertise_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_advertise_address | length > 0 else 'absent' }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "(Windows) Add session server session_timeout to config", "module": "win_lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add session server session_timeout to config", "when": "gitlab_runner_session_server_session_timeout", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*session_timeout =", "line": "  session_timeout = {{ gitlab_runner_session_server_session_timeout }}", "insertafter": "^\\s*\\[session_server\\]", "state": "present"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Install GitLab Runner (Debian)", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (Debian)", "when": "ansible_os_family == 'Debian'"}, "module_options": "install-debian.yml", "executable": "install-debian.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Install GitLab Runner (RedHat)", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (RedHat)", "when": "ansible_os_family == 'RedHat'"}, "module_options": "install-redhat.yml", "executable": "install-redhat.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Install GitLab Runner (macOS)", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (macOS)", "when": "ansible_os_family == 'Darwin'"}, "module_options": "install-macos.yml", "executable": "install-macos.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Install GitLab Runner (Arch)", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (Arch)", "when": "ansible_os_family == 'Archlinux'"}, "module_options": "install-arch.yml", "executable": "install-arch.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(Unix) List configured runners", "module": "command", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) List configured runners", "register": "configured_runners", "changed_when": false, "check_mode": false, "become": true}, "module_options": "{{ gitlab_runner_executable }} list", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(Unix) Check runner is registered", "module": "command", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) Check runner is registered", "register": "verified_runners", "ignore_errors": true, "changed_when": false, "check_mode": false, "become": true}, "module_options": "{{ gitlab_runner_executable }} verify", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "(Unix) Register GitLab Runner", "module": "include_tasks", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) Register GitLab Runner", "when": "gitlab_runner.token is defined or gitlab_runner_registration_token | string | length > 0", "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "register-runner.yml", "executable": "register-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Set global options (macOS/Debian/RedHat)", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Set global options (macOS/Debian/RedHat)"}, "module_options": "global-setup.yml", "executable": "global-setup.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "(Unix) Configure GitLab Runner", "module": "import_tasks", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) Configure GitLab Runner"}, "module_options": "config-runners.yml", "executable": "config-runners.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Container) Pull Image from Registry", "module": "docker_image", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml", "options": {"name": "(Container) Pull Image from Registry"}, "module_options": {"name": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "source": "pull"}, "executable": "docker_image", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Container) Define Container volume Path", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml", "options": {"name": "(Container) Define Container volume Path"}, "module_options": {"state": "directory", "path": "{{ gitlab_runner_container_mount_path }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Windows) {{ line_name_prefix }} Ensure section exists", "module": "win_lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml", "options": {"name": "(Windows) {{ line_name_prefix }} Ensure section exists"}, "module_options": {"path": "{{ temp_runner_config.path }}", "regexp": "^(\\s*)\\[{{ section|regex_escape }}\\]$", "line": "{{ \"  \" * (section.split(\".\")|length -1) }}[{{ section }}]"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Windows) {{ line_name_prefix }} Modify existing line", "module": "win_lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml", "options": {"name": "(Windows) {{ line_name_prefix }} Modify existing line", "register": "modified_config_line"}, "module_options": {"path": "{{ temp_runner_config.path }}", "insertafter": "\\s+\\[{{ section | regex_escape }}\\]", "regexp": "^(\\s*)({{ line | to_json | regex_escape }}|{{ line | regex_escape }}) =.*", "line": "{{ \"  \" * (section.split(\".\")|length) }}{{ line | to_json }} = {{ gitlab_runner.extra_configs[section][line] | to_json }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "{{ line_name_prefix }} Ensure section exists", "module": "lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml", "options": {"name": "{{ line_name_prefix }} Ensure section exists"}, "module_options": {"path": "{{ temp_runner_config.path }}", "regexp": "^(\\s*)\\[{{ section|regex_escape }}\\]$", "line": "{{ \"  \" * (section.split(\".\")|length -1) }}[{{ section }}]"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "{{ line_name_prefix }} Modify existing line", "module": "lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml", "options": {"name": "{{ line_name_prefix }} Modify existing line", "register": "modified_config_line"}, "module_options": {"path": "{{ temp_runner_config.path }}", "insertafter": "\\s+\\[{{ section | regex_escape }}\\]", "regexp": "^(\\s*)({{ line | to_json | regex_escape }}|{{ line | regex_escape }}) =", "line": "{{ \"  \" * (section.split(\".\")|length) }}{{ line | to_json }} = {{ gitlab_runner.extra_configs[section][line] | to_json }}"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Debian) Get Gitlab repository installation script", "module": "get_url", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Get Gitlab repository installation script", "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": {"url": "https://packages.gitlab.com/install/repositories/runner/{{ gitlab_runner_package_name }}/script.deb.sh", "dest": "/tmp/gitlab-runner.script.deb.sh", "mode": 484}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Debian) Install Gitlab repository", "module": "command", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Install Gitlab repository", "args": {"creates": "/etc/apt/sources.list.d/runner_{{ gitlab_runner_package_name }}.list"}, "become": true, "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": "bash /tmp/gitlab-runner.script.deb.sh", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Debian) Update gitlab_runner_package_name", "module": "set_fact", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Update gitlab_runner_package_name", "when": "gitlab_runner_package_version is defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}={{ gitlab_runner_package_version }}", "gitlab_runner_package_state": "present"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(Debian) Set gitlab_runner_package_name", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Set gitlab_runner_package_name", "when": "gitlab_runner_package_version is not defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}", "gitlab_runner_package_state": "latest"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(Debian) Install GitLab Runner", "module": "apt", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Install GitLab Runner", "become": true, "environment": {"GITLAB_RUNNER_DISABLE_SKEL": "true"}, "when": "ansible_distribution_release in [\"buster\", \"focal\"]"}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(Debian) Install GitLab Runner", "module": "apt", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Install GitLab Runner", "become": true, "when": "ansible_distribution_release not in [\"buster\", \"focal\"]"}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "(Debian) Remove ~/gitlab-runner/.bash_logout on debian buster and ubuntu focal", "module": "file", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Remove ~/gitlab-runner/.bash_logout on debian buster and ubuntu focal", "when": "ansible_distribution_release in [\"buster\", \"focal\"]"}, "module_options": {"path": "/home/gitlab-runner/.bash_logout", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Set systemd reload options", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "Set systemd reload options"}, "module_options": "systemd-reload.yml", "executable": "systemd-reload.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Get existing config.toml", "module": "slurp", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Get existing config.toml", "register": "runner_config_file", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"src": "{{ gitlab_runner_config_file }}"}, "executable": "slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Get pre-existing runner configs", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Get pre-existing runner configs"}, "module_options": {"runner_configs": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]\n') }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Create temporary directory", "module": "tempfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Create temporary directory", "register": "temp_runner_config_dir", "check_mode": false, "changed_when": false}, "module_options": {"state": "directory", "suffix": "gitlab-runner-config"}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Write config section for each runner", "module": "vars", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Write config section for each runner", "include_tasks": "config-runner.yml", "loop": "{{ runner_configs }}", "loop_control": {"index_var": "runner_config_index", "loop_var": "runner_config"}}, "module_options": {"conf_name_prefix": "conf[{{ (runner_config_index|int) + 1 }}/{{ runner_configs|length }}]:"}, "executable": "vars", "executable_type": "Module", "fqcn": "ansible.builtin.vars", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Assemble new config.toml", "module": "assemble", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Assemble new config.toml", "become": "{{ gitlab_runner_system_mode }}", "diff": "{{ gitlab_runner_show_config_diff|bool }}"}, "module_options": {"src": "{{ temp_runner_config_dir.path }}", "dest": "{{ gitlab_runner_config_file }}", "delimiter": "[[runners]]\\n", "backup": true, "validate": "{{ gitlab_runner_executable }} verify -c %s", "mode": 384}, "executable": "assemble", "executable_type": "Module", "fqcn": "ansible.builtin.assemble", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Get existing config.toml", "module": "slurp", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Get existing config.toml", "register": "runner_config_file"}, "module_options": {"src": "{{ gitlab_runner_config_file }}"}, "executable": "slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Get pre-existing runner configs", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Get pre-existing runner configs"}, "module_options": {"runner_configs": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]\n') }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Create temporary directory", "module": "tempfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Create temporary directory", "register": "temp_runner_config_dir", "check_mode": false, "changed_when": false}, "module_options": {"state": "directory", "suffix": "gitlab-runner-config"}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Write config section for each runner", "module": "vars", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Write config section for each runner", "include_tasks": "config-runner-container.yml", "loop": "{{ runner_configs }}", "loop_control": {"index_var": "runner_config_index", "loop_var": "runner_config"}}, "module_options": {"conf_name_prefix": "conf[{{ (runner_config_index|int) + 1 }}/{{ runner_configs|length }}]:"}, "executable": "vars", "executable_type": "Module", "fqcn": "ansible.builtin.vars", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Assemble new config.toml", "module": "assemble", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Assemble new config.toml"}, "module_options": {"src": "{{ temp_runner_config_dir.path }}", "dest": "{{ gitlab_runner_config_file }}", "delimiter": "[[runners]]\\n", "backup": true, "validate": "docker run -i --rm -v %s:/gitlab-runner.conf\n{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}\nverify -c /gitlab-runner.conf\n", "mode": 384}, "executable": "assemble", "executable_type": "Module", "fqcn": "ansible.builtin.assemble", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "remove config.toml file", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "options": {"name": "remove config.toml file"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure config.toml exists", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "options": {"name": "Ensure config.toml exists"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Register runner to GitLab", "module": "docker_container", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "options": {"name": "Register runner to GitLab", "when": "(verified_runners.container.Output.find(\"Verifying runner... is removed\") != -1) or ((configured_runners.container.Output.find('\\n' + gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)) == -1) and (gitlab_runner.state|default('present') == 'present'))", "no_log": false}, "module_options": {"name": "{{ gitlab_runner_container_name }}", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "command": "register\n--non-interactive\n--url '{{ gitlab_runner.url | default(gitlab_runner_coordinator_url) }}'\n--registration-token '{{ gitlab_runner.token|default(gitlab_runner_registration_token) }}'\n--description '{{ gitlab_runner.name|default(ansible_hostname+\"-\"+gitlab_runner_index|string) }}'\n--tag-list '{{ gitlab_runner.tags|default([]) | join(\",\") }}'\n{% if gitlab_runner.clone_url|default(false) %}\n--clone-url \"{{ gitlab_runner.clone_url }}\"\n{% endif %}\n{% if gitlab_runner.run_untagged|default(true) %}\n--run-untagged\n{% endif %}\n{% if gitlab_runner.protected|default(false) %}\n--access-level=\"ref_protected\"\n{% endif %}\n--executor '{{ gitlab_runner.executor|default(\"shell\") }}'\n--limit '{{ gitlab_runner.concurrent_specific|default(0) }}'\n--output-limit '{{ gitlab_runner.output_limit|default(4096) }}'\n--locked='{{ gitlab_runner.locked|default(false) }}'\n{% for env_var in gitlab_runner.env_vars|default([]) %}\n--env '{{ env_var }}'\n{% endfor %}\n{% if gitlab_runner.pre_clone_script|default(false) %}\n--pre-clone-script \"{{ gitlab_runner.pre_clone_script }}\"\n{% endif %}\n{% if gitlab_runner.pre_build_script|default(false) %}\n--pre-build-script \"{{ gitlab_runner.pre_build_script }}\"\n{% endif %}\n{% if gitlab_runner.post_build_script|default(false) %}\n--post-build-script \"{{ gitlab_runner.post_build_script }}\"\n{% endif %}\n--docker-image '{{ gitlab_runner.docker_image|default(\"alpine\") }}'\n{% if gitlab_runner.docker_privileged|default(false) %}\n--docker-privileged\n{% endif %}\n{% if gitlab_runner.docker_tlsverify|default(false) %}\n--docker-tlsverify '{{ gitlab_runner.docker_tlsverify|default(\"true\") }}'\n{% endif %}\n{% if gitlab_runner.docker_dns|default(false) %}\n--docker-dns '{{ gitlab_runner.docker_dns|default(\"1.1.1.1\") }}'\n{% endif %}\n{% if gitlab_runner.docker_dns_search|default(false) %}\n--docker-dns-search '{{ gitlab_runner.docker_dns_search|default([]) }}'\n{% endif %}\n{% if gitlab_runner.docker_disable_cache|default(false) %}\n--docker-disable-cache\n{% endif %}\n{% if gitlab_runner.docker_oom_kill_disable|default(false) %}\n--docker-oom-kill-disable '{{ gitlab_runner.docker_oom_kill_disable|default(\"false\") }}'\n{% endif %}\n{% for volume in gitlab_runner.docker_volumes | default([]) %}\n--docker-volumes \"{{ volume }}\"\n{% endfor %}\n{% for device in gitlab_runner.docker_devices | default([]) %}\n--docker-devices \"{{ device }}\"\n{% endfor %}\n--ssh-user '{{ gitlab_runner.ssh_user|default(\"\") }}'\n--ssh-host '{{ gitlab_runner.ssh_host|default(\"\") }}'\n--ssh-port '{{ gitlab_runner.ssh_port|default(\"\") }}'\n--ssh-password '{{ gitlab_runner.ssh_password|default(\"\") }}'\n--ssh-identity-file '{{ gitlab_runner.ssh_identity_file|default(\"\") }}'\n{% if gitlab_runner.cache_type is defined %}\n--cache-type '{{ gitlab_runner.cache_type }}'\n{% endif %}\n{% if gitlab_runner.cache_shared|default(false) %}\n--cache-shared\n{% endif %}\n{% if gitlab_runner.cache_path is defined %}\n--cache-path '{{ gitlab_runner.cache_path }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_server_address is defined %}\n--cache-s3-server-address '{{ gitlab_runner.cache_s3_server_address }}'\n{% if gitlab_runner.cache_s3_access_key is defined %}\n--cache-s3-access-key '{{ gitlab_runner.cache_s3_access_key }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_secret_key is defined %}\n--cache-s3-secret-key '{{ gitlab_runner.cache_s3_secret_key }}'\n{% endif %}\n{% endif %}\n{% if gitlab_runner.cache_s3_bucket_name is defined %}\n--cache-s3-bucket-name '{{ gitlab_runner.cache_s3_bucket_name }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_bucket_location is defined %}\n--cache-s3-bucket-location '{{ gitlab_runner.cache_s3_bucket_location }}'\n{% endif %}\n{% if gitlab_runner.builds_dir|default(false) %}\n--builds-dir '{{ gitlab_runner.builds_dir }}'\n{% endif %}\n{% if gitlab_runner.cache_dir|default(false) %}\n--cache-dir '{{ gitlab_runner.cache_dir }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_insecure|default(false) %}\n--cache-s3-insecure\n{% endif %}\n{% if gitlab_runner.extra_registration_option is defined %}\n{{ gitlab_runner.extra_registration_option }}\n{% endif %}\n", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}], "cleanup": true, "auto_remove": true, "network_mode": "{{ gitlab_runner_container_network }}"}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Windows) Check gitlab-runner executable exists", "module": "win_stat", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Check gitlab-runner executable exists", "register": "gitlab_runner_exists"}, "module_options": {"path": "{{ gitlab_runner_executable }}"}, "executable": "win_stat", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Windows) Set fact -> gitlab_runner_exists", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Set fact -> gitlab_runner_exists"}, "module_options": {"gitlab_runner_exists": "{{ gitlab_runner_exists.stat.exists }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Windows) Get existing version", "module": "win_shell", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Get existing version", "register": "existing_version_shell", "failed_when": false, "check_mode": false, "changed_when": false}, "module_options": "{{ gitlab_runner_executable }} --version | Select-String 'Version:' -CaseSensitive | %{ $_.Line.Split(' ')[-1].Trim(); }", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(Windows) Set fact -> gitlab_runner_existing_version", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Set fact -> gitlab_runner_existing_version"}, "module_options": {"gitlab_runner_existing_version": "{{ existing_version_shell.stdout | trim if existing_version_shell.rc == 0 else '0' }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(Windows) Ensure install directory exists", "module": "win_file", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Ensure install directory exists"}, "module_options": {"path": "{{ gitlab_runner_install_directory }}", "state": "directory"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(Windows) Download GitLab Runner", "module": "win_get_url", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "win_get_url", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "(Windows) Install GitLab Runner", "module": "win_command", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Install GitLab Runner", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "when": "(gitlab_runner_windows_service_user | length == 0) or (gitlab_runner_windows_service_password | length == 0)"}, "module_options": "{{ gitlab_runner_executable }} install", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "(Windows) Install GitLab Runner", "module": "win_command", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Install GitLab Runner", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "when": ["gitlab_runner_windows_service_user | length > 0", "gitlab_runner_windows_service_password | length > 0"]}, "module_options": "{{ gitlab_runner_executable }} install --user \"{{ gitlab_runner_windows_service_user }}\" --password \"{{ gitlab_runner_windows_service_password }}\"", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "(Windows) Make sure runner is stopped", "module": "win_command", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Make sure runner is stopped", "ignore_errors": true, "when": ["gitlab_runner_exists"]}, "module_options": "{{ gitlab_runner_executable }} stop", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "(Windows) Download GitLab Runner", "module": "win_get_url", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "win_get_url", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "remove config.toml file", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "remove config.toml file", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Create .gitlab-runner dir", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Create .gitlab-runner dir", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory", "mode": "0700"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Ensure config.toml exists", "module": "file", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Ensure config.toml exists", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Construct the runner command without secrets", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Construct the runner command without secrets"}, "module_options": {"command": "{{ gitlab_runner_executable }} register --non-interactive --url '{{ gitlab_runner.url|default(gitlab_runner_coordinator_url) }}' --description '{{ gitlab_runner.name|default(ansible_hostname+\"-\"+gitlab_runner_index|string) }}' --tag-list '{{ gitlab_runner.tags|default([]) | join(\",\") }}' {% if gitlab_runner.clone_url|default(false) %} --clone-url \"{{ gitlab_runner.clone_url }}\" {% endif %} {% if gitlab_runner.run_untagged|default(true) %} --run-untagged {% endif %} {% if gitlab_runner.protected|default(false) %} --access-level=\"ref_protected\" {% endif %} --executor '{{ gitlab_runner.executor|default(\"shell\") }}' {% if gitlab_runner.shell is defined %} --shell '{{ gitlab_runner.shell }}' {% endif %} --limit '{{ gitlab_runner.concurrent_specific|default(0) }}' --output-limit '{{ gitlab_runner.output_limit|default(4096) }}' --locked='{{ gitlab_runner.locked|default(false) }}' {% for env_var in gitlab_runner.env_vars|default([]) %} --env '{{ env_var }}' {% endfor %} {% if gitlab_runner.pre_clone_script|default(false) %} --pre-clone-script \"{{ gitlab_runner.pre_clone_script }}\" {% endif %} {% if gitlab_runner.pre_build_script|default(false) %} --pre-build-script \"{{ gitlab_runner.pre_build_script }}\" {% endif %} {% if gitlab_runner.tls_ca_file|default(false) %} --tls-ca-file \"{{ gitlab_runner.tls_ca_file }}\" {% endif %} {% if gitlab_runner.post_build_script|default(false) %} --post-build-script \"{{ gitlab_runner.post_build_script }}\" {% endif %} --docker-image '{{ gitlab_runner.docker_image|default(\"alpine\") }}' {% if gitlab_runner.docker_helper_image is defined %} --docker-helper-image \"{{ gitlab_runner.docker_helper_image }}\" {% endif %} {% if gitlab_runner.docker_privileged|default(false) %} --docker-privileged {% endif %} {% if gitlab_runner.docker_wait_for_services_timeout|default(false) %} --docker-wait-for-services-timeout '{{ gitlab_runner.docker_wait_for_services_timeout|default(30) }}' {% endif %} {% if gitlab_runner.docker_tlsverify|default(false) %} --docker-tlsverify '{{ gitlab_runner.docker_tlsverify|default(\"true\") }}' {% endif %} {% if gitlab_runner.docker_disable_cache|default(false) %} --docker-disable-cache '{{ gitlab_runner.docker_disable_cache|default(\"false\") }}' {% endif %} {% if gitlab_runner.docker_dns|default(false) %} --docker-dns '{{ gitlab_runner.docker_dns|default(\"1.1.1.1\") }}' {% endif %} {% if gitlab_runner.docker_dns_search|default(false) %} --docker-dns-search '{{ gitlab_runner.docker_dns_search|default([]) }}' {% endif %} {% if gitlab_runner.docker_disable_cache|default(false) %} --docker-disable-cache {% endif %} {% if gitlab_runner.docker_oom_kill_disable|default(false) %} --docker-oom-kill-disable '{{ gitlab_runner.docker_oom_kill_disable|default(\"false\") }}' {% endif %} {% for policy in gitlab_runner.docker_pull_policy|default([]) %} --docker-pull-policy \"{{ policy }}\" {% endfor %} {% for volume in gitlab_runner.docker_volumes|default([]) %} --docker-volumes \"{{ volume }}\" {% endfor %} {% for device in gitlab_runner.docker_devices|default([]) %} --docker-devices \"{{ device }}\" {% endfor %} --ssh-user '{{ gitlab_runner.ssh_user|default(\"\") }}' --ssh-host '{{ gitlab_runner.ssh_host|default(\"\") }}' --ssh-port '{{ gitlab_runner.ssh_port|default(\"\") }}' --ssh-identity-file '{{ gitlab_runner.ssh_identity_file|default(\"\") }}' {% if gitlab_runner.executor == \"virtualbox\" and gitlab_runner.virtualbox_base_name %}\n    --virtualbox-base-name '{{ gitlab_runner.virtualbox_base_name }}'\n    --virtualbox-base-snapshot '{{ gitlab_runner.virtualbox_base_snapshot|default(\"\") }}'\n    --virtualbox-base-folder '{{ gitlab_runner.virtualbox_base_folder|default(\"\") }}'\n    --virtualbox-disable-snapshots='{{ gitlab_runner.virtualbox_disable_snapshots|default(false) }}'\n{% endif %} {% if gitlab_runner.cache_type is defined %} --cache-type '{{ gitlab_runner.cache_type }}' {% endif %} {% if gitlab_runner.cache_shared|default(false) %} --cache-shared {% endif %} {% if gitlab_runner.cache_path is defined %} --cache-path '{{ gitlab_runner.cache_path }}' {% endif %} {% if gitlab_runner.cache_s3_server_address is defined %} --cache-s3-server-address '{{ gitlab_runner.cache_s3_server_address }}' {% if gitlab_runner.cache_s3_access_key is defined %} --cache-s3-access-key '{{ gitlab_runner.cache_s3_access_key }}' {% endif %} {% endif %} {% if gitlab_runner.cache_s3_bucket_name is defined %} --cache-s3-bucket-name '{{ gitlab_runner.cache_s3_bucket_name }}' {% endif %} {% if gitlab_runner.cache_s3_bucket_location is defined %} --cache-s3-bucket-location '{{ gitlab_runner.cache_s3_bucket_location }}' {% endif %} {% if gitlab_runner.builds_dir|default(false) %} --builds-dir '{{ gitlab_runner.builds_dir }}' {% endif %} {% if gitlab_runner.custom_build_dir_enabled|default(false) %} --custom_build_dir-enabled '{{ gitlab_runner.custom_build_dir_enabled }}' {% endif %} {% if gitlab_runner.cache_dir|default(false) %} --cache-dir '{{ gitlab_runner.cache_dir }}' {% endif %} {% if gitlab_runner.cache_s3_insecure|default(false) %} --cache-s3-insecure {% endif %} {% if gitlab_runner.extra_registration_option is defined %} {{ gitlab_runner.extra_registration_option }} {% endif %}\n"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Register runner to GitLab", "module": "command", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Register runner to GitLab", "when": "(verified_runners.stderr.find(\"Verifying runner... is removed\") != -1) or ((configured_runners.stderr.find('\\n' + gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)) == -1) and (gitlab_runner.state|default('present') == 'present'))", "no_log": true, "become": "{{ gitlab_runner_system_mode }}"}, "module_options": "{{ command }} --registration-token '{{ gitlab_runner.token|default(gitlab_runner_registration_token) }}' {% if gitlab_runner.cache_s3_secret_key is defined %} --cache-s3-secret-key '{{ gitlab_runner.cache_s3_secret_key }}' {% endif %} --ssh-password '{{ gitlab_runner.ssh_password|default(\"\") }}'\n", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner.yml", "options": {"vars": {"line_name_prefix": "{{ sect_name_prefix }} line:[{{ (line_index|int) + 1 }}/{{ gitlab_runner.extra_configs[section]|list|length }}]: "}, "loop": "{{ gitlab_runner.extra_configs[section] | list }}", "loop_control": {"loop_var": "line", "index_var": "line_index"}}, "module_options": "line-config-runner.yml", "executable": "line-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Create temporary file", "module": "tempfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"name": "{{ conf_name_prefix }} Create temporary file", "register": "temp_runner_config", "check_mode": false, "changed_when": false}, "module_options": {"state": "file", "path": "{{ temp_runner_config_dir.path }}", "prefix": "gitlab-runner.{{ runner_config_index }}."}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Isolate runner configuration", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"name": "{{ conf_name_prefix }} Isolate runner configuration", "check_mode": false, "changed_when": false}, "module_options": {"dest": "{{ temp_runner_config.path }}", "content": "{{ runner_config }}"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"vars": {"runn_name_prefix": "{{ conf_name_prefix }} runner[{{ (gitlab_runner_index|int) + 1 }}/{{ gitlab_runner_runners|length }}]:"}, "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'present'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "update-config-runner.yml", "executable": "update-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Remove runner config", "module": "file", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"name": "{{ conf_name_prefix }} Remove runner config", "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'absent'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": {"path": "{{ temp_runner_config.path }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Container) Install Gitlab Runner", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Install Gitlab Runner", "when": "gitlab_runner_container_install"}, "module_options": "install-container.yml", "executable": "install-container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Container) List configured runners", "module": "docker_container", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) List configured runners", "register": "configured_runners", "changed_when": false, "check_mode": false}, "module_options": {"name": "{{ gitlab_runner_container_name }}-list", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "command": "list", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}], "cleanup": true, "interactive": true, "tty": true, "detach": false}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Container) Check runner is registered", "module": "docker_container", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Check runner is registered", "register": "verified_runners", "ignore_errors": true, "changed_when": false, "check_mode": false}, "module_options": {"name": "{{ gitlab_runner_container_name }}-check", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "command": "verify", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}], "cleanup": true, "interactive": true, "tty": true, "detach": false}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "configured_runners?", "module": "debug", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "configured_runners?"}, "module_options": {"msg": "{{ configured_runners.container.Output }}"}, "executable": "debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "verified_runners?", "module": "debug", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "verified_runners?"}, "module_options": {"msg": "{{ verified_runners.container.Output }}"}, "executable": "debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(Container) Register GitLab Runner", "module": "include_tasks", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Register GitLab Runner", "when": "gitlab_runner.token is defined or gitlab_runner_registration_token | string | length > 0", "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "register-runner-container.yml", "executable": "register-runner-container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "(Container) Set global options", "module": "import_tasks", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Set global options"}, "module_options": "global-setup.yml", "executable": "global-setup.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "(Container) Configure GitLab Runner", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Configure GitLab Runner"}, "module_options": "config-runners-container.yml", "executable": "config-runners-container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "(Container) Start the container", "module": "docker_container", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Start the container"}, "module_options": {"name": "{{ gitlab_runner_container_name }}", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "restart_policy": "{{ gitlab_runner_container_restart_policy }}", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}, {"type": "bind", "source": "/var/run/docker.sock", "target": "/var/run/docker.sock"}], "network_mode": "{{ gitlab_runner_container_network }}"}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Windows) remove config.toml file", "module": "win_file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) remove config.toml file"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "absent"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Windows) Create .gitlab-runner dir", "module": "win_file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) Create .gitlab-runner dir"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Windows) Ensure config.toml exists", "module": "win_file", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) Ensure config.toml exists"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(Windows) Register runner to GitLab", "module": "win_shell", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) Register runner to GitLab", "when": "(verified_runners.stderr.find(\"Verifying runner... is removed\") != -1) or ((configured_runners.stderr.find('\\n' + gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)) == -1) and (gitlab_runner.state|default('present') == 'present'))", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}}, "module_options": "{{ gitlab_runner_executable }} register --non-interactive --url '{{ gitlab_runner.url|default(gitlab_runner_coordinator_url) }}' --registration-token '{{ gitlab_runner.token|default(gitlab_runner_registration_token) }}' --description '{{ gitlab_runner.name|default(ansible_hostname+\"-\"+gitlab_runner_index|string) }}' --tag-list '{{ gitlab_runner.tags|default([]) | join(\",\") }}' {% if gitlab_runner.clone_url|default(false) %} --clone-url \"{{ gitlab_runner.clone_url }}\" {% endif %} {% if gitlab_runner.run_untagged|default(true) %} --run-untagged {% endif %} {% if gitlab_runner.protected|default(false) %} --access-level=\"ref_protected\" {% endif %} --executor '{{ gitlab_runner.executor|default(\"shell\") }}' {% if gitlab_runner.shell is defined %} --shell '{{ gitlab_runner.shell }}' {% endif %} --limit '{{ gitlab_runner.concurrent_specific|default(0) }}' --output-limit '{{ gitlab_runner.output_limit|default(4096) }}' --locked='{{ gitlab_runner.locked|default(false) }}' {% for env_var in gitlab_runner.env_vars|default([]) %} --env '{{ env_var }}' {% endfor %} {% if gitlab_runner.pre_clone_script|default(false) %} --pre-clone-script \"{{ gitlab_runner.pre_clone_script }}\" {% endif %} {% if gitlab_runner.pre_build_script|default(false) %} --pre-build-script \"{{ gitlab_runner.pre_build_script }}\" {% endif %} {% if gitlab_runner.post_build_script|default(false) %} --post-build-script \"{{ gitlab_runner.post_build_script }}\" {% endif %} --docker-image '{{ gitlab_runner.docker_image|default(\"alpine\") }}' {% if gitlab_runner.docker_privileged|default(false) %} --docker-privileged {% endif %} {% for volume in gitlab_runner.docker_volumes | default([]) %} --docker-volumes \"{{ volume }}\" {% endfor %} {% for device in gitlab_runner.docker_devices | default([]) %} --docker-devices \"{{ device }}\" {% endfor %} {% if gitlab_runner.ssh_user is defined %} --ssh-user '{{ gitlab_runner.ssh_user }}' {% endif %} {% if gitlab_runner.ssh_host is defined %} --ssh-host '{{ gitlab_runner.ssh_host }}' {% endif %} {% if gitlab_runner.ssh_port is defined %} --ssh-port '{{ gitlab_runner.ssh_port }}' {% endif %} {% if gitlab_runner.ssh_password is defined %} --ssh-password '{{ gitlab_runner.ssh_password }}' {% endif %} {% if gitlab_runner.ssh_identity_file is defined %} --ssh-identity-file '{{ gitlab_runner.ssh_identity_file }}' {% endif %} {% if gitlab_runner.cache_type is defined %} --cache-type '{{ gitlab_runner.cache_type }}' {% endif %} {% if gitlab_runner.cache_shared|default(false) %} --cache-shared {% endif %} {% if gitlab_runner.cache_path is defined %} --cache-path '{{ gitlab_runner.cache_path }}' {% endif %} {% if gitlab_runner.cache_s3_server_address is defined %} --cache-s3-server-address '{{ gitlab_runner.cache_s3_server_address }}' {% endif %} {% if gitlab_runner.cache_s3_access_key is defined %} --cache-s3-access-key '{{ gitlab_runner.cache_s3_access_key }}' {% endif %} {% if gitlab_runner.cache_s3_secret_key is defined %} --cache-s3-secret-key '{{ gitlab_runner.cache_s3_secret_key }}' {% endif %} {% if gitlab_runner.cache_s3_bucket_name is defined %} --cache-s3-bucket-name '{{ gitlab_runner.cache_s3_bucket_name }}' {% endif %} {% if gitlab_runner.cache_s3_bucket_location is defined %} --cache-s3-bucket-location '{{ gitlab_runner.cache_s3_bucket_location }}' {% endif %} {% if gitlab_runner.builds_dir|default(false) %} --builds-dir '{{ gitlab_runner.builds_dir }}' {% endif %} {% if gitlab_runner.cache_dir|default(false) %} --cache-dir '{{ gitlab_runner.cache_dir }}' {% endif %} {% if gitlab_runner.cache_s3_insecure|default(false) %} --cache-s3-insecure {% endif %} {% if gitlab_runner.extra_registration_option is defined %} {{ gitlab_runner.extra_registration_option }} {% endif %}\n", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(MacOS) Check gitlab-runner executable exists", "module": "stat", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Check gitlab-runner executable exists", "register": "gitlab_runner_exists"}, "module_options": {"path": "{{ gitlab_runner_executable }}"}, "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(MacOS) Set fact -> gitlab_runner_exists", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Set fact -> gitlab_runner_exists"}, "module_options": {"gitlab_runner_exists": "{{ gitlab_runner_exists.stat.exists }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(MacOS) Get existing version", "module": "shell", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Get existing version", "register": "existing_version_shell", "failed_when": false, "check_mode": false, "changed_when": false}, "module_options": "{{ gitlab_runner_executable }} --version | awk '/Version: ([\\d\\.]*)/{print $2}'", "executable": "shell", "executable_type": "Module", "fqcn": "ansible.builtin.shell", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(MacOS) Set fact -> gitlab_runner_existing_version", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Set fact -> gitlab_runner_existing_version"}, "module_options": {"gitlab_runner_existing_version": "{{ existing_version_shell.stdout if existing_version_shell.rc == 0 else '0' }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(MacOS) Precreate gitlab-runner log directory", "module": "file", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Precreate gitlab-runner log directory", "become": true, "when": "gitlab_runner_arch == 'arm64'"}, "module_options": {"path": "/usr/local/var/log", "state": "directory", "owner": "{{ ansible_user_id | string }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(MacOS) Download GitLab Runner", "module": "get_url", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "(MacOS) Setting Permissions for gitlab-runner executable", "module": "file", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Setting Permissions for gitlab-runner executable"}, "module_options": {"path": "{{ gitlab_runner_executable }}", "owner": "{{ ansible_user_id | string }}", "group": "{{ ansible_user_gid | string }}", "mode": "+x"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "(MacOS) Install GitLab Runner", "module": "command", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Install GitLab Runner"}, "module_options": "{{ gitlab_runner_executable }} install", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "(MacOS) Start GitLab Runner", "module": "command", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Start GitLab Runner", "when": "gitlab_runner_macos_start_runner"}, "module_options": "{{ gitlab_runner_executable }} start", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "(MacOS) Stop GitLab Runner", "module": "command", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Stop GitLab Runner"}, "module_options": "{{ gitlab_runner_executable }} stop", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "(MacOS) Download GitLab Runner", "module": "get_url", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 11}": {"py/object": "struct4.Task", "name": "(MacOS) Setting Permissions for gitlab-runner executable", "module": "file", "index": 11, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Setting Permissions for gitlab-runner executable", "become": true}, "module_options": {"path": "{{ gitlab_runner_executable }}", "owner": "{{ ansible_user_id | string }}", "group": "{{ ansible_user_gid | string }}", "mode": "+x"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml\", \"index\": 12}": {"py/object": "struct4.Task", "name": "(MacOS) Start GitLab Runner", "module": "command", "index": 12, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Start GitLab Runner"}, "module_options": "{{ gitlab_runner_executable }} start", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set \"[[runners]]\" section", "module": "win_lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set \"[[runners]]\" section", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "\\n", "line": "[[runners]]", "state": "present", "insertbefore": "^\\s*name =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set concurrent limit option", "module": "win_lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set concurrent limit option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*limit =.*", "line": "  limit = {{ gitlab_runner.concurrent_specific|default(0) }}", "state": "present", "insertafter": "^\\s*name =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set coordinator URL", "module": "win_lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set coordinator URL", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*url =.*", "line": "  url = {{ gitlab_runner.url|default(gitlab_runner_coordinator_url) | to_json }}", "state": "present", "insertafter": "^\\s*limit =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set clone URL", "module": "win_lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set clone URL", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.clone_url is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*clone_url =", "line": "  clone_url = {{ gitlab_runner.clone_url | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set environment option", "module": "win_lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set environment option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*environment =.*", "line": "  environment = {{ gitlab_runner.env_vars|default([]) | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set pre_clone_script", "module": "win_lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set pre_clone_script", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.pre_clone_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_clone_script =", "line": "  pre_clone_script = {{ gitlab_runner.pre_clone_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set pre_build_script", "module": "win_lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set pre_build_script", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.pre_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_build_script =", "line": "  pre_build_script = {{ gitlab_runner.pre_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set post_build_script", "module": "win_lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set post_build_script", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.post_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*post_build_script =", "line": "  post_build_script = {{ gitlab_runner.post_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set runner executor option", "module": "win_lineinfile", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set runner executor option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*executor =.*", "line": "  executor = {{ gitlab_runner.executor|default(\"shell\") | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set runner shell option", "module": "win_lineinfile", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set runner shell option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*shell =.*", "line": "  shell = {{ gitlab_runner.shell|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.shell is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set output_limit option", "module": "win_lineinfile", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set output_limit option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*output_limit =.*", "line": "  output_limit = {{ gitlab_runner.output_limit|default(4096) }}", "state": "present", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 11}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set runner docker image option", "module": "win_lineinfile", "index": 11, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set runner docker image option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*image =.*", "line": "  image = {{ gitlab_runner.docker_image|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_image is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 12}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set docker privileged option", "module": "win_lineinfile", "index": 12, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set docker privileged option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*privileged =.*", "line": "  privileged = {{ gitlab_runner.docker_privileged|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_privileged is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 13}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set docker volumes option", "module": "win_lineinfile", "index": 13, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set docker volumes option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*volumes =.*", "line": "  volumes = {{ gitlab_runner.docker_volumes|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_volumes is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 14}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set docker devices option", "module": "win_lineinfile", "index": 14, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set docker devices option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*devices =.*", "line": "  devices = {{ gitlab_runner.docker_devices|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_devices is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 15}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache type option", "module": "win_lineinfile", "index": 15, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache type option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Type =.*", "line": "  Type = {{ gitlab_runner.cache_type|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 16}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache path option", "module": "win_lineinfile", "index": 16, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache path option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Path =.*", "line": "  Path = {{ gitlab_runner.cache_path|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_path is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 17}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 server address", "module": "win_lineinfile", "index": 17, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 server address", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*ServerAddress =.*", "line": "  ServerAddress = {{ gitlab_runner.cache_s3_server_address|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_server_address is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 18}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 access key", "module": "win_lineinfile", "index": 18, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 access key", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccessKey =.*", "line": "  AccessKey = {{ gitlab_runner.cache_s3_access_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_access_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 19}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 secret key", "module": "win_lineinfile", "index": 19, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 secret key", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*SecretKey =.*", "line": "  SecretKey = {{ gitlab_runner.cache_s3_secret_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_secret_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 20}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache shared option", "module": "win_lineinfile", "index": 20, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache shared option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Shared =.*", "line": "  Shared = {{ gitlab_runner.cache_shared|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_shared is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 21}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket name option", "module": "win_lineinfile", "index": 21, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket name option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketName =.*", "line": "  BucketName = {{ gitlab_runner.cache_s3_bucket_name|default(\"\")  | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 22}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket location option", "module": "win_lineinfile", "index": 22, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket location option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketLocation =.*", "line": "  BucketLocation = {{ gitlab_runner.cache_s3_bucket_location|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_location is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 23}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 insecure option", "module": "win_lineinfile", "index": 23, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 insecure option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Insecure =.*", "line": "  Insecure = {{ gitlab_runner.cache_s3_insecure|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_s3_insecure is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 24}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh user option", "module": "win_lineinfile", "index": 24, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh user option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*user =.*", "line": "  user = {{ gitlab_runner.ssh_user|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_user is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 25}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh host option", "module": "win_lineinfile", "index": 25, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh host option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*host =.*", "line": "  host = {{ gitlab_runner.ssh_host|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_host is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 26}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh port option", "module": "win_lineinfile", "index": 26, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh port option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*port =.*", "line": "  port = {{ gitlab_runner.ssh_port|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_port is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 27}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh password option", "module": "win_lineinfile", "index": 27, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh password option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*password =.*", "line": "  password = {{ gitlab_runner.ssh_password|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_password is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 28}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh identity file option", "module": "win_lineinfile", "index": 28, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh identity file option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*identity_file =.*", "line": "  identity_file = {{ gitlab_runner.ssh_identity_file|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_identity_file is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 29}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set builds dir file option", "module": "win_lineinfile", "index": 29, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set builds dir file option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*builds_dir =.*", "line": "  builds_dir = {{ gitlab_runner.builds_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.builds_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 30}": {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache dir file option", "module": "win_lineinfile", "index": 30, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache dir file option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*cache_dir =.*", "line": "  cache_dir = {{ gitlab_runner.cache_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 31}": {"py/object": "struct4.Task", "name": "(Windows) Remove empty lines", "module": "win_shell", "index": 31, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) Remove empty lines"}, "module_options": "(Get-Content {{ temp_runner_config.path }}) | ? {$_.trim() -ne \"\" } | Set-Content {{ temp_runner_config.path }}", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml\", \"index\": 32}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 32, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"vars": {"sect_name_prefix": "{{ runn_name_prefix }} section[{{ (section_index|int) + 1 }}/{{ gitlab_runner.extra_configs|list|length }}]:"}, "loop": "{{ gitlab_runner.extra_configs|list }}", "loop_control": {"loop_var": "section", "index_var": "section_index"}, "when": ["gitlab_runner.extra_configs is defined", "gitlab_runner.extra_configs|list|length > 0"]}, "module_options": "section-config-runner-windows.yml", "executable": "section-config-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Load platform-specific variables", "module": "include_vars", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Load platform-specific variables", "vars": {"possible_files": {"files": ["{{ ansible_distribution }}.yml", "{{ ansible_os_family }}.yml", "default.yml"], "paths": ["vars"]}}}, "module_options": "{{ lookup('first_found', possible_files) }}", "executable": "include_vars", "executable_type": "Module", "fqcn": "ansible.builtin.include_vars", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Install Gitlab Runner (Container)", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Install Gitlab Runner (Container)", "when": "gitlab_runner_container_install"}, "module_options": "Container.yml", "executable": "Container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Install GitLab Runner (Unix)", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Install GitLab Runner (Unix)", "when": "ansible_os_family != 'Windows' and not gitlab_runner_container_install"}, "module_options": "Unix.yml", "executable": "Unix.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Install GitLab Runner (Windows)", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Install GitLab Runner (Windows)", "when": "ansible_os_family == 'Windows' and not gitlab_runner_container_install"}, "module_options": "Windows.yml", "executable": "Windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Arch) Set gitlab_runner_package_name", "module": "set_fact", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "options": {"name": "(Arch) Set gitlab_runner_package_name", "when": "gitlab_runner_package_version is not defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}", "gitlab_runner_package_state": "latest"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Arch) Install GitLab Runner", "module": "package", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "options": {"name": "(Arch) Install GitLab Runner", "become": true}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Set systemd reload options", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "options": {"name": "Set systemd reload options"}, "module_options": "systemd-reload.yml", "executable": "systemd-reload.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(RedHat) Get Gitlab repository installation script", "module": "get_url", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Get Gitlab repository installation script", "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": {"url": "https://packages.gitlab.com/install/repositories/runner/{{ gitlab_runner_package_name }}/script.rpm.sh", "dest": "/tmp/gitlab-runner.script.rpm.sh", "mode": 484}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(RedHat) Install Gitlab repository", "module": "command", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Install Gitlab repository", "args": {"creates": "/etc/yum.repos.d/runner_{{ gitlab_runner_package_name }}.repo"}, "become": true, "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": "{% if ansible_distribution == \"Rocky\" %} env os=el dist={{ ansible_distribution_major_version }} {% endif %} bash /tmp/gitlab-runner.script.rpm.sh\n", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(RedHat) Update gitlab_runner_package_name", "module": "set_fact", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Update gitlab_runner_package_name", "when": "gitlab_runner_package_version is defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}-{{ gitlab_runner_package_version }}", "gitlab_runner_package_state": "present"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(RedHat) Set gitlab_runner_package_name", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Set gitlab_runner_package_name", "when": "gitlab_runner_package_version is not defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}", "gitlab_runner_package_state": "latest"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(RedHat) Install GitLab Runner", "module": "package", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Install GitLab Runner", "become": true}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Set systemd reload options", "module": "import_tasks", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "Set systemd reload options"}, "module_options": "systemd-reload.yml", "executable": "systemd-reload.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Windows) Get existing config.toml", "module": "slurp", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Get existing config.toml", "register": "runner_config_file"}, "module_options": {"src": "{{ gitlab_runner_config_file }}"}, "executable": "slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Windows) Get pre-existing global config", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Get pre-existing global config"}, "module_options": {"runner_global_config": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]')[0] }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Windows) Get pre-existing runner configs", "module": "set_fact", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Get pre-existing runner configs"}, "module_options": {"runner_configs": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]')[1:] }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(Windows) Create temporary directory", "module": "win_tempfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Create temporary directory", "register": "temp_runner_config_dir", "check_mode": false, "changed_when": false}, "module_options": {"state": "directory", "suffix": "gitlab-runner-config"}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(Windows) Write config section for each runner", "module": "vars", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Write config section for each runner", "include_tasks": "config-runner-windows.yml", "loop": "{{ runner_configs }}", "loop_control": {"index_var": "runner_config_index", "loop_var": "runner_config"}}, "module_options": {"conf_name_prefix": "conf[{{ (runner_config_index|int) + 1 }}/{{ runner_configs|length }}]:"}, "executable": "vars", "executable_type": "Module", "fqcn": "ansible.builtin.vars", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(Windows) Create temporary file config.toml", "module": "win_tempfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Create temporary file config.toml", "register": "config_toml_temp"}, "module_options": {"state": "file", "suffix": "temp"}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "(Windows) Write global config to file", "module": "win_lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Write global config to file"}, "module_options": {"insertbefore": "BOF", "path": "{{ config_toml_temp.path }}", "line": "{{ runner_global_config }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "(Windows) Create temporary file runners-config.toml", "module": "win_tempfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Create temporary file runners-config.toml", "register": "runners_config_toml_temp"}, "module_options": {"state": "file", "suffix": "temp"}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "(Windows) Assemble runners files in config dir", "module": "win_shell", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Assemble runners files in config dir", "args": {"chdir": "{{ temp_runner_config_dir.path }}"}}, "module_options": "dir -rec | gc | out-file \"{{ runners_config_toml_temp.path }}\"", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "(Windows) Assemble new config.toml", "module": "win_shell", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Assemble new config.toml"}, "module_options": "gc \"{{ config_toml_temp.path }}\",\"{{ runners_config_toml_temp.path }}\" | Set-Content \"{{ gitlab_runner_config_file }}\"", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "(Windows) Verify config", "module": "win_command", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Verify config", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}}, "module_options": "{{ gitlab_runner_executable }} verify", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Create temporary file", "module": "tempfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"name": "{{ conf_name_prefix }} Create temporary file", "register": "temp_runner_config", "check_mode": false, "changed_when": false}, "module_options": {"state": "file", "path": "{{ temp_runner_config_dir.path }}", "prefix": "gitlab-runner.{{ runner_config_index }}."}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Isolate runner configuration", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"name": "{{ conf_name_prefix }} Isolate runner configuration", "check_mode": false, "changed_when": false}, "module_options": {"dest": "{{ temp_runner_config.path }}", "content": "{{ runner_config }}"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"vars": {"runn_name_prefix": "{{ conf_name_prefix }} runner[{{ (gitlab_runner_index|int) + 1 }}/{{ gitlab_runner_runners|length }}]:"}, "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'present'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "update-config-runner.yml", "executable": "update-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Remove runner config", "module": "file", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"name": "{{ conf_name_prefix }} Remove runner config", "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'absent'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": {"path": "{{ temp_runner_config.path }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}}, "taskfile_dict": {"./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner-windows.yml": {"py/object": "struct4.TaskFile", "name": "section-config-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner-windows.yml", "options": {"vars": {"line_name_prefix": "{{ sect_name_prefix }} line:[{{ (line_index|int) + 1 }}/{{ gitlab_runner.extra_configs[section]|list|length }}]: "}, "loop": "{{ gitlab_runner.extra_configs[section] | list }}", "loop_control": {"loop_var": "line", "index_var": "line_index"}}, "module_options": "line-config-runner-windows.yml", "executable": "line-config-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml": {"py/object": "struct4.TaskFile", "name": "Windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "Install GitLab Runner (Windows)", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "Install GitLab Runner (Windows)"}, "module_options": "install-windows.yml", "executable": "install-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) List configured runners", "module": "win_command", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) List configured runners", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "register": "configured_runners", "changed_when": false, "check_mode": false}, "module_options": "{{ gitlab_runner_executable }} list", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Check runner is registered", "module": "win_command", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Check runner is registered", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "register": "verified_runners", "ignore_errors": true, "changed_when": false, "check_mode": false}, "module_options": "{{ gitlab_runner_executable }} verify", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Register GitLab Runner", "module": "include_tasks", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Register GitLab Runner", "when": "gitlab_runner.token is defined or gitlab_runner_registration_token | string | length > 0", "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "register-runner-windows.yml", "executable": "register-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Set global options", "module": "import_tasks", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Set global options"}, "module_options": "global-setup-windows.yml", "executable": "global-setup-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Configure GitLab Runner", "module": "import_tasks", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Configure GitLab Runner"}, "module_options": "config-runners-windows.yml", "executable": "config-runners-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Start GitLab Runner", "module": "win_command", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Start GitLab Runner", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}}, "module_options": "{{ gitlab_runner_executable }} start", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml": {"py/object": "struct4.TaskFile", "name": "update-config-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set concurrent limit option", "module": "lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set concurrent limit option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*limit =", "line": "  limit = {{ gitlab_runner.concurrent_specific|default(0) }}", "state": "present", "insertafter": "^\\s*name =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set coordinator URL", "module": "lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set coordinator URL", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*url =", "line": "  url = {{ gitlab_runner.url|default(gitlab_runner_coordinator_url) | to_json }}", "state": "present", "insertafter": "^\\s*limit =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set clone URL", "module": "lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set clone URL", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.clone_url is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*clone_url =", "line": "  clone_url = {{ gitlab_runner.clone_url | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set environment option", "module": "lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set environment option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*environment =", "line": "  environment = {{ gitlab_runner.env_vars|default([]) | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set pre_clone_script", "module": "lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set pre_clone_script", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.pre_clone_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_clone_script =", "line": "  pre_clone_script = {{ gitlab_runner.pre_clone_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set pre_build_script", "module": "lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set pre_build_script", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.pre_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_build_script =", "line": "  pre_build_script = {{ gitlab_runner.pre_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set tls_ca_file", "module": "lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set tls_ca_file", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.tls_ca_file is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*tls-ca-file =", "line": "  tls-ca-file = {{ gitlab_runner.tls_ca_file | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set post_build_script", "module": "lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set post_build_script", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.post_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*post_build_script =", "line": "  post_build_script = {{ gitlab_runner.post_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner executor option", "module": "lineinfile", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner executor option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*executor =", "line": "  executor = {{ gitlab_runner.executor|default(\"shell\") | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner shell option", "module": "lineinfile", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner shell option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*shell =", "line": "  shell = {{ gitlab_runner.shell|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.shell is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner executor section", "module": "lineinfile", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner executor section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.{{ gitlab_runner.executor|default(\"shell\") }}\\]", "line": "  [runners.{{ gitlab_runner.executor|replace(\"docker+machine\",\"machine\")|default(\"shell\") }}]", "state": "{{ 'absent' if (gitlab_runner.executor|default('shell')) == 'shell' else 'present' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set output_limit option", "module": "lineinfile", "index": 11, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set output_limit option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*output_limit =", "line": "  output_limit = {{ gitlab_runner.output_limit|default(4096) }}", "state": "present", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner docker image option", "module": "lineinfile", "index": 12, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner docker image option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*image =", "line": "    image = {{ gitlab_runner.docker_image|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_image is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker helper image option", "module": "lineinfile", "index": 13, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker helper image option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*helper_image =", "line": "    helper_image = {{ gitlab_runner.docker_helper_image|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_helper_image is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker privileged option", "module": "lineinfile", "index": 14, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker privileged option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*privileged =", "line": "    privileged = {{ gitlab_runner.docker_privileged|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_privileged is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker wait_for_services_timeout option", "module": "lineinfile", "index": 15, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker wait_for_services_timeout option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*wait_for_services_timeout =", "line": "    wait_for_services_timeout = {{ gitlab_runner.docker_wait_for_services_timeout|default(30) }}", "state": "{{ 'present' if gitlab_runner.docker_wait_for_services_timeout is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker tlsverify option", "module": "lineinfile", "index": 16, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker tlsverify option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*tls_verify =", "line": "    tls_verify = {{ gitlab_runner.docker_tlsverify|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_tlsverify is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker shm_size option", "module": "lineinfile", "index": 17, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker shm_size option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*shm_size =", "line": "    shm_size = {{ gitlab_runner.docker_shm_size|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_shm_size is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker disable_cache option", "module": "lineinfile", "index": 18, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker disable_cache option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*disable_cache =", "line": "    disable_cache = {{ gitlab_runner.docker_disable_cache|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_disable_cache is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker DNS option", "module": "lineinfile", "index": 19, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker DNS option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*dns =", "line": "    dns = {{ gitlab_runner.docker_dns|default(false) | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_dns is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker DNS search option", "module": "lineinfile", "index": 20, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker DNS search option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*dns_search =", "line": "    dns_search = {{ gitlab_runner.docker_dns_search|default(false) | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_dns_search is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker pull_policy option", "module": "lineinfile", "index": 21, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker pull_policy option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pull_policy =", "line": "    pull_policy = {{ gitlab_runner.docker_pull_policy|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_pull_policy is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker volumes option", "module": "lineinfile", "index": 22, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker volumes option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*volumes =", "line": "    volumes = {{ gitlab_runner.docker_volumes|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_volumes is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker devices option", "module": "lineinfile", "index": 23, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker devices option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*devices =", "line": "    devices = {{ gitlab_runner.docker_devices|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_devices is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner docker network option", "module": "lineinfile", "index": 24, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner docker network option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*network_mode =", "line": "    network_mode = {{ gitlab_runner.docker_network_mode|default(\"bridge\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_network_mode is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set custom_build_dir section", "module": "lineinfile", "index": 25, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set custom_build_dir section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.custom_build_dir\\]", "line": "  [runners.custom_build_dir]", "state": "{{ 'present' if gitlab_runner.custom_build_dir_enabled is defined else 'absent' }}", "insertafter": "EOF", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker custom_build_dir-enabled option", "module": "lineinfile", "index": 26, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker custom_build_dir-enabled option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*enabled =", "line": "    enabled = {{ gitlab_runner.custom_build_dir_enabled|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.custom_build_dir_enabled is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.custom_build_dir\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache section", "module": "lineinfile", "index": 27, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\]", "line": "  [runners.cache]", "state": "present", "insertafter": "EOF", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 section", "module": "lineinfile", "index": 28, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\.s3\\]", "line": "    [runners.cache.s3]", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs section", "module": "lineinfile", "index": 29, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\.gcs\\]", "line": "    [runners.cache.gcs]", "state": "{{ 'present' if gitlab_runner.cache_gcs_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure section", "module": "lineinfile", "index": 30, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\.azure\\]", "line": "    [runners.cache.azure]", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache type option", "module": "lineinfile", "index": 31, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache type option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Type =", "line": "    Type = {{ gitlab_runner.cache_type|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache path option", "module": "lineinfile", "index": 32, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache path option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Path =", "line": "    Path = {{ gitlab_runner.cache_path|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_path is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache shared option", "module": "lineinfile", "index": 33, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache shared option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Shared =", "line": "    Shared = {{ gitlab_runner.cache_shared|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_shared is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 server addresss", "module": "lineinfile", "index": 34, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 server addresss", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*ServerAddress =", "line": "      ServerAddress = {{ gitlab_runner.cache_s3_server_address|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_server_address is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 access key", "module": "lineinfile", "index": 35, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 access key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccessKey =", "line": "      AccessKey = {{ gitlab_runner.cache_s3_access_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_access_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 secret key", "module": "lineinfile", "index": 36, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 secret key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*SecretKey =", "line": "      SecretKey = {{ gitlab_runner.cache_s3_secret_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_secret_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 bucket name option", "module": "lineinfile", "index": 37, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 bucket name option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.cache_type is defined and gitlab_runner.cache_type == 's3'"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketName =", "line": "      BucketName = {{ gitlab_runner.cache_s3_bucket_name|default(\"\")  | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 bucket location option", "module": "lineinfile", "index": 38, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 bucket location option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketLocation =", "line": "      BucketLocation = {{ gitlab_runner.cache_s3_bucket_location|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_location is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 insecure option", "module": "lineinfile", "index": 39, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 insecure option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Insecure =", "line": "      Insecure = {{ gitlab_runner.cache_s3_insecure|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_s3_insecure is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs bucket name", "module": "lineinfile", "index": 40, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs bucket name", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.cache_type is defined and gitlab_runner.cache_type == 'gcs'"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketName =", "line": "      BucketName = {{ gitlab_runner.cache_gcs_bucket_name|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs credentials file", "module": "lineinfile", "index": 41, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs credentials file", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*CredentialsFile =", "line": "      CredentialsFile = {{ gitlab_runner.cache_gcs_credentials_file|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_credentials_file is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs access id", "module": "lineinfile", "index": 42, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs access id", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccessID =", "line": "      AccessID = {{ gitlab_runner.cache_gcs_access_id|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_access_id is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs private key", "module": "lineinfile", "index": 43, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs private key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*PrivateKey =", "line": "      PrivateKey = {{ gitlab_runner.cache_gcs_private_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_private_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure account name", "module": "lineinfile", "index": 44, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure account name", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccountName =", "line": "      AccountName = {{ gitlab_runner.cache_azure_account_name|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_account_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure account key", "module": "lineinfile", "index": 45, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure account key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccountKey =", "line": "      AccountKey = {{ gitlab_runner.cache_azure_account_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_account_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure container name", "module": "lineinfile", "index": 46, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure container name", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*ContainerName =", "line": "      ContainerName = {{ gitlab_runner.cache_azure_container_name|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_container_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure storage domain", "module": "lineinfile", "index": 47, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure storage domain", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*StorageDomain =", "line": "      StorageDomain = {{ gitlab_runner.cache_azure_storage_domain|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_storage_domain is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh user option", "module": "lineinfile", "index": 48, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh user option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*user =", "line": "  user = {{ gitlab_runner.ssh_user|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_user is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh host option", "module": "lineinfile", "index": 49, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh host option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*host =", "line": "  host = {{ gitlab_runner.ssh_host|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_host is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh port option", "module": "lineinfile", "index": 50, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh port option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*port =", "line": "  port = \"{{ gitlab_runner.ssh_port|default(\"\") | to_json }}\"", "state": "{{ 'present' if gitlab_runner.ssh_port is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh password option", "module": "lineinfile", "index": 51, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh password option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*password =", "line": "  password = {{ gitlab_runner.ssh_password|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_password is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh identity file option", "module": "lineinfile", "index": 52, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh identity file option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*identity_file =", "line": "  identity_file = {{ gitlab_runner.ssh_identity_file|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_identity_file is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox base name option", "module": "lineinfile", "index": 53, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox base name option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*base_name =", "line": "    base_name = {{ gitlab_runner.virtualbox_base_name | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_base_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox base snapshot option", "module": "lineinfile", "index": 54, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox base snapshot option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*base_snapshot =", "line": "    base_snapshot = {{ gitlab_runner.virtualbox_base_snapshot | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_base_snapshot is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox base folder option", "module": "lineinfile", "index": 55, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox base folder option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*base_folder =", "line": "    base_folder = {{ gitlab_runner.virtualbox_base_folder | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_base_folder is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox disable snapshots option", "module": "lineinfile", "index": 56, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox disable snapshots option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*disable_snapshots =", "line": "    disable_snapshots = {{ gitlab_runner.virtualbox_disable_snapshots|default(false) | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_disable_snapshots is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set builds dir file option", "module": "lineinfile", "index": 57, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set builds dir file option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*builds_dir =", "line": "  builds_dir = {{ gitlab_runner.builds_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.builds_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache dir file option", "module": "lineinfile", "index": 58, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache dir file option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*cache_dir =", "line": "  cache_dir = {{ gitlab_runner.cache_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Ensure directory permissions", "module": "file", "index": 59, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Ensure directory permissions", "loop": ["{{ gitlab_runner.builds_dir | default(\"\") }}", "{{ gitlab_runner.cache_dir | default(\"\") }}"], "when": "item|length"}, "module_options": {"dest": "{{ item }}", "state": "directory", "owner": "{{ gitlab_runner_runtime_owner|default(omit) }}", "group": "{{ gitlab_runner_runtime_group|default(omit) }}", "mode": 504, "modification_time": "preserve", "access_time": "preserve", "recurse": true}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Ensure directory access test", "module": "command", "index": 60, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Ensure directory access test", "loop": ["{{ gitlab_runner.builds_dir | default(\"\") }}", "{{ gitlab_runner.cache_dir | default(\"\") }}"], "when": "item|length", "changed_when": false, "become": true, "become_user": "{{ gitlab_runner_runtime_owner|default(omit) }}", "register": "ensure_directory_access", "ignore_errors": true}, "module_options": "/usr/bin/test -r {{ item }}", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Ensure directory access fail on error", "module": "fail", "index": 61, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Ensure directory access fail on error", "loop": "{{ ensure_directory_access.results }}", "when": ["item.rc is defined and item.rc != 0"]}, "module_options": {"msg": "Error: user gitlab-runner failed to test access to {{ item.item }}. Check parent folder(s) permissions"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 62, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"vars": {"sect_name_prefix": "{{ runn_name_prefix }} section[{{ (section_index|int) + 1 }}/{{ gitlab_runner.extra_configs|list|length }}]:"}, "loop": "{{ gitlab_runner.extra_configs|list }}", "loop_control": {"loop_var": "section", "index_var": "section_index"}, "when": ["gitlab_runner.extra_configs is defined", "gitlab_runner.extra_configs|list|length > 0"]}, "module_options": "section-config-runner.yml", "executable": "section-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml": {"py/object": "struct4.TaskFile", "name": "config-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) {{ conf_name_prefix }} Create temporary file", "module": "win_tempfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"name": "(Windows) {{ conf_name_prefix }} Create temporary file", "register": "temp_runner_config", "check_mode": false, "changed_when": false}, "module_options": {"state": "file", "path": "{{ temp_runner_config_dir.path }}", "prefix": "gitlab-runner.{{ runner_config_index }}."}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ conf_name_prefix }} Isolate runner configuration", "module": "win_copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"name": "(Windows) {{ conf_name_prefix }} Isolate runner configuration", "check_mode": false, "changed_when": false}, "module_options": {"dest": "{{ temp_runner_config.path }}", "content": "{{ runner_config }}"}, "executable": "win_copy", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"vars": {"runn_name_prefix": "{{ conf_name_prefix }} runner[{{ (gitlab_runner_index|int) + 1 }}/{{ gitlab_runner_runners|length }}]:"}, "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'present'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "update-config-runner-windows.yml", "executable": "update-config-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ conf_name_prefix }} Remove runner config", "module": "win_file", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"name": "(Windows) {{ conf_name_prefix }} Remove runner config", "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'absent'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": {"path": "{{ temp_runner_config.path }}", "state": "absent"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml": {"py/object": "struct4.TaskFile", "name": "systemd-reload.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure /etc/systemd/system/gitlab-runner.service.d/ exists", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Ensure /etc/systemd/system/gitlab-runner.service.d/ exists", "become": true}, "module_options": {"path": "/etc/systemd/system/gitlab-runner.service.d", "state": "directory", "owner": "root", "group": "root", "mode": 493}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add reload command to GitLab Runner system service", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Add reload command to GitLab Runner system service", "become": true, "register": "gitlab_runner_exec_reload"}, "module_options": {"dest": "/etc/systemd/system/gitlab-runner.service.d/exec-reload.conf", "content": "[Service]\nExecReload=/bin/kill -HUP $MAINPID\n"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure graceful stop for GitLab Runner system service", "module": "copy", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Configure graceful stop for GitLab Runner system service", "become": true, "when": "gitlab_runner_timeout_stop_seconds > 0", "register": "gitlab_runner_kill_timeout"}, "module_options": {"dest": "/etc/systemd/system/gitlab-runner.service.d/kill.conf", "content": "[Service]\nTimeoutStopSec={{ gitlab_runner_timeout_stop_seconds }}\nKillSignal=SIGQUIT\n"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Force systemd to reread configs", "module": "systemd", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Force systemd to reread configs", "become": true, "when": "gitlab_runner_exec_reload.changed or gitlab_runner_kill_timeout"}, "module_options": {"daemon_reload": true}, "executable": "systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml": {"py/object": "struct4.TaskFile", "name": "global-setup.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "tasks": [{"py/object": "struct4.Task", "name": "Create .gitlab-runner dir", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Create .gitlab-runner dir", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory", "mode": "0700"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure config.toml exists", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Ensure config.toml exists", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set concurrent option", "module": "lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Set concurrent option", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s*)concurrent =", "line": "\\1concurrent = {{ gitlab_runner_concurrent }}", "state": "present", "backrefs": true}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add listen_address to config", "module": "lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add listen_address to config", "when": "gitlab_runner_listen_address | length > 0", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^listen_address =", "line": "listen_address = \"{{ gitlab_runner_listen_address }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add log_format to config", "module": "lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add log_format to config", "when": "gitlab_runner_log_format is defined", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^log_format =", "line": "log_format = \"{{ gitlab_runner_log_format|default(\"runner\") }}\"", "insertbefore": "BOF", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add sentry dsn to config", "module": "lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add sentry dsn to config", "when": "gitlab_runner_sentry_dsn | length > 0", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^sentry_dsn =", "line": "sentry_dsn = \"{{ gitlab_runner_sentry_dsn }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add session server listen_address to config", "module": "lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add session server listen_address to config", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s+)listen_address =", "line": "  listen_address = \"{{ gitlab_runner_session_server_listen_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_listen_address | length > 0 else 'absent' }}"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add session server advertise_address to config", "module": "lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add session server advertise_address to config", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*advertise_address =", "line": "  advertise_address = \"{{ gitlab_runner_session_server_advertise_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_advertise_address | length > 0 else 'absent' }}"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add session server session_timeout to config", "module": "lineinfile", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add session server session_timeout to config", "when": "gitlab_runner_session_server_session_timeout", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*session_timeout =", "line": "  session_timeout = {{ gitlab_runner_session_server_session_timeout }}", "insertafter": "^\\s*\\[session_server\\]", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml": {"py/object": "struct4.TaskFile", "name": "global-setup-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) Create .gitlab-runner dir", "module": "win_file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Create .gitlab-runner dir"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Ensure config.toml exists", "module": "win_file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Ensure config.toml exists"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Set concurrent option", "module": "win_lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Set concurrent option", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s*)concurrent =.*", "line": "$1concurrent = {{ gitlab_runner_concurrent }}", "state": "present", "backrefs": true}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add listen_address to config", "module": "win_lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add listen_address to config", "when": "gitlab_runner_listen_address | length > 0", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^listen_address =.*", "line": "listen_address = \"{{ gitlab_runner_listen_address }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add sentry dsn to config", "module": "win_lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add sentry dsn to config", "when": "gitlab_runner_sentry_dsn | length > 0", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^sentry_dsn =.*", "line": "sentry_dsn = \"{{ gitlab_runner_sentry_dsn }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add session server listen_address to config", "module": "win_lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add session server listen_address to config", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s+)listen_address =", "line": "  listen_address = \"{{ gitlab_runner_session_server_listen_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_listen_address | length > 0 else 'absent' }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add session server advertise_address to config", "module": "win_lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add session server advertise_address to config", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*advertise_address =", "line": "  advertise_address = \"{{ gitlab_runner_session_server_advertise_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_advertise_address | length > 0 else 'absent' }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add session server session_timeout to config", "module": "win_lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add session server session_timeout to config", "when": "gitlab_runner_session_server_session_timeout", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*session_timeout =", "line": "  session_timeout = {{ gitlab_runner_session_server_session_timeout }}", "insertafter": "^\\s*\\[session_server\\]", "state": "present"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml": {"py/object": "struct4.TaskFile", "name": "Unix.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "tasks": [{"py/object": "struct4.Task", "name": "Install GitLab Runner (Debian)", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (Debian)", "when": "ansible_os_family == 'Debian'"}, "module_options": "install-debian.yml", "executable": "install-debian.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (RedHat)", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (RedHat)", "when": "ansible_os_family == 'RedHat'"}, "module_options": "install-redhat.yml", "executable": "install-redhat.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (macOS)", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (macOS)", "when": "ansible_os_family == 'Darwin'"}, "module_options": "install-macos.yml", "executable": "install-macos.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (Arch)", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (Arch)", "when": "ansible_os_family == 'Archlinux'"}, "module_options": "install-arch.yml", "executable": "install-arch.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Unix) List configured runners", "module": "command", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) List configured runners", "register": "configured_runners", "changed_when": false, "check_mode": false, "become": true}, "module_options": "{{ gitlab_runner_executable }} list", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Unix) Check runner is registered", "module": "command", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) Check runner is registered", "register": "verified_runners", "ignore_errors": true, "changed_when": false, "check_mode": false, "become": true}, "module_options": "{{ gitlab_runner_executable }} verify", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Unix) Register GitLab Runner", "module": "include_tasks", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) Register GitLab Runner", "when": "gitlab_runner.token is defined or gitlab_runner_registration_token | string | length > 0", "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "register-runner.yml", "executable": "register-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set global options (macOS/Debian/RedHat)", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Set global options (macOS/Debian/RedHat)"}, "module_options": "global-setup.yml", "executable": "global-setup.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Unix) Configure GitLab Runner", "module": "import_tasks", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) Configure GitLab Runner"}, "module_options": "config-runners.yml", "executable": "config-runners.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml": {"py/object": "struct4.TaskFile", "name": "install-container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Container) Pull Image from Registry", "module": "docker_image", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml", "options": {"name": "(Container) Pull Image from Registry"}, "module_options": {"name": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "source": "pull"}, "executable": "docker_image", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Define Container volume Path", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml", "options": {"name": "(Container) Define Container volume Path"}, "module_options": {"state": "directory", "path": "{{ gitlab_runner_container_mount_path }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml": {"py/object": "struct4.TaskFile", "name": "line-config-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) {{ line_name_prefix }} Ensure section exists", "module": "win_lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml", "options": {"name": "(Windows) {{ line_name_prefix }} Ensure section exists"}, "module_options": {"path": "{{ temp_runner_config.path }}", "regexp": "^(\\s*)\\[{{ section|regex_escape }}\\]$", "line": "{{ \"  \" * (section.split(\".\")|length -1) }}[{{ section }}]"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ line_name_prefix }} Modify existing line", "module": "win_lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml", "options": {"name": "(Windows) {{ line_name_prefix }} Modify existing line", "register": "modified_config_line"}, "module_options": {"path": "{{ temp_runner_config.path }}", "insertafter": "\\s+\\[{{ section | regex_escape }}\\]", "regexp": "^(\\s*)({{ line | to_json | regex_escape }}|{{ line | regex_escape }}) =.*", "line": "{{ \"  \" * (section.split(\".\")|length) }}{{ line | to_json }} = {{ gitlab_runner.extra_configs[section][line] | to_json }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml": {"py/object": "struct4.TaskFile", "name": "line-config-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ line_name_prefix }} Ensure section exists", "module": "lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml", "options": {"name": "{{ line_name_prefix }} Ensure section exists"}, "module_options": {"path": "{{ temp_runner_config.path }}", "regexp": "^(\\s*)\\[{{ section|regex_escape }}\\]$", "line": "{{ \"  \" * (section.split(\".\")|length -1) }}[{{ section }}]"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ line_name_prefix }} Modify existing line", "module": "lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml", "options": {"name": "{{ line_name_prefix }} Modify existing line", "register": "modified_config_line"}, "module_options": {"path": "{{ temp_runner_config.path }}", "insertafter": "\\s+\\[{{ section | regex_escape }}\\]", "regexp": "^(\\s*)({{ line | to_json | regex_escape }}|{{ line | regex_escape }}) =", "line": "{{ \"  \" * (section.split(\".\")|length) }}{{ line | to_json }} = {{ gitlab_runner.extra_configs[section][line] | to_json }}"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml": {"py/object": "struct4.TaskFile", "name": "install-debian.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian) Get Gitlab repository installation script", "module": "get_url", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Get Gitlab repository installation script", "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": {"url": "https://packages.gitlab.com/install/repositories/runner/{{ gitlab_runner_package_name }}/script.deb.sh", "dest": "/tmp/gitlab-runner.script.deb.sh", "mode": 484}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Install Gitlab repository", "module": "command", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Install Gitlab repository", "args": {"creates": "/etc/apt/sources.list.d/runner_{{ gitlab_runner_package_name }}.list"}, "become": true, "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": "bash /tmp/gitlab-runner.script.deb.sh", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Update gitlab_runner_package_name", "module": "set_fact", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Update gitlab_runner_package_name", "when": "gitlab_runner_package_version is defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}={{ gitlab_runner_package_version }}", "gitlab_runner_package_state": "present"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Set gitlab_runner_package_name", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Set gitlab_runner_package_name", "when": "gitlab_runner_package_version is not defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}", "gitlab_runner_package_state": "latest"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Install GitLab Runner", "module": "apt", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Install GitLab Runner", "become": true, "environment": {"GITLAB_RUNNER_DISABLE_SKEL": "true"}, "when": "ansible_distribution_release in [\"buster\", \"focal\"]"}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Install GitLab Runner", "module": "apt", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Install GitLab Runner", "become": true, "when": "ansible_distribution_release not in [\"buster\", \"focal\"]"}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Remove ~/gitlab-runner/.bash_logout on debian buster and ubuntu focal", "module": "file", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Remove ~/gitlab-runner/.bash_logout on debian buster and ubuntu focal", "when": "ansible_distribution_release in [\"buster\", \"focal\"]"}, "module_options": {"path": "/home/gitlab-runner/.bash_logout", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set systemd reload options", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "Set systemd reload options"}, "module_options": "systemd-reload.yml", "executable": "systemd-reload.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml": {"py/object": "struct4.TaskFile", "name": "config-runners.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "tasks": [{"py/object": "struct4.Task", "name": "Get existing config.toml", "module": "slurp", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Get existing config.toml", "register": "runner_config_file", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"src": "{{ gitlab_runner_config_file }}"}, "executable": "slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get pre-existing runner configs", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Get pre-existing runner configs"}, "module_options": {"runner_configs": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]\n') }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create temporary directory", "module": "tempfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Create temporary directory", "register": "temp_runner_config_dir", "check_mode": false, "changed_when": false}, "module_options": {"state": "directory", "suffix": "gitlab-runner-config"}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Write config section for each runner", "module": "vars", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Write config section for each runner", "include_tasks": "config-runner.yml", "loop": "{{ runner_configs }}", "loop_control": {"index_var": "runner_config_index", "loop_var": "runner_config"}}, "module_options": {"conf_name_prefix": "conf[{{ (runner_config_index|int) + 1 }}/{{ runner_configs|length }}]:"}, "executable": "vars", "executable_type": "Module", "fqcn": "ansible.builtin.vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "Assemble new config.toml", "module": "assemble", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Assemble new config.toml", "become": "{{ gitlab_runner_system_mode }}", "diff": "{{ gitlab_runner_show_config_diff|bool }}"}, "module_options": {"src": "{{ temp_runner_config_dir.path }}", "dest": "{{ gitlab_runner_config_file }}", "delimiter": "[[runners]]\\n", "backup": true, "validate": "{{ gitlab_runner_executable }} verify -c %s", "mode": 384}, "executable": "assemble", "executable_type": "Module", "fqcn": "ansible.builtin.assemble", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml": {"py/object": "struct4.TaskFile", "name": "config-runners-container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "tasks": [{"py/object": "struct4.Task", "name": "Get existing config.toml", "module": "slurp", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Get existing config.toml", "register": "runner_config_file"}, "module_options": {"src": "{{ gitlab_runner_config_file }}"}, "executable": "slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get pre-existing runner configs", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Get pre-existing runner configs"}, "module_options": {"runner_configs": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]\n') }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create temporary directory", "module": "tempfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Create temporary directory", "register": "temp_runner_config_dir", "check_mode": false, "changed_when": false}, "module_options": {"state": "directory", "suffix": "gitlab-runner-config"}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Write config section for each runner", "module": "vars", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Write config section for each runner", "include_tasks": "config-runner-container.yml", "loop": "{{ runner_configs }}", "loop_control": {"index_var": "runner_config_index", "loop_var": "runner_config"}}, "module_options": {"conf_name_prefix": "conf[{{ (runner_config_index|int) + 1 }}/{{ runner_configs|length }}]:"}, "executable": "vars", "executable_type": "Module", "fqcn": "ansible.builtin.vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "Assemble new config.toml", "module": "assemble", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Assemble new config.toml"}, "module_options": {"src": "{{ temp_runner_config_dir.path }}", "dest": "{{ gitlab_runner_config_file }}", "delimiter": "[[runners]]\\n", "backup": true, "validate": "docker run -i --rm -v %s:/gitlab-runner.conf\n{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}\nverify -c /gitlab-runner.conf\n", "mode": 384}, "executable": "assemble", "executable_type": "Module", "fqcn": "ansible.builtin.assemble", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml": {"py/object": "struct4.TaskFile", "name": "register-runner-container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "tasks": [{"py/object": "struct4.Task", "name": "remove config.toml file", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "options": {"name": "remove config.toml file"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure config.toml exists", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "options": {"name": "Ensure config.toml exists"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Register runner to GitLab", "module": "docker_container", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "options": {"name": "Register runner to GitLab", "when": "(verified_runners.container.Output.find(\"Verifying runner... is removed\") != -1) or ((configured_runners.container.Output.find('\\n' + gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)) == -1) and (gitlab_runner.state|default('present') == 'present'))", "no_log": false}, "module_options": {"name": "{{ gitlab_runner_container_name }}", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "command": "register\n--non-interactive\n--url '{{ gitlab_runner.url | default(gitlab_runner_coordinator_url) }}'\n--registration-token '{{ gitlab_runner.token|default(gitlab_runner_registration_token) }}'\n--description '{{ gitlab_runner.name|default(ansible_hostname+\"-\"+gitlab_runner_index|string) }}'\n--tag-list '{{ gitlab_runner.tags|default([]) | join(\",\") }}'\n{% if gitlab_runner.clone_url|default(false) %}\n--clone-url \"{{ gitlab_runner.clone_url }}\"\n{% endif %}\n{% if gitlab_runner.run_untagged|default(true) %}\n--run-untagged\n{% endif %}\n{% if gitlab_runner.protected|default(false) %}\n--access-level=\"ref_protected\"\n{% endif %}\n--executor '{{ gitlab_runner.executor|default(\"shell\") }}'\n--limit '{{ gitlab_runner.concurrent_specific|default(0) }}'\n--output-limit '{{ gitlab_runner.output_limit|default(4096) }}'\n--locked='{{ gitlab_runner.locked|default(false) }}'\n{% for env_var in gitlab_runner.env_vars|default([]) %}\n--env '{{ env_var }}'\n{% endfor %}\n{% if gitlab_runner.pre_clone_script|default(false) %}\n--pre-clone-script \"{{ gitlab_runner.pre_clone_script }}\"\n{% endif %}\n{% if gitlab_runner.pre_build_script|default(false) %}\n--pre-build-script \"{{ gitlab_runner.pre_build_script }}\"\n{% endif %}\n{% if gitlab_runner.post_build_script|default(false) %}\n--post-build-script \"{{ gitlab_runner.post_build_script }}\"\n{% endif %}\n--docker-image '{{ gitlab_runner.docker_image|default(\"alpine\") }}'\n{% if gitlab_runner.docker_privileged|default(false) %}\n--docker-privileged\n{% endif %}\n{% if gitlab_runner.docker_tlsverify|default(false) %}\n--docker-tlsverify '{{ gitlab_runner.docker_tlsverify|default(\"true\") }}'\n{% endif %}\n{% if gitlab_runner.docker_dns|default(false) %}\n--docker-dns '{{ gitlab_runner.docker_dns|default(\"1.1.1.1\") }}'\n{% endif %}\n{% if gitlab_runner.docker_dns_search|default(false) %}\n--docker-dns-search '{{ gitlab_runner.docker_dns_search|default([]) }}'\n{% endif %}\n{% if gitlab_runner.docker_disable_cache|default(false) %}\n--docker-disable-cache\n{% endif %}\n{% if gitlab_runner.docker_oom_kill_disable|default(false) %}\n--docker-oom-kill-disable '{{ gitlab_runner.docker_oom_kill_disable|default(\"false\") }}'\n{% endif %}\n{% for volume in gitlab_runner.docker_volumes | default([]) %}\n--docker-volumes \"{{ volume }}\"\n{% endfor %}\n{% for device in gitlab_runner.docker_devices | default([]) %}\n--docker-devices \"{{ device }}\"\n{% endfor %}\n--ssh-user '{{ gitlab_runner.ssh_user|default(\"\") }}'\n--ssh-host '{{ gitlab_runner.ssh_host|default(\"\") }}'\n--ssh-port '{{ gitlab_runner.ssh_port|default(\"\") }}'\n--ssh-password '{{ gitlab_runner.ssh_password|default(\"\") }}'\n--ssh-identity-file '{{ gitlab_runner.ssh_identity_file|default(\"\") }}'\n{% if gitlab_runner.cache_type is defined %}\n--cache-type '{{ gitlab_runner.cache_type }}'\n{% endif %}\n{% if gitlab_runner.cache_shared|default(false) %}\n--cache-shared\n{% endif %}\n{% if gitlab_runner.cache_path is defined %}\n--cache-path '{{ gitlab_runner.cache_path }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_server_address is defined %}\n--cache-s3-server-address '{{ gitlab_runner.cache_s3_server_address }}'\n{% if gitlab_runner.cache_s3_access_key is defined %}\n--cache-s3-access-key '{{ gitlab_runner.cache_s3_access_key }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_secret_key is defined %}\n--cache-s3-secret-key '{{ gitlab_runner.cache_s3_secret_key }}'\n{% endif %}\n{% endif %}\n{% if gitlab_runner.cache_s3_bucket_name is defined %}\n--cache-s3-bucket-name '{{ gitlab_runner.cache_s3_bucket_name }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_bucket_location is defined %}\n--cache-s3-bucket-location '{{ gitlab_runner.cache_s3_bucket_location }}'\n{% endif %}\n{% if gitlab_runner.builds_dir|default(false) %}\n--builds-dir '{{ gitlab_runner.builds_dir }}'\n{% endif %}\n{% if gitlab_runner.cache_dir|default(false) %}\n--cache-dir '{{ gitlab_runner.cache_dir }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_insecure|default(false) %}\n--cache-s3-insecure\n{% endif %}\n{% if gitlab_runner.extra_registration_option is defined %}\n{{ gitlab_runner.extra_registration_option }}\n{% endif %}\n", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}], "cleanup": true, "auto_remove": true, "network_mode": "{{ gitlab_runner_container_network }}"}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml": {"py/object": "struct4.TaskFile", "name": "install-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) Check gitlab-runner executable exists", "module": "win_stat", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Check gitlab-runner executable exists", "register": "gitlab_runner_exists"}, "module_options": {"path": "{{ gitlab_runner_executable }}"}, "executable": "win_stat", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Set fact -> gitlab_runner_exists", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Set fact -> gitlab_runner_exists"}, "module_options": {"gitlab_runner_exists": "{{ gitlab_runner_exists.stat.exists }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Get existing version", "module": "win_shell", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Get existing version", "register": "existing_version_shell", "failed_when": false, "check_mode": false, "changed_when": false}, "module_options": "{{ gitlab_runner_executable }} --version | Select-String 'Version:' -CaseSensitive | %{ $_.Line.Split(' ')[-1].Trim(); }", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Set fact -> gitlab_runner_existing_version", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Set fact -> gitlab_runner_existing_version"}, "module_options": {"gitlab_runner_existing_version": "{{ existing_version_shell.stdout | trim if existing_version_shell.rc == 0 else '0' }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Ensure install directory exists", "module": "win_file", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Ensure install directory exists"}, "module_options": {"path": "{{ gitlab_runner_install_directory }}", "state": "directory"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Download GitLab Runner", "module": "win_get_url", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "win_get_url", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Install GitLab Runner", "module": "win_command", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Install GitLab Runner", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "when": "(gitlab_runner_windows_service_user | length == 0) or (gitlab_runner_windows_service_password | length == 0)"}, "module_options": "{{ gitlab_runner_executable }} install", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Install GitLab Runner", "module": "win_command", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Install GitLab Runner", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "when": ["gitlab_runner_windows_service_user | length > 0", "gitlab_runner_windows_service_password | length > 0"]}, "module_options": "{{ gitlab_runner_executable }} install --user \"{{ gitlab_runner_windows_service_user }}\" --password \"{{ gitlab_runner_windows_service_password }}\"", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Make sure runner is stopped", "module": "win_command", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Make sure runner is stopped", "ignore_errors": true, "when": ["gitlab_runner_exists"]}, "module_options": "{{ gitlab_runner_executable }} stop", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Download GitLab Runner", "module": "win_get_url", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "win_get_url", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml": {"py/object": "struct4.TaskFile", "name": "register-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "remove config.toml file", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "remove config.toml file", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create .gitlab-runner dir", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Create .gitlab-runner dir", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory", "mode": "0700"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure config.toml exists", "module": "file", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Ensure config.toml exists", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Construct the runner command without secrets", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Construct the runner command without secrets"}, "module_options": {"command": "{{ gitlab_runner_executable }} register --non-interactive --url '{{ gitlab_runner.url|default(gitlab_runner_coordinator_url) }}' --description '{{ gitlab_runner.name|default(ansible_hostname+\"-\"+gitlab_runner_index|string) }}' --tag-list '{{ gitlab_runner.tags|default([]) | join(\",\") }}' {% if gitlab_runner.clone_url|default(false) %} --clone-url \"{{ gitlab_runner.clone_url }}\" {% endif %} {% if gitlab_runner.run_untagged|default(true) %} --run-untagged {% endif %} {% if gitlab_runner.protected|default(false) %} --access-level=\"ref_protected\" {% endif %} --executor '{{ gitlab_runner.executor|default(\"shell\") }}' {% if gitlab_runner.shell is defined %} --shell '{{ gitlab_runner.shell }}' {% endif %} --limit '{{ gitlab_runner.concurrent_specific|default(0) }}' --output-limit '{{ gitlab_runner.output_limit|default(4096) }}' --locked='{{ gitlab_runner.locked|default(false) }}' {% for env_var in gitlab_runner.env_vars|default([]) %} --env '{{ env_var }}' {% endfor %} {% if gitlab_runner.pre_clone_script|default(false) %} --pre-clone-script \"{{ gitlab_runner.pre_clone_script }}\" {% endif %} {% if gitlab_runner.pre_build_script|default(false) %} --pre-build-script \"{{ gitlab_runner.pre_build_script }}\" {% endif %} {% if gitlab_runner.tls_ca_file|default(false) %} --tls-ca-file \"{{ gitlab_runner.tls_ca_file }}\" {% endif %} {% if gitlab_runner.post_build_script|default(false) %} --post-build-script \"{{ gitlab_runner.post_build_script }}\" {% endif %} --docker-image '{{ gitlab_runner.docker_image|default(\"alpine\") }}' {% if gitlab_runner.docker_helper_image is defined %} --docker-helper-image \"{{ gitlab_runner.docker_helper_image }}\" {% endif %} {% if gitlab_runner.docker_privileged|default(false) %} --docker-privileged {% endif %} {% if gitlab_runner.docker_wait_for_services_timeout|default(false) %} --docker-wait-for-services-timeout '{{ gitlab_runner.docker_wait_for_services_timeout|default(30) }}' {% endif %} {% if gitlab_runner.docker_tlsverify|default(false) %} --docker-tlsverify '{{ gitlab_runner.docker_tlsverify|default(\"true\") }}' {% endif %} {% if gitlab_runner.docker_disable_cache|default(false) %} --docker-disable-cache '{{ gitlab_runner.docker_disable_cache|default(\"false\") }}' {% endif %} {% if gitlab_runner.docker_dns|default(false) %} --docker-dns '{{ gitlab_runner.docker_dns|default(\"1.1.1.1\") }}' {% endif %} {% if gitlab_runner.docker_dns_search|default(false) %} --docker-dns-search '{{ gitlab_runner.docker_dns_search|default([]) }}' {% endif %} {% if gitlab_runner.docker_disable_cache|default(false) %} --docker-disable-cache {% endif %} {% if gitlab_runner.docker_oom_kill_disable|default(false) %} --docker-oom-kill-disable '{{ gitlab_runner.docker_oom_kill_disable|default(\"false\") }}' {% endif %} {% for policy in gitlab_runner.docker_pull_policy|default([]) %} --docker-pull-policy \"{{ policy }}\" {% endfor %} {% for volume in gitlab_runner.docker_volumes|default([]) %} --docker-volumes \"{{ volume }}\" {% endfor %} {% for device in gitlab_runner.docker_devices|default([]) %} --docker-devices \"{{ device }}\" {% endfor %} --ssh-user '{{ gitlab_runner.ssh_user|default(\"\") }}' --ssh-host '{{ gitlab_runner.ssh_host|default(\"\") }}' --ssh-port '{{ gitlab_runner.ssh_port|default(\"\") }}' --ssh-identity-file '{{ gitlab_runner.ssh_identity_file|default(\"\") }}' {% if gitlab_runner.executor == \"virtualbox\" and gitlab_runner.virtualbox_base_name %}\n    --virtualbox-base-name '{{ gitlab_runner.virtualbox_base_name }}'\n    --virtualbox-base-snapshot '{{ gitlab_runner.virtualbox_base_snapshot|default(\"\") }}'\n    --virtualbox-base-folder '{{ gitlab_runner.virtualbox_base_folder|default(\"\") }}'\n    --virtualbox-disable-snapshots='{{ gitlab_runner.virtualbox_disable_snapshots|default(false) }}'\n{% endif %} {% if gitlab_runner.cache_type is defined %} --cache-type '{{ gitlab_runner.cache_type }}' {% endif %} {% if gitlab_runner.cache_shared|default(false) %} --cache-shared {% endif %} {% if gitlab_runner.cache_path is defined %} --cache-path '{{ gitlab_runner.cache_path }}' {% endif %} {% if gitlab_runner.cache_s3_server_address is defined %} --cache-s3-server-address '{{ gitlab_runner.cache_s3_server_address }}' {% if gitlab_runner.cache_s3_access_key is defined %} --cache-s3-access-key '{{ gitlab_runner.cache_s3_access_key }}' {% endif %} {% endif %} {% if gitlab_runner.cache_s3_bucket_name is defined %} --cache-s3-bucket-name '{{ gitlab_runner.cache_s3_bucket_name }}' {% endif %} {% if gitlab_runner.cache_s3_bucket_location is defined %} --cache-s3-bucket-location '{{ gitlab_runner.cache_s3_bucket_location }}' {% endif %} {% if gitlab_runner.builds_dir|default(false) %} --builds-dir '{{ gitlab_runner.builds_dir }}' {% endif %} {% if gitlab_runner.custom_build_dir_enabled|default(false) %} --custom_build_dir-enabled '{{ gitlab_runner.custom_build_dir_enabled }}' {% endif %} {% if gitlab_runner.cache_dir|default(false) %} --cache-dir '{{ gitlab_runner.cache_dir }}' {% endif %} {% if gitlab_runner.cache_s3_insecure|default(false) %} --cache-s3-insecure {% endif %} {% if gitlab_runner.extra_registration_option is defined %} {{ gitlab_runner.extra_registration_option }} {% endif %}\n"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Register runner to GitLab", "module": "command", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Register runner to GitLab", "when": "(verified_runners.stderr.find(\"Verifying runner... is removed\") != -1) or ((configured_runners.stderr.find('\\n' + gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)) == -1) and (gitlab_runner.state|default('present') == 'present'))", "no_log": true, "become": "{{ gitlab_runner_system_mode }}"}, "module_options": "{{ command }} --registration-token '{{ gitlab_runner.token|default(gitlab_runner_registration_token) }}' {% if gitlab_runner.cache_s3_secret_key is defined %} --cache-s3-secret-key '{{ gitlab_runner.cache_s3_secret_key }}' {% endif %} --ssh-password '{{ gitlab_runner.ssh_password|default(\"\") }}'\n", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner.yml": {"py/object": "struct4.TaskFile", "name": "section-config-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner.yml", "options": {"vars": {"line_name_prefix": "{{ sect_name_prefix }} line:[{{ (line_index|int) + 1 }}/{{ gitlab_runner.extra_configs[section]|list|length }}]: "}, "loop": "{{ gitlab_runner.extra_configs[section] | list }}", "loop_control": {"loop_var": "line", "index_var": "line_index"}}, "module_options": "line-config-runner.yml", "executable": "line-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml": {"py/object": "struct4.TaskFile", "name": "config-runner-container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Create temporary file", "module": "tempfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"name": "{{ conf_name_prefix }} Create temporary file", "register": "temp_runner_config", "check_mode": false, "changed_when": false}, "module_options": {"state": "file", "path": "{{ temp_runner_config_dir.path }}", "prefix": "gitlab-runner.{{ runner_config_index }}."}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Isolate runner configuration", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"name": "{{ conf_name_prefix }} Isolate runner configuration", "check_mode": false, "changed_when": false}, "module_options": {"dest": "{{ temp_runner_config.path }}", "content": "{{ runner_config }}"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"vars": {"runn_name_prefix": "{{ conf_name_prefix }} runner[{{ (gitlab_runner_index|int) + 1 }}/{{ gitlab_runner_runners|length }}]:"}, "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'present'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "update-config-runner.yml", "executable": "update-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Remove runner config", "module": "file", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"name": "{{ conf_name_prefix }} Remove runner config", "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'absent'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": {"path": "{{ temp_runner_config.path }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml": {"py/object": "struct4.TaskFile", "name": "Container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Container) Install Gitlab Runner", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Install Gitlab Runner", "when": "gitlab_runner_container_install"}, "module_options": "install-container.yml", "executable": "install-container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) List configured runners", "module": "docker_container", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) List configured runners", "register": "configured_runners", "changed_when": false, "check_mode": false}, "module_options": {"name": "{{ gitlab_runner_container_name }}-list", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "command": "list", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}], "cleanup": true, "interactive": true, "tty": true, "detach": false}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Check runner is registered", "module": "docker_container", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Check runner is registered", "register": "verified_runners", "ignore_errors": true, "changed_when": false, "check_mode": false}, "module_options": {"name": "{{ gitlab_runner_container_name }}-check", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "command": "verify", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}], "cleanup": true, "interactive": true, "tty": true, "detach": false}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "configured_runners?", "module": "debug", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "configured_runners?"}, "module_options": {"msg": "{{ configured_runners.container.Output }}"}, "executable": "debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, {"py/object": "struct4.Task", "name": "verified_runners?", "module": "debug", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "verified_runners?"}, "module_options": {"msg": "{{ verified_runners.container.Output }}"}, "executable": "debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Register GitLab Runner", "module": "include_tasks", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Register GitLab Runner", "when": "gitlab_runner.token is defined or gitlab_runner_registration_token | string | length > 0", "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "register-runner-container.yml", "executable": "register-runner-container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Set global options", "module": "import_tasks", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Set global options"}, "module_options": "global-setup.yml", "executable": "global-setup.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Configure GitLab Runner", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Configure GitLab Runner"}, "module_options": "config-runners-container.yml", "executable": "config-runners-container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Start the container", "module": "docker_container", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Start the container"}, "module_options": {"name": "{{ gitlab_runner_container_name }}", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "restart_policy": "{{ gitlab_runner_container_restart_policy }}", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}, {"type": "bind", "source": "/var/run/docker.sock", "target": "/var/run/docker.sock"}], "network_mode": "{{ gitlab_runner_container_network }}"}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml": {"py/object": "struct4.TaskFile", "name": "register-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) remove config.toml file", "module": "win_file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) remove config.toml file"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "absent"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Create .gitlab-runner dir", "module": "win_file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) Create .gitlab-runner dir"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Ensure config.toml exists", "module": "win_file", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) Ensure config.toml exists"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Register runner to GitLab", "module": "win_shell", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) Register runner to GitLab", "when": "(verified_runners.stderr.find(\"Verifying runner... is removed\") != -1) or ((configured_runners.stderr.find('\\n' + gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)) == -1) and (gitlab_runner.state|default('present') == 'present'))", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}}, "module_options": "{{ gitlab_runner_executable }} register --non-interactive --url '{{ gitlab_runner.url|default(gitlab_runner_coordinator_url) }}' --registration-token '{{ gitlab_runner.token|default(gitlab_runner_registration_token) }}' --description '{{ gitlab_runner.name|default(ansible_hostname+\"-\"+gitlab_runner_index|string) }}' --tag-list '{{ gitlab_runner.tags|default([]) | join(\",\") }}' {% if gitlab_runner.clone_url|default(false) %} --clone-url \"{{ gitlab_runner.clone_url }}\" {% endif %} {% if gitlab_runner.run_untagged|default(true) %} --run-untagged {% endif %} {% if gitlab_runner.protected|default(false) %} --access-level=\"ref_protected\" {% endif %} --executor '{{ gitlab_runner.executor|default(\"shell\") }}' {% if gitlab_runner.shell is defined %} --shell '{{ gitlab_runner.shell }}' {% endif %} --limit '{{ gitlab_runner.concurrent_specific|default(0) }}' --output-limit '{{ gitlab_runner.output_limit|default(4096) }}' --locked='{{ gitlab_runner.locked|default(false) }}' {% for env_var in gitlab_runner.env_vars|default([]) %} --env '{{ env_var }}' {% endfor %} {% if gitlab_runner.pre_clone_script|default(false) %} --pre-clone-script \"{{ gitlab_runner.pre_clone_script }}\" {% endif %} {% if gitlab_runner.pre_build_script|default(false) %} --pre-build-script \"{{ gitlab_runner.pre_build_script }}\" {% endif %} {% if gitlab_runner.post_build_script|default(false) %} --post-build-script \"{{ gitlab_runner.post_build_script }}\" {% endif %} --docker-image '{{ gitlab_runner.docker_image|default(\"alpine\") }}' {% if gitlab_runner.docker_privileged|default(false) %} --docker-privileged {% endif %} {% for volume in gitlab_runner.docker_volumes | default([]) %} --docker-volumes \"{{ volume }}\" {% endfor %} {% for device in gitlab_runner.docker_devices | default([]) %} --docker-devices \"{{ device }}\" {% endfor %} {% if gitlab_runner.ssh_user is defined %} --ssh-user '{{ gitlab_runner.ssh_user }}' {% endif %} {% if gitlab_runner.ssh_host is defined %} --ssh-host '{{ gitlab_runner.ssh_host }}' {% endif %} {% if gitlab_runner.ssh_port is defined %} --ssh-port '{{ gitlab_runner.ssh_port }}' {% endif %} {% if gitlab_runner.ssh_password is defined %} --ssh-password '{{ gitlab_runner.ssh_password }}' {% endif %} {% if gitlab_runner.ssh_identity_file is defined %} --ssh-identity-file '{{ gitlab_runner.ssh_identity_file }}' {% endif %} {% if gitlab_runner.cache_type is defined %} --cache-type '{{ gitlab_runner.cache_type }}' {% endif %} {% if gitlab_runner.cache_shared|default(false) %} --cache-shared {% endif %} {% if gitlab_runner.cache_path is defined %} --cache-path '{{ gitlab_runner.cache_path }}' {% endif %} {% if gitlab_runner.cache_s3_server_address is defined %} --cache-s3-server-address '{{ gitlab_runner.cache_s3_server_address }}' {% endif %} {% if gitlab_runner.cache_s3_access_key is defined %} --cache-s3-access-key '{{ gitlab_runner.cache_s3_access_key }}' {% endif %} {% if gitlab_runner.cache_s3_secret_key is defined %} --cache-s3-secret-key '{{ gitlab_runner.cache_s3_secret_key }}' {% endif %} {% if gitlab_runner.cache_s3_bucket_name is defined %} --cache-s3-bucket-name '{{ gitlab_runner.cache_s3_bucket_name }}' {% endif %} {% if gitlab_runner.cache_s3_bucket_location is defined %} --cache-s3-bucket-location '{{ gitlab_runner.cache_s3_bucket_location }}' {% endif %} {% if gitlab_runner.builds_dir|default(false) %} --builds-dir '{{ gitlab_runner.builds_dir }}' {% endif %} {% if gitlab_runner.cache_dir|default(false) %} --cache-dir '{{ gitlab_runner.cache_dir }}' {% endif %} {% if gitlab_runner.cache_s3_insecure|default(false) %} --cache-s3-insecure {% endif %} {% if gitlab_runner.extra_registration_option is defined %} {{ gitlab_runner.extra_registration_option }} {% endif %}\n", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml": {"py/object": "struct4.TaskFile", "name": "install-macos.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "tasks": [{"py/object": "struct4.Task", "name": "(MacOS) Check gitlab-runner executable exists", "module": "stat", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Check gitlab-runner executable exists", "register": "gitlab_runner_exists"}, "module_options": {"path": "{{ gitlab_runner_executable }}"}, "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Set fact -> gitlab_runner_exists", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Set fact -> gitlab_runner_exists"}, "module_options": {"gitlab_runner_exists": "{{ gitlab_runner_exists.stat.exists }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Get existing version", "module": "shell", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Get existing version", "register": "existing_version_shell", "failed_when": false, "check_mode": false, "changed_when": false}, "module_options": "{{ gitlab_runner_executable }} --version | awk '/Version: ([\\d\\.]*)/{print $2}'", "executable": "shell", "executable_type": "Module", "fqcn": "ansible.builtin.shell", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Set fact -> gitlab_runner_existing_version", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Set fact -> gitlab_runner_existing_version"}, "module_options": {"gitlab_runner_existing_version": "{{ existing_version_shell.stdout if existing_version_shell.rc == 0 else '0' }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Precreate gitlab-runner log directory", "module": "file", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Precreate gitlab-runner log directory", "become": true, "when": "gitlab_runner_arch == 'arm64'"}, "module_options": {"path": "/usr/local/var/log", "state": "directory", "owner": "{{ ansible_user_id | string }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Download GitLab Runner", "module": "get_url", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Setting Permissions for gitlab-runner executable", "module": "file", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Setting Permissions for gitlab-runner executable"}, "module_options": {"path": "{{ gitlab_runner_executable }}", "owner": "{{ ansible_user_id | string }}", "group": "{{ ansible_user_gid | string }}", "mode": "+x"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Install GitLab Runner", "module": "command", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Install GitLab Runner"}, "module_options": "{{ gitlab_runner_executable }} install", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Start GitLab Runner", "module": "command", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Start GitLab Runner", "when": "gitlab_runner_macos_start_runner"}, "module_options": "{{ gitlab_runner_executable }} start", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Stop GitLab Runner", "module": "command", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Stop GitLab Runner"}, "module_options": "{{ gitlab_runner_executable }} stop", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Download GitLab Runner", "module": "get_url", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Setting Permissions for gitlab-runner executable", "module": "file", "index": 11, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Setting Permissions for gitlab-runner executable", "become": true}, "module_options": {"path": "{{ gitlab_runner_executable }}", "owner": "{{ ansible_user_id | string }}", "group": "{{ ansible_user_gid | string }}", "mode": "+x"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Start GitLab Runner", "module": "command", "index": 12, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Start GitLab Runner"}, "module_options": "{{ gitlab_runner_executable }} start", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml": {"py/object": "struct4.TaskFile", "name": "update-config-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set \"[[runners]]\" section", "module": "win_lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set \"[[runners]]\" section", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "\\n", "line": "[[runners]]", "state": "present", "insertbefore": "^\\s*name =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set concurrent limit option", "module": "win_lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set concurrent limit option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*limit =.*", "line": "  limit = {{ gitlab_runner.concurrent_specific|default(0) }}", "state": "present", "insertafter": "^\\s*name =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set coordinator URL", "module": "win_lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set coordinator URL", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*url =.*", "line": "  url = {{ gitlab_runner.url|default(gitlab_runner_coordinator_url) | to_json }}", "state": "present", "insertafter": "^\\s*limit =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set clone URL", "module": "win_lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set clone URL", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.clone_url is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*clone_url =", "line": "  clone_url = {{ gitlab_runner.clone_url | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set environment option", "module": "win_lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set environment option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*environment =.*", "line": "  environment = {{ gitlab_runner.env_vars|default([]) | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set pre_clone_script", "module": "win_lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set pre_clone_script", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.pre_clone_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_clone_script =", "line": "  pre_clone_script = {{ gitlab_runner.pre_clone_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set pre_build_script", "module": "win_lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set pre_build_script", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.pre_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_build_script =", "line": "  pre_build_script = {{ gitlab_runner.pre_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set post_build_script", "module": "win_lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set post_build_script", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.post_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*post_build_script =", "line": "  post_build_script = {{ gitlab_runner.post_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set runner executor option", "module": "win_lineinfile", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set runner executor option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*executor =.*", "line": "  executor = {{ gitlab_runner.executor|default(\"shell\") | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set runner shell option", "module": "win_lineinfile", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set runner shell option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*shell =.*", "line": "  shell = {{ gitlab_runner.shell|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.shell is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set output_limit option", "module": "win_lineinfile", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set output_limit option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*output_limit =.*", "line": "  output_limit = {{ gitlab_runner.output_limit|default(4096) }}", "state": "present", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set runner docker image option", "module": "win_lineinfile", "index": 11, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set runner docker image option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*image =.*", "line": "  image = {{ gitlab_runner.docker_image|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_image is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set docker privileged option", "module": "win_lineinfile", "index": 12, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set docker privileged option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*privileged =.*", "line": "  privileged = {{ gitlab_runner.docker_privileged|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_privileged is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set docker volumes option", "module": "win_lineinfile", "index": 13, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set docker volumes option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*volumes =.*", "line": "  volumes = {{ gitlab_runner.docker_volumes|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_volumes is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set docker devices option", "module": "win_lineinfile", "index": 14, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set docker devices option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*devices =.*", "line": "  devices = {{ gitlab_runner.docker_devices|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_devices is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache type option", "module": "win_lineinfile", "index": 15, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache type option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Type =.*", "line": "  Type = {{ gitlab_runner.cache_type|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache path option", "module": "win_lineinfile", "index": 16, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache path option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Path =.*", "line": "  Path = {{ gitlab_runner.cache_path|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_path is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 server address", "module": "win_lineinfile", "index": 17, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 server address", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*ServerAddress =.*", "line": "  ServerAddress = {{ gitlab_runner.cache_s3_server_address|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_server_address is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 access key", "module": "win_lineinfile", "index": 18, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 access key", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccessKey =.*", "line": "  AccessKey = {{ gitlab_runner.cache_s3_access_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_access_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 secret key", "module": "win_lineinfile", "index": 19, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 secret key", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*SecretKey =.*", "line": "  SecretKey = {{ gitlab_runner.cache_s3_secret_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_secret_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache shared option", "module": "win_lineinfile", "index": 20, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache shared option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Shared =.*", "line": "  Shared = {{ gitlab_runner.cache_shared|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_shared is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket name option", "module": "win_lineinfile", "index": 21, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket name option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketName =.*", "line": "  BucketName = {{ gitlab_runner.cache_s3_bucket_name|default(\"\")  | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket location option", "module": "win_lineinfile", "index": 22, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket location option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketLocation =.*", "line": "  BucketLocation = {{ gitlab_runner.cache_s3_bucket_location|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_location is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 insecure option", "module": "win_lineinfile", "index": 23, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 insecure option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Insecure =.*", "line": "  Insecure = {{ gitlab_runner.cache_s3_insecure|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_s3_insecure is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh user option", "module": "win_lineinfile", "index": 24, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh user option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*user =.*", "line": "  user = {{ gitlab_runner.ssh_user|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_user is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh host option", "module": "win_lineinfile", "index": 25, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh host option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*host =.*", "line": "  host = {{ gitlab_runner.ssh_host|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_host is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh port option", "module": "win_lineinfile", "index": 26, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh port option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*port =.*", "line": "  port = {{ gitlab_runner.ssh_port|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_port is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh password option", "module": "win_lineinfile", "index": 27, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh password option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*password =.*", "line": "  password = {{ gitlab_runner.ssh_password|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_password is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh identity file option", "module": "win_lineinfile", "index": 28, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh identity file option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*identity_file =.*", "line": "  identity_file = {{ gitlab_runner.ssh_identity_file|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_identity_file is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set builds dir file option", "module": "win_lineinfile", "index": 29, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set builds dir file option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*builds_dir =.*", "line": "  builds_dir = {{ gitlab_runner.builds_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.builds_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache dir file option", "module": "win_lineinfile", "index": 30, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache dir file option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*cache_dir =.*", "line": "  cache_dir = {{ gitlab_runner.cache_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Remove empty lines", "module": "win_shell", "index": 31, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) Remove empty lines"}, "module_options": "(Get-Content {{ temp_runner_config.path }}) | ? {$_.trim() -ne \"\" } | Set-Content {{ temp_runner_config.path }}", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 32, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"vars": {"sect_name_prefix": "{{ runn_name_prefix }} section[{{ (section_index|int) + 1 }}/{{ gitlab_runner.extra_configs|list|length }}]:"}, "loop": "{{ gitlab_runner.extra_configs|list }}", "loop_control": {"loop_var": "section", "index_var": "section_index"}, "when": ["gitlab_runner.extra_configs is defined", "gitlab_runner.extra_configs|list|length > 0"]}, "module_options": "section-config-runner-windows.yml", "executable": "section-config-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml": {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Load platform-specific variables", "module": "include_vars", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Load platform-specific variables", "vars": {"possible_files": {"files": ["{{ ansible_distribution }}.yml", "{{ ansible_os_family }}.yml", "default.yml"], "paths": ["vars"]}}}, "module_options": "{{ lookup('first_found', possible_files) }}", "executable": "include_vars", "executable_type": "Module", "fqcn": "ansible.builtin.include_vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Gitlab Runner (Container)", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Install Gitlab Runner (Container)", "when": "gitlab_runner_container_install"}, "module_options": "Container.yml", "executable": "Container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (Unix)", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Install GitLab Runner (Unix)", "when": "ansible_os_family != 'Windows' and not gitlab_runner_container_install"}, "module_options": "Unix.yml", "executable": "Unix.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (Windows)", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Install GitLab Runner (Windows)", "when": "ansible_os_family == 'Windows' and not gitlab_runner_container_install"}, "module_options": "Windows.yml", "executable": "Windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml": {"py/object": "struct4.TaskFile", "name": "install-arch.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Arch) Set gitlab_runner_package_name", "module": "set_fact", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "options": {"name": "(Arch) Set gitlab_runner_package_name", "when": "gitlab_runner_package_version is not defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}", "gitlab_runner_package_state": "latest"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Arch) Install GitLab Runner", "module": "package", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "options": {"name": "(Arch) Install GitLab Runner", "become": true}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set systemd reload options", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "options": {"name": "Set systemd reload options"}, "module_options": "systemd-reload.yml", "executable": "systemd-reload.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml": {"py/object": "struct4.TaskFile", "name": "install-redhat.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "tasks": [{"py/object": "struct4.Task", "name": "(RedHat) Get Gitlab repository installation script", "module": "get_url", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Get Gitlab repository installation script", "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": {"url": "https://packages.gitlab.com/install/repositories/runner/{{ gitlab_runner_package_name }}/script.rpm.sh", "dest": "/tmp/gitlab-runner.script.rpm.sh", "mode": 484}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RedHat) Install Gitlab repository", "module": "command", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Install Gitlab repository", "args": {"creates": "/etc/yum.repos.d/runner_{{ gitlab_runner_package_name }}.repo"}, "become": true, "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": "{% if ansible_distribution == \"Rocky\" %} env os=el dist={{ ansible_distribution_major_version }} {% endif %} bash /tmp/gitlab-runner.script.rpm.sh\n", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RedHat) Update gitlab_runner_package_name", "module": "set_fact", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Update gitlab_runner_package_name", "when": "gitlab_runner_package_version is defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}-{{ gitlab_runner_package_version }}", "gitlab_runner_package_state": "present"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RedHat) Set gitlab_runner_package_name", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Set gitlab_runner_package_name", "when": "gitlab_runner_package_version is not defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}", "gitlab_runner_package_state": "latest"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RedHat) Install GitLab Runner", "module": "package", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Install GitLab Runner", "become": true}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set systemd reload options", "module": "import_tasks", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "Set systemd reload options"}, "module_options": "systemd-reload.yml", "executable": "systemd-reload.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml": {"py/object": "struct4.TaskFile", "name": "config-runners-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) Get existing config.toml", "module": "slurp", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Get existing config.toml", "register": "runner_config_file"}, "module_options": {"src": "{{ gitlab_runner_config_file }}"}, "executable": "slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Get pre-existing global config", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Get pre-existing global config"}, "module_options": {"runner_global_config": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]')[0] }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Get pre-existing runner configs", "module": "set_fact", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Get pre-existing runner configs"}, "module_options": {"runner_configs": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]')[1:] }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Create temporary directory", "module": "win_tempfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Create temporary directory", "register": "temp_runner_config_dir", "check_mode": false, "changed_when": false}, "module_options": {"state": "directory", "suffix": "gitlab-runner-config"}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Write config section for each runner", "module": "vars", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Write config section for each runner", "include_tasks": "config-runner-windows.yml", "loop": "{{ runner_configs }}", "loop_control": {"index_var": "runner_config_index", "loop_var": "runner_config"}}, "module_options": {"conf_name_prefix": "conf[{{ (runner_config_index|int) + 1 }}/{{ runner_configs|length }}]:"}, "executable": "vars", "executable_type": "Module", "fqcn": "ansible.builtin.vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Create temporary file config.toml", "module": "win_tempfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Create temporary file config.toml", "register": "config_toml_temp"}, "module_options": {"state": "file", "suffix": "temp"}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Write global config to file", "module": "win_lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Write global config to file"}, "module_options": {"insertbefore": "BOF", "path": "{{ config_toml_temp.path }}", "line": "{{ runner_global_config }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Create temporary file runners-config.toml", "module": "win_tempfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Create temporary file runners-config.toml", "register": "runners_config_toml_temp"}, "module_options": {"state": "file", "suffix": "temp"}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Assemble runners files in config dir", "module": "win_shell", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Assemble runners files in config dir", "args": {"chdir": "{{ temp_runner_config_dir.path }}"}}, "module_options": "dir -rec | gc | out-file \"{{ runners_config_toml_temp.path }}\"", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Assemble new config.toml", "module": "win_shell", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Assemble new config.toml"}, "module_options": "gc \"{{ config_toml_temp.path }}\",\"{{ runners_config_toml_temp.path }}\" | Set-Content \"{{ gitlab_runner_config_file }}\"", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Verify config", "module": "win_command", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Verify config", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}}, "module_options": "{{ gitlab_runner_executable }} verify", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml": {"py/object": "struct4.TaskFile", "name": "config-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Create temporary file", "module": "tempfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"name": "{{ conf_name_prefix }} Create temporary file", "register": "temp_runner_config", "check_mode": false, "changed_when": false}, "module_options": {"state": "file", "path": "{{ temp_runner_config_dir.path }}", "prefix": "gitlab-runner.{{ runner_config_index }}."}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Isolate runner configuration", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"name": "{{ conf_name_prefix }} Isolate runner configuration", "check_mode": false, "changed_when": false}, "module_options": {"dest": "{{ temp_runner_config.path }}", "content": "{{ runner_config }}"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"vars": {"runn_name_prefix": "{{ conf_name_prefix }} runner[{{ (gitlab_runner_index|int) + 1 }}/{{ gitlab_runner_runners|length }}]:"}, "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'present'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "update-config-runner.yml", "executable": "update-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Remove runner config", "module": "file", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"name": "{{ conf_name_prefix }} Remove runner config", "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'absent'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": {"path": "{{ temp_runner_config.path }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}}, "role_dict": {"riemers.gitlab-runner": {"py/object": "struct4.Role", "name": "riemers.gitlab-runner", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner", "fqcn": "riemers.gitlab-runner", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "section-config-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner-windows.yml", "options": {"vars": {"line_name_prefix": "{{ sect_name_prefix }} line:[{{ (line_index|int) + 1 }}/{{ gitlab_runner.extra_configs[section]|list|length }}]: "}, "loop": "{{ gitlab_runner.extra_configs[section] | list }}", "loop_control": {"loop_var": "line", "index_var": "line_index"}}, "module_options": "line-config-runner-windows.yml", "executable": "line-config-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "Windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "Install GitLab Runner (Windows)", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "Install GitLab Runner (Windows)"}, "module_options": "install-windows.yml", "executable": "install-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) List configured runners", "module": "win_command", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) List configured runners", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "register": "configured_runners", "changed_when": false, "check_mode": false}, "module_options": "{{ gitlab_runner_executable }} list", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Check runner is registered", "module": "win_command", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Check runner is registered", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "register": "verified_runners", "ignore_errors": true, "changed_when": false, "check_mode": false}, "module_options": "{{ gitlab_runner_executable }} verify", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Register GitLab Runner", "module": "include_tasks", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Register GitLab Runner", "when": "gitlab_runner.token is defined or gitlab_runner_registration_token | string | length > 0", "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "register-runner-windows.yml", "executable": "register-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Set global options", "module": "import_tasks", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Set global options"}, "module_options": "global-setup-windows.yml", "executable": "global-setup-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Configure GitLab Runner", "module": "import_tasks", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Configure GitLab Runner"}, "module_options": "config-runners-windows.yml", "executable": "config-runners-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Start GitLab Runner", "module": "win_command", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Windows.yml", "options": {"name": "(Windows) Start GitLab Runner", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}}, "module_options": "{{ gitlab_runner_executable }} start", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "update-config-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set concurrent limit option", "module": "lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set concurrent limit option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*limit =", "line": "  limit = {{ gitlab_runner.concurrent_specific|default(0) }}", "state": "present", "insertafter": "^\\s*name =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set coordinator URL", "module": "lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set coordinator URL", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*url =", "line": "  url = {{ gitlab_runner.url|default(gitlab_runner_coordinator_url) | to_json }}", "state": "present", "insertafter": "^\\s*limit =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set clone URL", "module": "lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set clone URL", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.clone_url is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*clone_url =", "line": "  clone_url = {{ gitlab_runner.clone_url | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set environment option", "module": "lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set environment option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*environment =", "line": "  environment = {{ gitlab_runner.env_vars|default([]) | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set pre_clone_script", "module": "lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set pre_clone_script", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.pre_clone_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_clone_script =", "line": "  pre_clone_script = {{ gitlab_runner.pre_clone_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set pre_build_script", "module": "lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set pre_build_script", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.pre_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_build_script =", "line": "  pre_build_script = {{ gitlab_runner.pre_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set tls_ca_file", "module": "lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set tls_ca_file", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.tls_ca_file is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*tls-ca-file =", "line": "  tls-ca-file = {{ gitlab_runner.tls_ca_file | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set post_build_script", "module": "lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set post_build_script", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.post_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*post_build_script =", "line": "  post_build_script = {{ gitlab_runner.post_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner executor option", "module": "lineinfile", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner executor option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*executor =", "line": "  executor = {{ gitlab_runner.executor|default(\"shell\") | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner shell option", "module": "lineinfile", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner shell option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*shell =", "line": "  shell = {{ gitlab_runner.shell|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.shell is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner executor section", "module": "lineinfile", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner executor section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.{{ gitlab_runner.executor|default(\"shell\") }}\\]", "line": "  [runners.{{ gitlab_runner.executor|replace(\"docker+machine\",\"machine\")|default(\"shell\") }}]", "state": "{{ 'absent' if (gitlab_runner.executor|default('shell')) == 'shell' else 'present' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set output_limit option", "module": "lineinfile", "index": 11, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set output_limit option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*output_limit =", "line": "  output_limit = {{ gitlab_runner.output_limit|default(4096) }}", "state": "present", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner docker image option", "module": "lineinfile", "index": 12, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner docker image option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*image =", "line": "    image = {{ gitlab_runner.docker_image|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_image is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker helper image option", "module": "lineinfile", "index": 13, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker helper image option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*helper_image =", "line": "    helper_image = {{ gitlab_runner.docker_helper_image|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_helper_image is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker privileged option", "module": "lineinfile", "index": 14, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker privileged option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*privileged =", "line": "    privileged = {{ gitlab_runner.docker_privileged|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_privileged is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker wait_for_services_timeout option", "module": "lineinfile", "index": 15, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker wait_for_services_timeout option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*wait_for_services_timeout =", "line": "    wait_for_services_timeout = {{ gitlab_runner.docker_wait_for_services_timeout|default(30) }}", "state": "{{ 'present' if gitlab_runner.docker_wait_for_services_timeout is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker tlsverify option", "module": "lineinfile", "index": 16, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker tlsverify option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*tls_verify =", "line": "    tls_verify = {{ gitlab_runner.docker_tlsverify|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_tlsverify is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker shm_size option", "module": "lineinfile", "index": 17, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker shm_size option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*shm_size =", "line": "    shm_size = {{ gitlab_runner.docker_shm_size|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_shm_size is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker disable_cache option", "module": "lineinfile", "index": 18, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker disable_cache option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*disable_cache =", "line": "    disable_cache = {{ gitlab_runner.docker_disable_cache|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_disable_cache is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker DNS option", "module": "lineinfile", "index": 19, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker DNS option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*dns =", "line": "    dns = {{ gitlab_runner.docker_dns|default(false) | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_dns is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker DNS search option", "module": "lineinfile", "index": 20, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker DNS search option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*dns_search =", "line": "    dns_search = {{ gitlab_runner.docker_dns_search|default(false) | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_dns_search is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker pull_policy option", "module": "lineinfile", "index": 21, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker pull_policy option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pull_policy =", "line": "    pull_policy = {{ gitlab_runner.docker_pull_policy|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_pull_policy is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker volumes option", "module": "lineinfile", "index": 22, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker volumes option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*volumes =", "line": "    volumes = {{ gitlab_runner.docker_volumes|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_volumes is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker devices option", "module": "lineinfile", "index": 23, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker devices option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*devices =", "line": "    devices = {{ gitlab_runner.docker_devices|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_devices is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set runner docker network option", "module": "lineinfile", "index": 24, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set runner docker network option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*network_mode =", "line": "    network_mode = {{ gitlab_runner.docker_network_mode|default(\"bridge\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_network_mode is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.docker\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set custom_build_dir section", "module": "lineinfile", "index": 25, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set custom_build_dir section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.custom_build_dir\\]", "line": "  [runners.custom_build_dir]", "state": "{{ 'present' if gitlab_runner.custom_build_dir_enabled is defined else 'absent' }}", "insertafter": "EOF", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set docker custom_build_dir-enabled option", "module": "lineinfile", "index": 26, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set docker custom_build_dir-enabled option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*enabled =", "line": "    enabled = {{ gitlab_runner.custom_build_dir_enabled|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.custom_build_dir_enabled is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.custom_build_dir\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache section", "module": "lineinfile", "index": 27, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\]", "line": "  [runners.cache]", "state": "present", "insertafter": "EOF", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 section", "module": "lineinfile", "index": 28, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\.s3\\]", "line": "    [runners.cache.s3]", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs section", "module": "lineinfile", "index": 29, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\.gcs\\]", "line": "    [runners.cache.gcs]", "state": "{{ 'present' if gitlab_runner.cache_gcs_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure section", "module": "lineinfile", "index": 30, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure section", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*\\[runners\\.cache\\.azure\\]", "line": "    [runners.cache.azure]", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache type option", "module": "lineinfile", "index": 31, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache type option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Type =", "line": "    Type = {{ gitlab_runner.cache_type|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache path option", "module": "lineinfile", "index": 32, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache path option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Path =", "line": "    Path = {{ gitlab_runner.cache_path|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_path is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache shared option", "module": "lineinfile", "index": 33, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache shared option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Shared =", "line": "    Shared = {{ gitlab_runner.cache_shared|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_shared is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 server addresss", "module": "lineinfile", "index": 34, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 server addresss", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*ServerAddress =", "line": "      ServerAddress = {{ gitlab_runner.cache_s3_server_address|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_server_address is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 access key", "module": "lineinfile", "index": 35, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 access key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccessKey =", "line": "      AccessKey = {{ gitlab_runner.cache_s3_access_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_access_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 secret key", "module": "lineinfile", "index": 36, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 secret key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*SecretKey =", "line": "      SecretKey = {{ gitlab_runner.cache_s3_secret_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_secret_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 bucket name option", "module": "lineinfile", "index": 37, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 bucket name option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.cache_type is defined and gitlab_runner.cache_type == 's3'"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketName =", "line": "      BucketName = {{ gitlab_runner.cache_s3_bucket_name|default(\"\")  | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 bucket location option", "module": "lineinfile", "index": 38, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 bucket location option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketLocation =", "line": "      BucketLocation = {{ gitlab_runner.cache_s3_bucket_location|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_location is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache s3 insecure option", "module": "lineinfile", "index": 39, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache s3 insecure option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Insecure =", "line": "      Insecure = {{ gitlab_runner.cache_s3_insecure|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_s3_insecure is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs bucket name", "module": "lineinfile", "index": 40, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs bucket name", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"], "when": "gitlab_runner.cache_type is defined and gitlab_runner.cache_type == 'gcs'"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketName =", "line": "      BucketName = {{ gitlab_runner.cache_gcs_bucket_name|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs credentials file", "module": "lineinfile", "index": 41, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs credentials file", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*CredentialsFile =", "line": "      CredentialsFile = {{ gitlab_runner.cache_gcs_credentials_file|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_credentials_file is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs access id", "module": "lineinfile", "index": 42, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs access id", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccessID =", "line": "      AccessID = {{ gitlab_runner.cache_gcs_access_id|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_access_id is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache gcs private key", "module": "lineinfile", "index": 43, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache gcs private key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*PrivateKey =", "line": "      PrivateKey = {{ gitlab_runner.cache_gcs_private_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_gcs_private_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.gcs\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure account name", "module": "lineinfile", "index": 44, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure account name", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccountName =", "line": "      AccountName = {{ gitlab_runner.cache_azure_account_name|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_account_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure account key", "module": "lineinfile", "index": 45, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure account key", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccountKey =", "line": "      AccountKey = {{ gitlab_runner.cache_azure_account_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_account_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure container name", "module": "lineinfile", "index": 46, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure container name", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*ContainerName =", "line": "      ContainerName = {{ gitlab_runner.cache_azure_container_name|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_container_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache azure storage domain", "module": "lineinfile", "index": 47, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache azure storage domain", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*StorageDomain =", "line": "      StorageDomain = {{ gitlab_runner.cache_azure_storage_domain|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_azure_storage_domain is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.azure\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh user option", "module": "lineinfile", "index": 48, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh user option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*user =", "line": "  user = {{ gitlab_runner.ssh_user|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_user is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh host option", "module": "lineinfile", "index": 49, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh host option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*host =", "line": "  host = {{ gitlab_runner.ssh_host|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_host is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh port option", "module": "lineinfile", "index": 50, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh port option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*port =", "line": "  port = \"{{ gitlab_runner.ssh_port|default(\"\") | to_json }}\"", "state": "{{ 'present' if gitlab_runner.ssh_port is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh password option", "module": "lineinfile", "index": 51, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh password option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*password =", "line": "  password = {{ gitlab_runner.ssh_password|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_password is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set ssh identity file option", "module": "lineinfile", "index": 52, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set ssh identity file option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*identity_file =", "line": "  identity_file = {{ gitlab_runner.ssh_identity_file|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_identity_file is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.ssh\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox base name option", "module": "lineinfile", "index": 53, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox base name option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*base_name =", "line": "    base_name = {{ gitlab_runner.virtualbox_base_name | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_base_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox base snapshot option", "module": "lineinfile", "index": 54, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox base snapshot option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*base_snapshot =", "line": "    base_snapshot = {{ gitlab_runner.virtualbox_base_snapshot | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_base_snapshot is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox base folder option", "module": "lineinfile", "index": 55, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox base folder option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*base_folder =", "line": "    base_folder = {{ gitlab_runner.virtualbox_base_folder | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_base_folder is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set virtualbox disable snapshots option", "module": "lineinfile", "index": 56, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set virtualbox disable snapshots option", "check_mode": false, "when": "gitlab_runner.executor == 'virtualbox' and gitlab_runner.virtualbox_base_name is defined", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*disable_snapshots =", "line": "    disable_snapshots = {{ gitlab_runner.virtualbox_disable_snapshots|default(false) | to_json }}", "state": "{{ 'present' if gitlab_runner.virtualbox_disable_snapshots is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.virtualbox\\]", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set builds dir file option", "module": "lineinfile", "index": 57, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set builds dir file option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*builds_dir =", "line": "  builds_dir = {{ gitlab_runner.builds_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.builds_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Set cache dir file option", "module": "lineinfile", "index": 58, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Set cache dir file option", "check_mode": false, "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*cache_dir =", "line": "  cache_dir = {{ gitlab_runner.cache_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Ensure directory permissions", "module": "file", "index": 59, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Ensure directory permissions", "loop": ["{{ gitlab_runner.builds_dir | default(\"\") }}", "{{ gitlab_runner.cache_dir | default(\"\") }}"], "when": "item|length"}, "module_options": {"dest": "{{ item }}", "state": "directory", "owner": "{{ gitlab_runner_runtime_owner|default(omit) }}", "group": "{{ gitlab_runner_runtime_group|default(omit) }}", "mode": 504, "modification_time": "preserve", "access_time": "preserve", "recurse": true}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Ensure directory access test", "module": "command", "index": 60, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Ensure directory access test", "loop": ["{{ gitlab_runner.builds_dir | default(\"\") }}", "{{ gitlab_runner.cache_dir | default(\"\") }}"], "when": "item|length", "changed_when": false, "become": true, "become_user": "{{ gitlab_runner_runtime_owner|default(omit) }}", "register": "ensure_directory_access", "ignore_errors": true}, "module_options": "/usr/bin/test -r {{ item }}", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ runn_name_prefix }} Ensure directory access fail on error", "module": "fail", "index": 61, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"name": "{{ runn_name_prefix }} Ensure directory access fail on error", "loop": "{{ ensure_directory_access.results }}", "when": ["item.rc is defined and item.rc != 0"]}, "module_options": {"msg": "Error: user gitlab-runner failed to test access to {{ item.item }}. Check parent folder(s) permissions"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 62, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner.yml", "options": {"vars": {"sect_name_prefix": "{{ runn_name_prefix }} section[{{ (section_index|int) + 1 }}/{{ gitlab_runner.extra_configs|list|length }}]:"}, "loop": "{{ gitlab_runner.extra_configs|list }}", "loop_control": {"loop_var": "section", "index_var": "section_index"}, "when": ["gitlab_runner.extra_configs is defined", "gitlab_runner.extra_configs|list|length > 0"]}, "module_options": "section-config-runner.yml", "executable": "section-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "config-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) {{ conf_name_prefix }} Create temporary file", "module": "win_tempfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"name": "(Windows) {{ conf_name_prefix }} Create temporary file", "register": "temp_runner_config", "check_mode": false, "changed_when": false}, "module_options": {"state": "file", "path": "{{ temp_runner_config_dir.path }}", "prefix": "gitlab-runner.{{ runner_config_index }}."}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ conf_name_prefix }} Isolate runner configuration", "module": "win_copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"name": "(Windows) {{ conf_name_prefix }} Isolate runner configuration", "check_mode": false, "changed_when": false}, "module_options": {"dest": "{{ temp_runner_config.path }}", "content": "{{ runner_config }}"}, "executable": "win_copy", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"vars": {"runn_name_prefix": "{{ conf_name_prefix }} runner[{{ (gitlab_runner_index|int) + 1 }}/{{ gitlab_runner_runners|length }}]:"}, "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'present'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "update-config-runner-windows.yml", "executable": "update-config-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ conf_name_prefix }} Remove runner config", "module": "win_file", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-windows.yml", "options": {"name": "(Windows) {{ conf_name_prefix }} Remove runner config", "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'absent'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": {"path": "{{ temp_runner_config.path }}", "state": "absent"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "systemd-reload.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure /etc/systemd/system/gitlab-runner.service.d/ exists", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Ensure /etc/systemd/system/gitlab-runner.service.d/ exists", "become": true}, "module_options": {"path": "/etc/systemd/system/gitlab-runner.service.d", "state": "directory", "owner": "root", "group": "root", "mode": 493}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add reload command to GitLab Runner system service", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Add reload command to GitLab Runner system service", "become": true, "register": "gitlab_runner_exec_reload"}, "module_options": {"dest": "/etc/systemd/system/gitlab-runner.service.d/exec-reload.conf", "content": "[Service]\nExecReload=/bin/kill -HUP $MAINPID\n"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure graceful stop for GitLab Runner system service", "module": "copy", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Configure graceful stop for GitLab Runner system service", "become": true, "when": "gitlab_runner_timeout_stop_seconds > 0", "register": "gitlab_runner_kill_timeout"}, "module_options": {"dest": "/etc/systemd/system/gitlab-runner.service.d/kill.conf", "content": "[Service]\nTimeoutStopSec={{ gitlab_runner_timeout_stop_seconds }}\nKillSignal=SIGQUIT\n"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Force systemd to reread configs", "module": "systemd", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/systemd-reload.yml", "options": {"name": "Force systemd to reread configs", "become": true, "when": "gitlab_runner_exec_reload.changed or gitlab_runner_kill_timeout"}, "module_options": {"daemon_reload": true}, "executable": "systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "global-setup.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "tasks": [{"py/object": "struct4.Task", "name": "Create .gitlab-runner dir", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Create .gitlab-runner dir", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory", "mode": "0700"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure config.toml exists", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Ensure config.toml exists", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set concurrent option", "module": "lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Set concurrent option", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s*)concurrent =", "line": "\\1concurrent = {{ gitlab_runner_concurrent }}", "state": "present", "backrefs": true}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add listen_address to config", "module": "lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add listen_address to config", "when": "gitlab_runner_listen_address | length > 0", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^listen_address =", "line": "listen_address = \"{{ gitlab_runner_listen_address }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add log_format to config", "module": "lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add log_format to config", "when": "gitlab_runner_log_format is defined", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^log_format =", "line": "log_format = \"{{ gitlab_runner_log_format|default(\"runner\") }}\"", "insertbefore": "BOF", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add sentry dsn to config", "module": "lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add sentry dsn to config", "when": "gitlab_runner_sentry_dsn | length > 0", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^sentry_dsn =", "line": "sentry_dsn = \"{{ gitlab_runner_sentry_dsn }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add session server listen_address to config", "module": "lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add session server listen_address to config", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s+)listen_address =", "line": "  listen_address = \"{{ gitlab_runner_session_server_listen_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_listen_address | length > 0 else 'absent' }}"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add session server advertise_address to config", "module": "lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add session server advertise_address to config", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*advertise_address =", "line": "  advertise_address = \"{{ gitlab_runner_session_server_advertise_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_advertise_address | length > 0 else 'absent' }}"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add session server session_timeout to config", "module": "lineinfile", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup.yml", "options": {"name": "Add session server session_timeout to config", "when": "gitlab_runner_session_server_session_timeout", "become": "{{ gitlab_runner_system_mode }}", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*session_timeout =", "line": "  session_timeout = {{ gitlab_runner_session_server_session_timeout }}", "insertafter": "^\\s*\\[session_server\\]", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "global-setup-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) Create .gitlab-runner dir", "module": "win_file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Create .gitlab-runner dir"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Ensure config.toml exists", "module": "win_file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Ensure config.toml exists"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Set concurrent option", "module": "win_lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Set concurrent option", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s*)concurrent =.*", "line": "$1concurrent = {{ gitlab_runner_concurrent }}", "state": "present", "backrefs": true}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add listen_address to config", "module": "win_lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add listen_address to config", "when": "gitlab_runner_listen_address | length > 0", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^listen_address =.*", "line": "listen_address = \"{{ gitlab_runner_listen_address }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add sentry dsn to config", "module": "win_lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add sentry dsn to config", "when": "gitlab_runner_sentry_dsn | length > 0", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^sentry_dsn =.*", "line": "sentry_dsn = \"{{ gitlab_runner_sentry_dsn }}\"", "insertafter": "\\s*concurrent.*", "state": "present"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add session server listen_address to config", "module": "win_lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add session server listen_address to config", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^(\\s+)listen_address =", "line": "  listen_address = \"{{ gitlab_runner_session_server_listen_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_listen_address | length > 0 else 'absent' }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add session server advertise_address to config", "module": "win_lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add session server advertise_address to config", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*advertise_address =", "line": "  advertise_address = \"{{ gitlab_runner_session_server_advertise_address }}\"", "insertafter": "^\\s*\\[session_server\\]", "state": "{{ 'present' if gitlab_runner_session_server_advertise_address | length > 0 else 'absent' }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Add session server session_timeout to config", "module": "win_lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/global-setup-windows.yml", "options": {"name": "(Windows) Add session server session_timeout to config", "when": "gitlab_runner_session_server_session_timeout", "notify": ["restart_gitlab_runner", "restart_gitlab_runner_macos", "restart_gitlab_runner_windows"]}, "module_options": {"dest": "{{ gitlab_runner_config_file }}", "regexp": "^\\s*session_timeout =", "line": "  session_timeout = {{ gitlab_runner_session_server_session_timeout }}", "insertafter": "^\\s*\\[session_server\\]", "state": "present"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "Unix.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "tasks": [{"py/object": "struct4.Task", "name": "Install GitLab Runner (Debian)", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (Debian)", "when": "ansible_os_family == 'Debian'"}, "module_options": "install-debian.yml", "executable": "install-debian.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (RedHat)", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (RedHat)", "when": "ansible_os_family == 'RedHat'"}, "module_options": "install-redhat.yml", "executable": "install-redhat.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (macOS)", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (macOS)", "when": "ansible_os_family == 'Darwin'"}, "module_options": "install-macos.yml", "executable": "install-macos.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (Arch)", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Install GitLab Runner (Arch)", "when": "ansible_os_family == 'Archlinux'"}, "module_options": "install-arch.yml", "executable": "install-arch.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Unix) List configured runners", "module": "command", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) List configured runners", "register": "configured_runners", "changed_when": false, "check_mode": false, "become": true}, "module_options": "{{ gitlab_runner_executable }} list", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Unix) Check runner is registered", "module": "command", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) Check runner is registered", "register": "verified_runners", "ignore_errors": true, "changed_when": false, "check_mode": false, "become": true}, "module_options": "{{ gitlab_runner_executable }} verify", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Unix) Register GitLab Runner", "module": "include_tasks", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) Register GitLab Runner", "when": "gitlab_runner.token is defined or gitlab_runner_registration_token | string | length > 0", "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "register-runner.yml", "executable": "register-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set global options (macOS/Debian/RedHat)", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "Set global options (macOS/Debian/RedHat)"}, "module_options": "global-setup.yml", "executable": "global-setup.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Unix) Configure GitLab Runner", "module": "import_tasks", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Unix.yml", "options": {"name": "(Unix) Configure GitLab Runner"}, "module_options": "config-runners.yml", "executable": "config-runners.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Container) Pull Image from Registry", "module": "docker_image", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml", "options": {"name": "(Container) Pull Image from Registry"}, "module_options": {"name": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "source": "pull"}, "executable": "docker_image", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Define Container volume Path", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-container.yml", "options": {"name": "(Container) Define Container volume Path"}, "module_options": {"state": "directory", "path": "{{ gitlab_runner_container_mount_path }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "line-config-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) {{ line_name_prefix }} Ensure section exists", "module": "win_lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml", "options": {"name": "(Windows) {{ line_name_prefix }} Ensure section exists"}, "module_options": {"path": "{{ temp_runner_config.path }}", "regexp": "^(\\s*)\\[{{ section|regex_escape }}\\]$", "line": "{{ \"  \" * (section.split(\".\")|length -1) }}[{{ section }}]"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ line_name_prefix }} Modify existing line", "module": "win_lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner-windows.yml", "options": {"name": "(Windows) {{ line_name_prefix }} Modify existing line", "register": "modified_config_line"}, "module_options": {"path": "{{ temp_runner_config.path }}", "insertafter": "\\s+\\[{{ section | regex_escape }}\\]", "regexp": "^(\\s*)({{ line | to_json | regex_escape }}|{{ line | regex_escape }}) =.*", "line": "{{ \"  \" * (section.split(\".\")|length) }}{{ line | to_json }} = {{ gitlab_runner.extra_configs[section][line] | to_json }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "line-config-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ line_name_prefix }} Ensure section exists", "module": "lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml", "options": {"name": "{{ line_name_prefix }} Ensure section exists"}, "module_options": {"path": "{{ temp_runner_config.path }}", "regexp": "^(\\s*)\\[{{ section|regex_escape }}\\]$", "line": "{{ \"  \" * (section.split(\".\")|length -1) }}[{{ section }}]"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ line_name_prefix }} Modify existing line", "module": "lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/line-config-runner.yml", "options": {"name": "{{ line_name_prefix }} Modify existing line", "register": "modified_config_line"}, "module_options": {"path": "{{ temp_runner_config.path }}", "insertafter": "\\s+\\[{{ section | regex_escape }}\\]", "regexp": "^(\\s*)({{ line | to_json | regex_escape }}|{{ line | regex_escape }}) =", "line": "{{ \"  \" * (section.split(\".\")|length) }}{{ line | to_json }} = {{ gitlab_runner.extra_configs[section][line] | to_json }}"}, "executable": "lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-debian.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian) Get Gitlab repository installation script", "module": "get_url", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Get Gitlab repository installation script", "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": {"url": "https://packages.gitlab.com/install/repositories/runner/{{ gitlab_runner_package_name }}/script.deb.sh", "dest": "/tmp/gitlab-runner.script.deb.sh", "mode": 484}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Install Gitlab repository", "module": "command", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Install Gitlab repository", "args": {"creates": "/etc/apt/sources.list.d/runner_{{ gitlab_runner_package_name }}.list"}, "become": true, "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": "bash /tmp/gitlab-runner.script.deb.sh", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Update gitlab_runner_package_name", "module": "set_fact", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Update gitlab_runner_package_name", "when": "gitlab_runner_package_version is defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}={{ gitlab_runner_package_version }}", "gitlab_runner_package_state": "present"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Set gitlab_runner_package_name", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Set gitlab_runner_package_name", "when": "gitlab_runner_package_version is not defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}", "gitlab_runner_package_state": "latest"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Install GitLab Runner", "module": "apt", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Install GitLab Runner", "become": true, "environment": {"GITLAB_RUNNER_DISABLE_SKEL": "true"}, "when": "ansible_distribution_release in [\"buster\", \"focal\"]"}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Install GitLab Runner", "module": "apt", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Install GitLab Runner", "become": true, "when": "ansible_distribution_release not in [\"buster\", \"focal\"]"}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Remove ~/gitlab-runner/.bash_logout on debian buster and ubuntu focal", "module": "file", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "(Debian) Remove ~/gitlab-runner/.bash_logout on debian buster and ubuntu focal", "when": "ansible_distribution_release in [\"buster\", \"focal\"]"}, "module_options": {"path": "/home/gitlab-runner/.bash_logout", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set systemd reload options", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-debian.yml", "options": {"name": "Set systemd reload options"}, "module_options": "systemd-reload.yml", "executable": "systemd-reload.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "config-runners.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "tasks": [{"py/object": "struct4.Task", "name": "Get existing config.toml", "module": "slurp", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Get existing config.toml", "register": "runner_config_file", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"src": "{{ gitlab_runner_config_file }}"}, "executable": "slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get pre-existing runner configs", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Get pre-existing runner configs"}, "module_options": {"runner_configs": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]\n') }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create temporary directory", "module": "tempfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Create temporary directory", "register": "temp_runner_config_dir", "check_mode": false, "changed_when": false}, "module_options": {"state": "directory", "suffix": "gitlab-runner-config"}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Write config section for each runner", "module": "vars", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Write config section for each runner", "include_tasks": "config-runner.yml", "loop": "{{ runner_configs }}", "loop_control": {"index_var": "runner_config_index", "loop_var": "runner_config"}}, "module_options": {"conf_name_prefix": "conf[{{ (runner_config_index|int) + 1 }}/{{ runner_configs|length }}]:"}, "executable": "vars", "executable_type": "Module", "fqcn": "ansible.builtin.vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "Assemble new config.toml", "module": "assemble", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners.yml", "options": {"name": "Assemble new config.toml", "become": "{{ gitlab_runner_system_mode }}", "diff": "{{ gitlab_runner_show_config_diff|bool }}"}, "module_options": {"src": "{{ temp_runner_config_dir.path }}", "dest": "{{ gitlab_runner_config_file }}", "delimiter": "[[runners]]\\n", "backup": true, "validate": "{{ gitlab_runner_executable }} verify -c %s", "mode": 384}, "executable": "assemble", "executable_type": "Module", "fqcn": "ansible.builtin.assemble", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "config-runners-container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "tasks": [{"py/object": "struct4.Task", "name": "Get existing config.toml", "module": "slurp", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Get existing config.toml", "register": "runner_config_file"}, "module_options": {"src": "{{ gitlab_runner_config_file }}"}, "executable": "slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get pre-existing runner configs", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Get pre-existing runner configs"}, "module_options": {"runner_configs": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]\n') }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create temporary directory", "module": "tempfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Create temporary directory", "register": "temp_runner_config_dir", "check_mode": false, "changed_when": false}, "module_options": {"state": "directory", "suffix": "gitlab-runner-config"}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Write config section for each runner", "module": "vars", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Write config section for each runner", "include_tasks": "config-runner-container.yml", "loop": "{{ runner_configs }}", "loop_control": {"index_var": "runner_config_index", "loop_var": "runner_config"}}, "module_options": {"conf_name_prefix": "conf[{{ (runner_config_index|int) + 1 }}/{{ runner_configs|length }}]:"}, "executable": "vars", "executable_type": "Module", "fqcn": "ansible.builtin.vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "Assemble new config.toml", "module": "assemble", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-container.yml", "options": {"name": "Assemble new config.toml"}, "module_options": {"src": "{{ temp_runner_config_dir.path }}", "dest": "{{ gitlab_runner_config_file }}", "delimiter": "[[runners]]\\n", "backup": true, "validate": "docker run -i --rm -v %s:/gitlab-runner.conf\n{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}\nverify -c /gitlab-runner.conf\n", "mode": 384}, "executable": "assemble", "executable_type": "Module", "fqcn": "ansible.builtin.assemble", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "register-runner-container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "tasks": [{"py/object": "struct4.Task", "name": "remove config.toml file", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "options": {"name": "remove config.toml file"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure config.toml exists", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "options": {"name": "Ensure config.toml exists"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Register runner to GitLab", "module": "docker_container", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-container.yml", "options": {"name": "Register runner to GitLab", "when": "(verified_runners.container.Output.find(\"Verifying runner... is removed\") != -1) or ((configured_runners.container.Output.find('\\n' + gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)) == -1) and (gitlab_runner.state|default('present') == 'present'))", "no_log": false}, "module_options": {"name": "{{ gitlab_runner_container_name }}", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "command": "register\n--non-interactive\n--url '{{ gitlab_runner.url | default(gitlab_runner_coordinator_url) }}'\n--registration-token '{{ gitlab_runner.token|default(gitlab_runner_registration_token) }}'\n--description '{{ gitlab_runner.name|default(ansible_hostname+\"-\"+gitlab_runner_index|string) }}'\n--tag-list '{{ gitlab_runner.tags|default([]) | join(\",\") }}'\n{% if gitlab_runner.clone_url|default(false) %}\n--clone-url \"{{ gitlab_runner.clone_url }}\"\n{% endif %}\n{% if gitlab_runner.run_untagged|default(true) %}\n--run-untagged\n{% endif %}\n{% if gitlab_runner.protected|default(false) %}\n--access-level=\"ref_protected\"\n{% endif %}\n--executor '{{ gitlab_runner.executor|default(\"shell\") }}'\n--limit '{{ gitlab_runner.concurrent_specific|default(0) }}'\n--output-limit '{{ gitlab_runner.output_limit|default(4096) }}'\n--locked='{{ gitlab_runner.locked|default(false) }}'\n{% for env_var in gitlab_runner.env_vars|default([]) %}\n--env '{{ env_var }}'\n{% endfor %}\n{% if gitlab_runner.pre_clone_script|default(false) %}\n--pre-clone-script \"{{ gitlab_runner.pre_clone_script }}\"\n{% endif %}\n{% if gitlab_runner.pre_build_script|default(false) %}\n--pre-build-script \"{{ gitlab_runner.pre_build_script }}\"\n{% endif %}\n{% if gitlab_runner.post_build_script|default(false) %}\n--post-build-script \"{{ gitlab_runner.post_build_script }}\"\n{% endif %}\n--docker-image '{{ gitlab_runner.docker_image|default(\"alpine\") }}'\n{% if gitlab_runner.docker_privileged|default(false) %}\n--docker-privileged\n{% endif %}\n{% if gitlab_runner.docker_tlsverify|default(false) %}\n--docker-tlsverify '{{ gitlab_runner.docker_tlsverify|default(\"true\") }}'\n{% endif %}\n{% if gitlab_runner.docker_dns|default(false) %}\n--docker-dns '{{ gitlab_runner.docker_dns|default(\"1.1.1.1\") }}'\n{% endif %}\n{% if gitlab_runner.docker_dns_search|default(false) %}\n--docker-dns-search '{{ gitlab_runner.docker_dns_search|default([]) }}'\n{% endif %}\n{% if gitlab_runner.docker_disable_cache|default(false) %}\n--docker-disable-cache\n{% endif %}\n{% if gitlab_runner.docker_oom_kill_disable|default(false) %}\n--docker-oom-kill-disable '{{ gitlab_runner.docker_oom_kill_disable|default(\"false\") }}'\n{% endif %}\n{% for volume in gitlab_runner.docker_volumes | default([]) %}\n--docker-volumes \"{{ volume }}\"\n{% endfor %}\n{% for device in gitlab_runner.docker_devices | default([]) %}\n--docker-devices \"{{ device }}\"\n{% endfor %}\n--ssh-user '{{ gitlab_runner.ssh_user|default(\"\") }}'\n--ssh-host '{{ gitlab_runner.ssh_host|default(\"\") }}'\n--ssh-port '{{ gitlab_runner.ssh_port|default(\"\") }}'\n--ssh-password '{{ gitlab_runner.ssh_password|default(\"\") }}'\n--ssh-identity-file '{{ gitlab_runner.ssh_identity_file|default(\"\") }}'\n{% if gitlab_runner.cache_type is defined %}\n--cache-type '{{ gitlab_runner.cache_type }}'\n{% endif %}\n{% if gitlab_runner.cache_shared|default(false) %}\n--cache-shared\n{% endif %}\n{% if gitlab_runner.cache_path is defined %}\n--cache-path '{{ gitlab_runner.cache_path }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_server_address is defined %}\n--cache-s3-server-address '{{ gitlab_runner.cache_s3_server_address }}'\n{% if gitlab_runner.cache_s3_access_key is defined %}\n--cache-s3-access-key '{{ gitlab_runner.cache_s3_access_key }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_secret_key is defined %}\n--cache-s3-secret-key '{{ gitlab_runner.cache_s3_secret_key }}'\n{% endif %}\n{% endif %}\n{% if gitlab_runner.cache_s3_bucket_name is defined %}\n--cache-s3-bucket-name '{{ gitlab_runner.cache_s3_bucket_name }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_bucket_location is defined %}\n--cache-s3-bucket-location '{{ gitlab_runner.cache_s3_bucket_location }}'\n{% endif %}\n{% if gitlab_runner.builds_dir|default(false) %}\n--builds-dir '{{ gitlab_runner.builds_dir }}'\n{% endif %}\n{% if gitlab_runner.cache_dir|default(false) %}\n--cache-dir '{{ gitlab_runner.cache_dir }}'\n{% endif %}\n{% if gitlab_runner.cache_s3_insecure|default(false) %}\n--cache-s3-insecure\n{% endif %}\n{% if gitlab_runner.extra_registration_option is defined %}\n{{ gitlab_runner.extra_registration_option }}\n{% endif %}\n", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}], "cleanup": true, "auto_remove": true, "network_mode": "{{ gitlab_runner_container_network }}"}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) Check gitlab-runner executable exists", "module": "win_stat", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Check gitlab-runner executable exists", "register": "gitlab_runner_exists"}, "module_options": {"path": "{{ gitlab_runner_executable }}"}, "executable": "win_stat", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Set fact -> gitlab_runner_exists", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Set fact -> gitlab_runner_exists"}, "module_options": {"gitlab_runner_exists": "{{ gitlab_runner_exists.stat.exists }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Get existing version", "module": "win_shell", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Get existing version", "register": "existing_version_shell", "failed_when": false, "check_mode": false, "changed_when": false}, "module_options": "{{ gitlab_runner_executable }} --version | Select-String 'Version:' -CaseSensitive | %{ $_.Line.Split(' ')[-1].Trim(); }", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Set fact -> gitlab_runner_existing_version", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Set fact -> gitlab_runner_existing_version"}, "module_options": {"gitlab_runner_existing_version": "{{ existing_version_shell.stdout | trim if existing_version_shell.rc == 0 else '0' }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Ensure install directory exists", "module": "win_file", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Ensure install directory exists"}, "module_options": {"path": "{{ gitlab_runner_install_directory }}", "state": "directory"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Download GitLab Runner", "module": "win_get_url", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "win_get_url", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Install GitLab Runner", "module": "win_command", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Install GitLab Runner", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "when": "(gitlab_runner_windows_service_user | length == 0) or (gitlab_runner_windows_service_password | length == 0)"}, "module_options": "{{ gitlab_runner_executable }} install", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Install GitLab Runner", "module": "win_command", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Install GitLab Runner", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}, "when": ["gitlab_runner_windows_service_user | length > 0", "gitlab_runner_windows_service_password | length > 0"]}, "module_options": "{{ gitlab_runner_executable }} install --user \"{{ gitlab_runner_windows_service_user }}\" --password \"{{ gitlab_runner_windows_service_password }}\"", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Make sure runner is stopped", "module": "win_command", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Make sure runner is stopped", "ignore_errors": true, "when": ["gitlab_runner_exists"]}, "module_options": "{{ gitlab_runner_executable }} stop", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Download GitLab Runner", "module": "win_get_url", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-windows.yml", "options": {"name": "(Windows) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "win_get_url", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "register-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "remove config.toml file", "module": "file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "remove config.toml file", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create .gitlab-runner dir", "module": "file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Create .gitlab-runner dir", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory", "mode": "0700"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure config.toml exists", "module": "file", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Ensure config.toml exists", "become": "{{ gitlab_runner_system_mode }}"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Construct the runner command without secrets", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Construct the runner command without secrets"}, "module_options": {"command": "{{ gitlab_runner_executable }} register --non-interactive --url '{{ gitlab_runner.url|default(gitlab_runner_coordinator_url) }}' --description '{{ gitlab_runner.name|default(ansible_hostname+\"-\"+gitlab_runner_index|string) }}' --tag-list '{{ gitlab_runner.tags|default([]) | join(\",\") }}' {% if gitlab_runner.clone_url|default(false) %} --clone-url \"{{ gitlab_runner.clone_url }}\" {% endif %} {% if gitlab_runner.run_untagged|default(true) %} --run-untagged {% endif %} {% if gitlab_runner.protected|default(false) %} --access-level=\"ref_protected\" {% endif %} --executor '{{ gitlab_runner.executor|default(\"shell\") }}' {% if gitlab_runner.shell is defined %} --shell '{{ gitlab_runner.shell }}' {% endif %} --limit '{{ gitlab_runner.concurrent_specific|default(0) }}' --output-limit '{{ gitlab_runner.output_limit|default(4096) }}' --locked='{{ gitlab_runner.locked|default(false) }}' {% for env_var in gitlab_runner.env_vars|default([]) %} --env '{{ env_var }}' {% endfor %} {% if gitlab_runner.pre_clone_script|default(false) %} --pre-clone-script \"{{ gitlab_runner.pre_clone_script }}\" {% endif %} {% if gitlab_runner.pre_build_script|default(false) %} --pre-build-script \"{{ gitlab_runner.pre_build_script }}\" {% endif %} {% if gitlab_runner.tls_ca_file|default(false) %} --tls-ca-file \"{{ gitlab_runner.tls_ca_file }}\" {% endif %} {% if gitlab_runner.post_build_script|default(false) %} --post-build-script \"{{ gitlab_runner.post_build_script }}\" {% endif %} --docker-image '{{ gitlab_runner.docker_image|default(\"alpine\") }}' {% if gitlab_runner.docker_helper_image is defined %} --docker-helper-image \"{{ gitlab_runner.docker_helper_image }}\" {% endif %} {% if gitlab_runner.docker_privileged|default(false) %} --docker-privileged {% endif %} {% if gitlab_runner.docker_wait_for_services_timeout|default(false) %} --docker-wait-for-services-timeout '{{ gitlab_runner.docker_wait_for_services_timeout|default(30) }}' {% endif %} {% if gitlab_runner.docker_tlsverify|default(false) %} --docker-tlsverify '{{ gitlab_runner.docker_tlsverify|default(\"true\") }}' {% endif %} {% if gitlab_runner.docker_disable_cache|default(false) %} --docker-disable-cache '{{ gitlab_runner.docker_disable_cache|default(\"false\") }}' {% endif %} {% if gitlab_runner.docker_dns|default(false) %} --docker-dns '{{ gitlab_runner.docker_dns|default(\"1.1.1.1\") }}' {% endif %} {% if gitlab_runner.docker_dns_search|default(false) %} --docker-dns-search '{{ gitlab_runner.docker_dns_search|default([]) }}' {% endif %} {% if gitlab_runner.docker_disable_cache|default(false) %} --docker-disable-cache {% endif %} {% if gitlab_runner.docker_oom_kill_disable|default(false) %} --docker-oom-kill-disable '{{ gitlab_runner.docker_oom_kill_disable|default(\"false\") }}' {% endif %} {% for policy in gitlab_runner.docker_pull_policy|default([]) %} --docker-pull-policy \"{{ policy }}\" {% endfor %} {% for volume in gitlab_runner.docker_volumes|default([]) %} --docker-volumes \"{{ volume }}\" {% endfor %} {% for device in gitlab_runner.docker_devices|default([]) %} --docker-devices \"{{ device }}\" {% endfor %} --ssh-user '{{ gitlab_runner.ssh_user|default(\"\") }}' --ssh-host '{{ gitlab_runner.ssh_host|default(\"\") }}' --ssh-port '{{ gitlab_runner.ssh_port|default(\"\") }}' --ssh-identity-file '{{ gitlab_runner.ssh_identity_file|default(\"\") }}' {% if gitlab_runner.executor == \"virtualbox\" and gitlab_runner.virtualbox_base_name %}\n    --virtualbox-base-name '{{ gitlab_runner.virtualbox_base_name }}'\n    --virtualbox-base-snapshot '{{ gitlab_runner.virtualbox_base_snapshot|default(\"\") }}'\n    --virtualbox-base-folder '{{ gitlab_runner.virtualbox_base_folder|default(\"\") }}'\n    --virtualbox-disable-snapshots='{{ gitlab_runner.virtualbox_disable_snapshots|default(false) }}'\n{% endif %} {% if gitlab_runner.cache_type is defined %} --cache-type '{{ gitlab_runner.cache_type }}' {% endif %} {% if gitlab_runner.cache_shared|default(false) %} --cache-shared {% endif %} {% if gitlab_runner.cache_path is defined %} --cache-path '{{ gitlab_runner.cache_path }}' {% endif %} {% if gitlab_runner.cache_s3_server_address is defined %} --cache-s3-server-address '{{ gitlab_runner.cache_s3_server_address }}' {% if gitlab_runner.cache_s3_access_key is defined %} --cache-s3-access-key '{{ gitlab_runner.cache_s3_access_key }}' {% endif %} {% endif %} {% if gitlab_runner.cache_s3_bucket_name is defined %} --cache-s3-bucket-name '{{ gitlab_runner.cache_s3_bucket_name }}' {% endif %} {% if gitlab_runner.cache_s3_bucket_location is defined %} --cache-s3-bucket-location '{{ gitlab_runner.cache_s3_bucket_location }}' {% endif %} {% if gitlab_runner.builds_dir|default(false) %} --builds-dir '{{ gitlab_runner.builds_dir }}' {% endif %} {% if gitlab_runner.custom_build_dir_enabled|default(false) %} --custom_build_dir-enabled '{{ gitlab_runner.custom_build_dir_enabled }}' {% endif %} {% if gitlab_runner.cache_dir|default(false) %} --cache-dir '{{ gitlab_runner.cache_dir }}' {% endif %} {% if gitlab_runner.cache_s3_insecure|default(false) %} --cache-s3-insecure {% endif %} {% if gitlab_runner.extra_registration_option is defined %} {{ gitlab_runner.extra_registration_option }} {% endif %}\n"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Register runner to GitLab", "module": "command", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner.yml", "options": {"name": "Register runner to GitLab", "when": "(verified_runners.stderr.find(\"Verifying runner... is removed\") != -1) or ((configured_runners.stderr.find('\\n' + gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)) == -1) and (gitlab_runner.state|default('present') == 'present'))", "no_log": true, "become": "{{ gitlab_runner_system_mode }}"}, "module_options": "{{ command }} --registration-token '{{ gitlab_runner.token|default(gitlab_runner_registration_token) }}' {% if gitlab_runner.cache_s3_secret_key is defined %} --cache-s3-secret-key '{{ gitlab_runner.cache_s3_secret_key }}' {% endif %} --ssh-password '{{ gitlab_runner.ssh_password|default(\"\") }}'\n", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "section-config-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/section-config-runner.yml", "options": {"vars": {"line_name_prefix": "{{ sect_name_prefix }} line:[{{ (line_index|int) + 1 }}/{{ gitlab_runner.extra_configs[section]|list|length }}]: "}, "loop": "{{ gitlab_runner.extra_configs[section] | list }}", "loop_control": {"loop_var": "line", "index_var": "line_index"}}, "module_options": "line-config-runner.yml", "executable": "line-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "config-runner-container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Create temporary file", "module": "tempfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"name": "{{ conf_name_prefix }} Create temporary file", "register": "temp_runner_config", "check_mode": false, "changed_when": false}, "module_options": {"state": "file", "path": "{{ temp_runner_config_dir.path }}", "prefix": "gitlab-runner.{{ runner_config_index }}."}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Isolate runner configuration", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"name": "{{ conf_name_prefix }} Isolate runner configuration", "check_mode": false, "changed_when": false}, "module_options": {"dest": "{{ temp_runner_config.path }}", "content": "{{ runner_config }}"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"vars": {"runn_name_prefix": "{{ conf_name_prefix }} runner[{{ (gitlab_runner_index|int) + 1 }}/{{ gitlab_runner_runners|length }}]:"}, "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'present'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "update-config-runner.yml", "executable": "update-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Remove runner config", "module": "file", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner-container.yml", "options": {"name": "{{ conf_name_prefix }} Remove runner config", "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'absent'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": {"path": "{{ temp_runner_config.path }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "Container.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Container) Install Gitlab Runner", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Install Gitlab Runner", "when": "gitlab_runner_container_install"}, "module_options": "install-container.yml", "executable": "install-container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) List configured runners", "module": "docker_container", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) List configured runners", "register": "configured_runners", "changed_when": false, "check_mode": false}, "module_options": {"name": "{{ gitlab_runner_container_name }}-list", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "command": "list", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}], "cleanup": true, "interactive": true, "tty": true, "detach": false}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Check runner is registered", "module": "docker_container", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Check runner is registered", "register": "verified_runners", "ignore_errors": true, "changed_when": false, "check_mode": false}, "module_options": {"name": "{{ gitlab_runner_container_name }}-check", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "command": "verify", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}], "cleanup": true, "interactive": true, "tty": true, "detach": false}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "configured_runners?", "module": "debug", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "configured_runners?"}, "module_options": {"msg": "{{ configured_runners.container.Output }}"}, "executable": "debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, {"py/object": "struct4.Task", "name": "verified_runners?", "module": "debug", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "verified_runners?"}, "module_options": {"msg": "{{ verified_runners.container.Output }}"}, "executable": "debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Register GitLab Runner", "module": "include_tasks", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Register GitLab Runner", "when": "gitlab_runner.token is defined or gitlab_runner_registration_token | string | length > 0", "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "register-runner-container.yml", "executable": "register-runner-container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Set global options", "module": "import_tasks", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Set global options"}, "module_options": "global-setup.yml", "executable": "global-setup.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Configure GitLab Runner", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Configure GitLab Runner"}, "module_options": "config-runners-container.yml", "executable": "config-runners-container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Container) Start the container", "module": "docker_container", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/Container.yml", "options": {"name": "(Container) Start the container"}, "module_options": {"name": "{{ gitlab_runner_container_name }}", "image": "{{ gitlab_runner_container_image }}:{{ gitlab_runner_container_tag }}", "restart_policy": "{{ gitlab_runner_container_restart_policy }}", "mounts": [{"type": "bind", "source": "{{ gitlab_runner_container_mount_path }}", "target": "/etc/gitlab-runner"}, {"type": "bind", "source": "/var/run/docker.sock", "target": "/var/run/docker.sock"}], "network_mode": "{{ gitlab_runner_container_network }}"}, "executable": "docker_container", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "register-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) remove config.toml file", "module": "win_file", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) remove config.toml file"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "absent"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Create .gitlab-runner dir", "module": "win_file", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) Create .gitlab-runner dir"}, "module_options": {"path": "{{ gitlab_runner_config_file_location }}", "state": "directory"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Ensure config.toml exists", "module": "win_file", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) Ensure config.toml exists"}, "module_options": {"path": "{{ gitlab_runner_config_file }}", "state": "touch", "modification_time": "preserve", "access_time": "preserve"}, "executable": "win_file", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Register runner to GitLab", "module": "win_shell", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/register-runner-windows.yml", "options": {"name": "(Windows) Register runner to GitLab", "when": "(verified_runners.stderr.find(\"Verifying runner... is removed\") != -1) or ((configured_runners.stderr.find('\\n' + gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)) == -1) and (gitlab_runner.state|default('present') == 'present'))", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}}, "module_options": "{{ gitlab_runner_executable }} register --non-interactive --url '{{ gitlab_runner.url|default(gitlab_runner_coordinator_url) }}' --registration-token '{{ gitlab_runner.token|default(gitlab_runner_registration_token) }}' --description '{{ gitlab_runner.name|default(ansible_hostname+\"-\"+gitlab_runner_index|string) }}' --tag-list '{{ gitlab_runner.tags|default([]) | join(\",\") }}' {% if gitlab_runner.clone_url|default(false) %} --clone-url \"{{ gitlab_runner.clone_url }}\" {% endif %} {% if gitlab_runner.run_untagged|default(true) %} --run-untagged {% endif %} {% if gitlab_runner.protected|default(false) %} --access-level=\"ref_protected\" {% endif %} --executor '{{ gitlab_runner.executor|default(\"shell\") }}' {% if gitlab_runner.shell is defined %} --shell '{{ gitlab_runner.shell }}' {% endif %} --limit '{{ gitlab_runner.concurrent_specific|default(0) }}' --output-limit '{{ gitlab_runner.output_limit|default(4096) }}' --locked='{{ gitlab_runner.locked|default(false) }}' {% for env_var in gitlab_runner.env_vars|default([]) %} --env '{{ env_var }}' {% endfor %} {% if gitlab_runner.pre_clone_script|default(false) %} --pre-clone-script \"{{ gitlab_runner.pre_clone_script }}\" {% endif %} {% if gitlab_runner.pre_build_script|default(false) %} --pre-build-script \"{{ gitlab_runner.pre_build_script }}\" {% endif %} {% if gitlab_runner.post_build_script|default(false) %} --post-build-script \"{{ gitlab_runner.post_build_script }}\" {% endif %} --docker-image '{{ gitlab_runner.docker_image|default(\"alpine\") }}' {% if gitlab_runner.docker_privileged|default(false) %} --docker-privileged {% endif %} {% for volume in gitlab_runner.docker_volumes | default([]) %} --docker-volumes \"{{ volume }}\" {% endfor %} {% for device in gitlab_runner.docker_devices | default([]) %} --docker-devices \"{{ device }}\" {% endfor %} {% if gitlab_runner.ssh_user is defined %} --ssh-user '{{ gitlab_runner.ssh_user }}' {% endif %} {% if gitlab_runner.ssh_host is defined %} --ssh-host '{{ gitlab_runner.ssh_host }}' {% endif %} {% if gitlab_runner.ssh_port is defined %} --ssh-port '{{ gitlab_runner.ssh_port }}' {% endif %} {% if gitlab_runner.ssh_password is defined %} --ssh-password '{{ gitlab_runner.ssh_password }}' {% endif %} {% if gitlab_runner.ssh_identity_file is defined %} --ssh-identity-file '{{ gitlab_runner.ssh_identity_file }}' {% endif %} {% if gitlab_runner.cache_type is defined %} --cache-type '{{ gitlab_runner.cache_type }}' {% endif %} {% if gitlab_runner.cache_shared|default(false) %} --cache-shared {% endif %} {% if gitlab_runner.cache_path is defined %} --cache-path '{{ gitlab_runner.cache_path }}' {% endif %} {% if gitlab_runner.cache_s3_server_address is defined %} --cache-s3-server-address '{{ gitlab_runner.cache_s3_server_address }}' {% endif %} {% if gitlab_runner.cache_s3_access_key is defined %} --cache-s3-access-key '{{ gitlab_runner.cache_s3_access_key }}' {% endif %} {% if gitlab_runner.cache_s3_secret_key is defined %} --cache-s3-secret-key '{{ gitlab_runner.cache_s3_secret_key }}' {% endif %} {% if gitlab_runner.cache_s3_bucket_name is defined %} --cache-s3-bucket-name '{{ gitlab_runner.cache_s3_bucket_name }}' {% endif %} {% if gitlab_runner.cache_s3_bucket_location is defined %} --cache-s3-bucket-location '{{ gitlab_runner.cache_s3_bucket_location }}' {% endif %} {% if gitlab_runner.builds_dir|default(false) %} --builds-dir '{{ gitlab_runner.builds_dir }}' {% endif %} {% if gitlab_runner.cache_dir|default(false) %} --cache-dir '{{ gitlab_runner.cache_dir }}' {% endif %} {% if gitlab_runner.cache_s3_insecure|default(false) %} --cache-s3-insecure {% endif %} {% if gitlab_runner.extra_registration_option is defined %} {{ gitlab_runner.extra_registration_option }} {% endif %}\n", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-macos.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "tasks": [{"py/object": "struct4.Task", "name": "(MacOS) Check gitlab-runner executable exists", "module": "stat", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Check gitlab-runner executable exists", "register": "gitlab_runner_exists"}, "module_options": {"path": "{{ gitlab_runner_executable }}"}, "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Set fact -> gitlab_runner_exists", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Set fact -> gitlab_runner_exists"}, "module_options": {"gitlab_runner_exists": "{{ gitlab_runner_exists.stat.exists }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Get existing version", "module": "shell", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Get existing version", "register": "existing_version_shell", "failed_when": false, "check_mode": false, "changed_when": false}, "module_options": "{{ gitlab_runner_executable }} --version | awk '/Version: ([\\d\\.]*)/{print $2}'", "executable": "shell", "executable_type": "Module", "fqcn": "ansible.builtin.shell", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Set fact -> gitlab_runner_existing_version", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Set fact -> gitlab_runner_existing_version"}, "module_options": {"gitlab_runner_existing_version": "{{ existing_version_shell.stdout if existing_version_shell.rc == 0 else '0' }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Precreate gitlab-runner log directory", "module": "file", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Precreate gitlab-runner log directory", "become": true, "when": "gitlab_runner_arch == 'arm64'"}, "module_options": {"path": "/usr/local/var/log", "state": "directory", "owner": "{{ ansible_user_id | string }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Download GitLab Runner", "module": "get_url", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Setting Permissions for gitlab-runner executable", "module": "file", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Setting Permissions for gitlab-runner executable"}, "module_options": {"path": "{{ gitlab_runner_executable }}", "owner": "{{ ansible_user_id | string }}", "group": "{{ ansible_user_gid | string }}", "mode": "+x"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Install GitLab Runner", "module": "command", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Install GitLab Runner"}, "module_options": "{{ gitlab_runner_executable }} install", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Start GitLab Runner", "module": "command", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Start GitLab Runner", "when": "gitlab_runner_macos_start_runner"}, "module_options": "{{ gitlab_runner_executable }} start", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Stop GitLab Runner", "module": "command", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Stop GitLab Runner"}, "module_options": "{{ gitlab_runner_executable }} stop", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Download GitLab Runner", "module": "get_url", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Download GitLab Runner"}, "module_options": {"url": "{{ gitlab_runner_download_url }}", "dest": "{{ gitlab_runner_executable }}", "force": true}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Setting Permissions for gitlab-runner executable", "module": "file", "index": 11, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Setting Permissions for gitlab-runner executable", "become": true}, "module_options": {"path": "{{ gitlab_runner_executable }}", "owner": "{{ ansible_user_id | string }}", "group": "{{ ansible_user_gid | string }}", "mode": "+x"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(MacOS) Start GitLab Runner", "module": "command", "index": 12, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-macos.yml", "options": {"name": "(MacOS) Start GitLab Runner"}, "module_options": "{{ gitlab_runner_executable }} start", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "update-config-runner-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set \"[[runners]]\" section", "module": "win_lineinfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set \"[[runners]]\" section", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "\\n", "line": "[[runners]]", "state": "present", "insertbefore": "^\\s*name =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set concurrent limit option", "module": "win_lineinfile", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set concurrent limit option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*limit =.*", "line": "  limit = {{ gitlab_runner.concurrent_specific|default(0) }}", "state": "present", "insertafter": "^\\s*name =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set coordinator URL", "module": "win_lineinfile", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set coordinator URL", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*url =.*", "line": "  url = {{ gitlab_runner.url|default(gitlab_runner_coordinator_url) | to_json }}", "state": "present", "insertafter": "^\\s*limit =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set clone URL", "module": "win_lineinfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set clone URL", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.clone_url is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*clone_url =", "line": "  clone_url = {{ gitlab_runner.clone_url | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set environment option", "module": "win_lineinfile", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set environment option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*environment =.*", "line": "  environment = {{ gitlab_runner.env_vars|default([]) | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set pre_clone_script", "module": "win_lineinfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set pre_clone_script", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.pre_clone_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_clone_script =", "line": "  pre_clone_script = {{ gitlab_runner.pre_clone_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set pre_build_script", "module": "win_lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set pre_build_script", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.pre_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*pre_build_script =", "line": "  pre_build_script = {{ gitlab_runner.pre_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set post_build_script", "module": "win_lineinfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set post_build_script", "check_mode": false, "notify": "restart_gitlab_runner", "when": "gitlab_runner.post_build_script is defined"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*post_build_script =", "line": "  post_build_script = {{ gitlab_runner.post_build_script | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set runner executor option", "module": "win_lineinfile", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set runner executor option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*executor =.*", "line": "  executor = {{ gitlab_runner.executor|default(\"shell\") | to_json }}", "state": "present", "insertafter": "^\\s*url =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set runner shell option", "module": "win_lineinfile", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set runner shell option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*shell =.*", "line": "  shell = {{ gitlab_runner.shell|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.shell is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set output_limit option", "module": "win_lineinfile", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set output_limit option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*output_limit =.*", "line": "  output_limit = {{ gitlab_runner.output_limit|default(4096) }}", "state": "present", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set runner docker image option", "module": "win_lineinfile", "index": 11, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set runner docker image option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*image =.*", "line": "  image = {{ gitlab_runner.docker_image|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.docker_image is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set docker privileged option", "module": "win_lineinfile", "index": 12, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set docker privileged option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*privileged =.*", "line": "  privileged = {{ gitlab_runner.docker_privileged|default(false) | lower }}", "state": "{{ 'present' if gitlab_runner.docker_privileged is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set docker volumes option", "module": "win_lineinfile", "index": 13, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set docker volumes option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*volumes =.*", "line": "  volumes = {{ gitlab_runner.docker_volumes|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_volumes is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set docker devices option", "module": "win_lineinfile", "index": 14, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set docker devices option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*devices =.*", "line": "  devices = {{ gitlab_runner.docker_devices|default([])|to_json }}", "state": "{{ 'present' if gitlab_runner.docker_devices is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache type option", "module": "win_lineinfile", "index": 15, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache type option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Type =.*", "line": "  Type = {{ gitlab_runner.cache_type|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_type is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache path option", "module": "win_lineinfile", "index": 16, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache path option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Path =.*", "line": "  Path = {{ gitlab_runner.cache_path|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_path is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 server address", "module": "win_lineinfile", "index": 17, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 server address", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*ServerAddress =.*", "line": "  ServerAddress = {{ gitlab_runner.cache_s3_server_address|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_server_address is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 access key", "module": "win_lineinfile", "index": 18, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 access key", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*AccessKey =.*", "line": "  AccessKey = {{ gitlab_runner.cache_s3_access_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_access_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 secret key", "module": "win_lineinfile", "index": 19, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 secret key", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*SecretKey =.*", "line": "  SecretKey = {{ gitlab_runner.cache_s3_secret_key|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_secret_key is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache shared option", "module": "win_lineinfile", "index": 20, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache shared option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Shared =.*", "line": "  Shared = {{ gitlab_runner.cache_shared|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_shared is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket name option", "module": "win_lineinfile", "index": 21, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket name option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketName =.*", "line": "  BucketName = {{ gitlab_runner.cache_s3_bucket_name|default(\"\")  | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_name is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket location option", "module": "win_lineinfile", "index": 22, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 bucket location option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*BucketLocation =.*", "line": "  BucketLocation = {{ gitlab_runner.cache_s3_bucket_location|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_s3_bucket_location is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache s3 insecure option", "module": "win_lineinfile", "index": 23, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache s3 insecure option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*Insecure =.*", "line": "  Insecure = {{ gitlab_runner.cache_s3_insecure|default(\"\") | lower }}", "state": "{{ 'present' if gitlab_runner.cache_s3_insecure is defined else 'absent' }}", "insertafter": "^\\s*\\[runners\\.cache\\.s3\\]", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh user option", "module": "win_lineinfile", "index": 24, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh user option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*user =.*", "line": "  user = {{ gitlab_runner.ssh_user|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_user is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh host option", "module": "win_lineinfile", "index": 25, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh host option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*host =.*", "line": "  host = {{ gitlab_runner.ssh_host|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_host is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh port option", "module": "win_lineinfile", "index": 26, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh port option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*port =.*", "line": "  port = {{ gitlab_runner.ssh_port|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_port is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh password option", "module": "win_lineinfile", "index": 27, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh password option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*password =.*", "line": "  password = {{ gitlab_runner.ssh_password|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_password is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set ssh identity file option", "module": "win_lineinfile", "index": 28, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set ssh identity file option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*identity_file =.*", "line": "  identity_file = {{ gitlab_runner.ssh_identity_file|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.ssh_identity_file is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set builds dir file option", "module": "win_lineinfile", "index": 29, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set builds dir file option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*builds_dir =.*", "line": "  builds_dir = {{ gitlab_runner.builds_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.builds_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) {{ runn_name_prefix }} Set cache dir file option", "module": "win_lineinfile", "index": 30, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) {{ runn_name_prefix }} Set cache dir file option", "check_mode": false, "notify": "restart_gitlab_runner_windows"}, "module_options": {"dest": "{{ temp_runner_config.path }}", "regexp": "^\\s*cache_dir =.*", "line": "  cache_dir = {{ gitlab_runner.cache_dir|default(\"\") | to_json }}", "state": "{{ 'present' if gitlab_runner.cache_dir is defined else 'absent' }}", "insertafter": "^\\s*executor =", "backrefs": false}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Remove empty lines", "module": "win_shell", "index": 31, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"name": "(Windows) Remove empty lines"}, "module_options": "(Get-Content {{ temp_runner_config.path }}) | ? {$_.trim() -ne \"\" } | Set-Content {{ temp_runner_config.path }}", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 32, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/update-config-runner-windows.yml", "options": {"vars": {"sect_name_prefix": "{{ runn_name_prefix }} section[{{ (section_index|int) + 1 }}/{{ gitlab_runner.extra_configs|list|length }}]:"}, "loop": "{{ gitlab_runner.extra_configs|list }}", "loop_control": {"loop_var": "section", "index_var": "section_index"}, "when": ["gitlab_runner.extra_configs is defined", "gitlab_runner.extra_configs|list|length > 0"]}, "module_options": "section-config-runner-windows.yml", "executable": "section-config-runner-windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Load platform-specific variables", "module": "include_vars", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Load platform-specific variables", "vars": {"possible_files": {"files": ["{{ ansible_distribution }}.yml", "{{ ansible_os_family }}.yml", "default.yml"], "paths": ["vars"]}}}, "module_options": "{{ lookup('first_found', possible_files) }}", "executable": "include_vars", "executable_type": "Module", "fqcn": "ansible.builtin.include_vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Gitlab Runner (Container)", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Install Gitlab Runner (Container)", "when": "gitlab_runner_container_install"}, "module_options": "Container.yml", "executable": "Container.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (Unix)", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Install GitLab Runner (Unix)", "when": "ansible_os_family != 'Windows' and not gitlab_runner_container_install"}, "module_options": "Unix.yml", "executable": "Unix.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Runner (Windows)", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/main.yml", "options": {"name": "Install GitLab Runner (Windows)", "when": "ansible_os_family == 'Windows' and not gitlab_runner_container_install"}, "module_options": "Windows.yml", "executable": "Windows.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-arch.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Arch) Set gitlab_runner_package_name", "module": "set_fact", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "options": {"name": "(Arch) Set gitlab_runner_package_name", "when": "gitlab_runner_package_version is not defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}", "gitlab_runner_package_state": "latest"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Arch) Install GitLab Runner", "module": "package", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "options": {"name": "(Arch) Install GitLab Runner", "become": true}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set systemd reload options", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-arch.yml", "options": {"name": "Set systemd reload options"}, "module_options": "systemd-reload.yml", "executable": "systemd-reload.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-redhat.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "tasks": [{"py/object": "struct4.Task", "name": "(RedHat) Get Gitlab repository installation script", "module": "get_url", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Get Gitlab repository installation script", "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": {"url": "https://packages.gitlab.com/install/repositories/runner/{{ gitlab_runner_package_name }}/script.rpm.sh", "dest": "/tmp/gitlab-runner.script.rpm.sh", "mode": 484}, "executable": "get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RedHat) Install Gitlab repository", "module": "command", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Install Gitlab repository", "args": {"creates": "/etc/yum.repos.d/runner_{{ gitlab_runner_package_name }}.repo"}, "become": true, "when": "gitlab_runner_skip_package_repo_install is not defined or not gitlab_runner_skip_package_repo_install"}, "module_options": "{% if ansible_distribution == \"Rocky\" %} env os=el dist={{ ansible_distribution_major_version }} {% endif %} bash /tmp/gitlab-runner.script.rpm.sh\n", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RedHat) Update gitlab_runner_package_name", "module": "set_fact", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Update gitlab_runner_package_name", "when": "gitlab_runner_package_version is defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}-{{ gitlab_runner_package_version }}", "gitlab_runner_package_state": "present"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RedHat) Set gitlab_runner_package_name", "module": "set_fact", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Set gitlab_runner_package_name", "when": "gitlab_runner_package_version is not defined"}, "module_options": {"gitlab_runner_package": "{{ gitlab_runner_package_name }}", "gitlab_runner_package_state": "latest"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RedHat) Install GitLab Runner", "module": "package", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "(RedHat) Install GitLab Runner", "become": true}, "module_options": {"name": "{{ gitlab_runner_package }}", "state": "{{ gitlab_runner_package_state }}"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set systemd reload options", "module": "import_tasks", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/install-redhat.yml", "options": {"name": "Set systemd reload options"}, "module_options": "systemd-reload.yml", "executable": "systemd-reload.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "config-runners-windows.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Windows) Get existing config.toml", "module": "slurp", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Get existing config.toml", "register": "runner_config_file"}, "module_options": {"src": "{{ gitlab_runner_config_file }}"}, "executable": "slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Get pre-existing global config", "module": "set_fact", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Get pre-existing global config"}, "module_options": {"runner_global_config": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]')[0] }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Get pre-existing runner configs", "module": "set_fact", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Get pre-existing runner configs"}, "module_options": {"runner_configs": "{{ (runner_config_file['content'] | b64decode).split('[[runners]]')[1:] }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Create temporary directory", "module": "win_tempfile", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Create temporary directory", "register": "temp_runner_config_dir", "check_mode": false, "changed_when": false}, "module_options": {"state": "directory", "suffix": "gitlab-runner-config"}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Write config section for each runner", "module": "vars", "index": 4, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Write config section for each runner", "include_tasks": "config-runner-windows.yml", "loop": "{{ runner_configs }}", "loop_control": {"index_var": "runner_config_index", "loop_var": "runner_config"}}, "module_options": {"conf_name_prefix": "conf[{{ (runner_config_index|int) + 1 }}/{{ runner_configs|length }}]:"}, "executable": "vars", "executable_type": "Module", "fqcn": "ansible.builtin.vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Create temporary file config.toml", "module": "win_tempfile", "index": 5, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Create temporary file config.toml", "register": "config_toml_temp"}, "module_options": {"state": "file", "suffix": "temp"}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Write global config to file", "module": "win_lineinfile", "index": 6, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Write global config to file"}, "module_options": {"insertbefore": "BOF", "path": "{{ config_toml_temp.path }}", "line": "{{ runner_global_config }}"}, "executable": "win_lineinfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Create temporary file runners-config.toml", "module": "win_tempfile", "index": 7, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Create temporary file runners-config.toml", "register": "runners_config_toml_temp"}, "module_options": {"state": "file", "suffix": "temp"}, "executable": "win_tempfile", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Assemble runners files in config dir", "module": "win_shell", "index": 8, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Assemble runners files in config dir", "args": {"chdir": "{{ temp_runner_config_dir.path }}"}}, "module_options": "dir -rec | gc | out-file \"{{ runners_config_toml_temp.path }}\"", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Assemble new config.toml", "module": "win_shell", "index": 9, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Assemble new config.toml"}, "module_options": "gc \"{{ config_toml_temp.path }}\",\"{{ runners_config_toml_temp.path }}\" | Set-Content \"{{ gitlab_runner_config_file }}\"", "executable": "win_shell", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Windows) Verify config", "module": "win_command", "index": 10, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runners-windows.yml", "options": {"name": "(Windows) Verify config", "args": {"chdir": "{{ gitlab_runner_config_file_location }}"}}, "module_options": "{{ gitlab_runner_executable }} verify", "executable": "win_command", "executable_type": "Module", "fqcn": "", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "config-runner.yml", "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Create temporary file", "module": "tempfile", "index": 0, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"name": "{{ conf_name_prefix }} Create temporary file", "register": "temp_runner_config", "check_mode": false, "changed_when": false}, "module_options": {"state": "file", "path": "{{ temp_runner_config_dir.path }}", "prefix": "gitlab-runner.{{ runner_config_index }}."}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Isolate runner configuration", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"name": "{{ conf_name_prefix }} Isolate runner configuration", "check_mode": false, "changed_when": false}, "module_options": {"dest": "{{ temp_runner_config.path }}", "content": "{{ runner_config }}"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 2, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"vars": {"runn_name_prefix": "{{ conf_name_prefix }} runner[{{ (gitlab_runner_index|int) + 1 }}/{{ gitlab_runner_runners|length }}]:"}, "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'present'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": "update-config-runner.yml", "executable": "update-config-runner.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ conf_name_prefix }} Remove runner config", "module": "file", "index": 3, "defined_in": "./role-test/testdata/riemers-gitlab-runner/riemers.gitlab-runner/tasks/config-runner.yml", "options": {"name": "{{ conf_name_prefix }} Remove runner config", "when": ["('name = \"'+gitlab_runner.name|default(ansible_hostname+'-'+gitlab_runner_index|string)+'\"') in runner_config", "gitlab_runner.state|default('present') == 'absent'"], "loop": "{{ gitlab_runner_runners }}", "loop_control": {"index_var": "gitlab_runner_index", "loop_var": "gitlab_runner"}}, "module_options": {"path": "{{ temp_runner_config.path }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "riemers.gitlab-runner", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}}, "annotations": {}}