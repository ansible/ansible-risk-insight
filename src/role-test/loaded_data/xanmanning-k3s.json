{"py/object": "struct4.Repository", "name": "", "path": "", "my_collection_name": "", "playbooks": [], "roles": [], "installed_collections_path": "", "installed_collections": [], "installed_roles_path": "./role-test/testdata/xanmanning-k3s", "installed_roles": [{"py/object": "struct4.Role", "name": "xanmanning.k3s", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s", "fqcn": "xanmanning.k3s", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "ensure_k3s_config_files.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure that the config.yaml.d directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "options": {"name": "Ensure that the config.yaml.d directory exists", "when": "k3s_server_config_yaml_d_files | length > 0 or k3s_agent_config_yaml_d_files | length > 0", "become": "{{ k3s_become }}"}, "module_options": {"state": "directory", "path": "{{ k3s_config_yaml_d_dir }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configuration files are copied to controllers", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "options": {"name": "Ensure configuration files are copied to controllers", "loop": "{{ k3s_server_config_yaml_d_files }}", "become": "{{ k3s_become }}", "when": "k3s_control_node"}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_config_yaml_d_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configuration files are copied to agents", "module": "ansible.builtin.template", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "options": {"name": "Ensure configuration files are copied to agents", "loop": "{{ k3s_agent_config_yaml_d_files }}", "become": "{{ k3s_become }}", "when": "not k3s_control_node"}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_config_yaml_d_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_control_plane_started_openrc.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_openrc.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s control plane server is started", "module": "ansible.builtin.service", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_openrc.yml", "options": {"name": "Ensure k3s control plane server is started", "register": "k3s_service_start_k3s", "until": "k3s_service_start_k3s is succeeded", "retries": 3, "delay": 3, "failed_when": ["k3s_service_start_k3s is not succeeded", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}"}, "executable": "ansible.builtin.service", "executable_type": "Module", "fqcn": "ansible.builtin.service", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_restarted.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml", "options": {}, "module_options": "ensure_stopped.yml", "executable": "ensure_stopped.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml", "options": {}, "module_options": "ensure_started.yml", "executable": "ensure_started.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_started.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s service is started", "module": "ansible.builtin.systemd", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml", "options": {"name": "Ensure k3s service is started", "when": "k3s_non_root is not defined or not k3s_non_root", "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service is started", "module": "ansible.builtin.systemd", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml", "options": {"name": "Ensure k3s service is started", "when": ["k3s_non_root is defined", "k3s_non_root"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}", "scope": "user"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_uploads.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure installation directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml", "options": {"name": "Ensure installation directory exists"}, "module_options": {"path": "{{ k3s_install_dir }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s binary is copied from controller to target host", "module": "ansible.builtin.copy", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml", "options": {"name": "Ensure k3s binary is copied from controller to target host", "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s", "dest": "{{ k3s_install_dir }}/k3s-{{ k3s_release_version }}", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_control_node_count.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check the conditions when a single controller is defined", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "options": {"name": "Check the conditions when a single controller is defined", "when": ["k3s_controller_list | length == 1", "not k3s_use_unsupported_config", "k3s_control_node"]}, "module_options": {"that": ["(k3s_controller_list | length == 1)", "(\"datastore-endpoint\" not in k3s_runtime_config or not k3s_runtime_config['datastore-endpoint'])", "(k3s_etcd_datastore is not defined or not k3s_etcd_datastore)"], "success_msg": "Control plane configuration is valid.", "fail_msg": "Control plane configuration is invalid. Please see notes about k3s_control_node and HA in README.md."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check the conditions when multiple controllers are defined", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "options": {"name": "Check the conditions when multiple controllers are defined", "when": ["k3s_controller_list | length >= 2", "k3s_control_node"]}, "module_options": {"that": ["(k3s_controller_list | length >= 2)", "((\"datastore-endpoint\" in k3s_runtime_config and k3s_runtime_config['datastore-endpoint']) or (k3s_etcd_datastore is defined and k3s_etcd_datastore))"], "success_msg": "Control plane configuration is valid.", "fail_msg": "Control plane configuration is invalid. Please see notes about k3s_control_node and HA in README.md."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check the conditions when embedded etcd is defined", "module": "ansible.builtin.assert", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "options": {"name": "Check the conditions when embedded etcd is defined", "when": ["k3s_etcd_datastore is defined", "k3s_etcd_datastore", "not k3s_use_unsupported_config", "k3s_control_node", "k3s_state != 'uninstalled'"]}, "module_options": {"that": ["(k3s_controller_list | length >= 3)", "(((k3s_controller_list | length) % 2) == 1)"], "success_msg": "Control plane configuration is valid.", "fail_msg": "Etcd should have a minimum of 3 defined members and the number of members should be odd. Please see notes about HA in README.md"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_cluster.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure cluster token is captured from {{ k3s_control_delegate }}", "module": "ansible.builtin.slurp", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure cluster token is captured from {{ k3s_control_delegate }}", "register": "k3s_slurped_cluster_token", "delegate_to": "{{ k3s_control_delegate }}", "when": ["k3s_control_token is not defined", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_runtime_config['data-dir'] | default(k3s_data_dir) }}/server/token"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure cluster token is formatted correctly for use in templates", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure cluster token is formatted correctly for use in templates", "when": ["k3s_control_token is not defined", "not ansible_check_mode"]}, "module_options": {"k3s_control_token_content": "{{ k3s_control_token | default(k3s_slurped_cluster_token.content | b64decode) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure dummy cluster token is defined for ansible_check_mode", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure dummy cluster token is defined for ansible_check_mode", "check_mode": false, "when": ["ansible_check_mode"]}, "module_options": {"k3s_control_token_content": "{{ k3s_control_delegate | to_uuid }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the cluster token file location exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure the cluster token file location exists", "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_token_location | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s cluster token file is present", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s cluster token file is present", "become": "{{ k3s_become }}", "notify": ["restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"]}, "module_options": {"src": "cluster-token.j2", "dest": "{{ k3s_token_location }}", "mode": 384}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service unit file is present", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s service unit file is present", "become": "{{ k3s_become }}", "when": ["k3s_service_handler[ansible_service_mgr] == 'systemd'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"]}, "module_options": {"src": "k3s.service.j2", "dest": "{{ k3s_systemd_unit_dir }}/k3s.service", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service file is present", "module": "ansible.builtin.template", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s service file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.openrc.j2", "dest": "{{ k3s_openrc_service_dir }}/k3s", "mode": 484}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s logrotate file is present", "module": "ansible.builtin.template", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s logrotate file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.logrotate.j2", "dest": "{{ k3s_logrotate_dir }}/k3s", "mode": 416}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s config file exists", "module": "ansible.builtin.template", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s config file exists", "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "config.yaml.j2", "dest": "{{ k3s_config_file }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure secondary controllers are started", "module": "include_tasks", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure secondary controllers are started", "when": ["k3s_control_node", "not k3s_primary_control_node"]}, "module_options": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"when": "not k3s_skip_validation"}, "module_options": "post_checks_control_plane.yml", "executable": "post_checks_control_plane.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush Handlers", "module": "ansible.builtin.meta", "index": 11, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Flush Handlers"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 12, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"when": "not k3s_skip_validation"}, "module_options": "post_checks_nodes.yml", "executable": "post_checks_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_directories.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_directories.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure {{ directory.name }} exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_directories.yml", "options": {"name": "Ensure {{ directory.name }} exists", "become": "{{ k3s_become }}", "when": ["directory.path is defined", "directory.path | length > 0", "directory.path != omit"]}, "module_options": {"path": "{{ directory.path }}", "state": "directory", "mode": "{{ directory.mode | default(755) }}"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_uninstalled.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check to see if k3s-killall.sh exits", "module": "ansible.builtin.stat", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Check to see if k3s-killall.sh exits", "register": "check_k3s_killall_script"}, "module_options": {"path": "/usr/local/bin/k3s-killall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check to see if k3s-uninstall.sh exits", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Check to see if k3s-uninstall.sh exits", "register": "check_k3s_uninstall_script"}, "module_options": {"path": "/usr/local/bin/k3s-uninstall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Run k3s-killall.sh", "module": "ansible.builtin.command", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Run k3s-killall.sh", "register": "k3s_killall", "changed_when": "k3s_killall.rc == 0", "when": "check_k3s_killall_script.stat.exists", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "/usr/local/bin/k3s-killall.sh"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Run k3s-uninstall.sh", "module": "ansible.builtin.command", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Run k3s-uninstall.sh", "args": {"removes": "/usr/local/bin/k3s-uninstall.sh"}, "register": "k3s_uninstall", "changed_when": "k3s_uninstall.rc == 0", "when": "check_k3s_uninstall_script.stat.exists", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "/usr/local/bin/k3s-uninstall.sh"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure hard links are removed", "module": "ansible.builtin.file", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Ensure hard links are removed", "loop": ["kubectl", "crictl", "ctr"], "when": ["k3s_install_hard_links", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_install_dir }}/{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_installed.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"loop": "{{ k3s_ensure_directories_exist }}", "loop_control": {"loop_var": "directory"}}, "module_options": "ensure_directories.yml", "executable": "ensure_directories.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"when": ["((k3s_control_node and k3s_controller_list | length == 1) or (k3s_primary_control_node and k3s_controller_list | length > 1))", "not ansible_check_mode"]}, "module_options": "ensure_installed_node.yml", "executable": "ensure_installed_node.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush Handlers", "module": "ansible.builtin.meta", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"name": "Flush Handlers"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"when": "k3s_build_cluster"}, "module_options": "ensure_installed_node.yml", "executable": "ensure_installed_node.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Determine if the systems are already clustered", "module": "ansible.builtin.stat", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"name": "Determine if the systems are already clustered", "register": "k3s_token_cluster_check"}, "module_options": {"path": "{{ k3s_token_location }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"when": "(k3s_control_node and k3s_controller_list | length == 1) or (k3s_primary_control_node and k3s_controller_list | length > 1) or k3s_token_cluster_check.stat.exists"}, "module_options": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_installed.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "ensure_drain_and_remove_nodes.yml", "executable": "ensure_drain_and_remove_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "determine_systemd_context.yml", "executable": "determine_systemd_context.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush Handlers", "module": "ansible.builtin.meta", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"name": "Flush Handlers"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": "not k3s_airgap"}, "module_options": "ensure_downloads.yml", "executable": "ensure_downloads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": "k3s_airgap"}, "module_options": "ensure_uploads.yml", "executable": "ensure_uploads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_primary_control_node"]}, "module_options": "ensure_k3s_auto_deploy.yml", "executable": "ensure_k3s_auto_deploy.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "ensure_k3s_config_files.yml", "executable": "ensure_k3s_config_files.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "ensure_installed.yml", "executable": "ensure_installed.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_registries is defined", "('rootless' not in k3s_runtime_config or not k3s_runtime_config.rootless)"]}, "module_options": "ensure_containerd_registries.yml", "executable": "ensure_containerd_registries.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_control_delegate is defined", "k3s_control_delegate == inventory_hostname"]}, "module_options": "pre_checks_cluster.yml", "executable": "pre_checks_cluster.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_build_cluster is defined", "k3s_build_cluster", "k3s_registration_address is defined"]}, "module_options": "ensure_cluster.yml", "executable": "ensure_cluster.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_issue_data.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure facts are gathered", "module": "ansible.builtin.setup", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure facts are gathered"}, "module_options": null, "executable": "ansible.builtin.setup", "executable_type": "Module", "fqcn": "ansible.builtin.setup", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Ansible version is captured", "module": "ansible.builtin.command", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure Ansible version is captured", "failed_when": false, "changed_when": false, "register": "check_ansible_version", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"cmd": "ansible --version"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Ansible config is captured", "module": "ansible.builtin.command", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure Ansible config is captured", "failed_when": false, "changed_when": false, "register": "check_ansible_config", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"cmd": "ansible-config dump --only-changed"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure a list of roles is captured", "module": "ansible.builtin.command", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure a list of roles is captured", "failed_when": false, "changed_when": false, "register": "check_ansible_roles", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"cmd": "ansible-galaxy role list"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure facts are written to disk", "module": "ansible.builtin.copy", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure facts are written to disk", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"dest": "{{ playbook_dir }}/pyratlabs-issue-dump.txt", "content": "# Begin ANSIBLE VERSION\n{{ check_ansible_version.stdout }}\n# End ANSIBLE VERSION\n\n# Begin ANSIBLE CONFIG\n{{ check_ansible_config.stdout }}\n# End ANSIBLE CONFIG\n\n# Begin ANSIBLE ROLES\n{{ check_ansible_roles.stdout }}\n# End ANSIBLE ROLES\n\n# Begin PLAY HOSTS\n{{ ansible_play_hosts | to_json }}\n# End PLAY HOSTS\n\n# Begin K3S ROLE CONFIG\n{% for host in ansible_play_hosts %}\n## {{ host }}\n{% for config_key in hostvars[host] %}\n{% if config_key | regex_search('^k3s_') %}\n{{ config_key }}: {{ hostvars[host][config_key] | to_json }}\n{% endif %}\n{% endfor %}\n\n{% endfor %}\n# End K3S ROLE CONFIG\n\n# Begin K3S RUNTIME CONFIG\n{% for host in ansible_play_hosts %}\n## {{ host }}\n{% if hostvars[host].k3s_runtime_config is defined %}\n{{ hostvars[host].k3s_runtime_config }}\n{% endif %}\n{% endfor %}\n# End K3S RUNTIME CONFIG\n", "mode": 384}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail the play", "module": "ansible.builtin.fail", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Fail the play", "delegate_to": "localhost", "run_once": true}, "module_options": {"msg": "Please include the output of {{ playbook_dir }}/pyratlabs-issue-dump.txt in your bug report."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "post_checks_nodes.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_nodes.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that all nodes to be ready", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_nodes.yml", "options": {"name": "Check that all nodes to be ready", "changed_when": false, "failed_when": "kubectl_get_nodes_result.stdout.find(\"was refused\") != -1 or kubectl_get_nodes_result.stdout.find(\"ServiceUnavailable\") != -1", "register": "kubectl_get_nodes_result", "until": ["kubectl_get_nodes_result.rc == 0", "kubectl_get_nodes_result.stdout.find(\"NotReady\") == -1"], "retries": 30, "delay": 20, "when": ["k3s_control_node", "(\"flannel-backend\" not in k3s_runtime_config or k3s_runtime_config[\"flannel-backend\"] != \"none\")", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl get nodes"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_started.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_started.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_started.yml", "options": {}, "module_options": "ensure_started.yml", "executable": "ensure_started.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_cluster.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that the initial control plane server is available to accept connections", "module": "ansible.builtin.wait_for", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml", "options": {"name": "Check that the initial control plane server is available to accept connections"}, "module_options": {"port": "{{ k3s_runtime_config['https-listen-port'] | default('6443') }}", "host": "{{ k3s_runtime_config['bind-address'] | default('127.0.0.1') }}", "delay": 5, "sleep": 5, "timeout": 300}, "executable": "ansible.builtin.wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that cluster-token exists", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml", "options": {"name": "Check that cluster-token exists", "register": "k3s_check_cluster_token", "check_mode": false, "failed_when": ["not k3s_check_cluster_token.stat.exists", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_runtime_config['data-dir'] | default(k3s_data_dir) }}/server/token"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_installed_node.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s is linked into the installation destination", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s is linked into the installation destination", "loop": ["k3s", "kubectl", "crictl", "ctr"], "when": "not ansible_check_mode", "notify": ["restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "{{ k3s_install_dir }}/k3s-{{ k3s_release_version }}", "dest": "{{ k3s_install_dir }}/{{ item }}", "state": "{{ 'hard' if k3s_install_hard_links else 'link' }}", "force": "{{ k3s_install_hard_links }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s config file exists", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s config file exists", "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "config.yaml.j2", "dest": "{{ k3s_config_file }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the cluster token file location exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure the cluster token file location exists", "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_token_location | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s cluster token file is present", "module": "ansible.builtin.template", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s cluster token file is present", "become": "{{ k3s_become }}", "notify": ["restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"]}, "module_options": {"src": "cluster-token.j2", "dest": "{{ k3s_token_location }}", "mode": 384}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service unit file is present", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s service unit file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'systemd'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.service.j2", "dest": "{{ k3s_systemd_unit_dir }}/k3s.service", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service file is present", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s service file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.openrc.j2", "dest": "{{ k3s_openrc_service_dir }}/k3s", "mode": 484}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s logrotate file is present", "module": "ansible.builtin.template", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s logrotate file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.logrotate.j2", "dest": "{{ k3s_logrotate_dir }}/k3s", "mode": 416}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s killall script is present", "module": "ansible.builtin.template", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s killall script is present", "become": "{{ k3s_become }}", "when": ["k3s_runtime_config is defined", "(\"rootless\" not in k3s_runtime_config or not k3s_runtime_config.rootless)"]}, "module_options": {"src": "k3s-killall.sh.j2", "dest": "/usr/local/bin/k3s-killall.sh", "mode": 448}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s uninstall script is present", "module": "ansible.builtin.template", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s uninstall script is present", "become": "{{ k3s_become }}", "when": ["k3s_runtime_config is defined", "(\"rootless\" not in k3s_runtime_config or not k3s_runtime_config.rootless)"]}, "module_options": {"src": "k3s-uninstall.sh.j2", "dest": "/usr/local/bin/k3s-uninstall.sh", "mode": 448}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_packages.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that {{ package.name }} is installed", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml", "options": {"name": "Check that {{ package.name }} is installed", "changed_when": false, "failed_when": false, "register": "check_k3s_required_package", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "which {{ package.name }}"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Test that checks for {{ package.name }} passed", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml", "options": {"name": "Test that checks for {{ package.name }} passed", "when": ["check_k3s_required_package.rc is defined", "(package.until is not defined or (k3s_release_version | replace('v', '')) is version_compare(package.until, '<'))", "(package.from is not defined or (k3s_release_version | replace('v', '')) is version_compare(package.from, '>='))"]}, "module_options": {"that": ["check_k3s_required_package.rc == 0"], "success_msg": "Found required package: {{ package.name }}.", "fail_msg": "Could not find package: {{ package.name }}. {% if package.documentation is defined %} Documentation: {{ package.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_k3s_auto_deploy.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure that the manifests directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure that the manifests directory exists", "when": "k3s_server_manifests_templates | length > 0 or k3s_server_manifests_urls | length > 0", "become": "{{ k3s_become }}"}, "module_options": {"state": "directory", "path": "{{ k3s_server_manifests_dir }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the pod-manifests directory exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure that the pod-manifests directory exists", "when": "k3s_server_pod_manifests_templates | length > 0 or k3s_server_pod_manifests_urls | length > 0", "become": "{{ k3s_become }}"}, "module_options": {"state": "directory", "path": "{{ k3s_server_pod_manifests_dir }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure auto-deploying manifests are copied to the primary controller", "module": "ansible.builtin.template", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure auto-deploying manifests are copied to the primary controller", "loop": "{{ k3s_server_manifests_templates }}", "become": "{{ k3s_become }}", "when": ["k3s_server_manifests_templates | length > 0"]}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_server_manifests_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure auto-deploying manifests are downloaded to the primary controller", "module": "ansible.builtin.get_url", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure auto-deploying manifests are downloaded to the primary controller", "loop": "{{ k3s_server_manifests_urls }}", "become": "{{ k3s_become }}", "when": ["not ansible_check_mode", "k3s_server_manifests_urls | length > 0"]}, "module_options": {"url": "{{ item.url }}", "dest": "{{ k3s_server_manifests_dir }}/{{ item.filename | default(item.url | basename) }}", "mode": 420}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure static pod manifests are copied to controllers", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure static pod manifests are copied to controllers", "loop": "{{ k3s_server_pod_manifests_templates }}", "become": "{{ k3s_become }}"}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_server_pod_manifests_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure auto-deploying manifests are downloaded to the primary controller", "module": "ansible.builtin.get_url", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure auto-deploying manifests are downloaded to the primary controller", "loop": "{{ k3s_server_pod_manifests_urls }}", "become": "{{ k3s_become }}", "when": "not ansible_check_mode"}, "module_options": {"url": "{{ item.url }}", "dest": "{{ k3s_server_pod_manifests_dir }}/{{ item.filename | default(item.url | basename) }}", "mode": 420}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that k3s_state is a supported value", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that k3s_state is a supported value", "when": "k3s_state is defined"}, "module_options": {"that": ["k3s_state in k3s_valid_states"], "fail_msg": "k3s_state not valid. Check README.md for details.", "success_msg": "k3s_state is valid."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that Ansible v{{ ansible_version.string }} is supported by this role", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that Ansible v{{ ansible_version.string }} is supported by this role", "become": false, "delegate_to": "localhost", "run_once": true, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["ansible_version.string is version_compare(k3s_ansible_min_version, '>=')"], "fail_msg": "Ansible v{{ ansible_version.string }} is not supported by this role. Please install >= v{{ k3s_ansible_min_version }}.", "success_msg": "Ansible v{{ ansible_version.string }} is supported."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that Python v{{ ansible_python_version }} is supported by this role", "module": "ansible.builtin.assert", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that Python v{{ ansible_python_version }} is supported by this role", "become": false, "delegate_to": "localhost", "run_once": true, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["ansible_python_version is version_compare(k3s_python_min_version, '>=')"], "fail_msg": "Python v{{ ansible_python_version }} is not supported by this role. Please install >= v{{ k3s_python_min_version }}.", "success_msg": "Python v{{ ansible_python_version }} is supported."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that the target init system is supported by this role", "module": "ansible.builtin.assert", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that the target init system is supported by this role", "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["ansible_service_mgr in k3s_supported_init"], "fail_msg": "{{ ansible_service_mgr }} is not supported by this role. Supported init systems: {{ k3s_supported_init | join(', ') }}", "success_msg": "{{ ansible_service_mgr }} is supported"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Determing if {{ ansible_service_mgr }} is actually openrc", "module": "ansible.builtin.stat", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Determing if {{ ansible_service_mgr }} is actually openrc", "register": "k3s_check_openrc_run", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'", "not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"path": "/sbin/openrc-run"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that {{ ansible_service_mgr }} is actually openrc", "module": "ansible.builtin.assert", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that {{ ansible_service_mgr }} is actually openrc", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'", "not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["k3s_check_openrc_run.stat.exists"], "fail_msg": "openrc was not found, cannot install to {{ ansible_service_mgr }}", "success_msg": "openrc found"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["(k3s_release_version is not defined or not k3s_release_version or k3s_release_version is not regex('\\\\+k3s[1-9]$'))", "not k3s_airgap"]}, "module_options": "pre_checks_version.yml", "executable": "pre_checks_version.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"loop": "{{ k3s_cgroup_subsys }}", "loop_control": {"loop_var": "cgroup"}, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": "pre_checks_cgroups.yml", "executable": "pre_checks_cgroups.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"loop": "{{ k3s_check_packages[k3s_os_distribution_version] }}", "loop_control": {"loop_var": "package"}, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks", "k3s_check_packages[k3s_os_distribution_version] is defined"]}, "module_options": "pre_checks_packages.yml", "executable": "pre_checks_packages.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["pyratlabs_issue_controller_dump is defined", "pyratlabs_issue_controller_dump"]}, "module_options": "pre_checks_issue_data.yml", "executable": "pre_checks_issue_data.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["not k3s_skip_validation"]}, "module_options": "pre_checks_variables.yml", "executable": "pre_checks_variables.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 11, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["not k3s_skip_validation"]}, "module_options": "pre_checks_experimental_variables.yml", "executable": "pre_checks_experimental_variables.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 12, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["k3s_runtime_config.rootless is defined", "k3s_runtime_config.rootless", "not k3s_skip_validation"]}, "module_options": "pre_checks_unsupported_rootless.yml", "executable": "pre_checks_unsupported_rootless.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 13, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {}, "module_options": "ensure_pre_configuration.yml", "executable": "ensure_pre_configuration.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 14, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["k3s_build_cluster is defined", "k3s_build_cluster", "not k3s_skip_validation"]}, "module_options": "pre_checks_control_node_count.yml", "executable": "pre_checks_control_node_count.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_uninstalled.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {}, "module_options": "ensure_pre_configuration.yml", "executable": "ensure_pre_configuration.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {}, "module_options": "ensure_drain_and_remove_nodes.yml", "executable": "ensure_drain_and_remove_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {}, "module_options": "ensure_uninstalled.yml", "executable": "ensure_uninstalled.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {"when": "not k3s_skip_validation"}, "module_options": "post_checks_uninstalled.yml", "executable": "post_checks_uninstalled.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_unsupported_rootless.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check if newuidmap is available", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Check if newuidmap is available", "failed_when": false, "changed_when": false, "register": "k3s_check_newuidmap_installed"}, "module_options": {"cmd": "which newuidmap"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if /proc/sys/kernel/unprivileged_userns_clone exists", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Check if /proc/sys/kernel/unprivileged_userns_clone exists", "register": "k3s_check_unprivileged_userns_exists"}, "module_options": {"path": "/proc/sys/kernel/unprivileged_userns_clone"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the value of /proc/sys/kernel/unprivileged_userns_clone", "module": "ansible.builtin.slurp", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the value of /proc/sys/kernel/unprivileged_userns_clone", "register": "k3s_get_unprivileged_userns_clone", "when": "k3s_check_unprivileged_userns_exists.stat.exists"}, "module_options": {"src": "/proc/sys/kernel/unprivileged_userns_clone"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the value of k3s_get_unprivileged_userns_clone", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Set the value of k3s_get_unprivileged_userns_clone", "when": "not k3s_check_unprivileged_userns_exists.stat.exists"}, "module_options": {"k3s_get_unprivileged_userns_clone": {"content": "MQo="}}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the value of /proc/sys/user/max_user_namespaces", "module": "ansible.builtin.slurp", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the value of /proc/sys/user/max_user_namespaces", "register": "k3s_get_max_user_namespaces"}, "module_options": {"src": "/proc/sys/user/max_user_namespaces"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the contents of /etc/subuid", "module": "ansible.builtin.slurp", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the contents of /etc/subuid", "register": "k3s_get_subuid"}, "module_options": {"src": "/etc/subuid"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the contents of /etc/subgid", "module": "ansible.builtin.slurp", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the contents of /etc/subgid", "register": "k3s_get_subgid"}, "module_options": {"src": "/etc/subgid"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get current user subuid and subgid values", "module": "ansible.builtin.set_fact", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get current user subuid and subgid values"}, "module_options": {"k3s_current_user_subuid": "{{ (k3s_get_subuid['content'] | b64decode).split('\n') | select('search', ansible_user_id) | first | default('UserNotFound:0:0') }}", "k3s_current_user_subgid": "{{ (k3s_get_subgid['content'] | b64decode).split('\n') | select('search', ansible_user_id) | first | default('UserNotFound:0:0') }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check user namespaces kernel parameters are adequate", "module": "ansible.builtin.assert", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Check user namespaces kernel parameters are adequate"}, "module_options": {"that": ["k3s_get_unprivileged_userns_clone['content'] | b64decode | int == 1", "((k3s_get_max_user_namespaces['content'] | b64decode | int >= 28633) or (k3s_os_family != \"redhat\"))", "k3s_current_user_subuid != \"UserNotFound:0:0\"", "k3s_current_user_subgid != \"UserNotFound:0:0\"", "k3s_current_user_subuid.split(':')[2] | int >= 65536", "k3s_current_user_subgid.split(':')[2] | int >= 65536", "ansible_env['XDG_RUNTIME_DIR'] is defined", "k3s_check_newuidmap_installed.rc == 0"], "success_msg": "All kernel parameters passed", "fail_msg": "Kernel parameters are not set correctly, please check https://github.com/rootless-containers/rootlesskit"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "post_checks_control_plane.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_control_plane.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that the control plane is available to accept connections", "module": "ansible.builtin.wait_for", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_control_plane.yml", "options": {"name": "Check that the control plane is available to accept connections", "when": "k3s_control_node"}, "module_options": {"port": "{{ k3s_runtime_config['https-listen-port'] | default('6443') }}", "host": "{{ k3s_runtime_config['bind-address'] | default('127.0.0.1') }}", "delay": 5, "sleep": 5, "timeout": 300}, "executable": "ansible.builtin.wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_containerd_registries.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_containerd_registries.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure containerd registries file exists", "module": "ansible.builtin.template", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_containerd_registries.yml", "options": {"name": "Ensure containerd registries file exists", "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "registries.yaml.j2", "dest": "{{ k3s_config_dir }}/registries.yaml", "mode": 384}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_stopped.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s service is stopped", "module": "ansible.builtin.systemd", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml", "options": {"name": "Ensure k3s service is stopped", "when": "k3s_non_root is not defined or not k3s_non_root", "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "stopped", "enabled": "{{ k3s_start_on_boot }}"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service is started", "module": "ansible.builtin.systemd", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml", "options": {"name": "Ensure k3s service is started", "when": ["k3s_non_root is defined", "k3s_non_root"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "stopped", "enabled": "{{ k3s_start_on_boot }}", "scope": "user"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_downloaded.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "options": {"when": ["k3s_release_version is not defined or not k3s_release_version", "not k3s_airgap"]}, "module_options": "pre_checks_version.yml", "executable": "pre_checks_version.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "options": {"when": "not k3s_airgap"}, "module_options": "ensure_downloads.yml", "executable": "ensure_downloads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "options": {"when": "k3s_airgap"}, "module_options": "ensure_uploads.yml", "executable": "ensure_uploads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_control_plane_started_systemd.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_systemd.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s control plane server is started", "module": "ansible.builtin.systemd", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_systemd.yml", "options": {"name": "Ensure k3s control plane server is started", "register": "k3s_systemd_start_k3s", "until": "k3s_systemd_start_k3s is succeeded", "retries": 3, "delay": 3, "failed_when": ["k3s_systemd_start_k3s is not succeeded", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}", "scope": "{{ k3s_systemd_context }}"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_drain_and_remove_nodes.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check if kubectl exists", "module": "ansible.builtin.stat", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Check if kubectl exists", "register": "k3s_check_kubectl", "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_install_dir }}/kubectl"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather a list of nodes", "module": "ansible.builtin.command", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Gather a list of nodes", "changed_when": false, "failed_when": false, "delegate_to": "{{ k3s_control_delegate }}", "run_once": true, "register": "kubectl_get_nodes_result", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl get nodes"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure uninstalled nodes are drained", "module": "ansible.builtin.command", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Ensure uninstalled nodes are drained", "delegate_to": "{{ k3s_control_delegate }}", "run_once": true, "when": ["kubectl_get_nodes_result.stdout is defined", "item in kubectl_get_nodes_result.stdout", "hostvars[item].k3s_state is defined", "hostvars[item].k3s_state == 'uninstalled'"], "loop": "{{ ansible_play_hosts }}", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl drain {{ item }}\n  --ignore-daemonsets\n  --{{ k3s_drain_command[ansible_version.string is version_compare('1.22', '>=')] }}\n  --force"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure uninstalled nodes are removed", "module": "ansible.builtin.command", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Ensure uninstalled nodes are removed", "delegate_to": "{{ k3s_control_delegate }}", "run_once": true, "when": ["kubectl_get_nodes_result.stdout is defined", "item in kubectl_get_nodes_result.stdout", "hostvars[item].k3s_state is defined", "hostvars[item].k3s_state == 'uninstalled'"], "loop": "{{ ansible_play_hosts }}", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl delete node {{ item }}"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "post_checks_uninstalled.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that k3s is not running", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Check that k3s is not running", "failed_when": ["check_k3s_process.rc == 0", "not ansible_check_mode"], "changed_when": false, "register": "check_k3s_process"}, "module_options": {"cmd": "pgrep k3s"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if k3s binaries have not been removed", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Fail if k3s binaries have not been removed", "register": "check_k3s_binaries_removed", "failed_when": "check_k3s_binaries_removed.stat.exists", "loop": ["k3s", "kubectl", "crictl", "ctr"]}, "module_options": {"path": "{{ k3s_install_dir }}/{{ item }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check k3s-killall.sh is removed", "module": "ansible.builtin.stat", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Check k3s-killall.sh is removed", "register": "check_k3s_killall"}, "module_options": {"path": "/usr/local/bin/k3s-killall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if k3s-killall.sh script still exists", "module": "ansible.builtin.fail", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Fail if k3s-killall.sh script still exists", "when": "check_k3s_killall.stat.exists"}, "module_options": {"msg": "k3s-killall.sh still exists, uninstall script failed. Please investigate."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check k3s-uninstall.sh is removed", "module": "ansible.builtin.stat", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Check k3s-uninstall.sh is removed", "register": "check_k3s_uninstall"}, "module_options": {"path": "/usr/local/bin/k3s-uninstall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if k3s-uninstall.sh script still exists", "module": "ansible.builtin.fail", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Fail if k3s-uninstall.sh script still exists", "when": "check_k3s_uninstall.stat.exists"}, "module_options": {"msg": "k3s-uninstall.sh is still exists, uninstall script failed. Please investigate."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_variables.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that k3s_release_version >= {{ k3s_min_version }}", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check that k3s_release_version >= {{ k3s_min_version }}", "when": "not k3s_airgap"}, "module_options": {"that": ["(k3s_release_version | replace('v', '')) is version_compare(k3s_min_version, '>=')"], "success_msg": "{{ k3s_release_version }} is supported by this role.", "fail_msg": "{{ k3s_release_version }} is not supported by this role, please use xanmanning.k3s v1.x."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check configuration in k3s_server and k3s_agent that needs alternate configuration", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check configuration in k3s_server and k3s_agent that needs alternate configuration", "loop": "{{ k3s_config_exclude }}"}, "module_options": {"that": ["(item.setting not in k3s_runtime_config)"], "success_msg": "{{ item.setting }} not found in server/agent config", "fail_msg": "{{ item.setting }} found in server/agent config. Please set {{ item.correction }} to use this option. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check configuration in k3s_server and k3s_agent for deprecated configuration", "module": "ansible.builtin.assert", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check configuration in k3s_server and k3s_agent for deprecated configuration", "loop": "{{ k3s_deprecated_config }}", "when": ["not k3s_airgap", "(item.when is not defined or (item.when is defined and (k3s_release_version | replace('v', '')) is version_compare(item.when, '>=')))", "not k3s_use_unsupported_config"]}, "module_options": {"that": ["(item.setting not in k3s_runtime_config) or (not k3s_runtime_config[item.setting])"], "success_msg": "{{ item.setting }} not found in server/agent config", "fail_msg": "{{ item.setting }} found in server/agent config. Please set {{ item.correction }} to use this option. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check configuration in k3s_server and k3s_agent against release version", "module": "ansible.builtin.assert", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check configuration in k3s_server and k3s_agent against release version", "loop": "{{ k3s_config_version_check }}", "when": ["k3s_config_version_check is defined", "item.setting in k3s_runtime_config"]}, "module_options": {"that": ["(k3s_release_version | replace('v', '')) is version_compare(item.version, '>=')"], "success_msg": "{{ item.setting }} is supported by {{ k3s_release_version }}", "fail_msg": "{{ item.setting }} is not supported in {{ k3s_release_version }}. Please update to v{{ item.version }} to use this option. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_validated.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml", "options": {}, "module_options": "post_checks_control_plane.yml", "executable": "post_checks_control_plane.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml", "options": {}, "module_options": "post_checks_nodes.yml", "executable": "post_checks_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_cgroups.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check if {{ cgroup.name }} cgroup is enabled", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml", "options": {"name": "Check if {{ cgroup.name }} cgroup is enabled", "failed_when": false, "changed_when": false, "check_mode": false, "register": "k3s_check_cgroup_option"}, "module_options": {"cmd": "grep -E \"^{{ cgroup.name }}\\s+.*\\s+1$\" /proc/cgroups"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if {{ cgroup.name }} cgroup is not enabled", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml", "options": {"name": "Fail if {{ cgroup.name }} cgroup is not enabled"}, "module_options": {"that": ["k3s_check_cgroup_option.rc == 0"], "fail_msg": "{{ cgroup.name }} cgroup disabled. {{ cgroup.documentation }}\n", "success_msg": "{{ cgroup.name }} cgroup enabled."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_pre_configuration.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s_build_cluster is false if running against a single node.", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s_build_cluster is false if running against a single node.", "when": ["ansible_play_hosts | length < 2", "k3s_registration_address is not defined"]}, "module_options": {"k3s_build_cluster": false}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s control node fact is set", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s control node fact is set", "when": "k3s_control_node is not defined"}, "module_options": {"k3s_control_node": "{{ not k3s_build_cluster }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s primary control node fact is set", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s primary control node fact is set", "when": "k3s_primary_control_node is not defined"}, "module_options": {"k3s_primary_control_node": "{{ not k3s_build_cluster }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s control plane port is captured", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s control plane port is captured", "delegate_to": "k3s_primary_control_node"}, "module_options": {"k3s_control_plane_port": "{{ k3s_runtime_config['https-listen-port'] | default(6443) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s node IP is configured when node-ip is defined", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s node IP is configured when node-ip is defined", "when": ["k3s_runtime_config['node-ip'] is defined"]}, "module_options": {"k3s_node_ip": "{{ k3s_runtime_config['node-ip'] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure a count of control nodes is generated from ansible_play_hosts", "module": "ansible.builtin.set_fact", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure a count of control nodes is generated from ansible_play_hosts", "when": ["hostvars[item].k3s_control_node is defined", "hostvars[item].k3s_control_node"], "loop": "{{ ansible_play_hosts }}"}, "module_options": {"k3s_controller_list": "{{ k3s_controller_list + [ item ] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the control host", "module": "ansible.builtin.set_fact", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Set the control host", "when": "inventory_hostname == ansible_play_hosts[0]"}, "module_options": {"k3s_control_node": true}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure a count of control nodes is generated", "module": "ansible.builtin.set_fact", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure a count of control nodes is generated", "when": ["hostvars[item].k3s_control_node is defined", "hostvars[item].k3s_control_node"], "loop": "{{ ansible_play_hosts }}"}, "module_options": {"k3s_controller_list": "{{ k3s_controller_list + [ item ] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure a primary k3s control node is defined if multiple are found in ansible_play_hosts", "module": "ansible.builtin.set_fact", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure a primary k3s control node is defined if multiple are found in ansible_play_hosts", "when": ["k3s_controller_list is defined", "inventory_hostname == k3s_controller_list[0]", "k3s_build_cluster is defined", "k3s_build_cluster"]}, "module_options": {"k3s_primary_control_node": true}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure ansible_host is mapped to inventory_hostname", "module": "ansible.builtin.blockinfile", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure ansible_host is mapped to inventory_hostname", "check_mode": false, "when": "k3s_control_node is defined"}, "module_options": {"path": "/tmp/inventory.txt", "block": "{% for host in ansible_play_hosts %}\n{% filter replace('\\n', ' ') %}\n{{ host }}\n@@@\n{{ hostvars[host].ansible_host | default(hostvars[host].ansible_fqdn) | string }}\n@@@\nC_{{ hostvars[host].k3s_control_node | string }}\n@@@\nP_{{ hostvars[host].k3s_primary_control_node | default(False) | string }}\n{% endfilter %}\n@@@ END:{{ host }}\n{% endfor %}\n", "create": true, "mode": 384}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Lookup control node from file", "module": "ansible.builtin.command", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Lookup control node from file", "changed_when": false, "check_mode": false, "register": "k3s_control_delegate_raw"}, "module_options": {"cmd": "grep -i '{{ 'P_True' if (k3s_controller_list | length > 1) else 'C_True' }}' /tmp/inventory.txt"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure control node is delegated for obtaining a cluster token", "module": "ansible.builtin.set_fact", "index": 11, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure control node is delegated for obtaining a cluster token", "check_mode": false, "when": "k3s_control_delegate is not defined"}, "module_options": {"k3s_control_delegate": "{{ k3s_control_delegate_raw.stdout.split(' @@@ ')[0] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the node registration address is defined from k3s_control_node_address", "module": "ansible.builtin.set_fact", "index": 12, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure the node registration address is defined from k3s_control_node_address", "check_mode": false, "when": "k3s_control_node_address is defined"}, "module_options": {"k3s_registration_address": "{{ k3s_control_node_address }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the node registration address is defined from node-ip", "module": "ansible.builtin.set_fact", "index": 13, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure the node registration address is defined from node-ip", "check_mode": false, "when": ["k3s_registration_address is not defined", "k3s_control_node_address is not defined", "hostvars[k3s_control_delegate].k3s_node_ip is defined"]}, "module_options": {"k3s_registration_address": "{{ hostvars[k3s_control_delegate].k3s_node_ip }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the node registration address is defined", "module": "ansible.builtin.set_fact", "index": 14, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure the node registration address is defined", "check_mode": false, "when": ["k3s_registration_address is not defined", "k3s_control_node_address is not defined"]}, "module_options": {"k3s_registration_address": "{{ hostvars[k3s_control_delegate].ansible_host | default(hostvars[k3s_control_delegate].ansible_fqdn) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_downloads.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure target host architecture information is set as a fact", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure target host architecture information is set as a fact", "check_mode": false}, "module_options": {"k3s_arch": "{{ k3s_arch_lookup[ansible_architecture].arch }}", "k3s_arch_suffix": "{{ k3s_arch_lookup[ansible_architecture].suffix }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure URLs are set as facts for downloading binaries", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure URLs are set as facts for downloading binaries", "check_mode": false}, "module_options": {"k3s_binary_url": "{{ k3s_github_download_url }}/{{ k3s_release_version }}/k3s{{ k3s_arch_suffix }}", "k3s_hash_url": "{{ k3s_github_download_url }}/{{ k3s_release_version }}/sha256sum-{{ k3s_arch }}.txt"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Override k3s_binary_url and k3s_hash_url facts for testing specific commit", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Override k3s_binary_url and k3s_hash_url facts for testing specific commit", "when": ["k3s_release_version | regex_search(\"^[a-z0-9]{40}$\")"], "check_mode": false}, "module_options": {"k3s_binary_url": "https://storage.googleapis.com/k3s-ci-builds/k3s{{ k3s_arch_suffix }}-{{ k3s_release_version }}", "k3s_hash_url": "https://storage.googleapis.com/k3s-ci-builds/k3s{{ k3s_arch_suffix }}-{{ k3s_release_version }}.sha256sum"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the k3s hashsum is downloaded", "module": "ansible.builtin.uri", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure the k3s hashsum is downloaded", "register": "k3s_hash_sum_raw", "check_mode": false}, "module_options": {"url": "{{ k3s_hash_url }}", "return_content": true}, "executable": "ansible.builtin.uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure sha256sum is set from hashsum variable", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure sha256sum is set from hashsum variable", "changed_when": false, "check_mode": false}, "module_options": {"k3s_hash_sum": "{{ (k3s_hash_sum_raw.content.split('\n') | select('search', 'k3s' + k3s_arch_suffix) | reject('search', 'images') | first).split() | first }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure installation directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure installation directory exists"}, "module_options": {"path": "{{ k3s_install_dir }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s binary is downloaded", "module": "ansible.builtin.get_url", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure k3s binary is downloaded", "become": "{{ k3s_become }}"}, "module_options": {"url": "{{ k3s_binary_url }}", "dest": "{{ k3s_install_dir }}/k3s-{{ k3s_release_version }}", "checksum": "sha256:{{ k3s_hash_sum }}", "mode": 493}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_stopped.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_stopped.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_stopped.yml", "options": {}, "module_options": "ensure_stopped.yml", "executable": "ensure_stopped.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "determine_systemd_context.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/determine_systemd_context.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure systemd context is correct if we are running k3s rootless", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/determine_systemd_context.yml", "options": {"name": "Ensure systemd context is correct if we are running k3s rootless", "when": ["k3s_runtime_config is defined", "k3s_runtime_config.rootless is defined", "k3s_runtime_config.rootless"]}, "module_options": {"k3s_systemd_context": "user", "k3s_systemd_unit_dir": "{{ ansible_user_dir }}/.config/systemd/user"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml", "options": {}, "module_options": "pre_checks.yml", "executable": "pre_checks.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml", "options": {}, "module_options": "state_{{ (k3s_state | lower) | default('installed') }}.yml", "executable": "state_{{ (k3s_state | lower) | default('installed') }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_experimental_variables.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check if embedded etcd datastore is enabled and marked as experimental", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml", "options": {"name": "Check if embedded etcd datastore is enabled and marked as experimental", "when": ["k3s_etcd_datastore is defined", "k3s_etcd_datastore", "(k3s_release_version | replace('v', '')) is version_compare(\"1.19.5\", '<')"]}, "module_options": {"that": ["k3s_use_experimental is defined and k3s_use_experimental"], "success_msg": "Experimental variables are defined and enabled.", "fail_msg": "Experimental variable k3s_etcd_datastore has been configured. If you want to use this ensure you set k3s_use_experimental,"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if any experimental variables are configure and if they are enabled with k3s_use_experimental", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml", "options": {"name": "Check if any experimental variables are configure and if they are enabled with k3s_use_experimental", "loop": "{{ k3s_experimental_config }}", "when": ["(item.setting in k3s_runtime_config and k3s_runtime_config[item.setting])", "((item.until is not defined) or (item.until is defined and (k3s_release_version | replace('v', '')) is version_compare(item.until, '<')))"]}, "module_options": {"that": ["k3s_use_experimental is defined and k3s_use_experimental"], "success_msg": "Experimental variables are defined and enabled.", "fail_msg": "Experimental variable {{ item.setting }} has been configured. If you want to use this ensure you set k3s_use_experimental. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_version.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s_release_version is set to default if false", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Ensure k3s_release_version is set to default if false", "check_mode": false, "when": ["k3s_release_version is defined", "not k3s_release_version"]}, "module_options": {"k3s_release_version": "{{ k3s_release_channel }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the default release channel is set", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Ensure the default release channel is set", "check_mode": false}, "module_options": {"k3s_release_channel": "{{ k3s_release_version | default('stable') }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the latest release version from k3s.io", "module": "ansible.builtin.uri", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Get the latest release version from k3s.io", "register": "k3s_latest_release", "no_log": true, "check_mode": false}, "module_options": {"url": "{{ k3s_api_releases }}", "return_content": true, "body_format": "json"}, "executable": "ansible.builtin.uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the release version is set as a fact", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Ensure the release version is set as a fact", "loop": "{{ k3s_latest_release.json.data }}", "check_mode": false, "when": ["item.name == k3s_release_channel", "item.type == \"channel\""]}, "module_options": {"k3s_release_version": "{{ item.latest }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}], "modules": [], "taskfiles": [], "version": "", "module_dict": {}, "task_dict": {"{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure that the config.yaml.d directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "options": {"name": "Ensure that the config.yaml.d directory exists", "when": "k3s_server_config_yaml_d_files | length > 0 or k3s_agent_config_yaml_d_files | length > 0", "become": "{{ k3s_become }}"}, "module_options": {"state": "directory", "path": "{{ k3s_config_yaml_d_dir }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure configuration files are copied to controllers", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "options": {"name": "Ensure configuration files are copied to controllers", "loop": "{{ k3s_server_config_yaml_d_files }}", "become": "{{ k3s_become }}", "when": "k3s_control_node"}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_config_yaml_d_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Ensure configuration files are copied to agents", "module": "ansible.builtin.template", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "options": {"name": "Ensure configuration files are copied to agents", "loop": "{{ k3s_agent_config_yaml_d_files }}", "become": "{{ k3s_become }}", "when": "not k3s_control_node"}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_config_yaml_d_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_openrc.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure k3s control plane server is started", "module": "ansible.builtin.service", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_openrc.yml", "options": {"name": "Ensure k3s control plane server is started", "register": "k3s_service_start_k3s", "until": "k3s_service_start_k3s is succeeded", "retries": 3, "delay": 3, "failed_when": ["k3s_service_start_k3s is not succeeded", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}"}, "executable": "ansible.builtin.service", "executable_type": "Module", "fqcn": "ansible.builtin.service", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml", "options": {}, "module_options": "ensure_stopped.yml", "executable": "ensure_stopped.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml", "options": {}, "module_options": "ensure_started.yml", "executable": "ensure_started.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure k3s service is started", "module": "ansible.builtin.systemd", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml", "options": {"name": "Ensure k3s service is started", "when": "k3s_non_root is not defined or not k3s_non_root", "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure k3s service is started", "module": "ansible.builtin.systemd", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml", "options": {"name": "Ensure k3s service is started", "when": ["k3s_non_root is defined", "k3s_non_root"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}", "scope": "user"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure installation directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml", "options": {"name": "Ensure installation directory exists"}, "module_options": {"path": "{{ k3s_install_dir }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure k3s binary is copied from controller to target host", "module": "ansible.builtin.copy", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml", "options": {"name": "Ensure k3s binary is copied from controller to target host", "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s", "dest": "{{ k3s_install_dir }}/k3s-{{ k3s_release_version }}", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check the conditions when a single controller is defined", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "options": {"name": "Check the conditions when a single controller is defined", "when": ["k3s_controller_list | length == 1", "not k3s_use_unsupported_config", "k3s_control_node"]}, "module_options": {"that": ["(k3s_controller_list | length == 1)", "(\"datastore-endpoint\" not in k3s_runtime_config or not k3s_runtime_config['datastore-endpoint'])", "(k3s_etcd_datastore is not defined or not k3s_etcd_datastore)"], "success_msg": "Control plane configuration is valid.", "fail_msg": "Control plane configuration is invalid. Please see notes about k3s_control_node and HA in README.md."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Check the conditions when multiple controllers are defined", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "options": {"name": "Check the conditions when multiple controllers are defined", "when": ["k3s_controller_list | length >= 2", "k3s_control_node"]}, "module_options": {"that": ["(k3s_controller_list | length >= 2)", "((\"datastore-endpoint\" in k3s_runtime_config and k3s_runtime_config['datastore-endpoint']) or (k3s_etcd_datastore is defined and k3s_etcd_datastore))"], "success_msg": "Control plane configuration is valid.", "fail_msg": "Control plane configuration is invalid. Please see notes about k3s_control_node and HA in README.md."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Check the conditions when embedded etcd is defined", "module": "ansible.builtin.assert", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "options": {"name": "Check the conditions when embedded etcd is defined", "when": ["k3s_etcd_datastore is defined", "k3s_etcd_datastore", "not k3s_use_unsupported_config", "k3s_control_node", "k3s_state != 'uninstalled'"]}, "module_options": {"that": ["(k3s_controller_list | length >= 3)", "(((k3s_controller_list | length) % 2) == 1)"], "success_msg": "Control plane configuration is valid.", "fail_msg": "Etcd should have a minimum of 3 defined members and the number of members should be odd. Please see notes about HA in README.md"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure cluster token is captured from {{ k3s_control_delegate }}", "module": "ansible.builtin.slurp", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure cluster token is captured from {{ k3s_control_delegate }}", "register": "k3s_slurped_cluster_token", "delegate_to": "{{ k3s_control_delegate }}", "when": ["k3s_control_token is not defined", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_runtime_config['data-dir'] | default(k3s_data_dir) }}/server/token"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure cluster token is formatted correctly for use in templates", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure cluster token is formatted correctly for use in templates", "when": ["k3s_control_token is not defined", "not ansible_check_mode"]}, "module_options": {"k3s_control_token_content": "{{ k3s_control_token | default(k3s_slurped_cluster_token.content | b64decode) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Ensure dummy cluster token is defined for ansible_check_mode", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure dummy cluster token is defined for ansible_check_mode", "check_mode": false, "when": ["ansible_check_mode"]}, "module_options": {"k3s_control_token_content": "{{ k3s_control_delegate | to_uuid }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Ensure the cluster token file location exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure the cluster token file location exists", "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_token_location | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Ensure k3s cluster token file is present", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s cluster token file is present", "become": "{{ k3s_become }}", "notify": ["restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"]}, "module_options": {"src": "cluster-token.j2", "dest": "{{ k3s_token_location }}", "mode": 384}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Ensure k3s service unit file is present", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s service unit file is present", "become": "{{ k3s_become }}", "when": ["k3s_service_handler[ansible_service_mgr] == 'systemd'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"]}, "module_options": {"src": "k3s.service.j2", "dest": "{{ k3s_systemd_unit_dir }}/k3s.service", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Ensure k3s service file is present", "module": "ansible.builtin.template", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s service file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.openrc.j2", "dest": "{{ k3s_openrc_service_dir }}/k3s", "mode": 484}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Ensure k3s logrotate file is present", "module": "ansible.builtin.template", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s logrotate file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.logrotate.j2", "dest": "{{ k3s_logrotate_dir }}/k3s", "mode": 416}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "Ensure k3s config file exists", "module": "ansible.builtin.template", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s config file exists", "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "config.yaml.j2", "dest": "{{ k3s_config_file }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "Ensure secondary controllers are started", "module": "include_tasks", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure secondary controllers are started", "when": ["k3s_control_node", "not k3s_primary_control_node"]}, "module_options": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"when": "not k3s_skip_validation"}, "module_options": "post_checks_control_plane.yml", "executable": "post_checks_control_plane.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 11}": {"py/object": "struct4.Task", "name": "Flush Handlers", "module": "ansible.builtin.meta", "index": 11, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Flush Handlers"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml\", \"index\": 12}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 12, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"when": "not k3s_skip_validation"}, "module_options": "post_checks_nodes.yml", "executable": "post_checks_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_directories.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure {{ directory.name }} exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_directories.yml", "options": {"name": "Ensure {{ directory.name }} exists", "become": "{{ k3s_become }}", "when": ["directory.path is defined", "directory.path | length > 0", "directory.path != omit"]}, "module_options": {"path": "{{ directory.path }}", "state": "directory", "mode": "{{ directory.mode | default(755) }}"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check to see if k3s-killall.sh exits", "module": "ansible.builtin.stat", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Check to see if k3s-killall.sh exits", "register": "check_k3s_killall_script"}, "module_options": {"path": "/usr/local/bin/k3s-killall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Check to see if k3s-uninstall.sh exits", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Check to see if k3s-uninstall.sh exits", "register": "check_k3s_uninstall_script"}, "module_options": {"path": "/usr/local/bin/k3s-uninstall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Run k3s-killall.sh", "module": "ansible.builtin.command", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Run k3s-killall.sh", "register": "k3s_killall", "changed_when": "k3s_killall.rc == 0", "when": "check_k3s_killall_script.stat.exists", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "/usr/local/bin/k3s-killall.sh"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Run k3s-uninstall.sh", "module": "ansible.builtin.command", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Run k3s-uninstall.sh", "args": {"removes": "/usr/local/bin/k3s-uninstall.sh"}, "register": "k3s_uninstall", "changed_when": "k3s_uninstall.rc == 0", "when": "check_k3s_uninstall_script.stat.exists", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "/usr/local/bin/k3s-uninstall.sh"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Ensure hard links are removed", "module": "ansible.builtin.file", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Ensure hard links are removed", "loop": ["kubectl", "crictl", "ctr"], "when": ["k3s_install_hard_links", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_install_dir }}/{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"loop": "{{ k3s_ensure_directories_exist }}", "loop_control": {"loop_var": "directory"}}, "module_options": "ensure_directories.yml", "executable": "ensure_directories.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"when": ["((k3s_control_node and k3s_controller_list | length == 1) or (k3s_primary_control_node and k3s_controller_list | length > 1))", "not ansible_check_mode"]}, "module_options": "ensure_installed_node.yml", "executable": "ensure_installed_node.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Flush Handlers", "module": "ansible.builtin.meta", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"name": "Flush Handlers"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"when": "k3s_build_cluster"}, "module_options": "ensure_installed_node.yml", "executable": "ensure_installed_node.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Determine if the systems are already clustered", "module": "ansible.builtin.stat", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"name": "Determine if the systems are already clustered", "register": "k3s_token_cluster_check"}, "module_options": {"path": "{{ k3s_token_location }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"when": "(k3s_control_node and k3s_controller_list | length == 1) or (k3s_primary_control_node and k3s_controller_list | length > 1) or k3s_token_cluster_check.stat.exists"}, "module_options": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "ensure_drain_and_remove_nodes.yml", "executable": "ensure_drain_and_remove_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "determine_systemd_context.yml", "executable": "determine_systemd_context.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Flush Handlers", "module": "ansible.builtin.meta", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"name": "Flush Handlers"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": "not k3s_airgap"}, "module_options": "ensure_downloads.yml", "executable": "ensure_downloads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": "k3s_airgap"}, "module_options": "ensure_uploads.yml", "executable": "ensure_uploads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_primary_control_node"]}, "module_options": "ensure_k3s_auto_deploy.yml", "executable": "ensure_k3s_auto_deploy.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "ensure_k3s_config_files.yml", "executable": "ensure_k3s_config_files.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "ensure_installed.yml", "executable": "ensure_installed.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_registries is defined", "('rootless' not in k3s_runtime_config or not k3s_runtime_config.rootless)"]}, "module_options": "ensure_containerd_registries.yml", "executable": "ensure_containerd_registries.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_control_delegate is defined", "k3s_control_delegate == inventory_hostname"]}, "module_options": "pre_checks_cluster.yml", "executable": "pre_checks_cluster.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_build_cluster is defined", "k3s_build_cluster", "k3s_registration_address is defined"]}, "module_options": "ensure_cluster.yml", "executable": "ensure_cluster.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure facts are gathered", "module": "ansible.builtin.setup", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure facts are gathered"}, "module_options": null, "executable": "ansible.builtin.setup", "executable_type": "Module", "fqcn": "ansible.builtin.setup", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure Ansible version is captured", "module": "ansible.builtin.command", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure Ansible version is captured", "failed_when": false, "changed_when": false, "register": "check_ansible_version", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"cmd": "ansible --version"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Ensure Ansible config is captured", "module": "ansible.builtin.command", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure Ansible config is captured", "failed_when": false, "changed_when": false, "register": "check_ansible_config", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"cmd": "ansible-config dump --only-changed"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Ensure a list of roles is captured", "module": "ansible.builtin.command", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure a list of roles is captured", "failed_when": false, "changed_when": false, "register": "check_ansible_roles", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"cmd": "ansible-galaxy role list"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Ensure facts are written to disk", "module": "ansible.builtin.copy", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure facts are written to disk", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"dest": "{{ playbook_dir }}/pyratlabs-issue-dump.txt", "content": "# Begin ANSIBLE VERSION\n{{ check_ansible_version.stdout }}\n# End ANSIBLE VERSION\n\n# Begin ANSIBLE CONFIG\n{{ check_ansible_config.stdout }}\n# End ANSIBLE CONFIG\n\n# Begin ANSIBLE ROLES\n{{ check_ansible_roles.stdout }}\n# End ANSIBLE ROLES\n\n# Begin PLAY HOSTS\n{{ ansible_play_hosts | to_json }}\n# End PLAY HOSTS\n\n# Begin K3S ROLE CONFIG\n{% for host in ansible_play_hosts %}\n## {{ host }}\n{% for config_key in hostvars[host] %}\n{% if config_key | regex_search('^k3s_') %}\n{{ config_key }}: {{ hostvars[host][config_key] | to_json }}\n{% endif %}\n{% endfor %}\n\n{% endfor %}\n# End K3S ROLE CONFIG\n\n# Begin K3S RUNTIME CONFIG\n{% for host in ansible_play_hosts %}\n## {{ host }}\n{% if hostvars[host].k3s_runtime_config is defined %}\n{{ hostvars[host].k3s_runtime_config }}\n{% endif %}\n{% endfor %}\n# End K3S RUNTIME CONFIG\n", "mode": 384}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Fail the play", "module": "ansible.builtin.fail", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Fail the play", "delegate_to": "localhost", "run_once": true}, "module_options": {"msg": "Please include the output of {{ playbook_dir }}/pyratlabs-issue-dump.txt in your bug report."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_nodes.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check that all nodes to be ready", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_nodes.yml", "options": {"name": "Check that all nodes to be ready", "changed_when": false, "failed_when": "kubectl_get_nodes_result.stdout.find(\"was refused\") != -1 or kubectl_get_nodes_result.stdout.find(\"ServiceUnavailable\") != -1", "register": "kubectl_get_nodes_result", "until": ["kubectl_get_nodes_result.rc == 0", "kubectl_get_nodes_result.stdout.find(\"NotReady\") == -1"], "retries": 30, "delay": 20, "when": ["k3s_control_node", "(\"flannel-backend\" not in k3s_runtime_config or k3s_runtime_config[\"flannel-backend\"] != \"none\")", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl get nodes"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_started.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_started.yml", "options": {}, "module_options": "ensure_started.yml", "executable": "ensure_started.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check that the initial control plane server is available to accept connections", "module": "ansible.builtin.wait_for", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml", "options": {"name": "Check that the initial control plane server is available to accept connections"}, "module_options": {"port": "{{ k3s_runtime_config['https-listen-port'] | default('6443') }}", "host": "{{ k3s_runtime_config['bind-address'] | default('127.0.0.1') }}", "delay": 5, "sleep": 5, "timeout": 300}, "executable": "ansible.builtin.wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Check that cluster-token exists", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml", "options": {"name": "Check that cluster-token exists", "register": "k3s_check_cluster_token", "check_mode": false, "failed_when": ["not k3s_check_cluster_token.stat.exists", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_runtime_config['data-dir'] | default(k3s_data_dir) }}/server/token"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure k3s is linked into the installation destination", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s is linked into the installation destination", "loop": ["k3s", "kubectl", "crictl", "ctr"], "when": "not ansible_check_mode", "notify": ["restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "{{ k3s_install_dir }}/k3s-{{ k3s_release_version }}", "dest": "{{ k3s_install_dir }}/{{ item }}", "state": "{{ 'hard' if k3s_install_hard_links else 'link' }}", "force": "{{ k3s_install_hard_links }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure k3s config file exists", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s config file exists", "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "config.yaml.j2", "dest": "{{ k3s_config_file }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Ensure the cluster token file location exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure the cluster token file location exists", "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_token_location | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Ensure k3s cluster token file is present", "module": "ansible.builtin.template", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s cluster token file is present", "become": "{{ k3s_become }}", "notify": ["restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"]}, "module_options": {"src": "cluster-token.j2", "dest": "{{ k3s_token_location }}", "mode": 384}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Ensure k3s service unit file is present", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s service unit file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'systemd'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.service.j2", "dest": "{{ k3s_systemd_unit_dir }}/k3s.service", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Ensure k3s service file is present", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s service file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.openrc.j2", "dest": "{{ k3s_openrc_service_dir }}/k3s", "mode": 484}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Ensure k3s logrotate file is present", "module": "ansible.builtin.template", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s logrotate file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.logrotate.j2", "dest": "{{ k3s_logrotate_dir }}/k3s", "mode": 416}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Ensure k3s killall script is present", "module": "ansible.builtin.template", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s killall script is present", "become": "{{ k3s_become }}", "when": ["k3s_runtime_config is defined", "(\"rootless\" not in k3s_runtime_config or not k3s_runtime_config.rootless)"]}, "module_options": {"src": "k3s-killall.sh.j2", "dest": "/usr/local/bin/k3s-killall.sh", "mode": 448}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "Ensure k3s uninstall script is present", "module": "ansible.builtin.template", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s uninstall script is present", "become": "{{ k3s_become }}", "when": ["k3s_runtime_config is defined", "(\"rootless\" not in k3s_runtime_config or not k3s_runtime_config.rootless)"]}, "module_options": {"src": "k3s-uninstall.sh.j2", "dest": "/usr/local/bin/k3s-uninstall.sh", "mode": 448}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check that {{ package.name }} is installed", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml", "options": {"name": "Check that {{ package.name }} is installed", "changed_when": false, "failed_when": false, "register": "check_k3s_required_package", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "which {{ package.name }}"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Test that checks for {{ package.name }} passed", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml", "options": {"name": "Test that checks for {{ package.name }} passed", "when": ["check_k3s_required_package.rc is defined", "(package.until is not defined or (k3s_release_version | replace('v', '')) is version_compare(package.until, '<'))", "(package.from is not defined or (k3s_release_version | replace('v', '')) is version_compare(package.from, '>='))"]}, "module_options": {"that": ["check_k3s_required_package.rc == 0"], "success_msg": "Found required package: {{ package.name }}.", "fail_msg": "Could not find package: {{ package.name }}. {% if package.documentation is defined %} Documentation: {{ package.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure that the manifests directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure that the manifests directory exists", "when": "k3s_server_manifests_templates | length > 0 or k3s_server_manifests_urls | length > 0", "become": "{{ k3s_become }}"}, "module_options": {"state": "directory", "path": "{{ k3s_server_manifests_dir }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure that the pod-manifests directory exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure that the pod-manifests directory exists", "when": "k3s_server_pod_manifests_templates | length > 0 or k3s_server_pod_manifests_urls | length > 0", "become": "{{ k3s_become }}"}, "module_options": {"state": "directory", "path": "{{ k3s_server_pod_manifests_dir }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Ensure auto-deploying manifests are copied to the primary controller", "module": "ansible.builtin.template", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure auto-deploying manifests are copied to the primary controller", "loop": "{{ k3s_server_manifests_templates }}", "become": "{{ k3s_become }}", "when": ["k3s_server_manifests_templates | length > 0"]}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_server_manifests_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Ensure auto-deploying manifests are downloaded to the primary controller", "module": "ansible.builtin.get_url", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure auto-deploying manifests are downloaded to the primary controller", "loop": "{{ k3s_server_manifests_urls }}", "become": "{{ k3s_become }}", "when": ["not ansible_check_mode", "k3s_server_manifests_urls | length > 0"]}, "module_options": {"url": "{{ item.url }}", "dest": "{{ k3s_server_manifests_dir }}/{{ item.filename | default(item.url | basename) }}", "mode": 420}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Ensure static pod manifests are copied to controllers", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure static pod manifests are copied to controllers", "loop": "{{ k3s_server_pod_manifests_templates }}", "become": "{{ k3s_become }}"}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_server_pod_manifests_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Ensure auto-deploying manifests are downloaded to the primary controller", "module": "ansible.builtin.get_url", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure auto-deploying manifests are downloaded to the primary controller", "loop": "{{ k3s_server_pod_manifests_urls }}", "become": "{{ k3s_become }}", "when": "not ansible_check_mode"}, "module_options": {"url": "{{ item.url }}", "dest": "{{ k3s_server_pod_manifests_dir }}/{{ item.filename | default(item.url | basename) }}", "mode": 420}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check that k3s_state is a supported value", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that k3s_state is a supported value", "when": "k3s_state is defined"}, "module_options": {"that": ["k3s_state in k3s_valid_states"], "fail_msg": "k3s_state not valid. Check README.md for details.", "success_msg": "k3s_state is valid."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Check that Ansible v{{ ansible_version.string }} is supported by this role", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that Ansible v{{ ansible_version.string }} is supported by this role", "become": false, "delegate_to": "localhost", "run_once": true, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["ansible_version.string is version_compare(k3s_ansible_min_version, '>=')"], "fail_msg": "Ansible v{{ ansible_version.string }} is not supported by this role. Please install >= v{{ k3s_ansible_min_version }}.", "success_msg": "Ansible v{{ ansible_version.string }} is supported."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Check that Python v{{ ansible_python_version }} is supported by this role", "module": "ansible.builtin.assert", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that Python v{{ ansible_python_version }} is supported by this role", "become": false, "delegate_to": "localhost", "run_once": true, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["ansible_python_version is version_compare(k3s_python_min_version, '>=')"], "fail_msg": "Python v{{ ansible_python_version }} is not supported by this role. Please install >= v{{ k3s_python_min_version }}.", "success_msg": "Python v{{ ansible_python_version }} is supported."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Check that the target init system is supported by this role", "module": "ansible.builtin.assert", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that the target init system is supported by this role", "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["ansible_service_mgr in k3s_supported_init"], "fail_msg": "{{ ansible_service_mgr }} is not supported by this role. Supported init systems: {{ k3s_supported_init | join(', ') }}", "success_msg": "{{ ansible_service_mgr }} is supported"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Determing if {{ ansible_service_mgr }} is actually openrc", "module": "ansible.builtin.stat", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Determing if {{ ansible_service_mgr }} is actually openrc", "register": "k3s_check_openrc_run", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'", "not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"path": "/sbin/openrc-run"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Check that {{ ansible_service_mgr }} is actually openrc", "module": "ansible.builtin.assert", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that {{ ansible_service_mgr }} is actually openrc", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'", "not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["k3s_check_openrc_run.stat.exists"], "fail_msg": "openrc was not found, cannot install to {{ ansible_service_mgr }}", "success_msg": "openrc found"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["(k3s_release_version is not defined or not k3s_release_version or k3s_release_version is not regex('\\\\+k3s[1-9]$'))", "not k3s_airgap"]}, "module_options": "pre_checks_version.yml", "executable": "pre_checks_version.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"loop": "{{ k3s_cgroup_subsys }}", "loop_control": {"loop_var": "cgroup"}, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": "pre_checks_cgroups.yml", "executable": "pre_checks_cgroups.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"loop": "{{ k3s_check_packages[k3s_os_distribution_version] }}", "loop_control": {"loop_var": "package"}, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks", "k3s_check_packages[k3s_os_distribution_version] is defined"]}, "module_options": "pre_checks_packages.yml", "executable": "pre_checks_packages.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["pyratlabs_issue_controller_dump is defined", "pyratlabs_issue_controller_dump"]}, "module_options": "pre_checks_issue_data.yml", "executable": "pre_checks_issue_data.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["not k3s_skip_validation"]}, "module_options": "pre_checks_variables.yml", "executable": "pre_checks_variables.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 11}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 11, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["not k3s_skip_validation"]}, "module_options": "pre_checks_experimental_variables.yml", "executable": "pre_checks_experimental_variables.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 12}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 12, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["k3s_runtime_config.rootless is defined", "k3s_runtime_config.rootless", "not k3s_skip_validation"]}, "module_options": "pre_checks_unsupported_rootless.yml", "executable": "pre_checks_unsupported_rootless.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 13}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 13, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {}, "module_options": "ensure_pre_configuration.yml", "executable": "ensure_pre_configuration.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml\", \"index\": 14}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 14, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["k3s_build_cluster is defined", "k3s_build_cluster", "not k3s_skip_validation"]}, "module_options": "pre_checks_control_node_count.yml", "executable": "pre_checks_control_node_count.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {}, "module_options": "ensure_pre_configuration.yml", "executable": "ensure_pre_configuration.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {}, "module_options": "ensure_drain_and_remove_nodes.yml", "executable": "ensure_drain_and_remove_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {}, "module_options": "ensure_uninstalled.yml", "executable": "ensure_uninstalled.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {"when": "not k3s_skip_validation"}, "module_options": "post_checks_uninstalled.yml", "executable": "post_checks_uninstalled.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check if newuidmap is available", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Check if newuidmap is available", "failed_when": false, "changed_when": false, "register": "k3s_check_newuidmap_installed"}, "module_options": {"cmd": "which newuidmap"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Check if /proc/sys/kernel/unprivileged_userns_clone exists", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Check if /proc/sys/kernel/unprivileged_userns_clone exists", "register": "k3s_check_unprivileged_userns_exists"}, "module_options": {"path": "/proc/sys/kernel/unprivileged_userns_clone"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Get the value of /proc/sys/kernel/unprivileged_userns_clone", "module": "ansible.builtin.slurp", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the value of /proc/sys/kernel/unprivileged_userns_clone", "register": "k3s_get_unprivileged_userns_clone", "when": "k3s_check_unprivileged_userns_exists.stat.exists"}, "module_options": {"src": "/proc/sys/kernel/unprivileged_userns_clone"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Set the value of k3s_get_unprivileged_userns_clone", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Set the value of k3s_get_unprivileged_userns_clone", "when": "not k3s_check_unprivileged_userns_exists.stat.exists"}, "module_options": {"k3s_get_unprivileged_userns_clone": {"content": "MQo="}}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Get the value of /proc/sys/user/max_user_namespaces", "module": "ansible.builtin.slurp", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the value of /proc/sys/user/max_user_namespaces", "register": "k3s_get_max_user_namespaces"}, "module_options": {"src": "/proc/sys/user/max_user_namespaces"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Get the contents of /etc/subuid", "module": "ansible.builtin.slurp", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the contents of /etc/subuid", "register": "k3s_get_subuid"}, "module_options": {"src": "/etc/subuid"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Get the contents of /etc/subgid", "module": "ansible.builtin.slurp", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the contents of /etc/subgid", "register": "k3s_get_subgid"}, "module_options": {"src": "/etc/subgid"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Get current user subuid and subgid values", "module": "ansible.builtin.set_fact", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get current user subuid and subgid values"}, "module_options": {"k3s_current_user_subuid": "{{ (k3s_get_subuid['content'] | b64decode).split('\n') | select('search', ansible_user_id) | first | default('UserNotFound:0:0') }}", "k3s_current_user_subgid": "{{ (k3s_get_subgid['content'] | b64decode).split('\n') | select('search', ansible_user_id) | first | default('UserNotFound:0:0') }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "Check user namespaces kernel parameters are adequate", "module": "ansible.builtin.assert", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Check user namespaces kernel parameters are adequate"}, "module_options": {"that": ["k3s_get_unprivileged_userns_clone['content'] | b64decode | int == 1", "((k3s_get_max_user_namespaces['content'] | b64decode | int >= 28633) or (k3s_os_family != \"redhat\"))", "k3s_current_user_subuid != \"UserNotFound:0:0\"", "k3s_current_user_subgid != \"UserNotFound:0:0\"", "k3s_current_user_subuid.split(':')[2] | int >= 65536", "k3s_current_user_subgid.split(':')[2] | int >= 65536", "ansible_env['XDG_RUNTIME_DIR'] is defined", "k3s_check_newuidmap_installed.rc == 0"], "success_msg": "All kernel parameters passed", "fail_msg": "Kernel parameters are not set correctly, please check https://github.com/rootless-containers/rootlesskit"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_control_plane.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check that the control plane is available to accept connections", "module": "ansible.builtin.wait_for", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_control_plane.yml", "options": {"name": "Check that the control plane is available to accept connections", "when": "k3s_control_node"}, "module_options": {"port": "{{ k3s_runtime_config['https-listen-port'] | default('6443') }}", "host": "{{ k3s_runtime_config['bind-address'] | default('127.0.0.1') }}", "delay": 5, "sleep": 5, "timeout": 300}, "executable": "ansible.builtin.wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_containerd_registries.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure containerd registries file exists", "module": "ansible.builtin.template", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_containerd_registries.yml", "options": {"name": "Ensure containerd registries file exists", "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "registries.yaml.j2", "dest": "{{ k3s_config_dir }}/registries.yaml", "mode": 384}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure k3s service is stopped", "module": "ansible.builtin.systemd", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml", "options": {"name": "Ensure k3s service is stopped", "when": "k3s_non_root is not defined or not k3s_non_root", "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "stopped", "enabled": "{{ k3s_start_on_boot }}"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure k3s service is started", "module": "ansible.builtin.systemd", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml", "options": {"name": "Ensure k3s service is started", "when": ["k3s_non_root is defined", "k3s_non_root"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "stopped", "enabled": "{{ k3s_start_on_boot }}", "scope": "user"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "options": {"when": ["k3s_release_version is not defined or not k3s_release_version", "not k3s_airgap"]}, "module_options": "pre_checks_version.yml", "executable": "pre_checks_version.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "options": {"when": "not k3s_airgap"}, "module_options": "ensure_downloads.yml", "executable": "ensure_downloads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "options": {"when": "k3s_airgap"}, "module_options": "ensure_uploads.yml", "executable": "ensure_uploads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_systemd.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure k3s control plane server is started", "module": "ansible.builtin.systemd", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_systemd.yml", "options": {"name": "Ensure k3s control plane server is started", "register": "k3s_systemd_start_k3s", "until": "k3s_systemd_start_k3s is succeeded", "retries": 3, "delay": 3, "failed_when": ["k3s_systemd_start_k3s is not succeeded", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}", "scope": "{{ k3s_systemd_context }}"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check if kubectl exists", "module": "ansible.builtin.stat", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Check if kubectl exists", "register": "k3s_check_kubectl", "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_install_dir }}/kubectl"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Gather a list of nodes", "module": "ansible.builtin.command", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Gather a list of nodes", "changed_when": false, "failed_when": false, "delegate_to": "{{ k3s_control_delegate }}", "run_once": true, "register": "kubectl_get_nodes_result", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl get nodes"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Ensure uninstalled nodes are drained", "module": "ansible.builtin.command", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Ensure uninstalled nodes are drained", "delegate_to": "{{ k3s_control_delegate }}", "run_once": true, "when": ["kubectl_get_nodes_result.stdout is defined", "item in kubectl_get_nodes_result.stdout", "hostvars[item].k3s_state is defined", "hostvars[item].k3s_state == 'uninstalled'"], "loop": "{{ ansible_play_hosts }}", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl drain {{ item }}\n  --ignore-daemonsets\n  --{{ k3s_drain_command[ansible_version.string is version_compare('1.22', '>=')] }}\n  --force"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Ensure uninstalled nodes are removed", "module": "ansible.builtin.command", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Ensure uninstalled nodes are removed", "delegate_to": "{{ k3s_control_delegate }}", "run_once": true, "when": ["kubectl_get_nodes_result.stdout is defined", "item in kubectl_get_nodes_result.stdout", "hostvars[item].k3s_state is defined", "hostvars[item].k3s_state == 'uninstalled'"], "loop": "{{ ansible_play_hosts }}", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl delete node {{ item }}"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check that k3s is not running", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Check that k3s is not running", "failed_when": ["check_k3s_process.rc == 0", "not ansible_check_mode"], "changed_when": false, "register": "check_k3s_process"}, "module_options": {"cmd": "pgrep k3s"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Fail if k3s binaries have not been removed", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Fail if k3s binaries have not been removed", "register": "check_k3s_binaries_removed", "failed_when": "check_k3s_binaries_removed.stat.exists", "loop": ["k3s", "kubectl", "crictl", "ctr"]}, "module_options": {"path": "{{ k3s_install_dir }}/{{ item }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Check k3s-killall.sh is removed", "module": "ansible.builtin.stat", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Check k3s-killall.sh is removed", "register": "check_k3s_killall"}, "module_options": {"path": "/usr/local/bin/k3s-killall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Fail if k3s-killall.sh script still exists", "module": "ansible.builtin.fail", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Fail if k3s-killall.sh script still exists", "when": "check_k3s_killall.stat.exists"}, "module_options": {"msg": "k3s-killall.sh still exists, uninstall script failed. Please investigate."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Check k3s-uninstall.sh is removed", "module": "ansible.builtin.stat", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Check k3s-uninstall.sh is removed", "register": "check_k3s_uninstall"}, "module_options": {"path": "/usr/local/bin/k3s-uninstall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Fail if k3s-uninstall.sh script still exists", "module": "ansible.builtin.fail", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Fail if k3s-uninstall.sh script still exists", "when": "check_k3s_uninstall.stat.exists"}, "module_options": {"msg": "k3s-uninstall.sh is still exists, uninstall script failed. Please investigate."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check that k3s_release_version >= {{ k3s_min_version }}", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check that k3s_release_version >= {{ k3s_min_version }}", "when": "not k3s_airgap"}, "module_options": {"that": ["(k3s_release_version | replace('v', '')) is version_compare(k3s_min_version, '>=')"], "success_msg": "{{ k3s_release_version }} is supported by this role.", "fail_msg": "{{ k3s_release_version }} is not supported by this role, please use xanmanning.k3s v1.x."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Check configuration in k3s_server and k3s_agent that needs alternate configuration", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check configuration in k3s_server and k3s_agent that needs alternate configuration", "loop": "{{ k3s_config_exclude }}"}, "module_options": {"that": ["(item.setting not in k3s_runtime_config)"], "success_msg": "{{ item.setting }} not found in server/agent config", "fail_msg": "{{ item.setting }} found in server/agent config. Please set {{ item.correction }} to use this option. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Check configuration in k3s_server and k3s_agent for deprecated configuration", "module": "ansible.builtin.assert", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check configuration in k3s_server and k3s_agent for deprecated configuration", "loop": "{{ k3s_deprecated_config }}", "when": ["not k3s_airgap", "(item.when is not defined or (item.when is defined and (k3s_release_version | replace('v', '')) is version_compare(item.when, '>=')))", "not k3s_use_unsupported_config"]}, "module_options": {"that": ["(item.setting not in k3s_runtime_config) or (not k3s_runtime_config[item.setting])"], "success_msg": "{{ item.setting }} not found in server/agent config", "fail_msg": "{{ item.setting }} found in server/agent config. Please set {{ item.correction }} to use this option. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Check configuration in k3s_server and k3s_agent against release version", "module": "ansible.builtin.assert", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check configuration in k3s_server and k3s_agent against release version", "loop": "{{ k3s_config_version_check }}", "when": ["k3s_config_version_check is defined", "item.setting in k3s_runtime_config"]}, "module_options": {"that": ["(k3s_release_version | replace('v', '')) is version_compare(item.version, '>=')"], "success_msg": "{{ item.setting }} is supported by {{ k3s_release_version }}", "fail_msg": "{{ item.setting }} is not supported in {{ k3s_release_version }}. Please update to v{{ item.version }} to use this option. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml", "options": {}, "module_options": "post_checks_control_plane.yml", "executable": "post_checks_control_plane.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml", "options": {}, "module_options": "post_checks_nodes.yml", "executable": "post_checks_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check if {{ cgroup.name }} cgroup is enabled", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml", "options": {"name": "Check if {{ cgroup.name }} cgroup is enabled", "failed_when": false, "changed_when": false, "check_mode": false, "register": "k3s_check_cgroup_option"}, "module_options": {"cmd": "grep -E \"^{{ cgroup.name }}\\s+.*\\s+1$\" /proc/cgroups"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Fail if {{ cgroup.name }} cgroup is not enabled", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml", "options": {"name": "Fail if {{ cgroup.name }} cgroup is not enabled"}, "module_options": {"that": ["k3s_check_cgroup_option.rc == 0"], "fail_msg": "{{ cgroup.name }} cgroup disabled. {{ cgroup.documentation }}\n", "success_msg": "{{ cgroup.name }} cgroup enabled."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure k3s_build_cluster is false if running against a single node.", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s_build_cluster is false if running against a single node.", "when": ["ansible_play_hosts | length < 2", "k3s_registration_address is not defined"]}, "module_options": {"k3s_build_cluster": false}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure k3s control node fact is set", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s control node fact is set", "when": "k3s_control_node is not defined"}, "module_options": {"k3s_control_node": "{{ not k3s_build_cluster }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Ensure k3s primary control node fact is set", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s primary control node fact is set", "when": "k3s_primary_control_node is not defined"}, "module_options": {"k3s_primary_control_node": "{{ not k3s_build_cluster }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Ensure k3s control plane port is captured", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s control plane port is captured", "delegate_to": "k3s_primary_control_node"}, "module_options": {"k3s_control_plane_port": "{{ k3s_runtime_config['https-listen-port'] | default(6443) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Ensure k3s node IP is configured when node-ip is defined", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s node IP is configured when node-ip is defined", "when": ["k3s_runtime_config['node-ip'] is defined"]}, "module_options": {"k3s_node_ip": "{{ k3s_runtime_config['node-ip'] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Ensure a count of control nodes is generated from ansible_play_hosts", "module": "ansible.builtin.set_fact", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure a count of control nodes is generated from ansible_play_hosts", "when": ["hostvars[item].k3s_control_node is defined", "hostvars[item].k3s_control_node"], "loop": "{{ ansible_play_hosts }}"}, "module_options": {"k3s_controller_list": "{{ k3s_controller_list + [ item ] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Set the control host", "module": "ansible.builtin.set_fact", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Set the control host", "when": "inventory_hostname == ansible_play_hosts[0]"}, "module_options": {"k3s_control_node": true}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Ensure a count of control nodes is generated", "module": "ansible.builtin.set_fact", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure a count of control nodes is generated", "when": ["hostvars[item].k3s_control_node is defined", "hostvars[item].k3s_control_node"], "loop": "{{ ansible_play_hosts }}"}, "module_options": {"k3s_controller_list": "{{ k3s_controller_list + [ item ] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "Ensure a primary k3s control node is defined if multiple are found in ansible_play_hosts", "module": "ansible.builtin.set_fact", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure a primary k3s control node is defined if multiple are found in ansible_play_hosts", "when": ["k3s_controller_list is defined", "inventory_hostname == k3s_controller_list[0]", "k3s_build_cluster is defined", "k3s_build_cluster"]}, "module_options": {"k3s_primary_control_node": true}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "Ensure ansible_host is mapped to inventory_hostname", "module": "ansible.builtin.blockinfile", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure ansible_host is mapped to inventory_hostname", "check_mode": false, "when": "k3s_control_node is defined"}, "module_options": {"path": "/tmp/inventory.txt", "block": "{% for host in ansible_play_hosts %}\n{% filter replace('\\n', ' ') %}\n{{ host }}\n@@@\n{{ hostvars[host].ansible_host | default(hostvars[host].ansible_fqdn) | string }}\n@@@\nC_{{ hostvars[host].k3s_control_node | string }}\n@@@\nP_{{ hostvars[host].k3s_primary_control_node | default(False) | string }}\n{% endfilter %}\n@@@ END:{{ host }}\n{% endfor %}\n", "create": true, "mode": 384}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "Lookup control node from file", "module": "ansible.builtin.command", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Lookup control node from file", "changed_when": false, "check_mode": false, "register": "k3s_control_delegate_raw"}, "module_options": {"cmd": "grep -i '{{ 'P_True' if (k3s_controller_list | length > 1) else 'C_True' }}' /tmp/inventory.txt"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 11}": {"py/object": "struct4.Task", "name": "Ensure control node is delegated for obtaining a cluster token", "module": "ansible.builtin.set_fact", "index": 11, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure control node is delegated for obtaining a cluster token", "check_mode": false, "when": "k3s_control_delegate is not defined"}, "module_options": {"k3s_control_delegate": "{{ k3s_control_delegate_raw.stdout.split(' @@@ ')[0] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 12}": {"py/object": "struct4.Task", "name": "Ensure the node registration address is defined from k3s_control_node_address", "module": "ansible.builtin.set_fact", "index": 12, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure the node registration address is defined from k3s_control_node_address", "check_mode": false, "when": "k3s_control_node_address is defined"}, "module_options": {"k3s_registration_address": "{{ k3s_control_node_address }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 13}": {"py/object": "struct4.Task", "name": "Ensure the node registration address is defined from node-ip", "module": "ansible.builtin.set_fact", "index": 13, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure the node registration address is defined from node-ip", "check_mode": false, "when": ["k3s_registration_address is not defined", "k3s_control_node_address is not defined", "hostvars[k3s_control_delegate].k3s_node_ip is defined"]}, "module_options": {"k3s_registration_address": "{{ hostvars[k3s_control_delegate].k3s_node_ip }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml\", \"index\": 14}": {"py/object": "struct4.Task", "name": "Ensure the node registration address is defined", "module": "ansible.builtin.set_fact", "index": 14, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure the node registration address is defined", "check_mode": false, "when": ["k3s_registration_address is not defined", "k3s_control_node_address is not defined"]}, "module_options": {"k3s_registration_address": "{{ hostvars[k3s_control_delegate].ansible_host | default(hostvars[k3s_control_delegate].ansible_fqdn) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure target host architecture information is set as a fact", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure target host architecture information is set as a fact", "check_mode": false}, "module_options": {"k3s_arch": "{{ k3s_arch_lookup[ansible_architecture].arch }}", "k3s_arch_suffix": "{{ k3s_arch_lookup[ansible_architecture].suffix }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure URLs are set as facts for downloading binaries", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure URLs are set as facts for downloading binaries", "check_mode": false}, "module_options": {"k3s_binary_url": "{{ k3s_github_download_url }}/{{ k3s_release_version }}/k3s{{ k3s_arch_suffix }}", "k3s_hash_url": "{{ k3s_github_download_url }}/{{ k3s_release_version }}/sha256sum-{{ k3s_arch }}.txt"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Override k3s_binary_url and k3s_hash_url facts for testing specific commit", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Override k3s_binary_url and k3s_hash_url facts for testing specific commit", "when": ["k3s_release_version | regex_search(\"^[a-z0-9]{40}$\")"], "check_mode": false}, "module_options": {"k3s_binary_url": "https://storage.googleapis.com/k3s-ci-builds/k3s{{ k3s_arch_suffix }}-{{ k3s_release_version }}", "k3s_hash_url": "https://storage.googleapis.com/k3s-ci-builds/k3s{{ k3s_arch_suffix }}-{{ k3s_release_version }}.sha256sum"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Ensure the k3s hashsum is downloaded", "module": "ansible.builtin.uri", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure the k3s hashsum is downloaded", "register": "k3s_hash_sum_raw", "check_mode": false}, "module_options": {"url": "{{ k3s_hash_url }}", "return_content": true}, "executable": "ansible.builtin.uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Ensure sha256sum is set from hashsum variable", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure sha256sum is set from hashsum variable", "changed_when": false, "check_mode": false}, "module_options": {"k3s_hash_sum": "{{ (k3s_hash_sum_raw.content.split('\n') | select('search', 'k3s' + k3s_arch_suffix) | reject('search', 'images') | first).split() | first }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Ensure installation directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure installation directory exists"}, "module_options": {"path": "{{ k3s_install_dir }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Ensure k3s binary is downloaded", "module": "ansible.builtin.get_url", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure k3s binary is downloaded", "become": "{{ k3s_become }}"}, "module_options": {"url": "{{ k3s_binary_url }}", "dest": "{{ k3s_install_dir }}/k3s-{{ k3s_release_version }}", "checksum": "sha256:{{ k3s_hash_sum }}", "mode": 493}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_stopped.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_stopped.yml", "options": {}, "module_options": "ensure_stopped.yml", "executable": "ensure_stopped.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/determine_systemd_context.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure systemd context is correct if we are running k3s rootless", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/determine_systemd_context.yml", "options": {"name": "Ensure systemd context is correct if we are running k3s rootless", "when": ["k3s_runtime_config is defined", "k3s_runtime_config.rootless is defined", "k3s_runtime_config.rootless"]}, "module_options": {"k3s_systemd_context": "user", "k3s_systemd_unit_dir": "{{ ansible_user_dir }}/.config/systemd/user"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml", "options": {}, "module_options": "pre_checks.yml", "executable": "pre_checks.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml", "options": {}, "module_options": "state_{{ (k3s_state | lower) | default('installed') }}.yml", "executable": "state_{{ (k3s_state | lower) | default('installed') }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check if embedded etcd datastore is enabled and marked as experimental", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml", "options": {"name": "Check if embedded etcd datastore is enabled and marked as experimental", "when": ["k3s_etcd_datastore is defined", "k3s_etcd_datastore", "(k3s_release_version | replace('v', '')) is version_compare(\"1.19.5\", '<')"]}, "module_options": {"that": ["k3s_use_experimental is defined and k3s_use_experimental"], "success_msg": "Experimental variables are defined and enabled.", "fail_msg": "Experimental variable k3s_etcd_datastore has been configured. If you want to use this ensure you set k3s_use_experimental,"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Check if any experimental variables are configure and if they are enabled with k3s_use_experimental", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml", "options": {"name": "Check if any experimental variables are configure and if they are enabled with k3s_use_experimental", "loop": "{{ k3s_experimental_config }}", "when": ["(item.setting in k3s_runtime_config and k3s_runtime_config[item.setting])", "((item.until is not defined) or (item.until is defined and (k3s_release_version | replace('v', '')) is version_compare(item.until, '<')))"]}, "module_options": {"that": ["k3s_use_experimental is defined and k3s_use_experimental"], "success_msg": "Experimental variables are defined and enabled.", "fail_msg": "Experimental variable {{ item.setting }} has been configured. If you want to use this ensure you set k3s_use_experimental. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure k3s_release_version is set to default if false", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Ensure k3s_release_version is set to default if false", "check_mode": false, "when": ["k3s_release_version is defined", "not k3s_release_version"]}, "module_options": {"k3s_release_version": "{{ k3s_release_channel }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure the default release channel is set", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Ensure the default release channel is set", "check_mode": false}, "module_options": {"k3s_release_channel": "{{ k3s_release_version | default('stable') }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Get the latest release version from k3s.io", "module": "ansible.builtin.uri", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Get the latest release version from k3s.io", "register": "k3s_latest_release", "no_log": true, "check_mode": false}, "module_options": {"url": "{{ k3s_api_releases }}", "return_content": true, "body_format": "json"}, "executable": "ansible.builtin.uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, "{\"path\": \"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Ensure the release version is set as a fact", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Ensure the release version is set as a fact", "loop": "{{ k3s_latest_release.json.data }}", "check_mode": false, "when": ["item.name == k3s_release_channel", "item.type == \"channel\""]}, "module_options": {"k3s_release_version": "{{ item.latest }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}}, "taskfile_dict": {"./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml": {"py/object": "struct4.TaskFile", "name": "ensure_k3s_config_files.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure that the config.yaml.d directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "options": {"name": "Ensure that the config.yaml.d directory exists", "when": "k3s_server_config_yaml_d_files | length > 0 or k3s_agent_config_yaml_d_files | length > 0", "become": "{{ k3s_become }}"}, "module_options": {"state": "directory", "path": "{{ k3s_config_yaml_d_dir }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configuration files are copied to controllers", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "options": {"name": "Ensure configuration files are copied to controllers", "loop": "{{ k3s_server_config_yaml_d_files }}", "become": "{{ k3s_become }}", "when": "k3s_control_node"}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_config_yaml_d_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configuration files are copied to agents", "module": "ansible.builtin.template", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "options": {"name": "Ensure configuration files are copied to agents", "loop": "{{ k3s_agent_config_yaml_d_files }}", "become": "{{ k3s_become }}", "when": "not k3s_control_node"}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_config_yaml_d_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_openrc.yml": {"py/object": "struct4.TaskFile", "name": "ensure_control_plane_started_openrc.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_openrc.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s control plane server is started", "module": "ansible.builtin.service", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_openrc.yml", "options": {"name": "Ensure k3s control plane server is started", "register": "k3s_service_start_k3s", "until": "k3s_service_start_k3s is succeeded", "retries": 3, "delay": 3, "failed_when": ["k3s_service_start_k3s is not succeeded", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}"}, "executable": "ansible.builtin.service", "executable_type": "Module", "fqcn": "ansible.builtin.service", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml": {"py/object": "struct4.TaskFile", "name": "state_restarted.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml", "options": {}, "module_options": "ensure_stopped.yml", "executable": "ensure_stopped.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml", "options": {}, "module_options": "ensure_started.yml", "executable": "ensure_started.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml": {"py/object": "struct4.TaskFile", "name": "ensure_started.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s service is started", "module": "ansible.builtin.systemd", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml", "options": {"name": "Ensure k3s service is started", "when": "k3s_non_root is not defined or not k3s_non_root", "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service is started", "module": "ansible.builtin.systemd", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml", "options": {"name": "Ensure k3s service is started", "when": ["k3s_non_root is defined", "k3s_non_root"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}", "scope": "user"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml": {"py/object": "struct4.TaskFile", "name": "ensure_uploads.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure installation directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml", "options": {"name": "Ensure installation directory exists"}, "module_options": {"path": "{{ k3s_install_dir }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s binary is copied from controller to target host", "module": "ansible.builtin.copy", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml", "options": {"name": "Ensure k3s binary is copied from controller to target host", "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s", "dest": "{{ k3s_install_dir }}/k3s-{{ k3s_release_version }}", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml": {"py/object": "struct4.TaskFile", "name": "pre_checks_control_node_count.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check the conditions when a single controller is defined", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "options": {"name": "Check the conditions when a single controller is defined", "when": ["k3s_controller_list | length == 1", "not k3s_use_unsupported_config", "k3s_control_node"]}, "module_options": {"that": ["(k3s_controller_list | length == 1)", "(\"datastore-endpoint\" not in k3s_runtime_config or not k3s_runtime_config['datastore-endpoint'])", "(k3s_etcd_datastore is not defined or not k3s_etcd_datastore)"], "success_msg": "Control plane configuration is valid.", "fail_msg": "Control plane configuration is invalid. Please see notes about k3s_control_node and HA in README.md."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check the conditions when multiple controllers are defined", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "options": {"name": "Check the conditions when multiple controllers are defined", "when": ["k3s_controller_list | length >= 2", "k3s_control_node"]}, "module_options": {"that": ["(k3s_controller_list | length >= 2)", "((\"datastore-endpoint\" in k3s_runtime_config and k3s_runtime_config['datastore-endpoint']) or (k3s_etcd_datastore is defined and k3s_etcd_datastore))"], "success_msg": "Control plane configuration is valid.", "fail_msg": "Control plane configuration is invalid. Please see notes about k3s_control_node and HA in README.md."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check the conditions when embedded etcd is defined", "module": "ansible.builtin.assert", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "options": {"name": "Check the conditions when embedded etcd is defined", "when": ["k3s_etcd_datastore is defined", "k3s_etcd_datastore", "not k3s_use_unsupported_config", "k3s_control_node", "k3s_state != 'uninstalled'"]}, "module_options": {"that": ["(k3s_controller_list | length >= 3)", "(((k3s_controller_list | length) % 2) == 1)"], "success_msg": "Control plane configuration is valid.", "fail_msg": "Etcd should have a minimum of 3 defined members and the number of members should be odd. Please see notes about HA in README.md"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml": {"py/object": "struct4.TaskFile", "name": "ensure_cluster.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure cluster token is captured from {{ k3s_control_delegate }}", "module": "ansible.builtin.slurp", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure cluster token is captured from {{ k3s_control_delegate }}", "register": "k3s_slurped_cluster_token", "delegate_to": "{{ k3s_control_delegate }}", "when": ["k3s_control_token is not defined", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_runtime_config['data-dir'] | default(k3s_data_dir) }}/server/token"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure cluster token is formatted correctly for use in templates", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure cluster token is formatted correctly for use in templates", "when": ["k3s_control_token is not defined", "not ansible_check_mode"]}, "module_options": {"k3s_control_token_content": "{{ k3s_control_token | default(k3s_slurped_cluster_token.content | b64decode) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure dummy cluster token is defined for ansible_check_mode", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure dummy cluster token is defined for ansible_check_mode", "check_mode": false, "when": ["ansible_check_mode"]}, "module_options": {"k3s_control_token_content": "{{ k3s_control_delegate | to_uuid }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the cluster token file location exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure the cluster token file location exists", "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_token_location | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s cluster token file is present", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s cluster token file is present", "become": "{{ k3s_become }}", "notify": ["restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"]}, "module_options": {"src": "cluster-token.j2", "dest": "{{ k3s_token_location }}", "mode": 384}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service unit file is present", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s service unit file is present", "become": "{{ k3s_become }}", "when": ["k3s_service_handler[ansible_service_mgr] == 'systemd'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"]}, "module_options": {"src": "k3s.service.j2", "dest": "{{ k3s_systemd_unit_dir }}/k3s.service", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service file is present", "module": "ansible.builtin.template", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s service file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.openrc.j2", "dest": "{{ k3s_openrc_service_dir }}/k3s", "mode": 484}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s logrotate file is present", "module": "ansible.builtin.template", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s logrotate file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.logrotate.j2", "dest": "{{ k3s_logrotate_dir }}/k3s", "mode": 416}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s config file exists", "module": "ansible.builtin.template", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s config file exists", "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "config.yaml.j2", "dest": "{{ k3s_config_file }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure secondary controllers are started", "module": "include_tasks", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure secondary controllers are started", "when": ["k3s_control_node", "not k3s_primary_control_node"]}, "module_options": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"when": "not k3s_skip_validation"}, "module_options": "post_checks_control_plane.yml", "executable": "post_checks_control_plane.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush Handlers", "module": "ansible.builtin.meta", "index": 11, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Flush Handlers"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 12, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"when": "not k3s_skip_validation"}, "module_options": "post_checks_nodes.yml", "executable": "post_checks_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_directories.yml": {"py/object": "struct4.TaskFile", "name": "ensure_directories.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_directories.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure {{ directory.name }} exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_directories.yml", "options": {"name": "Ensure {{ directory.name }} exists", "become": "{{ k3s_become }}", "when": ["directory.path is defined", "directory.path | length > 0", "directory.path != omit"]}, "module_options": {"path": "{{ directory.path }}", "state": "directory", "mode": "{{ directory.mode | default(755) }}"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml": {"py/object": "struct4.TaskFile", "name": "ensure_uninstalled.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check to see if k3s-killall.sh exits", "module": "ansible.builtin.stat", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Check to see if k3s-killall.sh exits", "register": "check_k3s_killall_script"}, "module_options": {"path": "/usr/local/bin/k3s-killall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check to see if k3s-uninstall.sh exits", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Check to see if k3s-uninstall.sh exits", "register": "check_k3s_uninstall_script"}, "module_options": {"path": "/usr/local/bin/k3s-uninstall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Run k3s-killall.sh", "module": "ansible.builtin.command", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Run k3s-killall.sh", "register": "k3s_killall", "changed_when": "k3s_killall.rc == 0", "when": "check_k3s_killall_script.stat.exists", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "/usr/local/bin/k3s-killall.sh"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Run k3s-uninstall.sh", "module": "ansible.builtin.command", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Run k3s-uninstall.sh", "args": {"removes": "/usr/local/bin/k3s-uninstall.sh"}, "register": "k3s_uninstall", "changed_when": "k3s_uninstall.rc == 0", "when": "check_k3s_uninstall_script.stat.exists", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "/usr/local/bin/k3s-uninstall.sh"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure hard links are removed", "module": "ansible.builtin.file", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Ensure hard links are removed", "loop": ["kubectl", "crictl", "ctr"], "when": ["k3s_install_hard_links", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_install_dir }}/{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml": {"py/object": "struct4.TaskFile", "name": "ensure_installed.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"loop": "{{ k3s_ensure_directories_exist }}", "loop_control": {"loop_var": "directory"}}, "module_options": "ensure_directories.yml", "executable": "ensure_directories.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"when": ["((k3s_control_node and k3s_controller_list | length == 1) or (k3s_primary_control_node and k3s_controller_list | length > 1))", "not ansible_check_mode"]}, "module_options": "ensure_installed_node.yml", "executable": "ensure_installed_node.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush Handlers", "module": "ansible.builtin.meta", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"name": "Flush Handlers"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"when": "k3s_build_cluster"}, "module_options": "ensure_installed_node.yml", "executable": "ensure_installed_node.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Determine if the systems are already clustered", "module": "ansible.builtin.stat", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"name": "Determine if the systems are already clustered", "register": "k3s_token_cluster_check"}, "module_options": {"path": "{{ k3s_token_location }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"when": "(k3s_control_node and k3s_controller_list | length == 1) or (k3s_primary_control_node and k3s_controller_list | length > 1) or k3s_token_cluster_check.stat.exists"}, "module_options": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml": {"py/object": "struct4.TaskFile", "name": "state_installed.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "ensure_drain_and_remove_nodes.yml", "executable": "ensure_drain_and_remove_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "determine_systemd_context.yml", "executable": "determine_systemd_context.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush Handlers", "module": "ansible.builtin.meta", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"name": "Flush Handlers"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": "not k3s_airgap"}, "module_options": "ensure_downloads.yml", "executable": "ensure_downloads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": "k3s_airgap"}, "module_options": "ensure_uploads.yml", "executable": "ensure_uploads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_primary_control_node"]}, "module_options": "ensure_k3s_auto_deploy.yml", "executable": "ensure_k3s_auto_deploy.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "ensure_k3s_config_files.yml", "executable": "ensure_k3s_config_files.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "ensure_installed.yml", "executable": "ensure_installed.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_registries is defined", "('rootless' not in k3s_runtime_config or not k3s_runtime_config.rootless)"]}, "module_options": "ensure_containerd_registries.yml", "executable": "ensure_containerd_registries.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_control_delegate is defined", "k3s_control_delegate == inventory_hostname"]}, "module_options": "pre_checks_cluster.yml", "executable": "pre_checks_cluster.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_build_cluster is defined", "k3s_build_cluster", "k3s_registration_address is defined"]}, "module_options": "ensure_cluster.yml", "executable": "ensure_cluster.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml": {"py/object": "struct4.TaskFile", "name": "pre_checks_issue_data.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure facts are gathered", "module": "ansible.builtin.setup", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure facts are gathered"}, "module_options": null, "executable": "ansible.builtin.setup", "executable_type": "Module", "fqcn": "ansible.builtin.setup", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Ansible version is captured", "module": "ansible.builtin.command", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure Ansible version is captured", "failed_when": false, "changed_when": false, "register": "check_ansible_version", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"cmd": "ansible --version"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Ansible config is captured", "module": "ansible.builtin.command", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure Ansible config is captured", "failed_when": false, "changed_when": false, "register": "check_ansible_config", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"cmd": "ansible-config dump --only-changed"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure a list of roles is captured", "module": "ansible.builtin.command", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure a list of roles is captured", "failed_when": false, "changed_when": false, "register": "check_ansible_roles", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"cmd": "ansible-galaxy role list"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure facts are written to disk", "module": "ansible.builtin.copy", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure facts are written to disk", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"dest": "{{ playbook_dir }}/pyratlabs-issue-dump.txt", "content": "# Begin ANSIBLE VERSION\n{{ check_ansible_version.stdout }}\n# End ANSIBLE VERSION\n\n# Begin ANSIBLE CONFIG\n{{ check_ansible_config.stdout }}\n# End ANSIBLE CONFIG\n\n# Begin ANSIBLE ROLES\n{{ check_ansible_roles.stdout }}\n# End ANSIBLE ROLES\n\n# Begin PLAY HOSTS\n{{ ansible_play_hosts | to_json }}\n# End PLAY HOSTS\n\n# Begin K3S ROLE CONFIG\n{% for host in ansible_play_hosts %}\n## {{ host }}\n{% for config_key in hostvars[host] %}\n{% if config_key | regex_search('^k3s_') %}\n{{ config_key }}: {{ hostvars[host][config_key] | to_json }}\n{% endif %}\n{% endfor %}\n\n{% endfor %}\n# End K3S ROLE CONFIG\n\n# Begin K3S RUNTIME CONFIG\n{% for host in ansible_play_hosts %}\n## {{ host }}\n{% if hostvars[host].k3s_runtime_config is defined %}\n{{ hostvars[host].k3s_runtime_config }}\n{% endif %}\n{% endfor %}\n# End K3S RUNTIME CONFIG\n", "mode": 384}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail the play", "module": "ansible.builtin.fail", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Fail the play", "delegate_to": "localhost", "run_once": true}, "module_options": {"msg": "Please include the output of {{ playbook_dir }}/pyratlabs-issue-dump.txt in your bug report."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_nodes.yml": {"py/object": "struct4.TaskFile", "name": "post_checks_nodes.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_nodes.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that all nodes to be ready", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_nodes.yml", "options": {"name": "Check that all nodes to be ready", "changed_when": false, "failed_when": "kubectl_get_nodes_result.stdout.find(\"was refused\") != -1 or kubectl_get_nodes_result.stdout.find(\"ServiceUnavailable\") != -1", "register": "kubectl_get_nodes_result", "until": ["kubectl_get_nodes_result.rc == 0", "kubectl_get_nodes_result.stdout.find(\"NotReady\") == -1"], "retries": 30, "delay": 20, "when": ["k3s_control_node", "(\"flannel-backend\" not in k3s_runtime_config or k3s_runtime_config[\"flannel-backend\"] != \"none\")", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl get nodes"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_started.yml": {"py/object": "struct4.TaskFile", "name": "state_started.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_started.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_started.yml", "options": {}, "module_options": "ensure_started.yml", "executable": "ensure_started.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml": {"py/object": "struct4.TaskFile", "name": "pre_checks_cluster.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that the initial control plane server is available to accept connections", "module": "ansible.builtin.wait_for", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml", "options": {"name": "Check that the initial control plane server is available to accept connections"}, "module_options": {"port": "{{ k3s_runtime_config['https-listen-port'] | default('6443') }}", "host": "{{ k3s_runtime_config['bind-address'] | default('127.0.0.1') }}", "delay": 5, "sleep": 5, "timeout": 300}, "executable": "ansible.builtin.wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that cluster-token exists", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml", "options": {"name": "Check that cluster-token exists", "register": "k3s_check_cluster_token", "check_mode": false, "failed_when": ["not k3s_check_cluster_token.stat.exists", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_runtime_config['data-dir'] | default(k3s_data_dir) }}/server/token"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml": {"py/object": "struct4.TaskFile", "name": "ensure_installed_node.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s is linked into the installation destination", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s is linked into the installation destination", "loop": ["k3s", "kubectl", "crictl", "ctr"], "when": "not ansible_check_mode", "notify": ["restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "{{ k3s_install_dir }}/k3s-{{ k3s_release_version }}", "dest": "{{ k3s_install_dir }}/{{ item }}", "state": "{{ 'hard' if k3s_install_hard_links else 'link' }}", "force": "{{ k3s_install_hard_links }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s config file exists", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s config file exists", "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "config.yaml.j2", "dest": "{{ k3s_config_file }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the cluster token file location exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure the cluster token file location exists", "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_token_location | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s cluster token file is present", "module": "ansible.builtin.template", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s cluster token file is present", "become": "{{ k3s_become }}", "notify": ["restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"]}, "module_options": {"src": "cluster-token.j2", "dest": "{{ k3s_token_location }}", "mode": 384}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service unit file is present", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s service unit file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'systemd'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.service.j2", "dest": "{{ k3s_systemd_unit_dir }}/k3s.service", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service file is present", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s service file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.openrc.j2", "dest": "{{ k3s_openrc_service_dir }}/k3s", "mode": 484}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s logrotate file is present", "module": "ansible.builtin.template", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s logrotate file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.logrotate.j2", "dest": "{{ k3s_logrotate_dir }}/k3s", "mode": 416}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s killall script is present", "module": "ansible.builtin.template", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s killall script is present", "become": "{{ k3s_become }}", "when": ["k3s_runtime_config is defined", "(\"rootless\" not in k3s_runtime_config or not k3s_runtime_config.rootless)"]}, "module_options": {"src": "k3s-killall.sh.j2", "dest": "/usr/local/bin/k3s-killall.sh", "mode": 448}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s uninstall script is present", "module": "ansible.builtin.template", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s uninstall script is present", "become": "{{ k3s_become }}", "when": ["k3s_runtime_config is defined", "(\"rootless\" not in k3s_runtime_config or not k3s_runtime_config.rootless)"]}, "module_options": {"src": "k3s-uninstall.sh.j2", "dest": "/usr/local/bin/k3s-uninstall.sh", "mode": 448}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml": {"py/object": "struct4.TaskFile", "name": "pre_checks_packages.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that {{ package.name }} is installed", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml", "options": {"name": "Check that {{ package.name }} is installed", "changed_when": false, "failed_when": false, "register": "check_k3s_required_package", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "which {{ package.name }}"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Test that checks for {{ package.name }} passed", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml", "options": {"name": "Test that checks for {{ package.name }} passed", "when": ["check_k3s_required_package.rc is defined", "(package.until is not defined or (k3s_release_version | replace('v', '')) is version_compare(package.until, '<'))", "(package.from is not defined or (k3s_release_version | replace('v', '')) is version_compare(package.from, '>='))"]}, "module_options": {"that": ["check_k3s_required_package.rc == 0"], "success_msg": "Found required package: {{ package.name }}.", "fail_msg": "Could not find package: {{ package.name }}. {% if package.documentation is defined %} Documentation: {{ package.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml": {"py/object": "struct4.TaskFile", "name": "ensure_k3s_auto_deploy.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure that the manifests directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure that the manifests directory exists", "when": "k3s_server_manifests_templates | length > 0 or k3s_server_manifests_urls | length > 0", "become": "{{ k3s_become }}"}, "module_options": {"state": "directory", "path": "{{ k3s_server_manifests_dir }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the pod-manifests directory exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure that the pod-manifests directory exists", "when": "k3s_server_pod_manifests_templates | length > 0 or k3s_server_pod_manifests_urls | length > 0", "become": "{{ k3s_become }}"}, "module_options": {"state": "directory", "path": "{{ k3s_server_pod_manifests_dir }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure auto-deploying manifests are copied to the primary controller", "module": "ansible.builtin.template", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure auto-deploying manifests are copied to the primary controller", "loop": "{{ k3s_server_manifests_templates }}", "become": "{{ k3s_become }}", "when": ["k3s_server_manifests_templates | length > 0"]}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_server_manifests_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure auto-deploying manifests are downloaded to the primary controller", "module": "ansible.builtin.get_url", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure auto-deploying manifests are downloaded to the primary controller", "loop": "{{ k3s_server_manifests_urls }}", "become": "{{ k3s_become }}", "when": ["not ansible_check_mode", "k3s_server_manifests_urls | length > 0"]}, "module_options": {"url": "{{ item.url }}", "dest": "{{ k3s_server_manifests_dir }}/{{ item.filename | default(item.url | basename) }}", "mode": 420}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure static pod manifests are copied to controllers", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure static pod manifests are copied to controllers", "loop": "{{ k3s_server_pod_manifests_templates }}", "become": "{{ k3s_become }}"}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_server_pod_manifests_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure auto-deploying manifests are downloaded to the primary controller", "module": "ansible.builtin.get_url", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure auto-deploying manifests are downloaded to the primary controller", "loop": "{{ k3s_server_pod_manifests_urls }}", "become": "{{ k3s_become }}", "when": "not ansible_check_mode"}, "module_options": {"url": "{{ item.url }}", "dest": "{{ k3s_server_pod_manifests_dir }}/{{ item.filename | default(item.url | basename) }}", "mode": 420}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml": {"py/object": "struct4.TaskFile", "name": "pre_checks.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that k3s_state is a supported value", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that k3s_state is a supported value", "when": "k3s_state is defined"}, "module_options": {"that": ["k3s_state in k3s_valid_states"], "fail_msg": "k3s_state not valid. Check README.md for details.", "success_msg": "k3s_state is valid."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that Ansible v{{ ansible_version.string }} is supported by this role", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that Ansible v{{ ansible_version.string }} is supported by this role", "become": false, "delegate_to": "localhost", "run_once": true, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["ansible_version.string is version_compare(k3s_ansible_min_version, '>=')"], "fail_msg": "Ansible v{{ ansible_version.string }} is not supported by this role. Please install >= v{{ k3s_ansible_min_version }}.", "success_msg": "Ansible v{{ ansible_version.string }} is supported."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that Python v{{ ansible_python_version }} is supported by this role", "module": "ansible.builtin.assert", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that Python v{{ ansible_python_version }} is supported by this role", "become": false, "delegate_to": "localhost", "run_once": true, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["ansible_python_version is version_compare(k3s_python_min_version, '>=')"], "fail_msg": "Python v{{ ansible_python_version }} is not supported by this role. Please install >= v{{ k3s_python_min_version }}.", "success_msg": "Python v{{ ansible_python_version }} is supported."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that the target init system is supported by this role", "module": "ansible.builtin.assert", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that the target init system is supported by this role", "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["ansible_service_mgr in k3s_supported_init"], "fail_msg": "{{ ansible_service_mgr }} is not supported by this role. Supported init systems: {{ k3s_supported_init | join(', ') }}", "success_msg": "{{ ansible_service_mgr }} is supported"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Determing if {{ ansible_service_mgr }} is actually openrc", "module": "ansible.builtin.stat", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Determing if {{ ansible_service_mgr }} is actually openrc", "register": "k3s_check_openrc_run", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'", "not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"path": "/sbin/openrc-run"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that {{ ansible_service_mgr }} is actually openrc", "module": "ansible.builtin.assert", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that {{ ansible_service_mgr }} is actually openrc", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'", "not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["k3s_check_openrc_run.stat.exists"], "fail_msg": "openrc was not found, cannot install to {{ ansible_service_mgr }}", "success_msg": "openrc found"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["(k3s_release_version is not defined or not k3s_release_version or k3s_release_version is not regex('\\\\+k3s[1-9]$'))", "not k3s_airgap"]}, "module_options": "pre_checks_version.yml", "executable": "pre_checks_version.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"loop": "{{ k3s_cgroup_subsys }}", "loop_control": {"loop_var": "cgroup"}, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": "pre_checks_cgroups.yml", "executable": "pre_checks_cgroups.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"loop": "{{ k3s_check_packages[k3s_os_distribution_version] }}", "loop_control": {"loop_var": "package"}, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks", "k3s_check_packages[k3s_os_distribution_version] is defined"]}, "module_options": "pre_checks_packages.yml", "executable": "pre_checks_packages.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["pyratlabs_issue_controller_dump is defined", "pyratlabs_issue_controller_dump"]}, "module_options": "pre_checks_issue_data.yml", "executable": "pre_checks_issue_data.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["not k3s_skip_validation"]}, "module_options": "pre_checks_variables.yml", "executable": "pre_checks_variables.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 11, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["not k3s_skip_validation"]}, "module_options": "pre_checks_experimental_variables.yml", "executable": "pre_checks_experimental_variables.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 12, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["k3s_runtime_config.rootless is defined", "k3s_runtime_config.rootless", "not k3s_skip_validation"]}, "module_options": "pre_checks_unsupported_rootless.yml", "executable": "pre_checks_unsupported_rootless.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 13, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {}, "module_options": "ensure_pre_configuration.yml", "executable": "ensure_pre_configuration.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 14, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["k3s_build_cluster is defined", "k3s_build_cluster", "not k3s_skip_validation"]}, "module_options": "pre_checks_control_node_count.yml", "executable": "pre_checks_control_node_count.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml": {"py/object": "struct4.TaskFile", "name": "state_uninstalled.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {}, "module_options": "ensure_pre_configuration.yml", "executable": "ensure_pre_configuration.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {}, "module_options": "ensure_drain_and_remove_nodes.yml", "executable": "ensure_drain_and_remove_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {}, "module_options": "ensure_uninstalled.yml", "executable": "ensure_uninstalled.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {"when": "not k3s_skip_validation"}, "module_options": "post_checks_uninstalled.yml", "executable": "post_checks_uninstalled.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml": {"py/object": "struct4.TaskFile", "name": "pre_checks_unsupported_rootless.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check if newuidmap is available", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Check if newuidmap is available", "failed_when": false, "changed_when": false, "register": "k3s_check_newuidmap_installed"}, "module_options": {"cmd": "which newuidmap"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if /proc/sys/kernel/unprivileged_userns_clone exists", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Check if /proc/sys/kernel/unprivileged_userns_clone exists", "register": "k3s_check_unprivileged_userns_exists"}, "module_options": {"path": "/proc/sys/kernel/unprivileged_userns_clone"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the value of /proc/sys/kernel/unprivileged_userns_clone", "module": "ansible.builtin.slurp", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the value of /proc/sys/kernel/unprivileged_userns_clone", "register": "k3s_get_unprivileged_userns_clone", "when": "k3s_check_unprivileged_userns_exists.stat.exists"}, "module_options": {"src": "/proc/sys/kernel/unprivileged_userns_clone"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the value of k3s_get_unprivileged_userns_clone", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Set the value of k3s_get_unprivileged_userns_clone", "when": "not k3s_check_unprivileged_userns_exists.stat.exists"}, "module_options": {"k3s_get_unprivileged_userns_clone": {"content": "MQo="}}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the value of /proc/sys/user/max_user_namespaces", "module": "ansible.builtin.slurp", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the value of /proc/sys/user/max_user_namespaces", "register": "k3s_get_max_user_namespaces"}, "module_options": {"src": "/proc/sys/user/max_user_namespaces"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the contents of /etc/subuid", "module": "ansible.builtin.slurp", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the contents of /etc/subuid", "register": "k3s_get_subuid"}, "module_options": {"src": "/etc/subuid"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the contents of /etc/subgid", "module": "ansible.builtin.slurp", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the contents of /etc/subgid", "register": "k3s_get_subgid"}, "module_options": {"src": "/etc/subgid"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get current user subuid and subgid values", "module": "ansible.builtin.set_fact", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get current user subuid and subgid values"}, "module_options": {"k3s_current_user_subuid": "{{ (k3s_get_subuid['content'] | b64decode).split('\n') | select('search', ansible_user_id) | first | default('UserNotFound:0:0') }}", "k3s_current_user_subgid": "{{ (k3s_get_subgid['content'] | b64decode).split('\n') | select('search', ansible_user_id) | first | default('UserNotFound:0:0') }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check user namespaces kernel parameters are adequate", "module": "ansible.builtin.assert", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Check user namespaces kernel parameters are adequate"}, "module_options": {"that": ["k3s_get_unprivileged_userns_clone['content'] | b64decode | int == 1", "((k3s_get_max_user_namespaces['content'] | b64decode | int >= 28633) or (k3s_os_family != \"redhat\"))", "k3s_current_user_subuid != \"UserNotFound:0:0\"", "k3s_current_user_subgid != \"UserNotFound:0:0\"", "k3s_current_user_subuid.split(':')[2] | int >= 65536", "k3s_current_user_subgid.split(':')[2] | int >= 65536", "ansible_env['XDG_RUNTIME_DIR'] is defined", "k3s_check_newuidmap_installed.rc == 0"], "success_msg": "All kernel parameters passed", "fail_msg": "Kernel parameters are not set correctly, please check https://github.com/rootless-containers/rootlesskit"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_control_plane.yml": {"py/object": "struct4.TaskFile", "name": "post_checks_control_plane.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_control_plane.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that the control plane is available to accept connections", "module": "ansible.builtin.wait_for", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_control_plane.yml", "options": {"name": "Check that the control plane is available to accept connections", "when": "k3s_control_node"}, "module_options": {"port": "{{ k3s_runtime_config['https-listen-port'] | default('6443') }}", "host": "{{ k3s_runtime_config['bind-address'] | default('127.0.0.1') }}", "delay": 5, "sleep": 5, "timeout": 300}, "executable": "ansible.builtin.wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_containerd_registries.yml": {"py/object": "struct4.TaskFile", "name": "ensure_containerd_registries.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_containerd_registries.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure containerd registries file exists", "module": "ansible.builtin.template", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_containerd_registries.yml", "options": {"name": "Ensure containerd registries file exists", "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "registries.yaml.j2", "dest": "{{ k3s_config_dir }}/registries.yaml", "mode": 384}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml": {"py/object": "struct4.TaskFile", "name": "ensure_stopped.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s service is stopped", "module": "ansible.builtin.systemd", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml", "options": {"name": "Ensure k3s service is stopped", "when": "k3s_non_root is not defined or not k3s_non_root", "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "stopped", "enabled": "{{ k3s_start_on_boot }}"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service is started", "module": "ansible.builtin.systemd", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml", "options": {"name": "Ensure k3s service is started", "when": ["k3s_non_root is defined", "k3s_non_root"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "stopped", "enabled": "{{ k3s_start_on_boot }}", "scope": "user"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml": {"py/object": "struct4.TaskFile", "name": "state_downloaded.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "options": {"when": ["k3s_release_version is not defined or not k3s_release_version", "not k3s_airgap"]}, "module_options": "pre_checks_version.yml", "executable": "pre_checks_version.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "options": {"when": "not k3s_airgap"}, "module_options": "ensure_downloads.yml", "executable": "ensure_downloads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "options": {"when": "k3s_airgap"}, "module_options": "ensure_uploads.yml", "executable": "ensure_uploads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_systemd.yml": {"py/object": "struct4.TaskFile", "name": "ensure_control_plane_started_systemd.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_systemd.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s control plane server is started", "module": "ansible.builtin.systemd", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_systemd.yml", "options": {"name": "Ensure k3s control plane server is started", "register": "k3s_systemd_start_k3s", "until": "k3s_systemd_start_k3s is succeeded", "retries": 3, "delay": 3, "failed_when": ["k3s_systemd_start_k3s is not succeeded", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}", "scope": "{{ k3s_systemd_context }}"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml": {"py/object": "struct4.TaskFile", "name": "ensure_drain_and_remove_nodes.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check if kubectl exists", "module": "ansible.builtin.stat", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Check if kubectl exists", "register": "k3s_check_kubectl", "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_install_dir }}/kubectl"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather a list of nodes", "module": "ansible.builtin.command", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Gather a list of nodes", "changed_when": false, "failed_when": false, "delegate_to": "{{ k3s_control_delegate }}", "run_once": true, "register": "kubectl_get_nodes_result", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl get nodes"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure uninstalled nodes are drained", "module": "ansible.builtin.command", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Ensure uninstalled nodes are drained", "delegate_to": "{{ k3s_control_delegate }}", "run_once": true, "when": ["kubectl_get_nodes_result.stdout is defined", "item in kubectl_get_nodes_result.stdout", "hostvars[item].k3s_state is defined", "hostvars[item].k3s_state == 'uninstalled'"], "loop": "{{ ansible_play_hosts }}", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl drain {{ item }}\n  --ignore-daemonsets\n  --{{ k3s_drain_command[ansible_version.string is version_compare('1.22', '>=')] }}\n  --force"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure uninstalled nodes are removed", "module": "ansible.builtin.command", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Ensure uninstalled nodes are removed", "delegate_to": "{{ k3s_control_delegate }}", "run_once": true, "when": ["kubectl_get_nodes_result.stdout is defined", "item in kubectl_get_nodes_result.stdout", "hostvars[item].k3s_state is defined", "hostvars[item].k3s_state == 'uninstalled'"], "loop": "{{ ansible_play_hosts }}", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl delete node {{ item }}"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml": {"py/object": "struct4.TaskFile", "name": "post_checks_uninstalled.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that k3s is not running", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Check that k3s is not running", "failed_when": ["check_k3s_process.rc == 0", "not ansible_check_mode"], "changed_when": false, "register": "check_k3s_process"}, "module_options": {"cmd": "pgrep k3s"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if k3s binaries have not been removed", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Fail if k3s binaries have not been removed", "register": "check_k3s_binaries_removed", "failed_when": "check_k3s_binaries_removed.stat.exists", "loop": ["k3s", "kubectl", "crictl", "ctr"]}, "module_options": {"path": "{{ k3s_install_dir }}/{{ item }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check k3s-killall.sh is removed", "module": "ansible.builtin.stat", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Check k3s-killall.sh is removed", "register": "check_k3s_killall"}, "module_options": {"path": "/usr/local/bin/k3s-killall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if k3s-killall.sh script still exists", "module": "ansible.builtin.fail", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Fail if k3s-killall.sh script still exists", "when": "check_k3s_killall.stat.exists"}, "module_options": {"msg": "k3s-killall.sh still exists, uninstall script failed. Please investigate."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check k3s-uninstall.sh is removed", "module": "ansible.builtin.stat", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Check k3s-uninstall.sh is removed", "register": "check_k3s_uninstall"}, "module_options": {"path": "/usr/local/bin/k3s-uninstall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if k3s-uninstall.sh script still exists", "module": "ansible.builtin.fail", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Fail if k3s-uninstall.sh script still exists", "when": "check_k3s_uninstall.stat.exists"}, "module_options": {"msg": "k3s-uninstall.sh is still exists, uninstall script failed. Please investigate."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml": {"py/object": "struct4.TaskFile", "name": "pre_checks_variables.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that k3s_release_version >= {{ k3s_min_version }}", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check that k3s_release_version >= {{ k3s_min_version }}", "when": "not k3s_airgap"}, "module_options": {"that": ["(k3s_release_version | replace('v', '')) is version_compare(k3s_min_version, '>=')"], "success_msg": "{{ k3s_release_version }} is supported by this role.", "fail_msg": "{{ k3s_release_version }} is not supported by this role, please use xanmanning.k3s v1.x."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check configuration in k3s_server and k3s_agent that needs alternate configuration", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check configuration in k3s_server and k3s_agent that needs alternate configuration", "loop": "{{ k3s_config_exclude }}"}, "module_options": {"that": ["(item.setting not in k3s_runtime_config)"], "success_msg": "{{ item.setting }} not found in server/agent config", "fail_msg": "{{ item.setting }} found in server/agent config. Please set {{ item.correction }} to use this option. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check configuration in k3s_server and k3s_agent for deprecated configuration", "module": "ansible.builtin.assert", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check configuration in k3s_server and k3s_agent for deprecated configuration", "loop": "{{ k3s_deprecated_config }}", "when": ["not k3s_airgap", "(item.when is not defined or (item.when is defined and (k3s_release_version | replace('v', '')) is version_compare(item.when, '>=')))", "not k3s_use_unsupported_config"]}, "module_options": {"that": ["(item.setting not in k3s_runtime_config) or (not k3s_runtime_config[item.setting])"], "success_msg": "{{ item.setting }} not found in server/agent config", "fail_msg": "{{ item.setting }} found in server/agent config. Please set {{ item.correction }} to use this option. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check configuration in k3s_server and k3s_agent against release version", "module": "ansible.builtin.assert", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check configuration in k3s_server and k3s_agent against release version", "loop": "{{ k3s_config_version_check }}", "when": ["k3s_config_version_check is defined", "item.setting in k3s_runtime_config"]}, "module_options": {"that": ["(k3s_release_version | replace('v', '')) is version_compare(item.version, '>=')"], "success_msg": "{{ item.setting }} is supported by {{ k3s_release_version }}", "fail_msg": "{{ item.setting }} is not supported in {{ k3s_release_version }}. Please update to v{{ item.version }} to use this option. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml": {"py/object": "struct4.TaskFile", "name": "state_validated.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml", "options": {}, "module_options": "post_checks_control_plane.yml", "executable": "post_checks_control_plane.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml", "options": {}, "module_options": "post_checks_nodes.yml", "executable": "post_checks_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml": {"py/object": "struct4.TaskFile", "name": "pre_checks_cgroups.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check if {{ cgroup.name }} cgroup is enabled", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml", "options": {"name": "Check if {{ cgroup.name }} cgroup is enabled", "failed_when": false, "changed_when": false, "check_mode": false, "register": "k3s_check_cgroup_option"}, "module_options": {"cmd": "grep -E \"^{{ cgroup.name }}\\s+.*\\s+1$\" /proc/cgroups"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if {{ cgroup.name }} cgroup is not enabled", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml", "options": {"name": "Fail if {{ cgroup.name }} cgroup is not enabled"}, "module_options": {"that": ["k3s_check_cgroup_option.rc == 0"], "fail_msg": "{{ cgroup.name }} cgroup disabled. {{ cgroup.documentation }}\n", "success_msg": "{{ cgroup.name }} cgroup enabled."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml": {"py/object": "struct4.TaskFile", "name": "ensure_pre_configuration.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s_build_cluster is false if running against a single node.", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s_build_cluster is false if running against a single node.", "when": ["ansible_play_hosts | length < 2", "k3s_registration_address is not defined"]}, "module_options": {"k3s_build_cluster": false}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s control node fact is set", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s control node fact is set", "when": "k3s_control_node is not defined"}, "module_options": {"k3s_control_node": "{{ not k3s_build_cluster }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s primary control node fact is set", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s primary control node fact is set", "when": "k3s_primary_control_node is not defined"}, "module_options": {"k3s_primary_control_node": "{{ not k3s_build_cluster }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s control plane port is captured", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s control plane port is captured", "delegate_to": "k3s_primary_control_node"}, "module_options": {"k3s_control_plane_port": "{{ k3s_runtime_config['https-listen-port'] | default(6443) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s node IP is configured when node-ip is defined", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s node IP is configured when node-ip is defined", "when": ["k3s_runtime_config['node-ip'] is defined"]}, "module_options": {"k3s_node_ip": "{{ k3s_runtime_config['node-ip'] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure a count of control nodes is generated from ansible_play_hosts", "module": "ansible.builtin.set_fact", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure a count of control nodes is generated from ansible_play_hosts", "when": ["hostvars[item].k3s_control_node is defined", "hostvars[item].k3s_control_node"], "loop": "{{ ansible_play_hosts }}"}, "module_options": {"k3s_controller_list": "{{ k3s_controller_list + [ item ] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the control host", "module": "ansible.builtin.set_fact", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Set the control host", "when": "inventory_hostname == ansible_play_hosts[0]"}, "module_options": {"k3s_control_node": true}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure a count of control nodes is generated", "module": "ansible.builtin.set_fact", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure a count of control nodes is generated", "when": ["hostvars[item].k3s_control_node is defined", "hostvars[item].k3s_control_node"], "loop": "{{ ansible_play_hosts }}"}, "module_options": {"k3s_controller_list": "{{ k3s_controller_list + [ item ] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure a primary k3s control node is defined if multiple are found in ansible_play_hosts", "module": "ansible.builtin.set_fact", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure a primary k3s control node is defined if multiple are found in ansible_play_hosts", "when": ["k3s_controller_list is defined", "inventory_hostname == k3s_controller_list[0]", "k3s_build_cluster is defined", "k3s_build_cluster"]}, "module_options": {"k3s_primary_control_node": true}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure ansible_host is mapped to inventory_hostname", "module": "ansible.builtin.blockinfile", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure ansible_host is mapped to inventory_hostname", "check_mode": false, "when": "k3s_control_node is defined"}, "module_options": {"path": "/tmp/inventory.txt", "block": "{% for host in ansible_play_hosts %}\n{% filter replace('\\n', ' ') %}\n{{ host }}\n@@@\n{{ hostvars[host].ansible_host | default(hostvars[host].ansible_fqdn) | string }}\n@@@\nC_{{ hostvars[host].k3s_control_node | string }}\n@@@\nP_{{ hostvars[host].k3s_primary_control_node | default(False) | string }}\n{% endfilter %}\n@@@ END:{{ host }}\n{% endfor %}\n", "create": true, "mode": 384}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Lookup control node from file", "module": "ansible.builtin.command", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Lookup control node from file", "changed_when": false, "check_mode": false, "register": "k3s_control_delegate_raw"}, "module_options": {"cmd": "grep -i '{{ 'P_True' if (k3s_controller_list | length > 1) else 'C_True' }}' /tmp/inventory.txt"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure control node is delegated for obtaining a cluster token", "module": "ansible.builtin.set_fact", "index": 11, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure control node is delegated for obtaining a cluster token", "check_mode": false, "when": "k3s_control_delegate is not defined"}, "module_options": {"k3s_control_delegate": "{{ k3s_control_delegate_raw.stdout.split(' @@@ ')[0] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the node registration address is defined from k3s_control_node_address", "module": "ansible.builtin.set_fact", "index": 12, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure the node registration address is defined from k3s_control_node_address", "check_mode": false, "when": "k3s_control_node_address is defined"}, "module_options": {"k3s_registration_address": "{{ k3s_control_node_address }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the node registration address is defined from node-ip", "module": "ansible.builtin.set_fact", "index": 13, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure the node registration address is defined from node-ip", "check_mode": false, "when": ["k3s_registration_address is not defined", "k3s_control_node_address is not defined", "hostvars[k3s_control_delegate].k3s_node_ip is defined"]}, "module_options": {"k3s_registration_address": "{{ hostvars[k3s_control_delegate].k3s_node_ip }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the node registration address is defined", "module": "ansible.builtin.set_fact", "index": 14, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure the node registration address is defined", "check_mode": false, "when": ["k3s_registration_address is not defined", "k3s_control_node_address is not defined"]}, "module_options": {"k3s_registration_address": "{{ hostvars[k3s_control_delegate].ansible_host | default(hostvars[k3s_control_delegate].ansible_fqdn) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml": {"py/object": "struct4.TaskFile", "name": "ensure_downloads.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure target host architecture information is set as a fact", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure target host architecture information is set as a fact", "check_mode": false}, "module_options": {"k3s_arch": "{{ k3s_arch_lookup[ansible_architecture].arch }}", "k3s_arch_suffix": "{{ k3s_arch_lookup[ansible_architecture].suffix }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure URLs are set as facts for downloading binaries", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure URLs are set as facts for downloading binaries", "check_mode": false}, "module_options": {"k3s_binary_url": "{{ k3s_github_download_url }}/{{ k3s_release_version }}/k3s{{ k3s_arch_suffix }}", "k3s_hash_url": "{{ k3s_github_download_url }}/{{ k3s_release_version }}/sha256sum-{{ k3s_arch }}.txt"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Override k3s_binary_url and k3s_hash_url facts for testing specific commit", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Override k3s_binary_url and k3s_hash_url facts for testing specific commit", "when": ["k3s_release_version | regex_search(\"^[a-z0-9]{40}$\")"], "check_mode": false}, "module_options": {"k3s_binary_url": "https://storage.googleapis.com/k3s-ci-builds/k3s{{ k3s_arch_suffix }}-{{ k3s_release_version }}", "k3s_hash_url": "https://storage.googleapis.com/k3s-ci-builds/k3s{{ k3s_arch_suffix }}-{{ k3s_release_version }}.sha256sum"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the k3s hashsum is downloaded", "module": "ansible.builtin.uri", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure the k3s hashsum is downloaded", "register": "k3s_hash_sum_raw", "check_mode": false}, "module_options": {"url": "{{ k3s_hash_url }}", "return_content": true}, "executable": "ansible.builtin.uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure sha256sum is set from hashsum variable", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure sha256sum is set from hashsum variable", "changed_when": false, "check_mode": false}, "module_options": {"k3s_hash_sum": "{{ (k3s_hash_sum_raw.content.split('\n') | select('search', 'k3s' + k3s_arch_suffix) | reject('search', 'images') | first).split() | first }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure installation directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure installation directory exists"}, "module_options": {"path": "{{ k3s_install_dir }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s binary is downloaded", "module": "ansible.builtin.get_url", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure k3s binary is downloaded", "become": "{{ k3s_become }}"}, "module_options": {"url": "{{ k3s_binary_url }}", "dest": "{{ k3s_install_dir }}/k3s-{{ k3s_release_version }}", "checksum": "sha256:{{ k3s_hash_sum }}", "mode": 493}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_stopped.yml": {"py/object": "struct4.TaskFile", "name": "state_stopped.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_stopped.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_stopped.yml", "options": {}, "module_options": "ensure_stopped.yml", "executable": "ensure_stopped.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/determine_systemd_context.yml": {"py/object": "struct4.TaskFile", "name": "determine_systemd_context.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/determine_systemd_context.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure systemd context is correct if we are running k3s rootless", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/determine_systemd_context.yml", "options": {"name": "Ensure systemd context is correct if we are running k3s rootless", "when": ["k3s_runtime_config is defined", "k3s_runtime_config.rootless is defined", "k3s_runtime_config.rootless"]}, "module_options": {"k3s_systemd_context": "user", "k3s_systemd_unit_dir": "{{ ansible_user_dir }}/.config/systemd/user"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml": {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml", "options": {}, "module_options": "pre_checks.yml", "executable": "pre_checks.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml", "options": {}, "module_options": "state_{{ (k3s_state | lower) | default('installed') }}.yml", "executable": "state_{{ (k3s_state | lower) | default('installed') }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml": {"py/object": "struct4.TaskFile", "name": "pre_checks_experimental_variables.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check if embedded etcd datastore is enabled and marked as experimental", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml", "options": {"name": "Check if embedded etcd datastore is enabled and marked as experimental", "when": ["k3s_etcd_datastore is defined", "k3s_etcd_datastore", "(k3s_release_version | replace('v', '')) is version_compare(\"1.19.5\", '<')"]}, "module_options": {"that": ["k3s_use_experimental is defined and k3s_use_experimental"], "success_msg": "Experimental variables are defined and enabled.", "fail_msg": "Experimental variable k3s_etcd_datastore has been configured. If you want to use this ensure you set k3s_use_experimental,"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if any experimental variables are configure and if they are enabled with k3s_use_experimental", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml", "options": {"name": "Check if any experimental variables are configure and if they are enabled with k3s_use_experimental", "loop": "{{ k3s_experimental_config }}", "when": ["(item.setting in k3s_runtime_config and k3s_runtime_config[item.setting])", "((item.until is not defined) or (item.until is defined and (k3s_release_version | replace('v', '')) is version_compare(item.until, '<')))"]}, "module_options": {"that": ["k3s_use_experimental is defined and k3s_use_experimental"], "success_msg": "Experimental variables are defined and enabled.", "fail_msg": "Experimental variable {{ item.setting }} has been configured. If you want to use this ensure you set k3s_use_experimental. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml": {"py/object": "struct4.TaskFile", "name": "pre_checks_version.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s_release_version is set to default if false", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Ensure k3s_release_version is set to default if false", "check_mode": false, "when": ["k3s_release_version is defined", "not k3s_release_version"]}, "module_options": {"k3s_release_version": "{{ k3s_release_channel }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the default release channel is set", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Ensure the default release channel is set", "check_mode": false}, "module_options": {"k3s_release_channel": "{{ k3s_release_version | default('stable') }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the latest release version from k3s.io", "module": "ansible.builtin.uri", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Get the latest release version from k3s.io", "register": "k3s_latest_release", "no_log": true, "check_mode": false}, "module_options": {"url": "{{ k3s_api_releases }}", "return_content": true, "body_format": "json"}, "executable": "ansible.builtin.uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the release version is set as a fact", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Ensure the release version is set as a fact", "loop": "{{ k3s_latest_release.json.data }}", "check_mode": false, "when": ["item.name == k3s_release_channel", "item.type == \"channel\""]}, "module_options": {"k3s_release_version": "{{ item.latest }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}}, "role_dict": {"xanmanning.k3s": {"py/object": "struct4.Role", "name": "xanmanning.k3s", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s", "fqcn": "xanmanning.k3s", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "ensure_k3s_config_files.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure that the config.yaml.d directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "options": {"name": "Ensure that the config.yaml.d directory exists", "when": "k3s_server_config_yaml_d_files | length > 0 or k3s_agent_config_yaml_d_files | length > 0", "become": "{{ k3s_become }}"}, "module_options": {"state": "directory", "path": "{{ k3s_config_yaml_d_dir }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configuration files are copied to controllers", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "options": {"name": "Ensure configuration files are copied to controllers", "loop": "{{ k3s_server_config_yaml_d_files }}", "become": "{{ k3s_become }}", "when": "k3s_control_node"}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_config_yaml_d_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configuration files are copied to agents", "module": "ansible.builtin.template", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_config_files.yml", "options": {"name": "Ensure configuration files are copied to agents", "loop": "{{ k3s_agent_config_yaml_d_files }}", "become": "{{ k3s_become }}", "when": "not k3s_control_node"}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_config_yaml_d_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_control_plane_started_openrc.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_openrc.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s control plane server is started", "module": "ansible.builtin.service", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_openrc.yml", "options": {"name": "Ensure k3s control plane server is started", "register": "k3s_service_start_k3s", "until": "k3s_service_start_k3s is succeeded", "retries": 3, "delay": 3, "failed_when": ["k3s_service_start_k3s is not succeeded", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}"}, "executable": "ansible.builtin.service", "executable_type": "Module", "fqcn": "ansible.builtin.service", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_restarted.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml", "options": {}, "module_options": "ensure_stopped.yml", "executable": "ensure_stopped.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_restarted.yml", "options": {}, "module_options": "ensure_started.yml", "executable": "ensure_started.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_started.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s service is started", "module": "ansible.builtin.systemd", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml", "options": {"name": "Ensure k3s service is started", "when": "k3s_non_root is not defined or not k3s_non_root", "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service is started", "module": "ansible.builtin.systemd", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_started.yml", "options": {"name": "Ensure k3s service is started", "when": ["k3s_non_root is defined", "k3s_non_root"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}", "scope": "user"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_uploads.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure installation directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml", "options": {"name": "Ensure installation directory exists"}, "module_options": {"path": "{{ k3s_install_dir }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s binary is copied from controller to target host", "module": "ansible.builtin.copy", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uploads.yml", "options": {"name": "Ensure k3s binary is copied from controller to target host", "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s", "dest": "{{ k3s_install_dir }}/k3s-{{ k3s_release_version }}", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_control_node_count.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check the conditions when a single controller is defined", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "options": {"name": "Check the conditions when a single controller is defined", "when": ["k3s_controller_list | length == 1", "not k3s_use_unsupported_config", "k3s_control_node"]}, "module_options": {"that": ["(k3s_controller_list | length == 1)", "(\"datastore-endpoint\" not in k3s_runtime_config or not k3s_runtime_config['datastore-endpoint'])", "(k3s_etcd_datastore is not defined or not k3s_etcd_datastore)"], "success_msg": "Control plane configuration is valid.", "fail_msg": "Control plane configuration is invalid. Please see notes about k3s_control_node and HA in README.md."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check the conditions when multiple controllers are defined", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "options": {"name": "Check the conditions when multiple controllers are defined", "when": ["k3s_controller_list | length >= 2", "k3s_control_node"]}, "module_options": {"that": ["(k3s_controller_list | length >= 2)", "((\"datastore-endpoint\" in k3s_runtime_config and k3s_runtime_config['datastore-endpoint']) or (k3s_etcd_datastore is defined and k3s_etcd_datastore))"], "success_msg": "Control plane configuration is valid.", "fail_msg": "Control plane configuration is invalid. Please see notes about k3s_control_node and HA in README.md."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check the conditions when embedded etcd is defined", "module": "ansible.builtin.assert", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_control_node_count.yml", "options": {"name": "Check the conditions when embedded etcd is defined", "when": ["k3s_etcd_datastore is defined", "k3s_etcd_datastore", "not k3s_use_unsupported_config", "k3s_control_node", "k3s_state != 'uninstalled'"]}, "module_options": {"that": ["(k3s_controller_list | length >= 3)", "(((k3s_controller_list | length) % 2) == 1)"], "success_msg": "Control plane configuration is valid.", "fail_msg": "Etcd should have a minimum of 3 defined members and the number of members should be odd. Please see notes about HA in README.md"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_cluster.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure cluster token is captured from {{ k3s_control_delegate }}", "module": "ansible.builtin.slurp", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure cluster token is captured from {{ k3s_control_delegate }}", "register": "k3s_slurped_cluster_token", "delegate_to": "{{ k3s_control_delegate }}", "when": ["k3s_control_token is not defined", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_runtime_config['data-dir'] | default(k3s_data_dir) }}/server/token"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure cluster token is formatted correctly for use in templates", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure cluster token is formatted correctly for use in templates", "when": ["k3s_control_token is not defined", "not ansible_check_mode"]}, "module_options": {"k3s_control_token_content": "{{ k3s_control_token | default(k3s_slurped_cluster_token.content | b64decode) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure dummy cluster token is defined for ansible_check_mode", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure dummy cluster token is defined for ansible_check_mode", "check_mode": false, "when": ["ansible_check_mode"]}, "module_options": {"k3s_control_token_content": "{{ k3s_control_delegate | to_uuid }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the cluster token file location exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure the cluster token file location exists", "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_token_location | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s cluster token file is present", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s cluster token file is present", "become": "{{ k3s_become }}", "notify": ["restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"]}, "module_options": {"src": "cluster-token.j2", "dest": "{{ k3s_token_location }}", "mode": 384}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service unit file is present", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s service unit file is present", "become": "{{ k3s_become }}", "when": ["k3s_service_handler[ansible_service_mgr] == 'systemd'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"]}, "module_options": {"src": "k3s.service.j2", "dest": "{{ k3s_systemd_unit_dir }}/k3s.service", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service file is present", "module": "ansible.builtin.template", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s service file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.openrc.j2", "dest": "{{ k3s_openrc_service_dir }}/k3s", "mode": 484}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s logrotate file is present", "module": "ansible.builtin.template", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s logrotate file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.logrotate.j2", "dest": "{{ k3s_logrotate_dir }}/k3s", "mode": 416}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s config file exists", "module": "ansible.builtin.template", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure k3s config file exists", "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "config.yaml.j2", "dest": "{{ k3s_config_file }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure secondary controllers are started", "module": "include_tasks", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Ensure secondary controllers are started", "when": ["k3s_control_node", "not k3s_primary_control_node"]}, "module_options": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"when": "not k3s_skip_validation"}, "module_options": "post_checks_control_plane.yml", "executable": "post_checks_control_plane.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush Handlers", "module": "ansible.builtin.meta", "index": 11, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"name": "Flush Handlers"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 12, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_cluster.yml", "options": {"when": "not k3s_skip_validation"}, "module_options": "post_checks_nodes.yml", "executable": "post_checks_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_directories.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_directories.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure {{ directory.name }} exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_directories.yml", "options": {"name": "Ensure {{ directory.name }} exists", "become": "{{ k3s_become }}", "when": ["directory.path is defined", "directory.path | length > 0", "directory.path != omit"]}, "module_options": {"path": "{{ directory.path }}", "state": "directory", "mode": "{{ directory.mode | default(755) }}"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_uninstalled.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check to see if k3s-killall.sh exits", "module": "ansible.builtin.stat", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Check to see if k3s-killall.sh exits", "register": "check_k3s_killall_script"}, "module_options": {"path": "/usr/local/bin/k3s-killall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check to see if k3s-uninstall.sh exits", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Check to see if k3s-uninstall.sh exits", "register": "check_k3s_uninstall_script"}, "module_options": {"path": "/usr/local/bin/k3s-uninstall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Run k3s-killall.sh", "module": "ansible.builtin.command", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Run k3s-killall.sh", "register": "k3s_killall", "changed_when": "k3s_killall.rc == 0", "when": "check_k3s_killall_script.stat.exists", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "/usr/local/bin/k3s-killall.sh"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Run k3s-uninstall.sh", "module": "ansible.builtin.command", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Run k3s-uninstall.sh", "args": {"removes": "/usr/local/bin/k3s-uninstall.sh"}, "register": "k3s_uninstall", "changed_when": "k3s_uninstall.rc == 0", "when": "check_k3s_uninstall_script.stat.exists", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "/usr/local/bin/k3s-uninstall.sh"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure hard links are removed", "module": "ansible.builtin.file", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_uninstalled.yml", "options": {"name": "Ensure hard links are removed", "loop": ["kubectl", "crictl", "ctr"], "when": ["k3s_install_hard_links", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_install_dir }}/{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_installed.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"loop": "{{ k3s_ensure_directories_exist }}", "loop_control": {"loop_var": "directory"}}, "module_options": "ensure_directories.yml", "executable": "ensure_directories.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"when": ["((k3s_control_node and k3s_controller_list | length == 1) or (k3s_primary_control_node and k3s_controller_list | length > 1))", "not ansible_check_mode"]}, "module_options": "ensure_installed_node.yml", "executable": "ensure_installed_node.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush Handlers", "module": "ansible.builtin.meta", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"name": "Flush Handlers"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"when": "k3s_build_cluster"}, "module_options": "ensure_installed_node.yml", "executable": "ensure_installed_node.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Determine if the systems are already clustered", "module": "ansible.builtin.stat", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"name": "Determine if the systems are already clustered", "register": "k3s_token_cluster_check"}, "module_options": {"path": "{{ k3s_token_location }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed.yml", "options": {"when": "(k3s_control_node and k3s_controller_list | length == 1) or (k3s_primary_control_node and k3s_controller_list | length > 1) or k3s_token_cluster_check.stat.exists"}, "module_options": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable": "ensure_control_plane_started_{{ ansible_service_mgr }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_installed.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "ensure_drain_and_remove_nodes.yml", "executable": "ensure_drain_and_remove_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "determine_systemd_context.yml", "executable": "determine_systemd_context.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush Handlers", "module": "ansible.builtin.meta", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"name": "Flush Handlers"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": "not k3s_airgap"}, "module_options": "ensure_downloads.yml", "executable": "ensure_downloads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": "k3s_airgap"}, "module_options": "ensure_uploads.yml", "executable": "ensure_uploads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_primary_control_node"]}, "module_options": "ensure_k3s_auto_deploy.yml", "executable": "ensure_k3s_auto_deploy.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "ensure_k3s_config_files.yml", "executable": "ensure_k3s_config_files.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {}, "module_options": "ensure_installed.yml", "executable": "ensure_installed.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_registries is defined", "('rootless' not in k3s_runtime_config or not k3s_runtime_config.rootless)"]}, "module_options": "ensure_containerd_registries.yml", "executable": "ensure_containerd_registries.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_control_delegate is defined", "k3s_control_delegate == inventory_hostname"]}, "module_options": "pre_checks_cluster.yml", "executable": "pre_checks_cluster.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_installed.yml", "options": {"when": ["k3s_build_cluster is defined", "k3s_build_cluster", "k3s_registration_address is defined"]}, "module_options": "ensure_cluster.yml", "executable": "ensure_cluster.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_issue_data.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure facts are gathered", "module": "ansible.builtin.setup", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure facts are gathered"}, "module_options": null, "executable": "ansible.builtin.setup", "executable_type": "Module", "fqcn": "ansible.builtin.setup", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Ansible version is captured", "module": "ansible.builtin.command", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure Ansible version is captured", "failed_when": false, "changed_when": false, "register": "check_ansible_version", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"cmd": "ansible --version"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Ansible config is captured", "module": "ansible.builtin.command", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure Ansible config is captured", "failed_when": false, "changed_when": false, "register": "check_ansible_config", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"cmd": "ansible-config dump --only-changed"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure a list of roles is captured", "module": "ansible.builtin.command", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure a list of roles is captured", "failed_when": false, "changed_when": false, "register": "check_ansible_roles", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"cmd": "ansible-galaxy role list"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure facts are written to disk", "module": "ansible.builtin.copy", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Ensure facts are written to disk", "delegate_to": "localhost", "run_once": true, "become": false}, "module_options": {"dest": "{{ playbook_dir }}/pyratlabs-issue-dump.txt", "content": "# Begin ANSIBLE VERSION\n{{ check_ansible_version.stdout }}\n# End ANSIBLE VERSION\n\n# Begin ANSIBLE CONFIG\n{{ check_ansible_config.stdout }}\n# End ANSIBLE CONFIG\n\n# Begin ANSIBLE ROLES\n{{ check_ansible_roles.stdout }}\n# End ANSIBLE ROLES\n\n# Begin PLAY HOSTS\n{{ ansible_play_hosts | to_json }}\n# End PLAY HOSTS\n\n# Begin K3S ROLE CONFIG\n{% for host in ansible_play_hosts %}\n## {{ host }}\n{% for config_key in hostvars[host] %}\n{% if config_key | regex_search('^k3s_') %}\n{{ config_key }}: {{ hostvars[host][config_key] | to_json }}\n{% endif %}\n{% endfor %}\n\n{% endfor %}\n# End K3S ROLE CONFIG\n\n# Begin K3S RUNTIME CONFIG\n{% for host in ansible_play_hosts %}\n## {{ host }}\n{% if hostvars[host].k3s_runtime_config is defined %}\n{{ hostvars[host].k3s_runtime_config }}\n{% endif %}\n{% endfor %}\n# End K3S RUNTIME CONFIG\n", "mode": 384}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail the play", "module": "ansible.builtin.fail", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_issue_data.yml", "options": {"name": "Fail the play", "delegate_to": "localhost", "run_once": true}, "module_options": {"msg": "Please include the output of {{ playbook_dir }}/pyratlabs-issue-dump.txt in your bug report."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "post_checks_nodes.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_nodes.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that all nodes to be ready", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_nodes.yml", "options": {"name": "Check that all nodes to be ready", "changed_when": false, "failed_when": "kubectl_get_nodes_result.stdout.find(\"was refused\") != -1 or kubectl_get_nodes_result.stdout.find(\"ServiceUnavailable\") != -1", "register": "kubectl_get_nodes_result", "until": ["kubectl_get_nodes_result.rc == 0", "kubectl_get_nodes_result.stdout.find(\"NotReady\") == -1"], "retries": 30, "delay": 20, "when": ["k3s_control_node", "(\"flannel-backend\" not in k3s_runtime_config or k3s_runtime_config[\"flannel-backend\"] != \"none\")", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl get nodes"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_started.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_started.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_started.yml", "options": {}, "module_options": "ensure_started.yml", "executable": "ensure_started.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_cluster.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that the initial control plane server is available to accept connections", "module": "ansible.builtin.wait_for", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml", "options": {"name": "Check that the initial control plane server is available to accept connections"}, "module_options": {"port": "{{ k3s_runtime_config['https-listen-port'] | default('6443') }}", "host": "{{ k3s_runtime_config['bind-address'] | default('127.0.0.1') }}", "delay": 5, "sleep": 5, "timeout": 300}, "executable": "ansible.builtin.wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that cluster-token exists", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cluster.yml", "options": {"name": "Check that cluster-token exists", "register": "k3s_check_cluster_token", "check_mode": false, "failed_when": ["not k3s_check_cluster_token.stat.exists", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_runtime_config['data-dir'] | default(k3s_data_dir) }}/server/token"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_installed_node.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s is linked into the installation destination", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s is linked into the installation destination", "loop": ["k3s", "kubectl", "crictl", "ctr"], "when": "not ansible_check_mode", "notify": ["restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "{{ k3s_install_dir }}/k3s-{{ k3s_release_version }}", "dest": "{{ k3s_install_dir }}/{{ item }}", "state": "{{ 'hard' if k3s_install_hard_links else 'link' }}", "force": "{{ k3s_install_hard_links }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s config file exists", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s config file exists", "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "config.yaml.j2", "dest": "{{ k3s_config_file }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the cluster token file location exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure the cluster token file location exists", "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_token_location | dirname }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s cluster token file is present", "module": "ansible.builtin.template", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s cluster token file is present", "become": "{{ k3s_become }}", "notify": ["restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"]}, "module_options": {"src": "cluster-token.j2", "dest": "{{ k3s_token_location }}", "mode": 384}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service unit file is present", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s service unit file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'systemd'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.service.j2", "dest": "{{ k3s_systemd_unit_dir }}/k3s.service", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service file is present", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s service file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.openrc.j2", "dest": "{{ k3s_openrc_service_dir }}/k3s", "mode": 484}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s logrotate file is present", "module": "ansible.builtin.template", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s logrotate file is present", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'"], "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "k3s.logrotate.j2", "dest": "{{ k3s_logrotate_dir }}/k3s", "mode": 416}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s killall script is present", "module": "ansible.builtin.template", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s killall script is present", "become": "{{ k3s_become }}", "when": ["k3s_runtime_config is defined", "(\"rootless\" not in k3s_runtime_config or not k3s_runtime_config.rootless)"]}, "module_options": {"src": "k3s-killall.sh.j2", "dest": "/usr/local/bin/k3s-killall.sh", "mode": 448}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s uninstall script is present", "module": "ansible.builtin.template", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_installed_node.yml", "options": {"name": "Ensure k3s uninstall script is present", "become": "{{ k3s_become }}", "when": ["k3s_runtime_config is defined", "(\"rootless\" not in k3s_runtime_config or not k3s_runtime_config.rootless)"]}, "module_options": {"src": "k3s-uninstall.sh.j2", "dest": "/usr/local/bin/k3s-uninstall.sh", "mode": 448}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_packages.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that {{ package.name }} is installed", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml", "options": {"name": "Check that {{ package.name }} is installed", "changed_when": false, "failed_when": false, "register": "check_k3s_required_package", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "which {{ package.name }}"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Test that checks for {{ package.name }} passed", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_packages.yml", "options": {"name": "Test that checks for {{ package.name }} passed", "when": ["check_k3s_required_package.rc is defined", "(package.until is not defined or (k3s_release_version | replace('v', '')) is version_compare(package.until, '<'))", "(package.from is not defined or (k3s_release_version | replace('v', '')) is version_compare(package.from, '>='))"]}, "module_options": {"that": ["check_k3s_required_package.rc == 0"], "success_msg": "Found required package: {{ package.name }}.", "fail_msg": "Could not find package: {{ package.name }}. {% if package.documentation is defined %} Documentation: {{ package.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_k3s_auto_deploy.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure that the manifests directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure that the manifests directory exists", "when": "k3s_server_manifests_templates | length > 0 or k3s_server_manifests_urls | length > 0", "become": "{{ k3s_become }}"}, "module_options": {"state": "directory", "path": "{{ k3s_server_manifests_dir }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the pod-manifests directory exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure that the pod-manifests directory exists", "when": "k3s_server_pod_manifests_templates | length > 0 or k3s_server_pod_manifests_urls | length > 0", "become": "{{ k3s_become }}"}, "module_options": {"state": "directory", "path": "{{ k3s_server_pod_manifests_dir }}", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure auto-deploying manifests are copied to the primary controller", "module": "ansible.builtin.template", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure auto-deploying manifests are copied to the primary controller", "loop": "{{ k3s_server_manifests_templates }}", "become": "{{ k3s_become }}", "when": ["k3s_server_manifests_templates | length > 0"]}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_server_manifests_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure auto-deploying manifests are downloaded to the primary controller", "module": "ansible.builtin.get_url", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure auto-deploying manifests are downloaded to the primary controller", "loop": "{{ k3s_server_manifests_urls }}", "become": "{{ k3s_become }}", "when": ["not ansible_check_mode", "k3s_server_manifests_urls | length > 0"]}, "module_options": {"url": "{{ item.url }}", "dest": "{{ k3s_server_manifests_dir }}/{{ item.filename | default(item.url | basename) }}", "mode": 420}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure static pod manifests are copied to controllers", "module": "ansible.builtin.template", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure static pod manifests are copied to controllers", "loop": "{{ k3s_server_pod_manifests_templates }}", "become": "{{ k3s_become }}"}, "module_options": {"src": "{{ item }}", "dest": "{{ k3s_server_pod_manifests_dir }}/{{ item | basename | replace('.j2','') }}", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure auto-deploying manifests are downloaded to the primary controller", "module": "ansible.builtin.get_url", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_k3s_auto_deploy.yml", "options": {"name": "Ensure auto-deploying manifests are downloaded to the primary controller", "loop": "{{ k3s_server_pod_manifests_urls }}", "become": "{{ k3s_become }}", "when": "not ansible_check_mode"}, "module_options": {"url": "{{ item.url }}", "dest": "{{ k3s_server_pod_manifests_dir }}/{{ item.filename | default(item.url | basename) }}", "mode": 420}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that k3s_state is a supported value", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that k3s_state is a supported value", "when": "k3s_state is defined"}, "module_options": {"that": ["k3s_state in k3s_valid_states"], "fail_msg": "k3s_state not valid. Check README.md for details.", "success_msg": "k3s_state is valid."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that Ansible v{{ ansible_version.string }} is supported by this role", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that Ansible v{{ ansible_version.string }} is supported by this role", "become": false, "delegate_to": "localhost", "run_once": true, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["ansible_version.string is version_compare(k3s_ansible_min_version, '>=')"], "fail_msg": "Ansible v{{ ansible_version.string }} is not supported by this role. Please install >= v{{ k3s_ansible_min_version }}.", "success_msg": "Ansible v{{ ansible_version.string }} is supported."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that Python v{{ ansible_python_version }} is supported by this role", "module": "ansible.builtin.assert", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that Python v{{ ansible_python_version }} is supported by this role", "become": false, "delegate_to": "localhost", "run_once": true, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["ansible_python_version is version_compare(k3s_python_min_version, '>=')"], "fail_msg": "Python v{{ ansible_python_version }} is not supported by this role. Please install >= v{{ k3s_python_min_version }}.", "success_msg": "Python v{{ ansible_python_version }} is supported."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that the target init system is supported by this role", "module": "ansible.builtin.assert", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that the target init system is supported by this role", "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["ansible_service_mgr in k3s_supported_init"], "fail_msg": "{{ ansible_service_mgr }} is not supported by this role. Supported init systems: {{ k3s_supported_init | join(', ') }}", "success_msg": "{{ ansible_service_mgr }} is supported"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Determing if {{ ansible_service_mgr }} is actually openrc", "module": "ansible.builtin.stat", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Determing if {{ ansible_service_mgr }} is actually openrc", "register": "k3s_check_openrc_run", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'", "not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"path": "/sbin/openrc-run"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that {{ ansible_service_mgr }} is actually openrc", "module": "ansible.builtin.assert", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"name": "Check that {{ ansible_service_mgr }} is actually openrc", "when": ["k3s_service_handler[ansible_service_mgr] == 'service'", "not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": {"that": ["k3s_check_openrc_run.stat.exists"], "fail_msg": "openrc was not found, cannot install to {{ ansible_service_mgr }}", "success_msg": "openrc found"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["(k3s_release_version is not defined or not k3s_release_version or k3s_release_version is not regex('\\\\+k3s[1-9]$'))", "not k3s_airgap"]}, "module_options": "pre_checks_version.yml", "executable": "pre_checks_version.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"loop": "{{ k3s_cgroup_subsys }}", "loop_control": {"loop_var": "cgroup"}, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks"]}, "module_options": "pre_checks_cgroups.yml", "executable": "pre_checks_cgroups.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"loop": "{{ k3s_check_packages[k3s_os_distribution_version] }}", "loop_control": {"loop_var": "package"}, "when": ["not k3s_skip_validation", "not k3s_skip_env_checks", "k3s_check_packages[k3s_os_distribution_version] is defined"]}, "module_options": "pre_checks_packages.yml", "executable": "pre_checks_packages.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["pyratlabs_issue_controller_dump is defined", "pyratlabs_issue_controller_dump"]}, "module_options": "pre_checks_issue_data.yml", "executable": "pre_checks_issue_data.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["not k3s_skip_validation"]}, "module_options": "pre_checks_variables.yml", "executable": "pre_checks_variables.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 11, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["not k3s_skip_validation"]}, "module_options": "pre_checks_experimental_variables.yml", "executable": "pre_checks_experimental_variables.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 12, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["k3s_runtime_config.rootless is defined", "k3s_runtime_config.rootless", "not k3s_skip_validation"]}, "module_options": "pre_checks_unsupported_rootless.yml", "executable": "pre_checks_unsupported_rootless.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 13, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {}, "module_options": "ensure_pre_configuration.yml", "executable": "ensure_pre_configuration.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 14, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks.yml", "options": {"when": ["k3s_build_cluster is defined", "k3s_build_cluster", "not k3s_skip_validation"]}, "module_options": "pre_checks_control_node_count.yml", "executable": "pre_checks_control_node_count.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_uninstalled.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {}, "module_options": "ensure_pre_configuration.yml", "executable": "ensure_pre_configuration.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {}, "module_options": "ensure_drain_and_remove_nodes.yml", "executable": "ensure_drain_and_remove_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {}, "module_options": "ensure_uninstalled.yml", "executable": "ensure_uninstalled.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_uninstalled.yml", "options": {"when": "not k3s_skip_validation"}, "module_options": "post_checks_uninstalled.yml", "executable": "post_checks_uninstalled.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_unsupported_rootless.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check if newuidmap is available", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Check if newuidmap is available", "failed_when": false, "changed_when": false, "register": "k3s_check_newuidmap_installed"}, "module_options": {"cmd": "which newuidmap"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if /proc/sys/kernel/unprivileged_userns_clone exists", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Check if /proc/sys/kernel/unprivileged_userns_clone exists", "register": "k3s_check_unprivileged_userns_exists"}, "module_options": {"path": "/proc/sys/kernel/unprivileged_userns_clone"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the value of /proc/sys/kernel/unprivileged_userns_clone", "module": "ansible.builtin.slurp", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the value of /proc/sys/kernel/unprivileged_userns_clone", "register": "k3s_get_unprivileged_userns_clone", "when": "k3s_check_unprivileged_userns_exists.stat.exists"}, "module_options": {"src": "/proc/sys/kernel/unprivileged_userns_clone"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the value of k3s_get_unprivileged_userns_clone", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Set the value of k3s_get_unprivileged_userns_clone", "when": "not k3s_check_unprivileged_userns_exists.stat.exists"}, "module_options": {"k3s_get_unprivileged_userns_clone": {"content": "MQo="}}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the value of /proc/sys/user/max_user_namespaces", "module": "ansible.builtin.slurp", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the value of /proc/sys/user/max_user_namespaces", "register": "k3s_get_max_user_namespaces"}, "module_options": {"src": "/proc/sys/user/max_user_namespaces"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the contents of /etc/subuid", "module": "ansible.builtin.slurp", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the contents of /etc/subuid", "register": "k3s_get_subuid"}, "module_options": {"src": "/etc/subuid"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the contents of /etc/subgid", "module": "ansible.builtin.slurp", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get the contents of /etc/subgid", "register": "k3s_get_subgid"}, "module_options": {"src": "/etc/subgid"}, "executable": "ansible.builtin.slurp", "executable_type": "Module", "fqcn": "ansible.builtin.slurp", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get current user subuid and subgid values", "module": "ansible.builtin.set_fact", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Get current user subuid and subgid values"}, "module_options": {"k3s_current_user_subuid": "{{ (k3s_get_subuid['content'] | b64decode).split('\n') | select('search', ansible_user_id) | first | default('UserNotFound:0:0') }}", "k3s_current_user_subgid": "{{ (k3s_get_subgid['content'] | b64decode).split('\n') | select('search', ansible_user_id) | first | default('UserNotFound:0:0') }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check user namespaces kernel parameters are adequate", "module": "ansible.builtin.assert", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_unsupported_rootless.yml", "options": {"name": "Check user namespaces kernel parameters are adequate"}, "module_options": {"that": ["k3s_get_unprivileged_userns_clone['content'] | b64decode | int == 1", "((k3s_get_max_user_namespaces['content'] | b64decode | int >= 28633) or (k3s_os_family != \"redhat\"))", "k3s_current_user_subuid != \"UserNotFound:0:0\"", "k3s_current_user_subgid != \"UserNotFound:0:0\"", "k3s_current_user_subuid.split(':')[2] | int >= 65536", "k3s_current_user_subgid.split(':')[2] | int >= 65536", "ansible_env['XDG_RUNTIME_DIR'] is defined", "k3s_check_newuidmap_installed.rc == 0"], "success_msg": "All kernel parameters passed", "fail_msg": "Kernel parameters are not set correctly, please check https://github.com/rootless-containers/rootlesskit"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "post_checks_control_plane.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_control_plane.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that the control plane is available to accept connections", "module": "ansible.builtin.wait_for", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_control_plane.yml", "options": {"name": "Check that the control plane is available to accept connections", "when": "k3s_control_node"}, "module_options": {"port": "{{ k3s_runtime_config['https-listen-port'] | default('6443') }}", "host": "{{ k3s_runtime_config['bind-address'] | default('127.0.0.1') }}", "delay": 5, "sleep": 5, "timeout": 300}, "executable": "ansible.builtin.wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_containerd_registries.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_containerd_registries.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure containerd registries file exists", "module": "ansible.builtin.template", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_containerd_registries.yml", "options": {"name": "Ensure containerd registries file exists", "notify": ["reload {{ k3s_service_handler[ansible_service_mgr] }}", "restart k3s {{ k3s_service_handler[ansible_service_mgr] }}"], "become": "{{ k3s_become }}"}, "module_options": {"src": "registries.yaml.j2", "dest": "{{ k3s_config_dir }}/registries.yaml", "mode": 384}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_stopped.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s service is stopped", "module": "ansible.builtin.systemd", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml", "options": {"name": "Ensure k3s service is stopped", "when": "k3s_non_root is not defined or not k3s_non_root", "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "stopped", "enabled": "{{ k3s_start_on_boot }}"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s service is started", "module": "ansible.builtin.systemd", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_stopped.yml", "options": {"name": "Ensure k3s service is started", "when": ["k3s_non_root is defined", "k3s_non_root"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "stopped", "enabled": "{{ k3s_start_on_boot }}", "scope": "user"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_downloaded.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "options": {"when": ["k3s_release_version is not defined or not k3s_release_version", "not k3s_airgap"]}, "module_options": "pre_checks_version.yml", "executable": "pre_checks_version.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "options": {"when": "not k3s_airgap"}, "module_options": "ensure_downloads.yml", "executable": "ensure_downloads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_downloaded.yml", "options": {"when": "k3s_airgap"}, "module_options": "ensure_uploads.yml", "executable": "ensure_uploads.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_control_plane_started_systemd.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_systemd.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s control plane server is started", "module": "ansible.builtin.systemd", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_control_plane_started_systemd.yml", "options": {"name": "Ensure k3s control plane server is started", "register": "k3s_systemd_start_k3s", "until": "k3s_systemd_start_k3s is succeeded", "retries": 3, "delay": 3, "failed_when": ["k3s_systemd_start_k3s is not succeeded", "not ansible_check_mode"], "become": "{{ k3s_become }}"}, "module_options": {"name": "k3s", "state": "started", "enabled": "{{ k3s_start_on_boot }}", "scope": "{{ k3s_systemd_context }}"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_drain_and_remove_nodes.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check if kubectl exists", "module": "ansible.builtin.stat", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Check if kubectl exists", "register": "k3s_check_kubectl", "become": "{{ k3s_become }}"}, "module_options": {"path": "{{ k3s_install_dir }}/kubectl"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather a list of nodes", "module": "ansible.builtin.command", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Gather a list of nodes", "changed_when": false, "failed_when": false, "delegate_to": "{{ k3s_control_delegate }}", "run_once": true, "register": "kubectl_get_nodes_result", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl get nodes"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure uninstalled nodes are drained", "module": "ansible.builtin.command", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Ensure uninstalled nodes are drained", "delegate_to": "{{ k3s_control_delegate }}", "run_once": true, "when": ["kubectl_get_nodes_result.stdout is defined", "item in kubectl_get_nodes_result.stdout", "hostvars[item].k3s_state is defined", "hostvars[item].k3s_state == 'uninstalled'"], "loop": "{{ ansible_play_hosts }}", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl drain {{ item }}\n  --ignore-daemonsets\n  --{{ k3s_drain_command[ansible_version.string is version_compare('1.22', '>=')] }}\n  --force"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure uninstalled nodes are removed", "module": "ansible.builtin.command", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_drain_and_remove_nodes.yml", "options": {"name": "Ensure uninstalled nodes are removed", "delegate_to": "{{ k3s_control_delegate }}", "run_once": true, "when": ["kubectl_get_nodes_result.stdout is defined", "item in kubectl_get_nodes_result.stdout", "hostvars[item].k3s_state is defined", "hostvars[item].k3s_state == 'uninstalled'"], "loop": "{{ ansible_play_hosts }}", "become": "{{ k3s_become }}"}, "module_options": {"cmd": "{{ k3s_install_dir }}/kubectl delete node {{ item }}"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "post_checks_uninstalled.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that k3s is not running", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Check that k3s is not running", "failed_when": ["check_k3s_process.rc == 0", "not ansible_check_mode"], "changed_when": false, "register": "check_k3s_process"}, "module_options": {"cmd": "pgrep k3s"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if k3s binaries have not been removed", "module": "ansible.builtin.stat", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Fail if k3s binaries have not been removed", "register": "check_k3s_binaries_removed", "failed_when": "check_k3s_binaries_removed.stat.exists", "loop": ["k3s", "kubectl", "crictl", "ctr"]}, "module_options": {"path": "{{ k3s_install_dir }}/{{ item }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check k3s-killall.sh is removed", "module": "ansible.builtin.stat", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Check k3s-killall.sh is removed", "register": "check_k3s_killall"}, "module_options": {"path": "/usr/local/bin/k3s-killall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if k3s-killall.sh script still exists", "module": "ansible.builtin.fail", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Fail if k3s-killall.sh script still exists", "when": "check_k3s_killall.stat.exists"}, "module_options": {"msg": "k3s-killall.sh still exists, uninstall script failed. Please investigate."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check k3s-uninstall.sh is removed", "module": "ansible.builtin.stat", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Check k3s-uninstall.sh is removed", "register": "check_k3s_uninstall"}, "module_options": {"path": "/usr/local/bin/k3s-uninstall.sh"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if k3s-uninstall.sh script still exists", "module": "ansible.builtin.fail", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/post_checks_uninstalled.yml", "options": {"name": "Fail if k3s-uninstall.sh script still exists", "when": "check_k3s_uninstall.stat.exists"}, "module_options": {"msg": "k3s-uninstall.sh is still exists, uninstall script failed. Please investigate."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_variables.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check that k3s_release_version >= {{ k3s_min_version }}", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check that k3s_release_version >= {{ k3s_min_version }}", "when": "not k3s_airgap"}, "module_options": {"that": ["(k3s_release_version | replace('v', '')) is version_compare(k3s_min_version, '>=')"], "success_msg": "{{ k3s_release_version }} is supported by this role.", "fail_msg": "{{ k3s_release_version }} is not supported by this role, please use xanmanning.k3s v1.x."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check configuration in k3s_server and k3s_agent that needs alternate configuration", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check configuration in k3s_server and k3s_agent that needs alternate configuration", "loop": "{{ k3s_config_exclude }}"}, "module_options": {"that": ["(item.setting not in k3s_runtime_config)"], "success_msg": "{{ item.setting }} not found in server/agent config", "fail_msg": "{{ item.setting }} found in server/agent config. Please set {{ item.correction }} to use this option. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check configuration in k3s_server and k3s_agent for deprecated configuration", "module": "ansible.builtin.assert", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check configuration in k3s_server and k3s_agent for deprecated configuration", "loop": "{{ k3s_deprecated_config }}", "when": ["not k3s_airgap", "(item.when is not defined or (item.when is defined and (k3s_release_version | replace('v', '')) is version_compare(item.when, '>=')))", "not k3s_use_unsupported_config"]}, "module_options": {"that": ["(item.setting not in k3s_runtime_config) or (not k3s_runtime_config[item.setting])"], "success_msg": "{{ item.setting }} not found in server/agent config", "fail_msg": "{{ item.setting }} found in server/agent config. Please set {{ item.correction }} to use this option. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check configuration in k3s_server and k3s_agent against release version", "module": "ansible.builtin.assert", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_variables.yml", "options": {"name": "Check configuration in k3s_server and k3s_agent against release version", "loop": "{{ k3s_config_version_check }}", "when": ["k3s_config_version_check is defined", "item.setting in k3s_runtime_config"]}, "module_options": {"that": ["(k3s_release_version | replace('v', '')) is version_compare(item.version, '>=')"], "success_msg": "{{ item.setting }} is supported by {{ k3s_release_version }}", "fail_msg": "{{ item.setting }} is not supported in {{ k3s_release_version }}. Please update to v{{ item.version }} to use this option. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_validated.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml", "options": {}, "module_options": "post_checks_control_plane.yml", "executable": "post_checks_control_plane.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_validated.yml", "options": {}, "module_options": "post_checks_nodes.yml", "executable": "post_checks_nodes.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_cgroups.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check if {{ cgroup.name }} cgroup is enabled", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml", "options": {"name": "Check if {{ cgroup.name }} cgroup is enabled", "failed_when": false, "changed_when": false, "check_mode": false, "register": "k3s_check_cgroup_option"}, "module_options": {"cmd": "grep -E \"^{{ cgroup.name }}\\s+.*\\s+1$\" /proc/cgroups"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if {{ cgroup.name }} cgroup is not enabled", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_cgroups.yml", "options": {"name": "Fail if {{ cgroup.name }} cgroup is not enabled"}, "module_options": {"that": ["k3s_check_cgroup_option.rc == 0"], "fail_msg": "{{ cgroup.name }} cgroup disabled. {{ cgroup.documentation }}\n", "success_msg": "{{ cgroup.name }} cgroup enabled."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_pre_configuration.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s_build_cluster is false if running against a single node.", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s_build_cluster is false if running against a single node.", "when": ["ansible_play_hosts | length < 2", "k3s_registration_address is not defined"]}, "module_options": {"k3s_build_cluster": false}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s control node fact is set", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s control node fact is set", "when": "k3s_control_node is not defined"}, "module_options": {"k3s_control_node": "{{ not k3s_build_cluster }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s primary control node fact is set", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s primary control node fact is set", "when": "k3s_primary_control_node is not defined"}, "module_options": {"k3s_primary_control_node": "{{ not k3s_build_cluster }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s control plane port is captured", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s control plane port is captured", "delegate_to": "k3s_primary_control_node"}, "module_options": {"k3s_control_plane_port": "{{ k3s_runtime_config['https-listen-port'] | default(6443) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s node IP is configured when node-ip is defined", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure k3s node IP is configured when node-ip is defined", "when": ["k3s_runtime_config['node-ip'] is defined"]}, "module_options": {"k3s_node_ip": "{{ k3s_runtime_config['node-ip'] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure a count of control nodes is generated from ansible_play_hosts", "module": "ansible.builtin.set_fact", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure a count of control nodes is generated from ansible_play_hosts", "when": ["hostvars[item].k3s_control_node is defined", "hostvars[item].k3s_control_node"], "loop": "{{ ansible_play_hosts }}"}, "module_options": {"k3s_controller_list": "{{ k3s_controller_list + [ item ] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the control host", "module": "ansible.builtin.set_fact", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Set the control host", "when": "inventory_hostname == ansible_play_hosts[0]"}, "module_options": {"k3s_control_node": true}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure a count of control nodes is generated", "module": "ansible.builtin.set_fact", "index": 7, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure a count of control nodes is generated", "when": ["hostvars[item].k3s_control_node is defined", "hostvars[item].k3s_control_node"], "loop": "{{ ansible_play_hosts }}"}, "module_options": {"k3s_controller_list": "{{ k3s_controller_list + [ item ] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure a primary k3s control node is defined if multiple are found in ansible_play_hosts", "module": "ansible.builtin.set_fact", "index": 8, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure a primary k3s control node is defined if multiple are found in ansible_play_hosts", "when": ["k3s_controller_list is defined", "inventory_hostname == k3s_controller_list[0]", "k3s_build_cluster is defined", "k3s_build_cluster"]}, "module_options": {"k3s_primary_control_node": true}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure ansible_host is mapped to inventory_hostname", "module": "ansible.builtin.blockinfile", "index": 9, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure ansible_host is mapped to inventory_hostname", "check_mode": false, "when": "k3s_control_node is defined"}, "module_options": {"path": "/tmp/inventory.txt", "block": "{% for host in ansible_play_hosts %}\n{% filter replace('\\n', ' ') %}\n{{ host }}\n@@@\n{{ hostvars[host].ansible_host | default(hostvars[host].ansible_fqdn) | string }}\n@@@\nC_{{ hostvars[host].k3s_control_node | string }}\n@@@\nP_{{ hostvars[host].k3s_primary_control_node | default(False) | string }}\n{% endfilter %}\n@@@ END:{{ host }}\n{% endfor %}\n", "create": true, "mode": 384}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "Lookup control node from file", "module": "ansible.builtin.command", "index": 10, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Lookup control node from file", "changed_when": false, "check_mode": false, "register": "k3s_control_delegate_raw"}, "module_options": {"cmd": "grep -i '{{ 'P_True' if (k3s_controller_list | length > 1) else 'C_True' }}' /tmp/inventory.txt"}, "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure control node is delegated for obtaining a cluster token", "module": "ansible.builtin.set_fact", "index": 11, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure control node is delegated for obtaining a cluster token", "check_mode": false, "when": "k3s_control_delegate is not defined"}, "module_options": {"k3s_control_delegate": "{{ k3s_control_delegate_raw.stdout.split(' @@@ ')[0] }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the node registration address is defined from k3s_control_node_address", "module": "ansible.builtin.set_fact", "index": 12, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure the node registration address is defined from k3s_control_node_address", "check_mode": false, "when": "k3s_control_node_address is defined"}, "module_options": {"k3s_registration_address": "{{ k3s_control_node_address }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the node registration address is defined from node-ip", "module": "ansible.builtin.set_fact", "index": 13, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure the node registration address is defined from node-ip", "check_mode": false, "when": ["k3s_registration_address is not defined", "k3s_control_node_address is not defined", "hostvars[k3s_control_delegate].k3s_node_ip is defined"]}, "module_options": {"k3s_registration_address": "{{ hostvars[k3s_control_delegate].k3s_node_ip }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the node registration address is defined", "module": "ansible.builtin.set_fact", "index": 14, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_pre_configuration.yml", "options": {"name": "Ensure the node registration address is defined", "check_mode": false, "when": ["k3s_registration_address is not defined", "k3s_control_node_address is not defined"]}, "module_options": {"k3s_registration_address": "{{ hostvars[k3s_control_delegate].ansible_host | default(hostvars[k3s_control_delegate].ansible_fqdn) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "ensure_downloads.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure target host architecture information is set as a fact", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure target host architecture information is set as a fact", "check_mode": false}, "module_options": {"k3s_arch": "{{ k3s_arch_lookup[ansible_architecture].arch }}", "k3s_arch_suffix": "{{ k3s_arch_lookup[ansible_architecture].suffix }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure URLs are set as facts for downloading binaries", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure URLs are set as facts for downloading binaries", "check_mode": false}, "module_options": {"k3s_binary_url": "{{ k3s_github_download_url }}/{{ k3s_release_version }}/k3s{{ k3s_arch_suffix }}", "k3s_hash_url": "{{ k3s_github_download_url }}/{{ k3s_release_version }}/sha256sum-{{ k3s_arch }}.txt"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Override k3s_binary_url and k3s_hash_url facts for testing specific commit", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Override k3s_binary_url and k3s_hash_url facts for testing specific commit", "when": ["k3s_release_version | regex_search(\"^[a-z0-9]{40}$\")"], "check_mode": false}, "module_options": {"k3s_binary_url": "https://storage.googleapis.com/k3s-ci-builds/k3s{{ k3s_arch_suffix }}-{{ k3s_release_version }}", "k3s_hash_url": "https://storage.googleapis.com/k3s-ci-builds/k3s{{ k3s_arch_suffix }}-{{ k3s_release_version }}.sha256sum"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the k3s hashsum is downloaded", "module": "ansible.builtin.uri", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure the k3s hashsum is downloaded", "register": "k3s_hash_sum_raw", "check_mode": false}, "module_options": {"url": "{{ k3s_hash_url }}", "return_content": true}, "executable": "ansible.builtin.uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure sha256sum is set from hashsum variable", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure sha256sum is set from hashsum variable", "changed_when": false, "check_mode": false}, "module_options": {"k3s_hash_sum": "{{ (k3s_hash_sum_raw.content.split('\n') | select('search', 'k3s' + k3s_arch_suffix) | reject('search', 'images') | first).split() | first }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure installation directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure installation directory exists"}, "module_options": {"path": "{{ k3s_install_dir }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure k3s binary is downloaded", "module": "ansible.builtin.get_url", "index": 6, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/ensure_downloads.yml", "options": {"name": "Ensure k3s binary is downloaded", "become": "{{ k3s_become }}"}, "module_options": {"url": "{{ k3s_binary_url }}", "dest": "{{ k3s_install_dir }}/k3s-{{ k3s_release_version }}", "checksum": "sha256:{{ k3s_hash_sum }}", "mode": 493}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "state_stopped.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_stopped.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/state_stopped.yml", "options": {}, "module_options": "ensure_stopped.yml", "executable": "ensure_stopped.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "determine_systemd_context.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/determine_systemd_context.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure systemd context is correct if we are running k3s rootless", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/determine_systemd_context.yml", "options": {"name": "Ensure systemd context is correct if we are running k3s rootless", "when": ["k3s_runtime_config is defined", "k3s_runtime_config.rootless is defined", "k3s_runtime_config.rootless"]}, "module_options": {"k3s_systemd_context": "user", "k3s_systemd_unit_dir": "{{ ansible_user_dir }}/.config/systemd/user"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "", "module": "import_tasks", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml", "options": {}, "module_options": "pre_checks.yml", "executable": "pre_checks.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/main.yml", "options": {}, "module_options": "state_{{ (k3s_state | lower) | default('installed') }}.yml", "executable": "state_{{ (k3s_state | lower) | default('installed') }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_experimental_variables.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check if embedded etcd datastore is enabled and marked as experimental", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml", "options": {"name": "Check if embedded etcd datastore is enabled and marked as experimental", "when": ["k3s_etcd_datastore is defined", "k3s_etcd_datastore", "(k3s_release_version | replace('v', '')) is version_compare(\"1.19.5\", '<')"]}, "module_options": {"that": ["k3s_use_experimental is defined and k3s_use_experimental"], "success_msg": "Experimental variables are defined and enabled.", "fail_msg": "Experimental variable k3s_etcd_datastore has been configured. If you want to use this ensure you set k3s_use_experimental,"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if any experimental variables are configure and if they are enabled with k3s_use_experimental", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_experimental_variables.yml", "options": {"name": "Check if any experimental variables are configure and if they are enabled with k3s_use_experimental", "loop": "{{ k3s_experimental_config }}", "when": ["(item.setting in k3s_runtime_config and k3s_runtime_config[item.setting])", "((item.until is not defined) or (item.until is defined and (k3s_release_version | replace('v', '')) is version_compare(item.until, '<')))"]}, "module_options": {"that": ["k3s_use_experimental is defined and k3s_use_experimental"], "success_msg": "Experimental variables are defined and enabled.", "fail_msg": "Experimental variable {{ item.setting }} has been configured. If you want to use this ensure you set k3s_use_experimental. {% if item.document is defined %} Documentation: {{ item.documentation }} {% endif %}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "pre_checks_version.yml", "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure k3s_release_version is set to default if false", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Ensure k3s_release_version is set to default if false", "check_mode": false, "when": ["k3s_release_version is defined", "not k3s_release_version"]}, "module_options": {"k3s_release_version": "{{ k3s_release_channel }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the default release channel is set", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Ensure the default release channel is set", "check_mode": false}, "module_options": {"k3s_release_channel": "{{ k3s_release_version | default('stable') }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the latest release version from k3s.io", "module": "ansible.builtin.uri", "index": 2, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Get the latest release version from k3s.io", "register": "k3s_latest_release", "no_log": true, "check_mode": false}, "module_options": {"url": "{{ k3s_api_releases }}", "return_content": true, "body_format": "json"}, "executable": "ansible.builtin.uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the release version is set as a fact", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "./role-test/testdata/xanmanning-k3s/xanmanning.k3s/tasks/pre_checks_version.yml", "options": {"name": "Ensure the release version is set as a fact", "loop": "{{ k3s_latest_release.json.data }}", "check_mode": false, "when": ["item.name == k3s_release_channel", "item.type == \"channel\""]}, "module_options": {"k3s_release_version": "{{ item.latest }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}], "role": "xanmanning.k3s", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}}, "annotations": {}}