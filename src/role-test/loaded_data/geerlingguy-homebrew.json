{"py/object": "struct4.Repository", "name": "", "path": "", "my_collection_name": "", "playbooks": [], "roles": [], "installed_collections_path": "", "installed_collections": [], "installed_roles_path": "./role-test/testdata/geerlingguy-homebrew", "installed_roles": [{"py/object": "struct4.Role", "name": "elliotweiser.osx-command-line-tools", "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools", "fqcn": "elliotweiser.osx-command-line-tools", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Am I running on Mac OS X?", "module": "fail", "index": 0, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Am I running on Mac OS X?", "when": "ansible_distribution != 'MacOSX'"}, "module_options": {"msg": "Target host is not running Mac OS X"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove existing Command Line Tools installation", "module": "file", "index": 1, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Remove existing Command Line Tools installation", "when": "force_install", "become": true}, "module_options": {"path": "{{ clt_path }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that the Command Line Tools path is present", "module": "stat", "index": 2, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check that the Command Line Tools path is present", "register": "clt"}, "module_options": {"path": "{{ clt_path }}"}, "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Is the C++ compiler useable?", "module": "command", "index": 3, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Is the C++ compiler useable?", "register": "compiler", "check_mode": false, "ignore_errors": true, "changed_when": false}, "module_options": "g++ --version", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check the Command Line Tools package metadata", "module": "command", "index": 4, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check the Command Line Tools package metadata", "register": "pkg_info", "check_mode": false, "ignore_errors": true, "changed_when": false}, "module_options": "pkgutil --pkg-info=com.apple.pkg.CLTools_Executables", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare to install Command Line Tools", "module": "file", "index": 5, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Prepare to install Command Line Tools", "when": "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists"}, "module_options": {"path": "/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress", "state": "touch"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for Command Line Tools in Software Update list (MacOS < 10.15).", "module": "shell", "index": 6, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check for Command Line Tools in Software Update list (MacOS < 10.15).", "args": {"executable": "/bin/bash"}, "register": "su_list_old", "when": ["ansible_distribution_version is version('10.15', '<')", "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists"], "changed_when": false, "failed_when": "su_list_old.rc != 0 or su_list_old.stdout|length == 0"}, "module_options": "set -o pipefail; softwareupdate -l | grep -B 1 -E 'Command Line Tools' | awk -F'*' '/^ +\\*/ {print $2}' | sed 's/^ *//' | grep -iE '[0-9|.]' | sort | tail -n1\n", "executable": "shell", "executable_type": "Module", "fqcn": "ansible.builtin.shell", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for Command Line Tools in Software Update list (MacOS >= 10.15).", "module": "shell", "index": 7, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check for Command Line Tools in Software Update list (MacOS >= 10.15).", "args": {"executable": "/bin/bash"}, "register": "su_list_new", "when": ["ansible_distribution_version is version('10.15', '>=')", "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists"], "changed_when": false, "failed_when": "su_list_new.rc != 0 or su_list_new.stdout|length == 0"}, "module_options": "set -o pipefail; softwareupdate -l | grep -B 1 -E 'Command Line Tools' | awk -F'*' '/^\\*/ {print $2}' | sed 's/^ Label: //' | grep -iE '[0-9|.]' | sort | tail -n1\n", "executable": "shell", "executable_type": "Module", "fqcn": "ansible.builtin.shell", "annotations": {}}, {"py/object": "struct4.Task", "name": "set su_list for (MacOS < 10.15).", "module": "set_fact", "index": 8, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "set su_list for (MacOS < 10.15).", "when": "su_list_old is not skipped"}, "module_options": {"su_list": "{{ su_list_old }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "set su_list for (MacOS >= 10.15).", "module": "set_fact", "index": 9, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "set su_list for (MacOS >= 10.15).", "when": "su_list_new is not skipped"}, "module_options": {"su_list": "{{ su_list_new }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Command Line Tools", "module": "command", "index": 10, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Install Command Line Tools", "when": "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists", "notify": ["Cleanup"], "register": "su_result", "failed_when": "su_result.rc != 0 or 'Error installing updates.' in su_result.stdout"}, "module_options": "softwareupdate -i '{{ su_list.stdout }}'", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "elliotweiser.osx-command-line-tools", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "geerlingguy.homebrew", "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew", "fqcn": "geerlingguy.homebrew", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Determine Homebrew ownership variables", "module": "set_fact", "index": 0, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Determine Homebrew ownership variables"}, "module_options": {"homebrew_user": "{{ homebrew_user | default(ansible_user_id) }}", "homebrew_group": "{{ homebrew_group | default(ansible_user_gid) }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Homebrew parent directory has correct permissions (MacOS >= 10.13).", "module": "file", "index": 1, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew parent directory has correct permissions (MacOS >= 10.13).", "become": true, "when": "ansible_distribution_version is version('10.13', '>=')"}, "module_options": {"path": "{{ homebrew_prefix }}", "owner": "root", "state": "directory"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Homebrew parent directory has correct permissions (MacOS < 10.13).", "module": "file", "index": 2, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew parent directory has correct permissions (MacOS < 10.13).", "become": true, "when": "ansible_distribution_version is version('10.13', '<')"}, "module_options": {"path": "{{ homebrew_prefix }}", "owner": "root", "group": "admin", "state": "directory", "mode": 509}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Homebrew directory exists.", "module": "file", "index": 3, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew directory exists.", "become": true}, "module_options": {"path": "{{ homebrew_install_path }}", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}", "state": "directory", "mode": 509}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Homebrew is installed.", "module": "git", "index": 4, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew is installed.", "become": true, "become_user": "{{ homebrew_user }}"}, "module_options": {"repo": "{{ homebrew_repo }}", "version": "master", "dest": "{{ homebrew_install_path }}", "update": false, "depth": 1}, "executable": "git", "executable_type": "Module", "fqcn": "ansible.builtin.git", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure proper permissions and ownership on homebrew_brew_bin_path dirs.", "module": "file", "index": 5, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure proper permissions and ownership on homebrew_brew_bin_path dirs.", "become": true}, "module_options": {"path": "{{ homebrew_brew_bin_path }}", "state": "directory", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}", "mode": 509}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure proper ownership on homebrew_install_path subdirs.", "module": "file", "index": 6, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure proper ownership on homebrew_install_path subdirs.", "become": true}, "module_options": {"path": "{{ homebrew_install_path }}", "state": "directory", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if homebrew binary is already in place.", "module": "stat", "index": 7, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Check if homebrew binary is already in place.", "register": "homebrew_binary", "check_mode": false}, "module_options": "path={{ homebrew_brew_bin_path }}/brew", "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink brew to homebrew_brew_bin_path.", "module": "file", "index": 8, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Symlink brew to homebrew_brew_bin_path.", "when": "not homebrew_binary.stat.exists", "become": true}, "module_options": {"src": "{{ homebrew_install_path }}/bin/brew", "dest": "{{ homebrew_brew_bin_path }}/brew", "state": "link"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure proper homebrew folders are in place.", "module": "file", "index": 9, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure proper homebrew folders are in place.", "become": true, "loop": "{{ homebrew_folders_base + homebrew_folders_additional }}"}, "module_options": {"path": "{{ homebrew_prefix }}/{{ item }}", "state": "directory", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Force update brew after installation.", "module": "command", "index": 10, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Force update brew after installation.", "when": "not homebrew_binary.stat.exists"}, "module_options": "{{ homebrew_brew_bin_path }}/brew update --force", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Where is the cache?", "module": "command", "index": 11, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Where is the cache?", "register": "homebrew_cache_path", "changed_when": false, "check_mode": false}, "module_options": "{{ homebrew_brew_bin_path }}/brew --cache", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configured taps are tapped.", "module": "homebrew_tap", "index": 12, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure configured taps are tapped.", "loop": "{{ homebrew_taps }}"}, "module_options": {"tap": "{{ item.name | default(item) }}", "url": "{{ item.url | default(omit) }}", "state": "present"}, "executable": "homebrew_tap", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure blacklisted cask applications are not installed.", "module": "homebrew_cask", "index": 13, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure blacklisted cask applications are not installed.", "loop": "{{ homebrew_cask_uninstalled_apps }}"}, "module_options": "name={{ item }} state=absent", "executable": "homebrew_cask", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install configured cask applications.", "module": "homebrew_cask", "index": 14, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Install configured cask applications.", "loop": "{{ homebrew_cask_apps }}", "notify": ["Clear homebrew cache"]}, "module_options": {"name": "{{ item.name | default(item) }}", "state": "present", "install_options": "{{ item.install_options | default('appdir=' + homebrew_cask_appdir) }}", "accept_external_apps": "{{ homebrew_cask_accept_external_apps }}"}, "executable": "homebrew_cask", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure blacklisted homebrew packages are not installed.", "module": "homebrew", "index": 15, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure blacklisted homebrew packages are not installed.", "loop": "{{ homebrew_uninstalled_packages }}"}, "module_options": "name={{ item }} state=absent", "executable": "homebrew", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configured homebrew packages are installed.", "module": "homebrew", "index": 16, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure configured homebrew packages are installed.", "loop": "{{ homebrew_installed_packages }}", "notify": ["Clear homebrew cache"]}, "module_options": {"name": "{{ item.name | default(item) }}", "install_options": "{{ item.install_options | default(omit) }}", "state": "present"}, "executable": "homebrew", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upgrade all homebrew packages (if configured).", "module": "homebrew", "index": 17, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Upgrade all homebrew packages (if configured).", "when": "homebrew_upgrade_all_packages", "notify": ["Clear homebrew cache"]}, "module_options": "update_homebrew=yes upgrade_all=yes", "executable": "homebrew", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for Brewfile.", "module": "stat", "index": 18, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Check for Brewfile.", "register": "homebrew_brewfile", "check_mode": false}, "module_options": {"path": "{{ homebrew_brewfile_dir }}/Brewfile"}, "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install from Brewfile.", "module": "command", "index": 19, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Install from Brewfile.", "when": "homebrew_brewfile.stat.exists and homebrew_use_brewfile"}, "module_options": "brew bundle chdir={{ homebrew_brewfile_dir }}", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "geerlingguy.homebrew", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}], "modules": [], "taskfiles": [], "version": "", "module_dict": {}, "task_dict": {"{\"path\": \"./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Am I running on Mac OS X?", "module": "fail", "index": 0, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Am I running on Mac OS X?", "when": "ansible_distribution != 'MacOSX'"}, "module_options": {"msg": "Target host is not running Mac OS X"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Remove existing Command Line Tools installation", "module": "file", "index": 1, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Remove existing Command Line Tools installation", "when": "force_install", "become": true}, "module_options": {"path": "{{ clt_path }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Check that the Command Line Tools path is present", "module": "stat", "index": 2, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check that the Command Line Tools path is present", "register": "clt"}, "module_options": {"path": "{{ clt_path }}"}, "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Is the C++ compiler useable?", "module": "command", "index": 3, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Is the C++ compiler useable?", "register": "compiler", "check_mode": false, "ignore_errors": true, "changed_when": false}, "module_options": "g++ --version", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Check the Command Line Tools package metadata", "module": "command", "index": 4, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check the Command Line Tools package metadata", "register": "pkg_info", "check_mode": false, "ignore_errors": true, "changed_when": false}, "module_options": "pkgutil --pkg-info=com.apple.pkg.CLTools_Executables", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Prepare to install Command Line Tools", "module": "file", "index": 5, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Prepare to install Command Line Tools", "when": "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists"}, "module_options": {"path": "/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress", "state": "touch"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Check for Command Line Tools in Software Update list (MacOS < 10.15).", "module": "shell", "index": 6, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check for Command Line Tools in Software Update list (MacOS < 10.15).", "args": {"executable": "/bin/bash"}, "register": "su_list_old", "when": ["ansible_distribution_version is version('10.15', '<')", "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists"], "changed_when": false, "failed_when": "su_list_old.rc != 0 or su_list_old.stdout|length == 0"}, "module_options": "set -o pipefail; softwareupdate -l | grep -B 1 -E 'Command Line Tools' | awk -F'*' '/^ +\\*/ {print $2}' | sed 's/^ *//' | grep -iE '[0-9|.]' | sort | tail -n1\n", "executable": "shell", "executable_type": "Module", "fqcn": "ansible.builtin.shell", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Check for Command Line Tools in Software Update list (MacOS >= 10.15).", "module": "shell", "index": 7, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check for Command Line Tools in Software Update list (MacOS >= 10.15).", "args": {"executable": "/bin/bash"}, "register": "su_list_new", "when": ["ansible_distribution_version is version('10.15', '>=')", "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists"], "changed_when": false, "failed_when": "su_list_new.rc != 0 or su_list_new.stdout|length == 0"}, "module_options": "set -o pipefail; softwareupdate -l | grep -B 1 -E 'Command Line Tools' | awk -F'*' '/^\\*/ {print $2}' | sed 's/^ Label: //' | grep -iE '[0-9|.]' | sort | tail -n1\n", "executable": "shell", "executable_type": "Module", "fqcn": "ansible.builtin.shell", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "set su_list for (MacOS < 10.15).", "module": "set_fact", "index": 8, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "set su_list for (MacOS < 10.15).", "when": "su_list_old is not skipped"}, "module_options": {"su_list": "{{ su_list_old }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "set su_list for (MacOS >= 10.15).", "module": "set_fact", "index": 9, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "set su_list for (MacOS >= 10.15).", "when": "su_list_new is not skipped"}, "module_options": {"su_list": "{{ su_list_new }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "Install Command Line Tools", "module": "command", "index": 10, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Install Command Line Tools", "when": "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists", "notify": ["Cleanup"], "register": "su_result", "failed_when": "su_result.rc != 0 or 'Error installing updates.' in su_result.stdout"}, "module_options": "softwareupdate -i '{{ su_list.stdout }}'", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Determine Homebrew ownership variables", "module": "set_fact", "index": 0, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Determine Homebrew ownership variables"}, "module_options": {"homebrew_user": "{{ homebrew_user | default(ansible_user_id) }}", "homebrew_group": "{{ homebrew_group | default(ansible_user_gid) }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Ensure Homebrew parent directory has correct permissions (MacOS >= 10.13).", "module": "file", "index": 1, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew parent directory has correct permissions (MacOS >= 10.13).", "become": true, "when": "ansible_distribution_version is version('10.13', '>=')"}, "module_options": {"path": "{{ homebrew_prefix }}", "owner": "root", "state": "directory"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Ensure Homebrew parent directory has correct permissions (MacOS < 10.13).", "module": "file", "index": 2, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew parent directory has correct permissions (MacOS < 10.13).", "become": true, "when": "ansible_distribution_version is version('10.13', '<')"}, "module_options": {"path": "{{ homebrew_prefix }}", "owner": "root", "group": "admin", "state": "directory", "mode": 509}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Ensure Homebrew directory exists.", "module": "file", "index": 3, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew directory exists.", "become": true}, "module_options": {"path": "{{ homebrew_install_path }}", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}", "state": "directory", "mode": 509}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Ensure Homebrew is installed.", "module": "git", "index": 4, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew is installed.", "become": true, "become_user": "{{ homebrew_user }}"}, "module_options": {"repo": "{{ homebrew_repo }}", "version": "master", "dest": "{{ homebrew_install_path }}", "update": false, "depth": 1}, "executable": "git", "executable_type": "Module", "fqcn": "ansible.builtin.git", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Ensure proper permissions and ownership on homebrew_brew_bin_path dirs.", "module": "file", "index": 5, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure proper permissions and ownership on homebrew_brew_bin_path dirs.", "become": true}, "module_options": {"path": "{{ homebrew_brew_bin_path }}", "state": "directory", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}", "mode": 509}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Ensure proper ownership on homebrew_install_path subdirs.", "module": "file", "index": 6, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure proper ownership on homebrew_install_path subdirs.", "become": true}, "module_options": {"path": "{{ homebrew_install_path }}", "state": "directory", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Check if homebrew binary is already in place.", "module": "stat", "index": 7, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Check if homebrew binary is already in place.", "register": "homebrew_binary", "check_mode": false}, "module_options": "path={{ homebrew_brew_bin_path }}/brew", "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "Symlink brew to homebrew_brew_bin_path.", "module": "file", "index": 8, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Symlink brew to homebrew_brew_bin_path.", "when": "not homebrew_binary.stat.exists", "become": true}, "module_options": {"src": "{{ homebrew_install_path }}/bin/brew", "dest": "{{ homebrew_brew_bin_path }}/brew", "state": "link"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "Ensure proper homebrew folders are in place.", "module": "file", "index": 9, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure proper homebrew folders are in place.", "become": true, "loop": "{{ homebrew_folders_base + homebrew_folders_additional }}"}, "module_options": {"path": "{{ homebrew_prefix }}/{{ item }}", "state": "directory", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "Force update brew after installation.", "module": "command", "index": 10, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Force update brew after installation.", "when": "not homebrew_binary.stat.exists"}, "module_options": "{{ homebrew_brew_bin_path }}/brew update --force", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 11}": {"py/object": "struct4.Task", "name": "Where is the cache?", "module": "command", "index": 11, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Where is the cache?", "register": "homebrew_cache_path", "changed_when": false, "check_mode": false}, "module_options": "{{ homebrew_brew_bin_path }}/brew --cache", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 12}": {"py/object": "struct4.Task", "name": "Ensure configured taps are tapped.", "module": "homebrew_tap", "index": 12, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure configured taps are tapped.", "loop": "{{ homebrew_taps }}"}, "module_options": {"tap": "{{ item.name | default(item) }}", "url": "{{ item.url | default(omit) }}", "state": "present"}, "executable": "homebrew_tap", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 13}": {"py/object": "struct4.Task", "name": "Ensure blacklisted cask applications are not installed.", "module": "homebrew_cask", "index": 13, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure blacklisted cask applications are not installed.", "loop": "{{ homebrew_cask_uninstalled_apps }}"}, "module_options": "name={{ item }} state=absent", "executable": "homebrew_cask", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 14}": {"py/object": "struct4.Task", "name": "Install configured cask applications.", "module": "homebrew_cask", "index": 14, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Install configured cask applications.", "loop": "{{ homebrew_cask_apps }}", "notify": ["Clear homebrew cache"]}, "module_options": {"name": "{{ item.name | default(item) }}", "state": "present", "install_options": "{{ item.install_options | default('appdir=' + homebrew_cask_appdir) }}", "accept_external_apps": "{{ homebrew_cask_accept_external_apps }}"}, "executable": "homebrew_cask", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 15}": {"py/object": "struct4.Task", "name": "Ensure blacklisted homebrew packages are not installed.", "module": "homebrew", "index": 15, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure blacklisted homebrew packages are not installed.", "loop": "{{ homebrew_uninstalled_packages }}"}, "module_options": "name={{ item }} state=absent", "executable": "homebrew", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 16}": {"py/object": "struct4.Task", "name": "Ensure configured homebrew packages are installed.", "module": "homebrew", "index": 16, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure configured homebrew packages are installed.", "loop": "{{ homebrew_installed_packages }}", "notify": ["Clear homebrew cache"]}, "module_options": {"name": "{{ item.name | default(item) }}", "install_options": "{{ item.install_options | default(omit) }}", "state": "present"}, "executable": "homebrew", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 17}": {"py/object": "struct4.Task", "name": "Upgrade all homebrew packages (if configured).", "module": "homebrew", "index": 17, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Upgrade all homebrew packages (if configured).", "when": "homebrew_upgrade_all_packages", "notify": ["Clear homebrew cache"]}, "module_options": "update_homebrew=yes upgrade_all=yes", "executable": "homebrew", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 18}": {"py/object": "struct4.Task", "name": "Check for Brewfile.", "module": "stat", "index": 18, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Check for Brewfile.", "register": "homebrew_brewfile", "check_mode": false}, "module_options": {"path": "{{ homebrew_brewfile_dir }}/Brewfile"}, "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml\", \"index\": 19}": {"py/object": "struct4.Task", "name": "Install from Brewfile.", "module": "command", "index": 19, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Install from Brewfile.", "when": "homebrew_brewfile.stat.exists and homebrew_use_brewfile"}, "module_options": "brew bundle chdir={{ homebrew_brewfile_dir }}", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}}, "taskfile_dict": {"./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml": {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Am I running on Mac OS X?", "module": "fail", "index": 0, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Am I running on Mac OS X?", "when": "ansible_distribution != 'MacOSX'"}, "module_options": {"msg": "Target host is not running Mac OS X"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove existing Command Line Tools installation", "module": "file", "index": 1, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Remove existing Command Line Tools installation", "when": "force_install", "become": true}, "module_options": {"path": "{{ clt_path }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that the Command Line Tools path is present", "module": "stat", "index": 2, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check that the Command Line Tools path is present", "register": "clt"}, "module_options": {"path": "{{ clt_path }}"}, "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Is the C++ compiler useable?", "module": "command", "index": 3, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Is the C++ compiler useable?", "register": "compiler", "check_mode": false, "ignore_errors": true, "changed_when": false}, "module_options": "g++ --version", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check the Command Line Tools package metadata", "module": "command", "index": 4, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check the Command Line Tools package metadata", "register": "pkg_info", "check_mode": false, "ignore_errors": true, "changed_when": false}, "module_options": "pkgutil --pkg-info=com.apple.pkg.CLTools_Executables", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare to install Command Line Tools", "module": "file", "index": 5, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Prepare to install Command Line Tools", "when": "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists"}, "module_options": {"path": "/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress", "state": "touch"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for Command Line Tools in Software Update list (MacOS < 10.15).", "module": "shell", "index": 6, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check for Command Line Tools in Software Update list (MacOS < 10.15).", "args": {"executable": "/bin/bash"}, "register": "su_list_old", "when": ["ansible_distribution_version is version('10.15', '<')", "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists"], "changed_when": false, "failed_when": "su_list_old.rc != 0 or su_list_old.stdout|length == 0"}, "module_options": "set -o pipefail; softwareupdate -l | grep -B 1 -E 'Command Line Tools' | awk -F'*' '/^ +\\*/ {print $2}' | sed 's/^ *//' | grep -iE '[0-9|.]' | sort | tail -n1\n", "executable": "shell", "executable_type": "Module", "fqcn": "ansible.builtin.shell", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for Command Line Tools in Software Update list (MacOS >= 10.15).", "module": "shell", "index": 7, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check for Command Line Tools in Software Update list (MacOS >= 10.15).", "args": {"executable": "/bin/bash"}, "register": "su_list_new", "when": ["ansible_distribution_version is version('10.15', '>=')", "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists"], "changed_when": false, "failed_when": "su_list_new.rc != 0 or su_list_new.stdout|length == 0"}, "module_options": "set -o pipefail; softwareupdate -l | grep -B 1 -E 'Command Line Tools' | awk -F'*' '/^\\*/ {print $2}' | sed 's/^ Label: //' | grep -iE '[0-9|.]' | sort | tail -n1\n", "executable": "shell", "executable_type": "Module", "fqcn": "ansible.builtin.shell", "annotations": {}}, {"py/object": "struct4.Task", "name": "set su_list for (MacOS < 10.15).", "module": "set_fact", "index": 8, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "set su_list for (MacOS < 10.15).", "when": "su_list_old is not skipped"}, "module_options": {"su_list": "{{ su_list_old }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "set su_list for (MacOS >= 10.15).", "module": "set_fact", "index": 9, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "set su_list for (MacOS >= 10.15).", "when": "su_list_new is not skipped"}, "module_options": {"su_list": "{{ su_list_new }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Command Line Tools", "module": "command", "index": 10, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Install Command Line Tools", "when": "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists", "notify": ["Cleanup"], "register": "su_result", "failed_when": "su_result.rc != 0 or 'Error installing updates.' in su_result.stdout"}, "module_options": "softwareupdate -i '{{ su_list.stdout }}'", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "elliotweiser.osx-command-line-tools", "used_in": [], "annotations": {}}, "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml": {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Determine Homebrew ownership variables", "module": "set_fact", "index": 0, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Determine Homebrew ownership variables"}, "module_options": {"homebrew_user": "{{ homebrew_user | default(ansible_user_id) }}", "homebrew_group": "{{ homebrew_group | default(ansible_user_gid) }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Homebrew parent directory has correct permissions (MacOS >= 10.13).", "module": "file", "index": 1, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew parent directory has correct permissions (MacOS >= 10.13).", "become": true, "when": "ansible_distribution_version is version('10.13', '>=')"}, "module_options": {"path": "{{ homebrew_prefix }}", "owner": "root", "state": "directory"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Homebrew parent directory has correct permissions (MacOS < 10.13).", "module": "file", "index": 2, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew parent directory has correct permissions (MacOS < 10.13).", "become": true, "when": "ansible_distribution_version is version('10.13', '<')"}, "module_options": {"path": "{{ homebrew_prefix }}", "owner": "root", "group": "admin", "state": "directory", "mode": 509}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Homebrew directory exists.", "module": "file", "index": 3, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew directory exists.", "become": true}, "module_options": {"path": "{{ homebrew_install_path }}", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}", "state": "directory", "mode": 509}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Homebrew is installed.", "module": "git", "index": 4, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew is installed.", "become": true, "become_user": "{{ homebrew_user }}"}, "module_options": {"repo": "{{ homebrew_repo }}", "version": "master", "dest": "{{ homebrew_install_path }}", "update": false, "depth": 1}, "executable": "git", "executable_type": "Module", "fqcn": "ansible.builtin.git", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure proper permissions and ownership on homebrew_brew_bin_path dirs.", "module": "file", "index": 5, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure proper permissions and ownership on homebrew_brew_bin_path dirs.", "become": true}, "module_options": {"path": "{{ homebrew_brew_bin_path }}", "state": "directory", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}", "mode": 509}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure proper ownership on homebrew_install_path subdirs.", "module": "file", "index": 6, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure proper ownership on homebrew_install_path subdirs.", "become": true}, "module_options": {"path": "{{ homebrew_install_path }}", "state": "directory", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if homebrew binary is already in place.", "module": "stat", "index": 7, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Check if homebrew binary is already in place.", "register": "homebrew_binary", "check_mode": false}, "module_options": "path={{ homebrew_brew_bin_path }}/brew", "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink brew to homebrew_brew_bin_path.", "module": "file", "index": 8, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Symlink brew to homebrew_brew_bin_path.", "when": "not homebrew_binary.stat.exists", "become": true}, "module_options": {"src": "{{ homebrew_install_path }}/bin/brew", "dest": "{{ homebrew_brew_bin_path }}/brew", "state": "link"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure proper homebrew folders are in place.", "module": "file", "index": 9, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure proper homebrew folders are in place.", "become": true, "loop": "{{ homebrew_folders_base + homebrew_folders_additional }}"}, "module_options": {"path": "{{ homebrew_prefix }}/{{ item }}", "state": "directory", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Force update brew after installation.", "module": "command", "index": 10, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Force update brew after installation.", "when": "not homebrew_binary.stat.exists"}, "module_options": "{{ homebrew_brew_bin_path }}/brew update --force", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Where is the cache?", "module": "command", "index": 11, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Where is the cache?", "register": "homebrew_cache_path", "changed_when": false, "check_mode": false}, "module_options": "{{ homebrew_brew_bin_path }}/brew --cache", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configured taps are tapped.", "module": "homebrew_tap", "index": 12, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure configured taps are tapped.", "loop": "{{ homebrew_taps }}"}, "module_options": {"tap": "{{ item.name | default(item) }}", "url": "{{ item.url | default(omit) }}", "state": "present"}, "executable": "homebrew_tap", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure blacklisted cask applications are not installed.", "module": "homebrew_cask", "index": 13, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure blacklisted cask applications are not installed.", "loop": "{{ homebrew_cask_uninstalled_apps }}"}, "module_options": "name={{ item }} state=absent", "executable": "homebrew_cask", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install configured cask applications.", "module": "homebrew_cask", "index": 14, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Install configured cask applications.", "loop": "{{ homebrew_cask_apps }}", "notify": ["Clear homebrew cache"]}, "module_options": {"name": "{{ item.name | default(item) }}", "state": "present", "install_options": "{{ item.install_options | default('appdir=' + homebrew_cask_appdir) }}", "accept_external_apps": "{{ homebrew_cask_accept_external_apps }}"}, "executable": "homebrew_cask", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure blacklisted homebrew packages are not installed.", "module": "homebrew", "index": 15, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure blacklisted homebrew packages are not installed.", "loop": "{{ homebrew_uninstalled_packages }}"}, "module_options": "name={{ item }} state=absent", "executable": "homebrew", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configured homebrew packages are installed.", "module": "homebrew", "index": 16, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure configured homebrew packages are installed.", "loop": "{{ homebrew_installed_packages }}", "notify": ["Clear homebrew cache"]}, "module_options": {"name": "{{ item.name | default(item) }}", "install_options": "{{ item.install_options | default(omit) }}", "state": "present"}, "executable": "homebrew", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upgrade all homebrew packages (if configured).", "module": "homebrew", "index": 17, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Upgrade all homebrew packages (if configured).", "when": "homebrew_upgrade_all_packages", "notify": ["Clear homebrew cache"]}, "module_options": "update_homebrew=yes upgrade_all=yes", "executable": "homebrew", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for Brewfile.", "module": "stat", "index": 18, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Check for Brewfile.", "register": "homebrew_brewfile", "check_mode": false}, "module_options": {"path": "{{ homebrew_brewfile_dir }}/Brewfile"}, "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install from Brewfile.", "module": "command", "index": 19, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Install from Brewfile.", "when": "homebrew_brewfile.stat.exists and homebrew_use_brewfile"}, "module_options": "brew bundle chdir={{ homebrew_brewfile_dir }}", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "geerlingguy.homebrew", "used_in": [], "annotations": {}}}, "role_dict": {"elliotweiser.osx-command-line-tools": {"py/object": "struct4.Role", "name": "elliotweiser.osx-command-line-tools", "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools", "fqcn": "elliotweiser.osx-command-line-tools", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Am I running on Mac OS X?", "module": "fail", "index": 0, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Am I running on Mac OS X?", "when": "ansible_distribution != 'MacOSX'"}, "module_options": {"msg": "Target host is not running Mac OS X"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove existing Command Line Tools installation", "module": "file", "index": 1, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Remove existing Command Line Tools installation", "when": "force_install", "become": true}, "module_options": {"path": "{{ clt_path }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that the Command Line Tools path is present", "module": "stat", "index": 2, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check that the Command Line Tools path is present", "register": "clt"}, "module_options": {"path": "{{ clt_path }}"}, "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Is the C++ compiler useable?", "module": "command", "index": 3, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Is the C++ compiler useable?", "register": "compiler", "check_mode": false, "ignore_errors": true, "changed_when": false}, "module_options": "g++ --version", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check the Command Line Tools package metadata", "module": "command", "index": 4, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check the Command Line Tools package metadata", "register": "pkg_info", "check_mode": false, "ignore_errors": true, "changed_when": false}, "module_options": "pkgutil --pkg-info=com.apple.pkg.CLTools_Executables", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare to install Command Line Tools", "module": "file", "index": 5, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Prepare to install Command Line Tools", "when": "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists"}, "module_options": {"path": "/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress", "state": "touch"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for Command Line Tools in Software Update list (MacOS < 10.15).", "module": "shell", "index": 6, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check for Command Line Tools in Software Update list (MacOS < 10.15).", "args": {"executable": "/bin/bash"}, "register": "su_list_old", "when": ["ansible_distribution_version is version('10.15', '<')", "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists"], "changed_when": false, "failed_when": "su_list_old.rc != 0 or su_list_old.stdout|length == 0"}, "module_options": "set -o pipefail; softwareupdate -l | grep -B 1 -E 'Command Line Tools' | awk -F'*' '/^ +\\*/ {print $2}' | sed 's/^ *//' | grep -iE '[0-9|.]' | sort | tail -n1\n", "executable": "shell", "executable_type": "Module", "fqcn": "ansible.builtin.shell", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for Command Line Tools in Software Update list (MacOS >= 10.15).", "module": "shell", "index": 7, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Check for Command Line Tools in Software Update list (MacOS >= 10.15).", "args": {"executable": "/bin/bash"}, "register": "su_list_new", "when": ["ansible_distribution_version is version('10.15', '>=')", "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists"], "changed_when": false, "failed_when": "su_list_new.rc != 0 or su_list_new.stdout|length == 0"}, "module_options": "set -o pipefail; softwareupdate -l | grep -B 1 -E 'Command Line Tools' | awk -F'*' '/^\\*/ {print $2}' | sed 's/^ Label: //' | grep -iE '[0-9|.]' | sort | tail -n1\n", "executable": "shell", "executable_type": "Module", "fqcn": "ansible.builtin.shell", "annotations": {}}, {"py/object": "struct4.Task", "name": "set su_list for (MacOS < 10.15).", "module": "set_fact", "index": 8, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "set su_list for (MacOS < 10.15).", "when": "su_list_old is not skipped"}, "module_options": {"su_list": "{{ su_list_old }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "set su_list for (MacOS >= 10.15).", "module": "set_fact", "index": 9, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "set su_list for (MacOS >= 10.15).", "when": "su_list_new is not skipped"}, "module_options": {"su_list": "{{ su_list_new }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Command Line Tools", "module": "command", "index": 10, "defined_in": "./role-test/testdata/geerlingguy-homebrew/elliotweiser.osx-command-line-tools/tasks/main.yml", "options": {"name": "Install Command Line Tools", "when": "pkg_info.rc != 0 or compiler.rc != 0 or not clt.stat.exists", "notify": ["Cleanup"], "register": "su_result", "failed_when": "su_result.rc != 0 or 'Error installing updates.' in su_result.stdout"}, "module_options": "softwareupdate -i '{{ su_list.stdout }}'", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "elliotweiser.osx-command-line-tools", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}, "geerlingguy.homebrew": {"py/object": "struct4.Role", "name": "geerlingguy.homebrew", "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew", "fqcn": "geerlingguy.homebrew", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Determine Homebrew ownership variables", "module": "set_fact", "index": 0, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Determine Homebrew ownership variables"}, "module_options": {"homebrew_user": "{{ homebrew_user | default(ansible_user_id) }}", "homebrew_group": "{{ homebrew_group | default(ansible_user_gid) }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Homebrew parent directory has correct permissions (MacOS >= 10.13).", "module": "file", "index": 1, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew parent directory has correct permissions (MacOS >= 10.13).", "become": true, "when": "ansible_distribution_version is version('10.13', '>=')"}, "module_options": {"path": "{{ homebrew_prefix }}", "owner": "root", "state": "directory"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Homebrew parent directory has correct permissions (MacOS < 10.13).", "module": "file", "index": 2, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew parent directory has correct permissions (MacOS < 10.13).", "become": true, "when": "ansible_distribution_version is version('10.13', '<')"}, "module_options": {"path": "{{ homebrew_prefix }}", "owner": "root", "group": "admin", "state": "directory", "mode": 509}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Homebrew directory exists.", "module": "file", "index": 3, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew directory exists.", "become": true}, "module_options": {"path": "{{ homebrew_install_path }}", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}", "state": "directory", "mode": 509}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Homebrew is installed.", "module": "git", "index": 4, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure Homebrew is installed.", "become": true, "become_user": "{{ homebrew_user }}"}, "module_options": {"repo": "{{ homebrew_repo }}", "version": "master", "dest": "{{ homebrew_install_path }}", "update": false, "depth": 1}, "executable": "git", "executable_type": "Module", "fqcn": "ansible.builtin.git", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure proper permissions and ownership on homebrew_brew_bin_path dirs.", "module": "file", "index": 5, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure proper permissions and ownership on homebrew_brew_bin_path dirs.", "become": true}, "module_options": {"path": "{{ homebrew_brew_bin_path }}", "state": "directory", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}", "mode": 509}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure proper ownership on homebrew_install_path subdirs.", "module": "file", "index": 6, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure proper ownership on homebrew_install_path subdirs.", "become": true}, "module_options": {"path": "{{ homebrew_install_path }}", "state": "directory", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if homebrew binary is already in place.", "module": "stat", "index": 7, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Check if homebrew binary is already in place.", "register": "homebrew_binary", "check_mode": false}, "module_options": "path={{ homebrew_brew_bin_path }}/brew", "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink brew to homebrew_brew_bin_path.", "module": "file", "index": 8, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Symlink brew to homebrew_brew_bin_path.", "when": "not homebrew_binary.stat.exists", "become": true}, "module_options": {"src": "{{ homebrew_install_path }}/bin/brew", "dest": "{{ homebrew_brew_bin_path }}/brew", "state": "link"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure proper homebrew folders are in place.", "module": "file", "index": 9, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure proper homebrew folders are in place.", "become": true, "loop": "{{ homebrew_folders_base + homebrew_folders_additional }}"}, "module_options": {"path": "{{ homebrew_prefix }}/{{ item }}", "state": "directory", "owner": "{{ homebrew_user }}", "group": "{{ homebrew_group }}"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Force update brew after installation.", "module": "command", "index": 10, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Force update brew after installation.", "when": "not homebrew_binary.stat.exists"}, "module_options": "{{ homebrew_brew_bin_path }}/brew update --force", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Where is the cache?", "module": "command", "index": 11, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Where is the cache?", "register": "homebrew_cache_path", "changed_when": false, "check_mode": false}, "module_options": "{{ homebrew_brew_bin_path }}/brew --cache", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configured taps are tapped.", "module": "homebrew_tap", "index": 12, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure configured taps are tapped.", "loop": "{{ homebrew_taps }}"}, "module_options": {"tap": "{{ item.name | default(item) }}", "url": "{{ item.url | default(omit) }}", "state": "present"}, "executable": "homebrew_tap", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure blacklisted cask applications are not installed.", "module": "homebrew_cask", "index": 13, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure blacklisted cask applications are not installed.", "loop": "{{ homebrew_cask_uninstalled_apps }}"}, "module_options": "name={{ item }} state=absent", "executable": "homebrew_cask", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install configured cask applications.", "module": "homebrew_cask", "index": 14, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Install configured cask applications.", "loop": "{{ homebrew_cask_apps }}", "notify": ["Clear homebrew cache"]}, "module_options": {"name": "{{ item.name | default(item) }}", "state": "present", "install_options": "{{ item.install_options | default('appdir=' + homebrew_cask_appdir) }}", "accept_external_apps": "{{ homebrew_cask_accept_external_apps }}"}, "executable": "homebrew_cask", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure blacklisted homebrew packages are not installed.", "module": "homebrew", "index": 15, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure blacklisted homebrew packages are not installed.", "loop": "{{ homebrew_uninstalled_packages }}"}, "module_options": "name={{ item }} state=absent", "executable": "homebrew", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configured homebrew packages are installed.", "module": "homebrew", "index": 16, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Ensure configured homebrew packages are installed.", "loop": "{{ homebrew_installed_packages }}", "notify": ["Clear homebrew cache"]}, "module_options": {"name": "{{ item.name | default(item) }}", "install_options": "{{ item.install_options | default(omit) }}", "state": "present"}, "executable": "homebrew", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upgrade all homebrew packages (if configured).", "module": "homebrew", "index": 17, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Upgrade all homebrew packages (if configured).", "when": "homebrew_upgrade_all_packages", "notify": ["Clear homebrew cache"]}, "module_options": "update_homebrew=yes upgrade_all=yes", "executable": "homebrew", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for Brewfile.", "module": "stat", "index": 18, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Check for Brewfile.", "register": "homebrew_brewfile", "check_mode": false}, "module_options": {"path": "{{ homebrew_brewfile_dir }}/Brewfile"}, "executable": "stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install from Brewfile.", "module": "command", "index": 19, "defined_in": "./role-test/testdata/geerlingguy-homebrew/geerlingguy.homebrew/tasks/main.yml", "options": {"name": "Install from Brewfile.", "when": "homebrew_brewfile.stat.exists and homebrew_use_brewfile"}, "module_options": "brew bundle chdir={{ homebrew_brewfile_dir }}", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "geerlingguy.homebrew", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}}, "annotations": {}}