{"py/object": "struct4.Repository", "name": "", "path": "", "my_collection_name": "", "playbooks": [], "roles": [], "installed_collections_path": "", "installed_collections": [], "installed_roles_path": "./role-test/testdata/nginxinc-nginx", "installed_roles": [{"py/object": "struct4.Role", "name": "nginxinc.nginx", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx", "fqcn": "nginxinc.nginx", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check whether you are using a supported NGINX distribution", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Check whether you are using a supported NGINX distribution", "when": ["nginx_enable | bool", "(nginx_install_from == \"nginx_repository\" or nginx_type == \"plus\")"], "ignore_errors": true, "tags": "nginx_check_support"}, "module_options": {"that": "(nginx_type == \"opensource\" and ansible_facts['distribution'] in nginx_distributions) or (nginx_type == \"plus\" and ansible_facts['distribution'] in nginx_plus_distributions)", "success_msg": "Your OS, {{ ansible_facts['distribution'] }} is supported by NGINX {{ (nginx_type=='plus') | ternary('Plus', 'Open Source') }}", "fail_msg": "Your OS, {{ ansible_facts['distribution'] }} is not supported by NGINX {{ (nginx_type=='plus') | ternary('Plus', 'Open Source') }}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that NGINX setup is an allowed value", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Check that NGINX setup is an allowed value", "when": "nginx_enable | bool", "ignore_errors": true, "tags": "nginx_check_support"}, "module_options": {"that": "nginx_setup in nginx_setup_vars", "fail_msg": "The value {{ nginx_setup }} you used for `nginx_setup` is not allowed. Try one of {{ nginx_setup_vars | join(', ') }}."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set up prerequisites", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Set up prerequisites", "when": "nginx_state != \"absent\"", "tags": "nginx_prerequisites"}, "module_options": "{{ role_path }}/tasks/prerequisites/prerequisites.yml", "executable": "{{ role_path }}/tasks/prerequisites/prerequisites.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set up signing keys", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Set up signing keys", "when": "(nginx_enable | bool and nginx_install_from == \"nginx_repository\") or nginx_amplify_enable | bool", "tags": "nginx_key"}, "module_options": "{{ role_path }}/tasks/keys/setup-keys.yml", "executable": "{{ role_path }}/tasks/keys/setup-keys.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX Open Source", "module": "ansible.builtin.include_tasks", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX Open Source", "when": "nginx_type == \"opensource\"", "tags": "nginx_install_oss"}, "module_options": "{{ role_path }}/tasks/opensource/install-oss.yml", "executable": "{{ role_path }}/tasks/opensource/install-oss.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set up NGINX Plus license", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Set up NGINX Plus license", "when": ["nginx_type == \"plus\"", "nginx_setup_license | bool"], "tags": "nginx_setup_license"}, "module_options": "{{ role_path }}/tasks/plus/setup-license.yml", "executable": "{{ role_path }}/tasks/plus/setup-license.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX Plus", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX Plus", "when": "nginx_type == \"plus\"", "tags": "nginx_install_plus"}, "module_options": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX dynamic modules", "module": "ansible.builtin.include_tasks", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX dynamic modules", "when": ["nginx_modules is defined", "nginx_modules | length > 0"], "tags": "nginx_install_modules"}, "module_options": "{{ role_path }}/tasks/modules/install-modules.yml", "executable": "{{ role_path }}/tasks/modules/install-modules.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove NGINX Plus license", "module": "ansible.builtin.include_tasks", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Remove NGINX Plus license", "when": ["nginx_type == \"plus\"", "nginx_remove_license | bool"], "tags": "nginx_remove_license"}, "module_options": "{{ role_path }}/tasks/plus/remove-license.yml", "executable": "{{ role_path }}/tasks/plus/remove-license.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Modify systemd parameters", "module": "ansible.builtin.include_tasks", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Modify systemd parameters", "when": ["ansible_facts['service_mgr'] == \"systemd\"", "nginx_service_modify | bool"], "tags": "nginx_modify_systemd"}, "module_options": "{{ role_path }}/tasks/config/modify-systemd.yml", "executable": "{{ role_path }}/tasks/config/modify-systemd.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Trigger handlers if necessary", "module": "ansible.builtin.meta", "index": 10, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Trigger handlers if necessary"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "Debug NGINX output", "module": "ansible.builtin.include_tasks", "index": 11, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Debug NGINX output", "when": ["nginx_debug_output | bool", "nginx_state != \"absent\""], "tags": "nginx_debug_output"}, "module_options": "{{ role_path }}/tasks/config/debug-output.yml", "executable": "{{ role_path }}/tasks/config/debug-output.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure logrotate for NGINX", "module": "ansible.builtin.include_tasks", "index": 12, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Configure logrotate for NGINX", "when": ["nginx_logrotate_conf_enable | bool", "nginx_state != \"absent\""], "tags": "nginx_logrotate_config"}, "module_options": "{{ role_path }}/tasks/config/setup-logrotate.yml", "executable": "{{ role_path }}/tasks/config/setup-logrotate.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install NGINX Amplify", "module": "ansible.builtin.include_tasks", "index": 13, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Install NGINX Amplify", "when": ["nginx_amplify_enable | bool", "nginx_amplify_api_key is defined", "nginx_amplify_api_key | length > 0"], "tags": "nginx_install_amplify"}, "module_options": "{{ role_path }}/tasks/amplify/install-amplify.yml", "executable": "{{ role_path }}/tasks/amplify/install-amplify.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-dependencies.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) Install dependencies", "module": "community.general.apk", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(Alpine Linux) Install dependencies", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"name": "{{ nginx_alpine_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install dependencies", "module": "ansible.builtin.apt", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(Debian/Ubuntu) Install dependencies", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"name": "{{ nginx_debian_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install dependencies", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install dependencies", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": "{{ nginx_redhat_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) Install dependencies", "module": "community.general.zypper", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(SLES) Install dependencies", "when": "ansible_facts['os_family'] == \"Suse\""}, "module_options": {"name": "{{ nginx_sles_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) Install dependencies using package(s)", "module": "community.general.pkgng", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(FreeBSD) Install dependencies using package(s)", "when": "nginx_bsd_install_packages | bool"}, "module_options": {"name": "{{ nginx_freebsd_dependencies }}", "state": "latest"}, "executable": "community.general.pkgng", "executable_type": "Module", "fqcn": "community.general.pkgng", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) Install dependencies using port(s)", "module": "community.general.portinstall", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(FreeBSD) Install dependencies using port(s)", "loop": "{{ nginx_freebsd_dependencies }}", "when": "not nginx_bsd_install_packages | bool"}, "module_options": {"name": "{{ item }}", "use_packages": "{{ nginx_bsd_portinstall_use_packages | default(omit) }}", "state": "latest"}, "executable": "community.general.portinstall", "executable_type": "Module", "fqcn": "community.general.portinstall", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "prerequisites.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "tasks": [{"py/object": "struct4.Task", "name": "Install dependencies", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "options": {"name": "Install dependencies"}, "module_options": "{{ role_path }}/tasks/prerequisites/install-dependencies.yml", "executable": "{{ role_path }}/tasks/prerequisites/install-dependencies.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if SELinux is enabled", "module": "ansible.builtin.debug", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "options": {"name": "Check if SELinux is enabled", "when": "ansible_facts['selinux'] is undefined"}, "module_options": {"msg": "You need to enable SELinux, if it was disabled you need to reboot"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure SELinux", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "options": {"name": "Configure SELinux", "when": "ansible_facts['selinux']['mode'] is defined"}, "module_options": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-selinux.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "tasks": [{"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install dependencies", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "(CentOS/RHEL) Install dependencies", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": ["libselinux-utils", "policycoreutils", "selinux-policy-targeted"]}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set SELinux mode to permissive", "module": "ansible.posix.selinux", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to permissive"}, "module_options": {"state": "permissive", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux HTTP network connections", "module": "ansible.posix.seboolean", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux HTTP network connections", "loop": ["httpd_can_network_connect", "httpd_can_network_relay"]}, "module_options": {"name": "{{ item }}", "state": true, "persistent": true}, "executable": "ansible.posix.seboolean", "executable_type": "Module", "fqcn": "ansible.posix.seboolean", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on specific ports", "module": "community.general.seport", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on specific ports", "when": "nginx_selinux_tcp_ports is defined"}, "module_options": {"ports": "{{ nginx_selinux_tcp_ports }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux UDP connections on specific ports", "module": "community.general.seport", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux UDP connections on specific ports", "when": "nginx_selinux_udp_ports is defined"}, "module_options": {"ports": "{{ nginx_selinux_udp_ports }}", "proto": "udp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create SELinux NGINX Plus module", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Create SELinux NGINX Plus module", "register": "nginx_selinux_module"}, "module_options": {"src": "{{ role_path }}/templates/selinux/nginx-plus-module.te.j2", "dest": "{{ nginx_selinux_tempdir }}/nginx-plus-module.te", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check SELinux NGINX Plus module", "module": "ansible.builtin.command", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Check SELinux NGINX Plus module", "args": {"creates": "{{ nginx_selinux_tempdir }}/nginx-plus-module.mod"}, "changed_when": false}, "module_options": "checkmodule -M -m -o {{ nginx_selinux_tempdir }}/nginx-plus-module.mod {{ nginx_selinux_tempdir }}/nginx-plus-module.te", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Compile SELinux NGINX Plus module", "module": "ansible.builtin.command", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Compile SELinux NGINX Plus module", "args": {"creates": "{{ nginx_selinux_tempdir }}/nginx-plus-module.pp"}, "changed_when": false}, "module_options": "semodule_package -o {{ nginx_selinux_tempdir }}/nginx-plus-module.pp -m {{ nginx_selinux_tempdir }}/nginx-plus-module.mod", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Import SELinux NGINX Plus module", "module": "ansible.builtin.command", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Import SELinux NGINX Plus module", "changed_when": false, "when": "nginx_selinux_module.changed | bool"}, "module_options": "semodule -i {{ nginx_selinux_tempdir }}/nginx-plus-module.pp", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set SELinux mode to enforcing", "module": "ansible.posix.selinux", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to enforcing", "when": "nginx_selinux_enforcing | bool"}, "module_options": {"state": "enforcing", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "debug-output.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml", "tasks": [{"py/object": "struct4.Task", "name": "Register NGINX config", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml", "options": {"name": "Register NGINX config", "ignore_errors": "{{ ansible_check_mode }}", "check_mode": false, "changed_when": false, "register": "config_full"}, "module_options": "nginx -T", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Print NGINX config", "module": "ansible.builtin.debug", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml", "options": {"name": "Print NGINX config", "when": "config_full.stdout_lines is defined"}, "module_options": {"var": "config_full.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-logrotate.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) Install logrotate", "module": "community.general.apk", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(Alpine Linux) Install logrotate", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"name": "logrotate"}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install logrotate", "module": "ansible.builtin.apt", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(Debian/Ubuntu) Install logrotate", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"name": "logrotate", "state": "present"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install logrotate", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install logrotate", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": "logrotate", "state": "present"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) Configure logrotate repository", "module": "community.general.zypper_repository", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(SLES) Configure logrotate repository"}, "module_options": {"repo": "https://download.opensuse.org/repositories/openSUSE:Leap:42.1/standard/openSUSE:Leap:42.1.repo"}, "executable": "community.general.zypper_repository", "executable_type": "Module", "fqcn": "community.general.zypper_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) Install Logrotate", "module": "community.general.zypper", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(SLES) Install Logrotate"}, "module_options": {"name": "logrotate", "state": "present"}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create logrotate config", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "Create logrotate config", "notify": "(Handler) Run logrotate"}, "module_options": {"src": "logrotate/nginx.j2", "dest": "/etc/logrotate.d/nginx", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "modify-systemd.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "tasks": [{"py/object": "struct4.Task", "name": "Create override directory for NGINX systemd service", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Create override directory for NGINX systemd service"}, "module_options": {"path": "{{ nginx_service_overridepath }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create override for NGINX systemd service", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Create override for NGINX systemd service", "when": ["not nginx_service_custom | bool", "not nginx_service_clean | bool"], "notify": "(Handler) Systemd daemon-reload"}, "module_options": {"src": "{{ role_path }}/templates/services/nginx.service.override.conf.j2", "dest": "{{ nginx_service_overridepath }}/{{ nginx_service_overridefilename }}", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Customize override for NGINX systemd service", "module": "ansible.builtin.copy", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Customize override for NGINX systemd service", "when": ["nginx_service_custom | bool", "not nginx_service_clean | bool"], "notify": "(Handler) Systemd daemon-reload"}, "module_options": {"src": "{{ nginx_service_custom_file }}", "dest": "{{ nginx_service_overridepath }}/{{ nginx_service_overridefilename }}", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove override for NGINX systemd service", "module": "ansible.builtin.file", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Remove override for NGINX systemd service", "when": "nginx_service_clean | bool", "notify": "(Handler) Systemd daemon-reload"}, "module_options": {"path": "{{ nginx_service_overridepath }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-debian.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-debian.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Add NGINX Amplify agent repository", "module": "ansible.builtin.apt_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-debian.yml", "options": {"name": "(Debian/Ubuntu) Add NGINX Amplify agent repository"}, "module_options": {"filename": "nginx-amplify", "repo": "deb [arch=amd64 signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://packages.amplify.nginx.com/py3/{{ ansible_facts['distribution'] | lower }}/ {{ ansible_facts['distribution_release'] | lower }} amplify-agent", "update_cache": true, "mode": 420}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-amplify.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "tasks": [{"py/object": "struct4.Task", "name": "Configure NGINX Amplify agent repository", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Configure NGINX Amplify agent repository", "when": "ansible_facts['os_family'] in ['Debian', 'RedHat']"}, "module_options": "{{ role_path }}/tasks/amplify/setup-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/amplify/setup-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install NGINX Amplify agent", "module": "ansible.builtin.package", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Install NGINX Amplify agent"}, "module_options": {"name": "nginx-amplify-agent", "state": "present"}, "executable": "ansible.builtin.package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy NGINX Amplify configurator agent configuration template", "module": "ansible.builtin.copy", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Copy NGINX Amplify configurator agent configuration template"}, "module_options": {"remote_src": true, "src": "/etc/amplify-agent/agent.conf.default", "dest": "/etc/amplify-agent/agent.conf", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NGINX Amplify agent API key", "module": "ansible.builtin.lineinfile", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Configure NGINX Amplify agent API key", "notify": "(Handler) Start NGINX Amplify agent"}, "module_options": {"dest": "/etc/amplify-agent/agent.conf", "regexp": "api_key =.*", "line": "api_key = {{ nginx_amplify_api_key }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-redhat.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-redhat.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/RHEL) Add NGINX Amplify agent repository", "module": "ansible.builtin.yum_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/RHEL) Add NGINX Amplify agent repository"}, "module_options": {"name": "nginx-amplify", "baseurl": "https://packages.amplify.nginx.com/{{ (ansible_facts['distribution_major_version'] == \"7\") | ternary('', 'py3/') }}{{ (ansible_facts['distribution'] == \"Amazon\") | ternary('amzn', 'centos') }}/$releasever/$basearch/", "description": "NGINX Amplify Agent", "enabled": true, "gpgcheck": true, "mode": 420}, "executable": "ansible.builtin.yum_repository", "executable_type": "Module", "fqcn": "ansible.builtin.yum_repository", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-bsd.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "tasks": [{"py/object": "struct4.Task", "name": "(FreeBSD) Fetch ports", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) Fetch ports", "args": {"creates": "/var/db/portsnap/INDEX"}}, "module_options": "portsnap fetch --interactive", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) Extract ports", "module": "ansible.builtin.command", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) Extract ports", "args": {"creates": "/usr/ports"}}, "module_options": "portsnap extract", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "community.general.pkgng", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "www/nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}"}, "executable": "community.general.pkgng", "executable_type": "Module", "fqcn": "community.general.pkgng", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "community.general.portinstall", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "www/nginx{{ nginx_version | default('') }}", "use_packages": "{{ nginx_bsd_portinstall_use_packages | default(omit) }}", "state": "{{ nginx_state }}"}, "executable": "community.general.portinstall", "executable_type": "Module", "fqcn": "community.general.portinstall", "annotations": {}}, {"py/object": "struct4.Task", "name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "community.general.openbsd_pkg", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "build": false, "state": "{{ nginx_state }}"}, "executable": "community.general.openbsd_pkg", "executable_type": "Module", "fqcn": "community.general.openbsd_pkg", "annotations": {}}, {"py/object": "struct4.Task", "name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "community.general.openbsd_pkg", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "build": true, "state": "{{ nginx_state }}"}, "executable": "community.general.openbsd_pkg", "executable_type": "Module", "fqcn": "community.general.openbsd_pkg", "annotations": {}}, {"py/object": "struct4.Task", "name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "ansible.builtin.command", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": "pkg_add www/nginx{{ nginx_version | default('') }}", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "ansible.builtin.fail", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool"}, "module_options": {"msg": "{{ ansible_facts['system'] }} {{ nginx_setup | capitalize }} NGINX port not implemented."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "ansible.builtin.command", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": "pkg install www/nginx{{ nginx_version | default('') }}", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "ansible.builtin.fail", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool"}, "module_options": {"msg": "{{ ansible_facts['system'] }} {{ nginx_setup | capitalize }} NGINX port not implemented."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-alpine.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "ansible.builtin.lineinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "when": "nginx_manage_repo | bool"}, "module_options": {"path": "/etc/apk/repositories", "insertafter": "EOF", "line": "{{ nginx_repository | default(nginx_default_repository_alpine) }}", "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX", "module": "community.general.apk", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ (nginx_repository is not defined and nginx_setup != 'uninstall') | ternary('@nginx', '') }}{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-suse.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml", "tasks": [{"py/object": "struct4.Task", "name": "(SLES) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "community.general.zypper_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml", "options": {"name": "(SLES) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx-{{ nginx_branch }}", "repo": "{{ nginx_repository | default(nginx_default_repository_suse) }}", "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "community.general.zypper_repository", "executable_type": "Module", "fqcn": "community.general.zypper_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) {{ nginx_setup | capitalize }} NGINX", "module": "community.general.zypper", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml", "options": {"name": "(SLES) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "disable_recommends": false, "update_cache": true}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-oss.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX from repository", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX from repository", "when": "nginx_install_from == \"nginx_repository\""}, "module_options": "{{ role_path }}/tasks/opensource/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/opensource/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX from source", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX from source", "when": "nginx_install_from == \"source\""}, "module_options": "{{ role_path }}/tasks/opensource/install-source.yml", "executable": "{{ role_path }}/tasks/opensource/install-source.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX from package", "module": "ansible.builtin.package", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX from package", "when": "nginx_install_from == \"os_repository\"", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}"}, "executable": "ansible.builtin.package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX in Unix systems", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX in Unix systems", "when": "ansible_facts['system'] | lower is search('bsd')"}, "module_options": "{{ role_path }}/tasks/opensource/install-bsd.yml", "executable": "{{ role_path }}/tasks/opensource/install-bsd.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-debian.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "ansible.builtin.apt_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "loop": "{{ nginx_repository | default(nginx_default_repository_debian) }}", "when": "nginx_manage_repo | bool"}, "module_options": {"filename": "nginx", "repo": "{{ item }}", "update_cache": true, "mode": 420, "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Unpin', 'Pin') }} NGINX repository", "module": "ansible.builtin.blockinfile", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Unpin', 'Pin') }} NGINX repository", "when": "nginx_repository is not defined"}, "module_options": {"path": "/etc/apt/preferences.d/99nginx", "create": true, "block": "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n", "mode": 420, "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX", "module": "ansible.builtin.apt", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-source.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "tasks": [{"py/object": "struct4.Task", "name": "(RHEL 8) Install Python 3", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(RHEL 8) Install Python 3"}, "module_options": {"name": ["python3", "python3-pip", "python3-devel"], "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RHEL 8) Set Python 3 as default", "module": "community.general.alternatives", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(RHEL 8) Set Python 3 as default"}, "module_options": {"name": "python", "path": "/usr/bin/python3", "link": "/usr/bin/python"}, "executable": "community.general.alternatives", "executable_type": "Module", "fqcn": "community.general.alternatives", "annotations": {}}, {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install build tools", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install build tools", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": ["ca-certificates", "gcc", "gd", "gd-devel", "glibc", "glibc-common", "make", "perl-core", "tar", "unzip", "wget", "zlib-devel"], "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Install backports repo for 'buster'", "module": "ansible.builtin.apt_repository", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian) Install backports repo for 'buster'", "when": "ansible_facts['distribution_release'] == \"buster\""}, "module_options": {"filename": "buster-backports", "repo": "deb http://ftp.us.debian.org/debian buster-backports main", "update_cache": true, "mode": 420}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install build tools", "module": "ansible.builtin.apt", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install build tools", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"name": ["build-essential", "checkinstall", "libtemplate-perl", "python3-minimal", "perl", "tar", "zlib1g-dev"], "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Install build tools", "module": "community.general.apk", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install build tools", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"name": ["alpine-sdk", "build-base", "git", "openrc", "perl", "python3", "linux-headers", "tar", "wget"], "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Enable OpenRC", "module": "ansible.builtin.copy", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Enable OpenRC", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"content": "", "dest": "/run/openrc/softlevel", "force": false, "owner": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for PCRE install", "module": "ansible.builtin.stat", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for PCRE install", "register": "pcre_result"}, "module_options": {"path": "/tmp/{{ pcre_version }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for ZLib install", "module": "ansible.builtin.stat", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for ZLib install", "register": "zlib_result"}, "module_options": {"path": "/tmp/{{ zlib_version }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for OpenSSL install", "module": "ansible.builtin.stat", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for OpenSSL install", "register": "openssl_result"}, "module_options": {"path": "/tmp/{{ openssl_version }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install PCRE dependency from package", "module": "ansible.builtin.yum", "index": 10, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install PCRE dependency from package", "when": ["nginx_install_source_pcre | bool", "ansible_facts['os_family'] == \"RedHat\""]}, "module_options": {"name": "pcre-devel", "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install PCRE dependency from package", "module": "ansible.builtin.apt", "index": 11, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install PCRE dependency from package", "when": ["nginx_install_source_pcre | bool", "ansible_facts['os_family'] == \"Debian\""]}, "module_options": {"name": "libpcre3-dev", "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Install PCRE dependency from package", "module": "community.general.apk", "index": 12, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install PCRE dependency from package", "when": ["nginx_install_source_pcre | bool", "ansible_facts['os_family'] == \"Alpine\""]}, "module_options": {"name": "pcre-dev", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "Download PCRE dependency", "module": "ansible.builtin.get_url", "index": 13, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download PCRE dependency", "register": "pcre_source"}, "module_options": {"url": "https://ftp.exim.org/pub/pcre/{{ pcre_version }}.tar.gz", "dest": "/tmp/{{ pcre_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack PCRE dependency", "module": "ansible.builtin.unarchive", "index": 14, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack PCRE dependency"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ pcre_source.dest }}", "mode": 448}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure PCRE dependency", "module": "ansible.builtin.command", "index": 15, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure PCRE dependency", "args": {"chdir": "/tmp/{{ pcre_version }}", "creates": "/tmp/makefile"}}, "module_options": "./configure", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Make PCRE dependency", "module": "community.general.make", "index": 16, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make PCRE dependency"}, "module_options": {"chdir": "/tmp/{{ pcre_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install PCRE dependency", "module": "community.general.make", "index": 17, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install PCRE dependency"}, "module_options": {"chdir": "/tmp/{{ pcre_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install ZLib dependency from package", "module": "ansible.builtin.yum", "index": 18, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install ZLib dependency from package", "when": ["nginx_install_source_zlib | bool", "ansible_facts['os_family'] == \"RedHat\""]}, "module_options": {"name": "zlib-devel", "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install ZLib dependency from package", "module": "ansible.builtin.apt", "index": 19, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install ZLib dependency from package", "when": ["nginx_install_source_zlib | bool", "ansible_facts['os_family'] == \"Debian\""]}, "module_options": {"name": "zlib1g-dev", "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Install ZLib dependency from package", "module": "community.general.apk", "index": 20, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install ZLib dependency from package", "when": ["nginx_install_source_zlib | bool", "ansible_facts['os_family'] == \"Alpine\""]}, "module_options": {"name": "zlib-dev", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "Download ZLib dependency", "module": "ansible.builtin.get_url", "index": 21, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download ZLib dependency", "register": "zlib_source"}, "module_options": {"url": "https://zlib.net/{{ zlib_version }}.tar.gz", "dest": "/tmp/{{ zlib_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack ZLib dependency", "module": "ansible.builtin.unarchive", "index": 22, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack ZLib dependency"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ zlib_source.dest }}", "mode": 448}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure ZLib dependency", "module": "ansible.builtin.command", "index": 23, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure ZLib dependency", "args": {"chdir": "/tmp/{{ zlib_version }}", "creates": "/tmp/makefile"}}, "module_options": "./configure", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Make ZLib dependency", "module": "community.general.make", "index": 24, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make ZLib dependency"}, "module_options": {"chdir": "/tmp/{{ zlib_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install ZLib dependency", "module": "community.general.make", "index": 25, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install ZLib dependency"}, "module_options": {"chdir": "/tmp/{{ zlib_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install OpenSSL dependency from package", "module": "ansible.builtin.yum", "index": 26, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install OpenSSL dependency from package", "when": ["nginx_install_source_openssl | bool", "ansible_facts['os_family'] == \"RedHat\""]}, "module_options": {"name": "openssl-devel", "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install OpenSSL dependency from package", "module": "ansible.builtin.apt", "index": 27, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install OpenSSL dependency from package", "when": ["nginx_install_source_openssl | bool", "ansible_facts['os_family'] == \"Debian\""]}, "module_options": {"name": "libssl-dev", "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Install OpenSSL dependency from package", "module": "community.general.apk", "index": 28, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install OpenSSL dependency from package", "when": ["nginx_install_source_openssl | bool", "ansible_facts['os_family'] == \"Alpine\""]}, "module_options": {"name": "openssl-dev", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "Download OpenSSL dependency", "module": "ansible.builtin.get_url", "index": 29, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download OpenSSL dependency", "register": "openssl_source"}, "module_options": {"url": "https://www.openssl.org/source/{{ openssl_version }}.tar.gz", "dest": "/tmp/{{ openssl_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack OpenSSL dependency", "module": "ansible.builtin.unarchive", "index": 30, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack OpenSSL dependency"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ openssl_source.dest }}", "mode": 448}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure OpenSSL dependency", "module": "ansible.builtin.command", "index": 31, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure OpenSSL dependency", "args": {"chdir": "/tmp/{{ openssl_version }}", "creates": "/tmp/makefile"}}, "module_options": "./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl shared zlib", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Make OpenSSL dependency", "module": "community.general.make", "index": 32, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make OpenSSL dependency"}, "module_options": {"chdir": "/tmp/{{ openssl_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install OpenSSL dependency", "module": "community.general.make", "index": 33, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install OpenSSL dependency"}, "module_options": {"chdir": "/tmp/{{ openssl_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fetch NGINX version", "module": "ansible.builtin.uri", "index": 34, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Fetch NGINX version", "check_mode": false, "register": "nginx_versions"}, "module_options": {"url": "https://version.nginx.com/nginx/{{ nginx_branch }}", "return_content": true}, "executable": "ansible.builtin.uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set NGINX version", "module": "ansible.builtin.set_fact", "index": 35, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Set NGINX version"}, "module_options": {"nginx_version": "{{ 'nginx-' + (nginx_versions.content | regex_search('([0-9]+\\.){2}[0-9]+')) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for NGINX install", "module": "ansible.builtin.stat", "index": 36, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for NGINX install", "register": "nginx_result"}, "module_options": {"path": "/usr/sbin/nginx", "follow": true}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add NGINX user", "module": "ansible.builtin.user", "index": 37, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Add NGINX user"}, "module_options": {"name": "nginx"}, "executable": "ansible.builtin.user", "executable_type": "Module", "fqcn": "ansible.builtin.user", "annotations": {}}, {"py/object": "struct4.Task", "name": "Download NGINX", "module": "ansible.builtin.get_url", "index": 38, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download NGINX", "register": "nginx_source"}, "module_options": {"url": "https://nginx.org/download/{{ nginx_version }}.tar.gz", "dest": "/tmp/{{ nginx_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack NGINX", "module": "ansible.builtin.unarchive", "index": 39, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack NGINX"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ nginx_source.dest }}", "mode": 493}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set static modules", "module": "ansible.builtin.set_fact", "index": 40, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Set static modules", "loop": "{{ nginx_static_modules }}"}, "module_options": {"nginx_install_source_static_modules": "{{ nginx_install_source_static_modules | default('') + ' --with-' + item }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NGINX", "module": "ansible.builtin.command", "index": 41, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure NGINX", "args": {"chdir": "/tmp/{{ nginx_version }}", "creates": "/tmp/makefile"}, "register": "nginx_configure"}, "module_options": "./configure --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --lock-path=/var/lock/nginx.lock --modules-path=/usr/lib/nginx/modules --prefix=/usr --pid-path=/var/run/nginx.pid --with-mail=dynamic --with-stream {{ nginx_install_source_pcre | ternary('', '--with-pcre=../' + pcre_version) }} {{ nginx_install_source_zlib | ternary('', '--with-zlib=../' + zlib_version) }} {{ nginx_install_source_openssl | ternary('', '--with-openssl=../' + openssl_version) }} {{ nginx_install_source_static_modules | default('') }}", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Make NGINX", "module": "community.general.make", "index": 42, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make NGINX"}, "module_options": {"chdir": "/tmp/{{ nginx_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install NGINX", "module": "community.general.make", "index": 43, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install NGINX"}, "module_options": {"chdir": "/tmp/{{ nginx_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload systemd NGINX service file", "module": "ansible.builtin.copy", "index": 44, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload systemd NGINX service file", "when": "ansible_facts['service_mgr'] == \"systemd\""}, "module_options": {"src": "services/nginx.systemd", "dest": "/lib/systemd/system/nginx.service", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable systemd NGINX service file", "module": "ansible.builtin.systemd", "index": 45, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Enable systemd NGINX service file", "when": "ansible_facts['service_mgr'] == \"systemd\"", "notify": "(Handler) Run NGINX"}, "module_options": {"daemon_reload": true, "name": "nginx", "state": "restarted", "enabled": true}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload upstart NGINX service file", "module": "ansible.builtin.copy", "index": 46, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload upstart NGINX service file", "when": "ansible_facts['service_mgr'] == \"upstart\""}, "module_options": {"src": "services/nginx.upstart", "dest": "/etc/init.d/nginx", "owner": "root", "group": "root", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload Upstart NGINX service conf file", "module": "ansible.builtin.copy", "index": 47, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload Upstart NGINX service conf file", "when": "ansible_facts['service_mgr'] == \"upstart\""}, "module_options": {"src": "services/nginx.conf.upstart", "dest": "/etc/init/nginx.conf", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable Upstart NGINX service reload", "module": "ansible.builtin.command", "index": 48, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Enable Upstart NGINX service reload", "when": "ansible_facts['service_mgr'] == \"upstart\""}, "module_options": "initctl reload-configuration", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Start Upstart NGINX service reload", "module": "ansible.builtin.command", "index": 49, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Start Upstart NGINX service reload", "when": "ansible_facts['service_mgr'] == \"upstart\"", "notify": "(Handler) Run NGINX"}, "module_options": "nginx", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload SysVinit NGINX service file", "module": "ansible.builtin.copy", "index": 50, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload SysVinit NGINX service file", "when": "ansible_facts['service_mgr'] == \"sysvinit\"", "notify": "(Handler) Run NGINX"}, "module_options": {"src": "services/nginx.sysvinit", "dest": "/etc/init.d/nginx", "owner": "root", "group": "root", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload OpenRC NGINX service file", "module": "ansible.builtin.copy", "index": 51, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload OpenRC NGINX service file", "when": "ansible_facts['service_mgr'] == \"openrc\""}, "module_options": {"src": "services/nginx.openrc", "dest": "/etc/init.d/nginx", "owner": "root", "group": "root", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable OpenRC NGINX service", "module": "ansible.builtin.command", "index": 52, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Enable OpenRC NGINX service", "when": "ansible_facts['service_mgr'] == \"openrc\"", "notify": "(Handler) Run NGINX"}, "module_options": "rc-update add nginx default", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Cleanup downloads", "module": "ansible.builtin.file", "index": 53, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Cleanup downloads", "loop": ["{{ pcre_source.dest }}", "{{ zlib_source.dest }}", "{{ openssl_source.dest }}", "{{ nginx_source.dest }}"], "when": "item is defined"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-redhat.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/RHEL) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "ansible.builtin.yum_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/RHEL) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx", "baseurl": "{{ nginx_repository | default(lookup('vars', 'nginx_default_repository_' + ((ansible_facts['distribution'] == 'Amazon') | ternary('amazon', 'redhat')))) }}", "description": "NGINX Repository", "enabled": true, "gpgcheck": true, "mode": 420, "module_hotfixes": "{{ omit if ansible_version.full is version('2.11', '<') else true }}", "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.yum_repository", "executable_type": "Module", "fqcn": "ansible.builtin.yum_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/RHEL) {{ nginx_setup | capitalize }} NGINX", "module": "ansible.builtin.yum", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/RHEL) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-keys.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) Set up NGINX signing key URL", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Alpine Linux) Set up NGINX signing key URL"}, "module_options": {"keysite": "{{ nginx_signing_key | default(nginx_default_signing_key_rsa_pub) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Download NGINX signing key", "module": "ansible.builtin.get_url", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Alpine Linux) Download NGINX signing key"}, "module_options": {"url": "{{ keysite }}", "dest": "/etc/apk/keys/nginx_signing.rsa.pub", "mode": 256}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Set up NGINX signing key URL", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Set up NGINX signing key URL", "when": "ansible_facts['os_family'] != \"Alpine\""}, "module_options": {"keysite": "{{ nginx_signing_key | default(nginx_default_signing_key_pgp) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Add NGINX signing key", "module": "ansible.builtin.apt_key", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Debian/Ubuntu) Add NGINX signing key", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"id": "573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62", "keyring": "/usr/share/keyrings/nginx-archive-keyring.gpg", "url": "{{ keysite }}"}, "executable": "ansible.builtin.apt_key", "executable_type": "Module", "fqcn": "ansible.builtin.apt_key", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL/SLES) Add NGINX signing key", "module": "ansible.builtin.rpm_key", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL/SLES) Add NGINX signing key", "when": "ansible_facts['os_family'] in ['RedHat', 'Suse']"}, "module_options": {"fingerprint": "573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62", "key": "{{ keysite }}"}, "executable": "ansible.builtin.rpm_key", "executable_type": "Module", "fqcn": "ansible.builtin.rpm_key", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-modules.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "tasks": [{"py/object": "struct4.Task", "name": "(CentOS) Install GeoIP EPEL dependencies", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "(CentOS) Install GeoIP EPEL dependencies", "when": ["ansible_facts['distribution'] == \"CentOS\"", "\"geoip\" in nginx_modules", "nginx_install_epel_release | bool"]}, "module_options": {"name": "epel-release"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RHEL) Import EPEL GPG key", "module": "ansible.builtin.rpm_key", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "(RHEL) Import EPEL GPG key"}, "module_options": {"state": "present", "key": "https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_facts['distribution_major_version'] }}"}, "executable": "ansible.builtin.rpm_key", "executable_type": "Module", "fqcn": "ansible.builtin.rpm_key", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RHEL) Install package dependencies", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "(RHEL) Install package dependencies"}, "module_options": {"name": "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_facts['distribution_major_version'] }}.noarch.rpm"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup NGINX modules", "module": "ansible.builtin.package", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "Setup NGINX modules", "loop": "{{ nginx_modules }}", "when": ["(item.name | default(item) in nginx_modules_list and nginx_type == 'opensource') or (item.name | default(item) in nginx_plus_modules_list and nginx_type == 'plus')", "not (item.name | default(item) == \"auth-spnego\") or not (ansible_facts['os_family'] == \"Alpine\" and (ansible_facts['distribution_version'] | regex_search('^[0-9]+\\\\.[0-9]+') is version('3.8', '==')))", "not (item.name | default(item) == \"brotli\") or not ((ansible_facts['os_family'] == \"Alpine\") or (ansible_facts['distribution'] == \"Amazon\") or (ansible_facts['os_family'] == \"Debian\" and ansible_facts['distribution_major_version'] is version('9', '==')) or (ansible_facts['distribution'] == \"OracleLinux\") or (ansible_facts['os_family'] == \"RedHat\" and ansible_facts['distribution_major_version'] is version('8', '<')) or (ansible_facts['os_family'] == \"Suse\" and ansible_facts['distribution_major_version'] is version('12', '<')))", "not (item.name | default(item) == \"geoip\") or not ((ansible_facts['os_family'] == \"FreeBSD\") or (ansible_facts['os_family'] == \"RedHat\" and ansible_facts['distribution_major_version'] is version('8', '==')))", "not (item.name | default(item) == \"geoip2\") or not ((ansible_facts['distribution'] == 'Amazon') or (ansible_facts['os_family'] == \"Suse\"))", "not (item.name | default(item) == \"opentracing\") or not ((ansible_facts['distribution'] == 'Amazon') or (ansible_facts['os_family'] == \"Suse\" and ansible_facts['distribution_major_version'] is version('12', '==')))"]}, "module_options": {"name": "nginx-{{ (nginx_type == 'plus') | ternary('plus-', '') }}module-{{ item.name | default(item) }}{{ item.version | default(nginx_version) | default('') }}{{ (nginx_repository is not defined and ansible_facts['os_family'] == 'Alpine' and nginx_type != 'plus') | ternary('@nginx', '') }}", "state": "{{ item.state | default('present') }}"}, "executable": "ansible.builtin.package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-alpine.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.lineinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"path": "/etc/apk/repositories", "insertafter": "EOF", "line": "{{ nginx_repository | default(nginx_plus_default_repository_alpine) }}", "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX Plus", "module": "community.general.apk", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "repository": "{{ nginx_repository | default(nginx_plus_default_repository_alpine) }}", "state": "{{ nginx_state }}"}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-freebsd.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "tasks": [{"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification", "module": "ansible.builtin.blockinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "options": {"name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification"}, "module_options": {"path": "/usr/local/etc/pkg.conf", "block": "PKG_ENV: { SSL_NO_VERIFY_PEER: \"1\",\nSSL_CLIENT_CERT_FILE: \"/etc/ssl/nginx/nginx-repo.crt\",\nSSL_CLIENT_KEY_FILE: \"/etc/ssl/nginx/nginx-repo.key\" }\n", "state": "{{ nginx_license_status | default ('present') }}"}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.blockinfile", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "options": {"name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"path": "/etc/pkg/nginx-plus.conf", "create": true, "block": "nginx-plus: {\nURL: {{ nginx_repository | default(nginx_plus_default_repository_freebsd) }}\nENABLED: yes\nMIRROR_TYPE: SRV\n}\n", "state": "{{ nginx_license_status | default ('present') }}", "mode": 420}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX Plus", "module": "community.general.pkgng", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "options": {"name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX Plus", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}"}, "executable": "community.general.pkgng", "executable_type": "Module", "fqcn": "community.general.pkgng", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-suse.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml", "tasks": [{"py/object": "struct4.Task", "name": "(SLES) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "community.general.zypper_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml", "options": {"name": "(SLES) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx-plus", "repo": "{{ nginx_repository | default(nginx_plus_default_repository_suse) }}", "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}"}, "executable": "community.general.zypper_repository", "executable_type": "Module", "fqcn": "community.general.zypper_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) {{ nginx_setup | capitalize }} NGINX Plus", "module": "community.general.zypper", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml", "options": {"name": "(SLES) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-debian.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification", "module": "ansible.builtin.blockinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification"}, "module_options": {"path": "/etc/apt/apt.conf.d/90nginx", "create": true, "block": "Acquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::Verify-Peer \"true\";\nAcquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::Verify-Host \"true\";\nAcquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::SslCert     \"/etc/ssl/nginx/nginx-repo.crt\";\nAcquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::SslKey      \"/etc/ssl/nginx/nginx-repo.key\";\n", "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}", "mode": 292}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.apt_repository", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"filename": "nginx-plus", "repo": "{{ nginx_repository | default(nginx_plus_default_repository_debian) }}", "update_cache": false, "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}", "mode": 420}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX Plus", "module": "ansible.builtin.apt", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "remove-license.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "tasks": [{"py/object": "struct4.Task", "name": "Set NGINX Plus license state to absent", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "Set NGINX Plus license state to absent"}, "module_options": {"nginx_license_status": "absent"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Delete NGINX Plus license", "module": "ansible.builtin.file", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Delete NGINX Plus license", "when": "ansible_facts['distribution'] != \"Alpine\""}, "module_options": {"path": "/etc/ssl/nginx", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Delete NGINX Plus license", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "(Alpine Linux) Delete NGINX Plus license", "loop": ["/etc/apk/cert.key", "/etc/apk/cert.pem"], "when": "ansible_facts['distribution'] == \"Alpine\""}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove NGINX Plus repository data", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "Remove NGINX Plus repository data"}, "module_options": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-license.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Create SSL directory", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Create SSL directory"}, "module_options": {"path": "/etc/ssl/nginx", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Copy NGINX Plus certificate and license key", "module": "ansible.builtin.copy", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Copy NGINX Plus certificate and license key", "loop": ["{{ nginx_license['certificate'] }}", "{{ nginx_license['key'] }}"]}, "module_options": {"src": "{{ item }}", "dest": "/etc/ssl/nginx", "decrypt": true, "mode": 292}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Create APK directory", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Alpine Linux) Create APK directory"}, "module_options": {"path": "/etc/apk", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Copy NGINX Plus key", "module": "ansible.builtin.copy", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Alpine Linux) Copy NGINX Plus key"}, "module_options": {"src": "{{ nginx_license['key'] }}", "dest": "/etc/apk/cert.key", "decrypt": true, "mode": 292}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Copy NGINX Plus certificate", "module": "ansible.builtin.copy", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Alpine Linux) Copy NGINX Plus certificate"}, "module_options": {"src": "{{ nginx_license['certificate'] }}", "dest": "/etc/apk/cert.pem", "decrypt": true, "mode": 292}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) Combine NGINX Plus certificate and license key", "module": "ansible.builtin.assemble", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(SLES) Combine NGINX Plus certificate and license key", "when": "ansible_facts['os_family'] == \"Suse\""}, "module_options": {"src": "/etc/ssl/nginx", "dest": "/etc/ssl/nginx/nginx-repo-bundle.crt", "mode": 292}, "executable": "ansible.builtin.assemble", "executable_type": "Module", "fqcn": "ansible.builtin.assemble", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-redhat.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ (nginx_license_status is defined or nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.yum_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ (nginx_license_status is defined or nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx-plus", "baseurl": "{{ nginx_repository | default(lookup('vars', 'nginx_plus_default_repository_' + ((ansible_facts['distribution'] == 'Amazon') | ternary('amazon', 'redhat')))) }}", "description": "NGINX Plus Repository", "sslclientcert": "/etc/ssl/nginx/nginx-repo.crt", "sslclientkey": "/etc/ssl/nginx/nginx-repo.key", "enabled": true, "gpgcheck": true, "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}", "mode": 420}, "executable": "ansible.builtin.yum_repository", "executable_type": "Module", "fqcn": "ansible.builtin.yum_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ nginx_setup | capitalize }} NGINX Plus", "module": "ansible.builtin.yum", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}], "modules": [], "taskfiles": [], "version": "", "module_dict": {}, "task_dict": {"{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check whether you are using a supported NGINX distribution", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Check whether you are using a supported NGINX distribution", "when": ["nginx_enable | bool", "(nginx_install_from == \"nginx_repository\" or nginx_type == \"plus\")"], "ignore_errors": true, "tags": "nginx_check_support"}, "module_options": {"that": "(nginx_type == \"opensource\" and ansible_facts['distribution'] in nginx_distributions) or (nginx_type == \"plus\" and ansible_facts['distribution'] in nginx_plus_distributions)", "success_msg": "Your OS, {{ ansible_facts['distribution'] }} is supported by NGINX {{ (nginx_type=='plus') | ternary('Plus', 'Open Source') }}", "fail_msg": "Your OS, {{ ansible_facts['distribution'] }} is not supported by NGINX {{ (nginx_type=='plus') | ternary('Plus', 'Open Source') }}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Check that NGINX setup is an allowed value", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Check that NGINX setup is an allowed value", "when": "nginx_enable | bool", "ignore_errors": true, "tags": "nginx_check_support"}, "module_options": {"that": "nginx_setup in nginx_setup_vars", "fail_msg": "The value {{ nginx_setup }} you used for `nginx_setup` is not allowed. Try one of {{ nginx_setup_vars | join(', ') }}."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Set up prerequisites", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Set up prerequisites", "when": "nginx_state != \"absent\"", "tags": "nginx_prerequisites"}, "module_options": "{{ role_path }}/tasks/prerequisites/prerequisites.yml", "executable": "{{ role_path }}/tasks/prerequisites/prerequisites.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Set up signing keys", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Set up signing keys", "when": "(nginx_enable | bool and nginx_install_from == \"nginx_repository\") or nginx_amplify_enable | bool", "tags": "nginx_key"}, "module_options": "{{ role_path }}/tasks/keys/setup-keys.yml", "executable": "{{ role_path }}/tasks/keys/setup-keys.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX Open Source", "module": "ansible.builtin.include_tasks", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX Open Source", "when": "nginx_type == \"opensource\"", "tags": "nginx_install_oss"}, "module_options": "{{ role_path }}/tasks/opensource/install-oss.yml", "executable": "{{ role_path }}/tasks/opensource/install-oss.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Set up NGINX Plus license", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Set up NGINX Plus license", "when": ["nginx_type == \"plus\"", "nginx_setup_license | bool"], "tags": "nginx_setup_license"}, "module_options": "{{ role_path }}/tasks/plus/setup-license.yml", "executable": "{{ role_path }}/tasks/plus/setup-license.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX Plus", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX Plus", "when": "nginx_type == \"plus\"", "tags": "nginx_install_plus"}, "module_options": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX dynamic modules", "module": "ansible.builtin.include_tasks", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX dynamic modules", "when": ["nginx_modules is defined", "nginx_modules | length > 0"], "tags": "nginx_install_modules"}, "module_options": "{{ role_path }}/tasks/modules/install-modules.yml", "executable": "{{ role_path }}/tasks/modules/install-modules.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "Remove NGINX Plus license", "module": "ansible.builtin.include_tasks", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Remove NGINX Plus license", "when": ["nginx_type == \"plus\"", "nginx_remove_license | bool"], "tags": "nginx_remove_license"}, "module_options": "{{ role_path }}/tasks/plus/remove-license.yml", "executable": "{{ role_path }}/tasks/plus/remove-license.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "Modify systemd parameters", "module": "ansible.builtin.include_tasks", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Modify systemd parameters", "when": ["ansible_facts['service_mgr'] == \"systemd\"", "nginx_service_modify | bool"], "tags": "nginx_modify_systemd"}, "module_options": "{{ role_path }}/tasks/config/modify-systemd.yml", "executable": "{{ role_path }}/tasks/config/modify-systemd.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "Trigger handlers if necessary", "module": "ansible.builtin.meta", "index": 10, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Trigger handlers if necessary"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 11}": {"py/object": "struct4.Task", "name": "Debug NGINX output", "module": "ansible.builtin.include_tasks", "index": 11, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Debug NGINX output", "when": ["nginx_debug_output | bool", "nginx_state != \"absent\""], "tags": "nginx_debug_output"}, "module_options": "{{ role_path }}/tasks/config/debug-output.yml", "executable": "{{ role_path }}/tasks/config/debug-output.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 12}": {"py/object": "struct4.Task", "name": "Configure logrotate for NGINX", "module": "ansible.builtin.include_tasks", "index": 12, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Configure logrotate for NGINX", "when": ["nginx_logrotate_conf_enable | bool", "nginx_state != \"absent\""], "tags": "nginx_logrotate_config"}, "module_options": "{{ role_path }}/tasks/config/setup-logrotate.yml", "executable": "{{ role_path }}/tasks/config/setup-logrotate.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml\", \"index\": 13}": {"py/object": "struct4.Task", "name": "Install NGINX Amplify", "module": "ansible.builtin.include_tasks", "index": 13, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Install NGINX Amplify", "when": ["nginx_amplify_enable | bool", "nginx_amplify_api_key is defined", "nginx_amplify_api_key | length > 0"], "tags": "nginx_install_amplify"}, "module_options": "{{ role_path }}/tasks/amplify/install-amplify.yml", "executable": "{{ role_path }}/tasks/amplify/install-amplify.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Install dependencies", "module": "community.general.apk", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(Alpine Linux) Install dependencies", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"name": "{{ nginx_alpine_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install dependencies", "module": "ansible.builtin.apt", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(Debian/Ubuntu) Install dependencies", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"name": "{{ nginx_debian_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install dependencies", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install dependencies", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": "{{ nginx_redhat_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(SLES) Install dependencies", "module": "community.general.zypper", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(SLES) Install dependencies", "when": "ansible_facts['os_family'] == \"Suse\""}, "module_options": {"name": "{{ nginx_sles_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(FreeBSD) Install dependencies using package(s)", "module": "community.general.pkgng", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(FreeBSD) Install dependencies using package(s)", "when": "nginx_bsd_install_packages | bool"}, "module_options": {"name": "{{ nginx_freebsd_dependencies }}", "state": "latest"}, "executable": "community.general.pkgng", "executable_type": "Module", "fqcn": "community.general.pkgng", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(FreeBSD) Install dependencies using port(s)", "module": "community.general.portinstall", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(FreeBSD) Install dependencies using port(s)", "loop": "{{ nginx_freebsd_dependencies }}", "when": "not nginx_bsd_install_packages | bool"}, "module_options": {"name": "{{ item }}", "use_packages": "{{ nginx_bsd_portinstall_use_packages | default(omit) }}", "state": "latest"}, "executable": "community.general.portinstall", "executable_type": "Module", "fqcn": "community.general.portinstall", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Install dependencies", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "options": {"name": "Install dependencies"}, "module_options": "{{ role_path }}/tasks/prerequisites/install-dependencies.yml", "executable": "{{ role_path }}/tasks/prerequisites/install-dependencies.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Check if SELinux is enabled", "module": "ansible.builtin.debug", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "options": {"name": "Check if SELinux is enabled", "when": "ansible_facts['selinux'] is undefined"}, "module_options": {"msg": "You need to enable SELinux, if it was disabled you need to reboot"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Configure SELinux", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "options": {"name": "Configure SELinux", "when": "ansible_facts['selinux']['mode'] is defined"}, "module_options": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install dependencies", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "(CentOS/RHEL) Install dependencies", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": ["libselinux-utils", "policycoreutils", "selinux-policy-targeted"]}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Set SELinux mode to permissive", "module": "ansible.posix.selinux", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to permissive"}, "module_options": {"state": "permissive", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Allow SELinux HTTP network connections", "module": "ansible.posix.seboolean", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux HTTP network connections", "loop": ["httpd_can_network_connect", "httpd_can_network_relay"]}, "module_options": {"name": "{{ item }}", "state": true, "persistent": true}, "executable": "ansible.posix.seboolean", "executable_type": "Module", "fqcn": "ansible.posix.seboolean", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on specific ports", "module": "community.general.seport", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on specific ports", "when": "nginx_selinux_tcp_ports is defined"}, "module_options": {"ports": "{{ nginx_selinux_tcp_ports }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Allow SELinux UDP connections on specific ports", "module": "community.general.seport", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux UDP connections on specific ports", "when": "nginx_selinux_udp_ports is defined"}, "module_options": {"ports": "{{ nginx_selinux_udp_ports }}", "proto": "udp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Create SELinux NGINX Plus module", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Create SELinux NGINX Plus module", "register": "nginx_selinux_module"}, "module_options": {"src": "{{ role_path }}/templates/selinux/nginx-plus-module.te.j2", "dest": "{{ nginx_selinux_tempdir }}/nginx-plus-module.te", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Check SELinux NGINX Plus module", "module": "ansible.builtin.command", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Check SELinux NGINX Plus module", "args": {"creates": "{{ nginx_selinux_tempdir }}/nginx-plus-module.mod"}, "changed_when": false}, "module_options": "checkmodule -M -m -o {{ nginx_selinux_tempdir }}/nginx-plus-module.mod {{ nginx_selinux_tempdir }}/nginx-plus-module.te", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Compile SELinux NGINX Plus module", "module": "ansible.builtin.command", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Compile SELinux NGINX Plus module", "args": {"creates": "{{ nginx_selinux_tempdir }}/nginx-plus-module.pp"}, "changed_when": false}, "module_options": "semodule_package -o {{ nginx_selinux_tempdir }}/nginx-plus-module.pp -m {{ nginx_selinux_tempdir }}/nginx-plus-module.mod", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "Import SELinux NGINX Plus module", "module": "ansible.builtin.command", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Import SELinux NGINX Plus module", "changed_when": false, "when": "nginx_selinux_module.changed | bool"}, "module_options": "semodule -i {{ nginx_selinux_tempdir }}/nginx-plus-module.pp", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "Set SELinux mode to enforcing", "module": "ansible.posix.selinux", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to enforcing", "when": "nginx_selinux_enforcing | bool"}, "module_options": {"state": "enforcing", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Register NGINX config", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml", "options": {"name": "Register NGINX config", "ignore_errors": "{{ ansible_check_mode }}", "check_mode": false, "changed_when": false, "register": "config_full"}, "module_options": "nginx -T", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Print NGINX config", "module": "ansible.builtin.debug", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml", "options": {"name": "Print NGINX config", "when": "config_full.stdout_lines is defined"}, "module_options": {"var": "config_full.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Install logrotate", "module": "community.general.apk", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(Alpine Linux) Install logrotate", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"name": "logrotate"}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install logrotate", "module": "ansible.builtin.apt", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(Debian/Ubuntu) Install logrotate", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"name": "logrotate", "state": "present"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install logrotate", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install logrotate", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": "logrotate", "state": "present"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(SLES) Configure logrotate repository", "module": "community.general.zypper_repository", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(SLES) Configure logrotate repository"}, "module_options": {"repo": "https://download.opensuse.org/repositories/openSUSE:Leap:42.1/standard/openSUSE:Leap:42.1.repo"}, "executable": "community.general.zypper_repository", "executable_type": "Module", "fqcn": "community.general.zypper_repository", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(SLES) Install Logrotate", "module": "community.general.zypper", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(SLES) Install Logrotate"}, "module_options": {"name": "logrotate", "state": "present"}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Create logrotate config", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "Create logrotate config", "notify": "(Handler) Run logrotate"}, "module_options": {"src": "logrotate/nginx.j2", "dest": "/etc/logrotate.d/nginx", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Create override directory for NGINX systemd service", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Create override directory for NGINX systemd service"}, "module_options": {"path": "{{ nginx_service_overridepath }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Create override for NGINX systemd service", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Create override for NGINX systemd service", "when": ["not nginx_service_custom | bool", "not nginx_service_clean | bool"], "notify": "(Handler) Systemd daemon-reload"}, "module_options": {"src": "{{ role_path }}/templates/services/nginx.service.override.conf.j2", "dest": "{{ nginx_service_overridepath }}/{{ nginx_service_overridefilename }}", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Customize override for NGINX systemd service", "module": "ansible.builtin.copy", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Customize override for NGINX systemd service", "when": ["nginx_service_custom | bool", "not nginx_service_clean | bool"], "notify": "(Handler) Systemd daemon-reload"}, "module_options": {"src": "{{ nginx_service_custom_file }}", "dest": "{{ nginx_service_overridepath }}/{{ nginx_service_overridefilename }}", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Remove override for NGINX systemd service", "module": "ansible.builtin.file", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Remove override for NGINX systemd service", "when": "nginx_service_clean | bool", "notify": "(Handler) Systemd daemon-reload"}, "module_options": {"path": "{{ nginx_service_overridepath }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-debian.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Add NGINX Amplify agent repository", "module": "ansible.builtin.apt_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-debian.yml", "options": {"name": "(Debian/Ubuntu) Add NGINX Amplify agent repository"}, "module_options": {"filename": "nginx-amplify", "repo": "deb [arch=amd64 signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://packages.amplify.nginx.com/py3/{{ ansible_facts['distribution'] | lower }}/ {{ ansible_facts['distribution_release'] | lower }} amplify-agent", "update_cache": true, "mode": 420}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Configure NGINX Amplify agent repository", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Configure NGINX Amplify agent repository", "when": "ansible_facts['os_family'] in ['Debian', 'RedHat']"}, "module_options": "{{ role_path }}/tasks/amplify/setup-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/amplify/setup-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Install NGINX Amplify agent", "module": "ansible.builtin.package", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Install NGINX Amplify agent"}, "module_options": {"name": "nginx-amplify-agent", "state": "present"}, "executable": "ansible.builtin.package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Copy NGINX Amplify configurator agent configuration template", "module": "ansible.builtin.copy", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Copy NGINX Amplify configurator agent configuration template"}, "module_options": {"remote_src": true, "src": "/etc/amplify-agent/agent.conf.default", "dest": "/etc/amplify-agent/agent.conf", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Configure NGINX Amplify agent API key", "module": "ansible.builtin.lineinfile", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Configure NGINX Amplify agent API key", "notify": "(Handler) Start NGINX Amplify agent"}, "module_options": {"dest": "/etc/amplify-agent/agent.conf", "regexp": "api_key =.*", "line": "api_key = {{ nginx_amplify_api_key }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-redhat.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/RHEL) Add NGINX Amplify agent repository", "module": "ansible.builtin.yum_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/RHEL) Add NGINX Amplify agent repository"}, "module_options": {"name": "nginx-amplify", "baseurl": "https://packages.amplify.nginx.com/{{ (ansible_facts['distribution_major_version'] == \"7\") | ternary('', 'py3/') }}{{ (ansible_facts['distribution'] == \"Amazon\") | ternary('amzn', 'centos') }}/$releasever/$basearch/", "description": "NGINX Amplify Agent", "enabled": true, "gpgcheck": true, "mode": 420}, "executable": "ansible.builtin.yum_repository", "executable_type": "Module", "fqcn": "ansible.builtin.yum_repository", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(FreeBSD) Fetch ports", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) Fetch ports", "args": {"creates": "/var/db/portsnap/INDEX"}}, "module_options": "portsnap fetch --interactive", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(FreeBSD) Extract ports", "module": "ansible.builtin.command", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) Extract ports", "args": {"creates": "/usr/ports"}}, "module_options": "portsnap extract", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "community.general.pkgng", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "www/nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}"}, "executable": "community.general.pkgng", "executable_type": "Module", "fqcn": "community.general.pkgng", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "community.general.portinstall", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "www/nginx{{ nginx_version | default('') }}", "use_packages": "{{ nginx_bsd_portinstall_use_packages | default(omit) }}", "state": "{{ nginx_state }}"}, "executable": "community.general.portinstall", "executable_type": "Module", "fqcn": "community.general.portinstall", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "community.general.openbsd_pkg", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "build": false, "state": "{{ nginx_state }}"}, "executable": "community.general.openbsd_pkg", "executable_type": "Module", "fqcn": "community.general.openbsd_pkg", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "community.general.openbsd_pkg", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "build": true, "state": "{{ nginx_state }}"}, "executable": "community.general.openbsd_pkg", "executable_type": "Module", "fqcn": "community.general.openbsd_pkg", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "ansible.builtin.command", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": "pkg_add www/nginx{{ nginx_version | default('') }}", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "ansible.builtin.fail", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool"}, "module_options": {"msg": "{{ ansible_facts['system'] }} {{ nginx_setup | capitalize }} NGINX port not implemented."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "ansible.builtin.command", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": "pkg install www/nginx{{ nginx_version | default('') }}", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "ansible.builtin.fail", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool"}, "module_options": {"msg": "{{ ansible_facts['system'] }} {{ nginx_setup | capitalize }} NGINX port not implemented."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Alpine Linux) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "ansible.builtin.lineinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "when": "nginx_manage_repo | bool"}, "module_options": {"path": "/etc/apk/repositories", "insertafter": "EOF", "line": "{{ nginx_repository | default(nginx_default_repository_alpine) }}", "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX", "module": "community.general.apk", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ (nginx_repository is not defined and nginx_setup != 'uninstall') | ternary('@nginx', '') }}{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(SLES) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "community.general.zypper_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml", "options": {"name": "(SLES) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx-{{ nginx_branch }}", "repo": "{{ nginx_repository | default(nginx_default_repository_suse) }}", "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "community.general.zypper_repository", "executable_type": "Module", "fqcn": "community.general.zypper_repository", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(SLES) {{ nginx_setup | capitalize }} NGINX", "module": "community.general.zypper", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml", "options": {"name": "(SLES) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "disable_recommends": false, "update_cache": true}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX from repository", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX from repository", "when": "nginx_install_from == \"nginx_repository\""}, "module_options": "{{ role_path }}/tasks/opensource/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/opensource/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX from source", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX from source", "when": "nginx_install_from == \"source\""}, "module_options": "{{ role_path }}/tasks/opensource/install-source.yml", "executable": "{{ role_path }}/tasks/opensource/install-source.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX from package", "module": "ansible.builtin.package", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX from package", "when": "nginx_install_from == \"os_repository\"", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}"}, "executable": "ansible.builtin.package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX in Unix systems", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX in Unix systems", "when": "ansible_facts['system'] | lower is search('bsd')"}, "module_options": "{{ role_path }}/tasks/opensource/install-bsd.yml", "executable": "{{ role_path }}/tasks/opensource/install-bsd.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "ansible.builtin.apt_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "loop": "{{ nginx_repository | default(nginx_default_repository_debian) }}", "when": "nginx_manage_repo | bool"}, "module_options": {"filename": "nginx", "repo": "{{ item }}", "update_cache": true, "mode": 420, "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Unpin', 'Pin') }} NGINX repository", "module": "ansible.builtin.blockinfile", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Unpin', 'Pin') }} NGINX repository", "when": "nginx_repository is not defined"}, "module_options": {"path": "/etc/apt/preferences.d/99nginx", "create": true, "block": "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n", "mode": 420, "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX", "module": "ansible.builtin.apt", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(RHEL 8) Install Python 3", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(RHEL 8) Install Python 3"}, "module_options": {"name": ["python3", "python3-pip", "python3-devel"], "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(RHEL 8) Set Python 3 as default", "module": "community.general.alternatives", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(RHEL 8) Set Python 3 as default"}, "module_options": {"name": "python", "path": "/usr/bin/python3", "link": "/usr/bin/python"}, "executable": "community.general.alternatives", "executable_type": "Module", "fqcn": "community.general.alternatives", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install build tools", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install build tools", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": ["ca-certificates", "gcc", "gd", "gd-devel", "glibc", "glibc-common", "make", "perl-core", "tar", "unzip", "wget", "zlib-devel"], "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(Debian) Install backports repo for 'buster'", "module": "ansible.builtin.apt_repository", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian) Install backports repo for 'buster'", "when": "ansible_facts['distribution_release'] == \"buster\""}, "module_options": {"filename": "buster-backports", "repo": "deb http://ftp.us.debian.org/debian buster-backports main", "update_cache": true, "mode": 420}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install build tools", "module": "ansible.builtin.apt", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install build tools", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"name": ["build-essential", "checkinstall", "libtemplate-perl", "python3-minimal", "perl", "tar", "zlib1g-dev"], "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Install build tools", "module": "community.general.apk", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install build tools", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"name": ["alpine-sdk", "build-base", "git", "openrc", "perl", "python3", "linux-headers", "tar", "wget"], "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Enable OpenRC", "module": "ansible.builtin.copy", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Enable OpenRC", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"content": "", "dest": "/run/openrc/softlevel", "force": false, "owner": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Check for PCRE install", "module": "ansible.builtin.stat", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for PCRE install", "register": "pcre_result"}, "module_options": {"path": "/tmp/{{ pcre_version }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "Check for ZLib install", "module": "ansible.builtin.stat", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for ZLib install", "register": "zlib_result"}, "module_options": {"path": "/tmp/{{ zlib_version }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "Check for OpenSSL install", "module": "ansible.builtin.stat", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for OpenSSL install", "register": "openssl_result"}, "module_options": {"path": "/tmp/{{ openssl_version }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install PCRE dependency from package", "module": "ansible.builtin.yum", "index": 10, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install PCRE dependency from package", "when": ["nginx_install_source_pcre | bool", "ansible_facts['os_family'] == \"RedHat\""]}, "module_options": {"name": "pcre-devel", "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 11}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install PCRE dependency from package", "module": "ansible.builtin.apt", "index": 11, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install PCRE dependency from package", "when": ["nginx_install_source_pcre | bool", "ansible_facts['os_family'] == \"Debian\""]}, "module_options": {"name": "libpcre3-dev", "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 12}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Install PCRE dependency from package", "module": "community.general.apk", "index": 12, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install PCRE dependency from package", "when": ["nginx_install_source_pcre | bool", "ansible_facts['os_family'] == \"Alpine\""]}, "module_options": {"name": "pcre-dev", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 13}": {"py/object": "struct4.Task", "name": "Download PCRE dependency", "module": "ansible.builtin.get_url", "index": 13, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download PCRE dependency", "register": "pcre_source"}, "module_options": {"url": "https://ftp.exim.org/pub/pcre/{{ pcre_version }}.tar.gz", "dest": "/tmp/{{ pcre_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 14}": {"py/object": "struct4.Task", "name": "Unpack PCRE dependency", "module": "ansible.builtin.unarchive", "index": 14, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack PCRE dependency"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ pcre_source.dest }}", "mode": 448}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 15}": {"py/object": "struct4.Task", "name": "Configure PCRE dependency", "module": "ansible.builtin.command", "index": 15, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure PCRE dependency", "args": {"chdir": "/tmp/{{ pcre_version }}", "creates": "/tmp/makefile"}}, "module_options": "./configure", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 16}": {"py/object": "struct4.Task", "name": "Make PCRE dependency", "module": "community.general.make", "index": 16, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make PCRE dependency"}, "module_options": {"chdir": "/tmp/{{ pcre_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 17}": {"py/object": "struct4.Task", "name": "Install PCRE dependency", "module": "community.general.make", "index": 17, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install PCRE dependency"}, "module_options": {"chdir": "/tmp/{{ pcre_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 18}": {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install ZLib dependency from package", "module": "ansible.builtin.yum", "index": 18, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install ZLib dependency from package", "when": ["nginx_install_source_zlib | bool", "ansible_facts['os_family'] == \"RedHat\""]}, "module_options": {"name": "zlib-devel", "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 19}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install ZLib dependency from package", "module": "ansible.builtin.apt", "index": 19, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install ZLib dependency from package", "when": ["nginx_install_source_zlib | bool", "ansible_facts['os_family'] == \"Debian\""]}, "module_options": {"name": "zlib1g-dev", "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 20}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Install ZLib dependency from package", "module": "community.general.apk", "index": 20, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install ZLib dependency from package", "when": ["nginx_install_source_zlib | bool", "ansible_facts['os_family'] == \"Alpine\""]}, "module_options": {"name": "zlib-dev", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 21}": {"py/object": "struct4.Task", "name": "Download ZLib dependency", "module": "ansible.builtin.get_url", "index": 21, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download ZLib dependency", "register": "zlib_source"}, "module_options": {"url": "https://zlib.net/{{ zlib_version }}.tar.gz", "dest": "/tmp/{{ zlib_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 22}": {"py/object": "struct4.Task", "name": "Unpack ZLib dependency", "module": "ansible.builtin.unarchive", "index": 22, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack ZLib dependency"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ zlib_source.dest }}", "mode": 448}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 23}": {"py/object": "struct4.Task", "name": "Configure ZLib dependency", "module": "ansible.builtin.command", "index": 23, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure ZLib dependency", "args": {"chdir": "/tmp/{{ zlib_version }}", "creates": "/tmp/makefile"}}, "module_options": "./configure", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 24}": {"py/object": "struct4.Task", "name": "Make ZLib dependency", "module": "community.general.make", "index": 24, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make ZLib dependency"}, "module_options": {"chdir": "/tmp/{{ zlib_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 25}": {"py/object": "struct4.Task", "name": "Install ZLib dependency", "module": "community.general.make", "index": 25, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install ZLib dependency"}, "module_options": {"chdir": "/tmp/{{ zlib_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 26}": {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install OpenSSL dependency from package", "module": "ansible.builtin.yum", "index": 26, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install OpenSSL dependency from package", "when": ["nginx_install_source_openssl | bool", "ansible_facts['os_family'] == \"RedHat\""]}, "module_options": {"name": "openssl-devel", "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 27}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install OpenSSL dependency from package", "module": "ansible.builtin.apt", "index": 27, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install OpenSSL dependency from package", "when": ["nginx_install_source_openssl | bool", "ansible_facts['os_family'] == \"Debian\""]}, "module_options": {"name": "libssl-dev", "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 28}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Install OpenSSL dependency from package", "module": "community.general.apk", "index": 28, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install OpenSSL dependency from package", "when": ["nginx_install_source_openssl | bool", "ansible_facts['os_family'] == \"Alpine\""]}, "module_options": {"name": "openssl-dev", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 29}": {"py/object": "struct4.Task", "name": "Download OpenSSL dependency", "module": "ansible.builtin.get_url", "index": 29, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download OpenSSL dependency", "register": "openssl_source"}, "module_options": {"url": "https://www.openssl.org/source/{{ openssl_version }}.tar.gz", "dest": "/tmp/{{ openssl_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 30}": {"py/object": "struct4.Task", "name": "Unpack OpenSSL dependency", "module": "ansible.builtin.unarchive", "index": 30, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack OpenSSL dependency"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ openssl_source.dest }}", "mode": 448}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 31}": {"py/object": "struct4.Task", "name": "Configure OpenSSL dependency", "module": "ansible.builtin.command", "index": 31, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure OpenSSL dependency", "args": {"chdir": "/tmp/{{ openssl_version }}", "creates": "/tmp/makefile"}}, "module_options": "./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl shared zlib", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 32}": {"py/object": "struct4.Task", "name": "Make OpenSSL dependency", "module": "community.general.make", "index": 32, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make OpenSSL dependency"}, "module_options": {"chdir": "/tmp/{{ openssl_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 33}": {"py/object": "struct4.Task", "name": "Install OpenSSL dependency", "module": "community.general.make", "index": 33, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install OpenSSL dependency"}, "module_options": {"chdir": "/tmp/{{ openssl_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 34}": {"py/object": "struct4.Task", "name": "Fetch NGINX version", "module": "ansible.builtin.uri", "index": 34, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Fetch NGINX version", "check_mode": false, "register": "nginx_versions"}, "module_options": {"url": "https://version.nginx.com/nginx/{{ nginx_branch }}", "return_content": true}, "executable": "ansible.builtin.uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 35}": {"py/object": "struct4.Task", "name": "Set NGINX version", "module": "ansible.builtin.set_fact", "index": 35, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Set NGINX version"}, "module_options": {"nginx_version": "{{ 'nginx-' + (nginx_versions.content | regex_search('([0-9]+\\.){2}[0-9]+')) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 36}": {"py/object": "struct4.Task", "name": "Check for NGINX install", "module": "ansible.builtin.stat", "index": 36, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for NGINX install", "register": "nginx_result"}, "module_options": {"path": "/usr/sbin/nginx", "follow": true}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 37}": {"py/object": "struct4.Task", "name": "Add NGINX user", "module": "ansible.builtin.user", "index": 37, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Add NGINX user"}, "module_options": {"name": "nginx"}, "executable": "ansible.builtin.user", "executable_type": "Module", "fqcn": "ansible.builtin.user", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 38}": {"py/object": "struct4.Task", "name": "Download NGINX", "module": "ansible.builtin.get_url", "index": 38, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download NGINX", "register": "nginx_source"}, "module_options": {"url": "https://nginx.org/download/{{ nginx_version }}.tar.gz", "dest": "/tmp/{{ nginx_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 39}": {"py/object": "struct4.Task", "name": "Unpack NGINX", "module": "ansible.builtin.unarchive", "index": 39, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack NGINX"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ nginx_source.dest }}", "mode": 493}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 40}": {"py/object": "struct4.Task", "name": "Set static modules", "module": "ansible.builtin.set_fact", "index": 40, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Set static modules", "loop": "{{ nginx_static_modules }}"}, "module_options": {"nginx_install_source_static_modules": "{{ nginx_install_source_static_modules | default('') + ' --with-' + item }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 41}": {"py/object": "struct4.Task", "name": "Configure NGINX", "module": "ansible.builtin.command", "index": 41, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure NGINX", "args": {"chdir": "/tmp/{{ nginx_version }}", "creates": "/tmp/makefile"}, "register": "nginx_configure"}, "module_options": "./configure --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --lock-path=/var/lock/nginx.lock --modules-path=/usr/lib/nginx/modules --prefix=/usr --pid-path=/var/run/nginx.pid --with-mail=dynamic --with-stream {{ nginx_install_source_pcre | ternary('', '--with-pcre=../' + pcre_version) }} {{ nginx_install_source_zlib | ternary('', '--with-zlib=../' + zlib_version) }} {{ nginx_install_source_openssl | ternary('', '--with-openssl=../' + openssl_version) }} {{ nginx_install_source_static_modules | default('') }}", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 42}": {"py/object": "struct4.Task", "name": "Make NGINX", "module": "community.general.make", "index": 42, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make NGINX"}, "module_options": {"chdir": "/tmp/{{ nginx_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 43}": {"py/object": "struct4.Task", "name": "Install NGINX", "module": "community.general.make", "index": 43, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install NGINX"}, "module_options": {"chdir": "/tmp/{{ nginx_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 44}": {"py/object": "struct4.Task", "name": "Upload systemd NGINX service file", "module": "ansible.builtin.copy", "index": 44, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload systemd NGINX service file", "when": "ansible_facts['service_mgr'] == \"systemd\""}, "module_options": {"src": "services/nginx.systemd", "dest": "/lib/systemd/system/nginx.service", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 45}": {"py/object": "struct4.Task", "name": "Enable systemd NGINX service file", "module": "ansible.builtin.systemd", "index": 45, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Enable systemd NGINX service file", "when": "ansible_facts['service_mgr'] == \"systemd\"", "notify": "(Handler) Run NGINX"}, "module_options": {"daemon_reload": true, "name": "nginx", "state": "restarted", "enabled": true}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 46}": {"py/object": "struct4.Task", "name": "Upload upstart NGINX service file", "module": "ansible.builtin.copy", "index": 46, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload upstart NGINX service file", "when": "ansible_facts['service_mgr'] == \"upstart\""}, "module_options": {"src": "services/nginx.upstart", "dest": "/etc/init.d/nginx", "owner": "root", "group": "root", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 47}": {"py/object": "struct4.Task", "name": "Upload Upstart NGINX service conf file", "module": "ansible.builtin.copy", "index": 47, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload Upstart NGINX service conf file", "when": "ansible_facts['service_mgr'] == \"upstart\""}, "module_options": {"src": "services/nginx.conf.upstart", "dest": "/etc/init/nginx.conf", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 48}": {"py/object": "struct4.Task", "name": "Enable Upstart NGINX service reload", "module": "ansible.builtin.command", "index": 48, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Enable Upstart NGINX service reload", "when": "ansible_facts['service_mgr'] == \"upstart\""}, "module_options": "initctl reload-configuration", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 49}": {"py/object": "struct4.Task", "name": "Start Upstart NGINX service reload", "module": "ansible.builtin.command", "index": 49, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Start Upstart NGINX service reload", "when": "ansible_facts['service_mgr'] == \"upstart\"", "notify": "(Handler) Run NGINX"}, "module_options": "nginx", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 50}": {"py/object": "struct4.Task", "name": "Upload SysVinit NGINX service file", "module": "ansible.builtin.copy", "index": 50, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload SysVinit NGINX service file", "when": "ansible_facts['service_mgr'] == \"sysvinit\"", "notify": "(Handler) Run NGINX"}, "module_options": {"src": "services/nginx.sysvinit", "dest": "/etc/init.d/nginx", "owner": "root", "group": "root", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 51}": {"py/object": "struct4.Task", "name": "Upload OpenRC NGINX service file", "module": "ansible.builtin.copy", "index": 51, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload OpenRC NGINX service file", "when": "ansible_facts['service_mgr'] == \"openrc\""}, "module_options": {"src": "services/nginx.openrc", "dest": "/etc/init.d/nginx", "owner": "root", "group": "root", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 52}": {"py/object": "struct4.Task", "name": "Enable OpenRC NGINX service", "module": "ansible.builtin.command", "index": 52, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Enable OpenRC NGINX service", "when": "ansible_facts['service_mgr'] == \"openrc\"", "notify": "(Handler) Run NGINX"}, "module_options": "rc-update add nginx default", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml\", \"index\": 53}": {"py/object": "struct4.Task", "name": "Cleanup downloads", "module": "ansible.builtin.file", "index": 53, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Cleanup downloads", "loop": ["{{ pcre_source.dest }}", "{{ zlib_source.dest }}", "{{ openssl_source.dest }}", "{{ nginx_source.dest }}"], "when": "item is defined"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/RHEL) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "ansible.builtin.yum_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/RHEL) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx", "baseurl": "{{ nginx_repository | default(lookup('vars', 'nginx_default_repository_' + ((ansible_facts['distribution'] == 'Amazon') | ternary('amazon', 'redhat')))) }}", "description": "NGINX Repository", "enabled": true, "gpgcheck": true, "mode": 420, "module_hotfixes": "{{ omit if ansible_version.full is version('2.11', '<') else true }}", "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.yum_repository", "executable_type": "Module", "fqcn": "ansible.builtin.yum_repository", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/RHEL) {{ nginx_setup | capitalize }} NGINX", "module": "ansible.builtin.yum", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/RHEL) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Set up NGINX signing key URL", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Alpine Linux) Set up NGINX signing key URL"}, "module_options": {"keysite": "{{ nginx_signing_key | default(nginx_default_signing_key_rsa_pub) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Download NGINX signing key", "module": "ansible.builtin.get_url", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Alpine Linux) Download NGINX signing key"}, "module_options": {"url": "{{ keysite }}", "dest": "/etc/apk/keys/nginx_signing.rsa.pub", "mode": 256}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Set up NGINX signing key URL", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Set up NGINX signing key URL", "when": "ansible_facts['os_family'] != \"Alpine\""}, "module_options": {"keysite": "{{ nginx_signing_key | default(nginx_default_signing_key_pgp) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Add NGINX signing key", "module": "ansible.builtin.apt_key", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Debian/Ubuntu) Add NGINX signing key", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"id": "573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62", "keyring": "/usr/share/keyrings/nginx-archive-keyring.gpg", "url": "{{ keysite }}"}, "executable": "ansible.builtin.apt_key", "executable_type": "Module", "fqcn": "ansible.builtin.apt_key", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL/SLES) Add NGINX signing key", "module": "ansible.builtin.rpm_key", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL/SLES) Add NGINX signing key", "when": "ansible_facts['os_family'] in ['RedHat', 'Suse']"}, "module_options": {"fingerprint": "573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62", "key": "{{ keysite }}"}, "executable": "ansible.builtin.rpm_key", "executable_type": "Module", "fqcn": "ansible.builtin.rpm_key", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(CentOS) Install GeoIP EPEL dependencies", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "(CentOS) Install GeoIP EPEL dependencies", "when": ["ansible_facts['distribution'] == \"CentOS\"", "\"geoip\" in nginx_modules", "nginx_install_epel_release | bool"]}, "module_options": {"name": "epel-release"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(RHEL) Import EPEL GPG key", "module": "ansible.builtin.rpm_key", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "(RHEL) Import EPEL GPG key"}, "module_options": {"state": "present", "key": "https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_facts['distribution_major_version'] }}"}, "executable": "ansible.builtin.rpm_key", "executable_type": "Module", "fqcn": "ansible.builtin.rpm_key", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(RHEL) Install package dependencies", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "(RHEL) Install package dependencies"}, "module_options": {"name": "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_facts['distribution_major_version'] }}.noarch.rpm"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Setup NGINX modules", "module": "ansible.builtin.package", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "Setup NGINX modules", "loop": "{{ nginx_modules }}", "when": ["(item.name | default(item) in nginx_modules_list and nginx_type == 'opensource') or (item.name | default(item) in nginx_plus_modules_list and nginx_type == 'plus')", "not (item.name | default(item) == \"auth-spnego\") or not (ansible_facts['os_family'] == \"Alpine\" and (ansible_facts['distribution_version'] | regex_search('^[0-9]+\\\\.[0-9]+') is version('3.8', '==')))", "not (item.name | default(item) == \"brotli\") or not ((ansible_facts['os_family'] == \"Alpine\") or (ansible_facts['distribution'] == \"Amazon\") or (ansible_facts['os_family'] == \"Debian\" and ansible_facts['distribution_major_version'] is version('9', '==')) or (ansible_facts['distribution'] == \"OracleLinux\") or (ansible_facts['os_family'] == \"RedHat\" and ansible_facts['distribution_major_version'] is version('8', '<')) or (ansible_facts['os_family'] == \"Suse\" and ansible_facts['distribution_major_version'] is version('12', '<')))", "not (item.name | default(item) == \"geoip\") or not ((ansible_facts['os_family'] == \"FreeBSD\") or (ansible_facts['os_family'] == \"RedHat\" and ansible_facts['distribution_major_version'] is version('8', '==')))", "not (item.name | default(item) == \"geoip2\") or not ((ansible_facts['distribution'] == 'Amazon') or (ansible_facts['os_family'] == \"Suse\"))", "not (item.name | default(item) == \"opentracing\") or not ((ansible_facts['distribution'] == 'Amazon') or (ansible_facts['os_family'] == \"Suse\" and ansible_facts['distribution_major_version'] is version('12', '==')))"]}, "module_options": {"name": "nginx-{{ (nginx_type == 'plus') | ternary('plus-', '') }}module-{{ item.name | default(item) }}{{ item.version | default(nginx_version) | default('') }}{{ (nginx_repository is not defined and ansible_facts['os_family'] == 'Alpine' and nginx_type != 'plus') | ternary('@nginx', '') }}", "state": "{{ item.state | default('present') }}"}, "executable": "ansible.builtin.package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Alpine Linux) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.lineinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"path": "/etc/apk/repositories", "insertafter": "EOF", "line": "{{ nginx_repository | default(nginx_plus_default_repository_alpine) }}", "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX Plus", "module": "community.general.apk", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "repository": "{{ nginx_repository | default(nginx_plus_default_repository_alpine) }}", "state": "{{ nginx_state }}"}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification", "module": "ansible.builtin.blockinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "options": {"name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification"}, "module_options": {"path": "/usr/local/etc/pkg.conf", "block": "PKG_ENV: { SSL_NO_VERIFY_PEER: \"1\",\nSSL_CLIENT_CERT_FILE: \"/etc/ssl/nginx/nginx-repo.crt\",\nSSL_CLIENT_KEY_FILE: \"/etc/ssl/nginx/nginx-repo.key\" }\n", "state": "{{ nginx_license_status | default ('present') }}"}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.blockinfile", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "options": {"name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"path": "/etc/pkg/nginx-plus.conf", "create": true, "block": "nginx-plus: {\nURL: {{ nginx_repository | default(nginx_plus_default_repository_freebsd) }}\nENABLED: yes\nMIRROR_TYPE: SRV\n}\n", "state": "{{ nginx_license_status | default ('present') }}", "mode": 420}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX Plus", "module": "community.general.pkgng", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "options": {"name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX Plus", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}"}, "executable": "community.general.pkgng", "executable_type": "Module", "fqcn": "community.general.pkgng", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(SLES) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "community.general.zypper_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml", "options": {"name": "(SLES) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx-plus", "repo": "{{ nginx_repository | default(nginx_plus_default_repository_suse) }}", "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}"}, "executable": "community.general.zypper_repository", "executable_type": "Module", "fqcn": "community.general.zypper_repository", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(SLES) {{ nginx_setup | capitalize }} NGINX Plus", "module": "community.general.zypper", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml", "options": {"name": "(SLES) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification", "module": "ansible.builtin.blockinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification"}, "module_options": {"path": "/etc/apt/apt.conf.d/90nginx", "create": true, "block": "Acquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::Verify-Peer \"true\";\nAcquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::Verify-Host \"true\";\nAcquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::SslCert     \"/etc/ssl/nginx/nginx-repo.crt\";\nAcquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::SslKey      \"/etc/ssl/nginx/nginx-repo.key\";\n", "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}", "mode": 292}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.apt_repository", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"filename": "nginx-plus", "repo": "{{ nginx_repository | default(nginx_plus_default_repository_debian) }}", "update_cache": false, "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}", "mode": 420}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX Plus", "module": "ansible.builtin.apt", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Set NGINX Plus license state to absent", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "Set NGINX Plus license state to absent"}, "module_options": {"nginx_license_status": "absent"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Delete NGINX Plus license", "module": "ansible.builtin.file", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Delete NGINX Plus license", "when": "ansible_facts['distribution'] != \"Alpine\""}, "module_options": {"path": "/etc/ssl/nginx", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Delete NGINX Plus license", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "(Alpine Linux) Delete NGINX Plus license", "loop": ["/etc/apk/cert.key", "/etc/apk/cert.pem"], "when": "ansible_facts['distribution'] == \"Alpine\""}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Remove NGINX Plus repository data", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "Remove NGINX Plus repository data"}, "module_options": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Create SSL directory", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Create SSL directory"}, "module_options": {"path": "/etc/ssl/nginx", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Copy NGINX Plus certificate and license key", "module": "ansible.builtin.copy", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Copy NGINX Plus certificate and license key", "loop": ["{{ nginx_license['certificate'] }}", "{{ nginx_license['key'] }}"]}, "module_options": {"src": "{{ item }}", "dest": "/etc/ssl/nginx", "decrypt": true, "mode": 292}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Create APK directory", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Alpine Linux) Create APK directory"}, "module_options": {"path": "/etc/apk", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Copy NGINX Plus key", "module": "ansible.builtin.copy", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Alpine Linux) Copy NGINX Plus key"}, "module_options": {"src": "{{ nginx_license['key'] }}", "dest": "/etc/apk/cert.key", "decrypt": true, "mode": 292}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "(Alpine Linux) Copy NGINX Plus certificate", "module": "ansible.builtin.copy", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Alpine Linux) Copy NGINX Plus certificate"}, "module_options": {"src": "{{ nginx_license['certificate'] }}", "dest": "/etc/apk/cert.pem", "decrypt": true, "mode": 292}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "(SLES) Combine NGINX Plus certificate and license key", "module": "ansible.builtin.assemble", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(SLES) Combine NGINX Plus certificate and license key", "when": "ansible_facts['os_family'] == \"Suse\""}, "module_options": {"src": "/etc/ssl/nginx", "dest": "/etc/ssl/nginx/nginx-repo-bundle.crt", "mode": 292}, "executable": "ansible.builtin.assemble", "executable_type": "Module", "fqcn": "ansible.builtin.assemble", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ (nginx_license_status is defined or nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.yum_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ (nginx_license_status is defined or nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx-plus", "baseurl": "{{ nginx_repository | default(lookup('vars', 'nginx_plus_default_repository_' + ((ansible_facts['distribution'] == 'Amazon') | ternary('amazon', 'redhat')))) }}", "description": "NGINX Plus Repository", "sslclientcert": "/etc/ssl/nginx/nginx-repo.crt", "sslclientkey": "/etc/ssl/nginx/nginx-repo.key", "enabled": true, "gpgcheck": true, "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}", "mode": 420}, "executable": "ansible.builtin.yum_repository", "executable_type": "Module", "fqcn": "ansible.builtin.yum_repository", "annotations": {}}, "{\"path\": \"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ nginx_setup | capitalize }} NGINX Plus", "module": "ansible.builtin.yum", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}}, "taskfile_dict": {"./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml": {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check whether you are using a supported NGINX distribution", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Check whether you are using a supported NGINX distribution", "when": ["nginx_enable | bool", "(nginx_install_from == \"nginx_repository\" or nginx_type == \"plus\")"], "ignore_errors": true, "tags": "nginx_check_support"}, "module_options": {"that": "(nginx_type == \"opensource\" and ansible_facts['distribution'] in nginx_distributions) or (nginx_type == \"plus\" and ansible_facts['distribution'] in nginx_plus_distributions)", "success_msg": "Your OS, {{ ansible_facts['distribution'] }} is supported by NGINX {{ (nginx_type=='plus') | ternary('Plus', 'Open Source') }}", "fail_msg": "Your OS, {{ ansible_facts['distribution'] }} is not supported by NGINX {{ (nginx_type=='plus') | ternary('Plus', 'Open Source') }}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that NGINX setup is an allowed value", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Check that NGINX setup is an allowed value", "when": "nginx_enable | bool", "ignore_errors": true, "tags": "nginx_check_support"}, "module_options": {"that": "nginx_setup in nginx_setup_vars", "fail_msg": "The value {{ nginx_setup }} you used for `nginx_setup` is not allowed. Try one of {{ nginx_setup_vars | join(', ') }}."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set up prerequisites", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Set up prerequisites", "when": "nginx_state != \"absent\"", "tags": "nginx_prerequisites"}, "module_options": "{{ role_path }}/tasks/prerequisites/prerequisites.yml", "executable": "{{ role_path }}/tasks/prerequisites/prerequisites.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set up signing keys", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Set up signing keys", "when": "(nginx_enable | bool and nginx_install_from == \"nginx_repository\") or nginx_amplify_enable | bool", "tags": "nginx_key"}, "module_options": "{{ role_path }}/tasks/keys/setup-keys.yml", "executable": "{{ role_path }}/tasks/keys/setup-keys.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX Open Source", "module": "ansible.builtin.include_tasks", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX Open Source", "when": "nginx_type == \"opensource\"", "tags": "nginx_install_oss"}, "module_options": "{{ role_path }}/tasks/opensource/install-oss.yml", "executable": "{{ role_path }}/tasks/opensource/install-oss.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set up NGINX Plus license", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Set up NGINX Plus license", "when": ["nginx_type == \"plus\"", "nginx_setup_license | bool"], "tags": "nginx_setup_license"}, "module_options": "{{ role_path }}/tasks/plus/setup-license.yml", "executable": "{{ role_path }}/tasks/plus/setup-license.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX Plus", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX Plus", "when": "nginx_type == \"plus\"", "tags": "nginx_install_plus"}, "module_options": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX dynamic modules", "module": "ansible.builtin.include_tasks", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX dynamic modules", "when": ["nginx_modules is defined", "nginx_modules | length > 0"], "tags": "nginx_install_modules"}, "module_options": "{{ role_path }}/tasks/modules/install-modules.yml", "executable": "{{ role_path }}/tasks/modules/install-modules.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove NGINX Plus license", "module": "ansible.builtin.include_tasks", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Remove NGINX Plus license", "when": ["nginx_type == \"plus\"", "nginx_remove_license | bool"], "tags": "nginx_remove_license"}, "module_options": "{{ role_path }}/tasks/plus/remove-license.yml", "executable": "{{ role_path }}/tasks/plus/remove-license.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Modify systemd parameters", "module": "ansible.builtin.include_tasks", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Modify systemd parameters", "when": ["ansible_facts['service_mgr'] == \"systemd\"", "nginx_service_modify | bool"], "tags": "nginx_modify_systemd"}, "module_options": "{{ role_path }}/tasks/config/modify-systemd.yml", "executable": "{{ role_path }}/tasks/config/modify-systemd.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Trigger handlers if necessary", "module": "ansible.builtin.meta", "index": 10, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Trigger handlers if necessary"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "Debug NGINX output", "module": "ansible.builtin.include_tasks", "index": 11, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Debug NGINX output", "when": ["nginx_debug_output | bool", "nginx_state != \"absent\""], "tags": "nginx_debug_output"}, "module_options": "{{ role_path }}/tasks/config/debug-output.yml", "executable": "{{ role_path }}/tasks/config/debug-output.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure logrotate for NGINX", "module": "ansible.builtin.include_tasks", "index": 12, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Configure logrotate for NGINX", "when": ["nginx_logrotate_conf_enable | bool", "nginx_state != \"absent\""], "tags": "nginx_logrotate_config"}, "module_options": "{{ role_path }}/tasks/config/setup-logrotate.yml", "executable": "{{ role_path }}/tasks/config/setup-logrotate.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install NGINX Amplify", "module": "ansible.builtin.include_tasks", "index": 13, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Install NGINX Amplify", "when": ["nginx_amplify_enable | bool", "nginx_amplify_api_key is defined", "nginx_amplify_api_key | length > 0"], "tags": "nginx_install_amplify"}, "module_options": "{{ role_path }}/tasks/amplify/install-amplify.yml", "executable": "{{ role_path }}/tasks/amplify/install-amplify.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml": {"py/object": "struct4.TaskFile", "name": "install-dependencies.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) Install dependencies", "module": "community.general.apk", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(Alpine Linux) Install dependencies", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"name": "{{ nginx_alpine_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install dependencies", "module": "ansible.builtin.apt", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(Debian/Ubuntu) Install dependencies", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"name": "{{ nginx_debian_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install dependencies", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install dependencies", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": "{{ nginx_redhat_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) Install dependencies", "module": "community.general.zypper", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(SLES) Install dependencies", "when": "ansible_facts['os_family'] == \"Suse\""}, "module_options": {"name": "{{ nginx_sles_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) Install dependencies using package(s)", "module": "community.general.pkgng", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(FreeBSD) Install dependencies using package(s)", "when": "nginx_bsd_install_packages | bool"}, "module_options": {"name": "{{ nginx_freebsd_dependencies }}", "state": "latest"}, "executable": "community.general.pkgng", "executable_type": "Module", "fqcn": "community.general.pkgng", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) Install dependencies using port(s)", "module": "community.general.portinstall", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(FreeBSD) Install dependencies using port(s)", "loop": "{{ nginx_freebsd_dependencies }}", "when": "not nginx_bsd_install_packages | bool"}, "module_options": {"name": "{{ item }}", "use_packages": "{{ nginx_bsd_portinstall_use_packages | default(omit) }}", "state": "latest"}, "executable": "community.general.portinstall", "executable_type": "Module", "fqcn": "community.general.portinstall", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml": {"py/object": "struct4.TaskFile", "name": "prerequisites.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "tasks": [{"py/object": "struct4.Task", "name": "Install dependencies", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "options": {"name": "Install dependencies"}, "module_options": "{{ role_path }}/tasks/prerequisites/install-dependencies.yml", "executable": "{{ role_path }}/tasks/prerequisites/install-dependencies.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if SELinux is enabled", "module": "ansible.builtin.debug", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "options": {"name": "Check if SELinux is enabled", "when": "ansible_facts['selinux'] is undefined"}, "module_options": {"msg": "You need to enable SELinux, if it was disabled you need to reboot"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure SELinux", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "options": {"name": "Configure SELinux", "when": "ansible_facts['selinux']['mode'] is defined"}, "module_options": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml": {"py/object": "struct4.TaskFile", "name": "setup-selinux.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "tasks": [{"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install dependencies", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "(CentOS/RHEL) Install dependencies", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": ["libselinux-utils", "policycoreutils", "selinux-policy-targeted"]}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set SELinux mode to permissive", "module": "ansible.posix.selinux", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to permissive"}, "module_options": {"state": "permissive", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux HTTP network connections", "module": "ansible.posix.seboolean", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux HTTP network connections", "loop": ["httpd_can_network_connect", "httpd_can_network_relay"]}, "module_options": {"name": "{{ item }}", "state": true, "persistent": true}, "executable": "ansible.posix.seboolean", "executable_type": "Module", "fqcn": "ansible.posix.seboolean", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on specific ports", "module": "community.general.seport", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on specific ports", "when": "nginx_selinux_tcp_ports is defined"}, "module_options": {"ports": "{{ nginx_selinux_tcp_ports }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux UDP connections on specific ports", "module": "community.general.seport", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux UDP connections on specific ports", "when": "nginx_selinux_udp_ports is defined"}, "module_options": {"ports": "{{ nginx_selinux_udp_ports }}", "proto": "udp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create SELinux NGINX Plus module", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Create SELinux NGINX Plus module", "register": "nginx_selinux_module"}, "module_options": {"src": "{{ role_path }}/templates/selinux/nginx-plus-module.te.j2", "dest": "{{ nginx_selinux_tempdir }}/nginx-plus-module.te", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check SELinux NGINX Plus module", "module": "ansible.builtin.command", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Check SELinux NGINX Plus module", "args": {"creates": "{{ nginx_selinux_tempdir }}/nginx-plus-module.mod"}, "changed_when": false}, "module_options": "checkmodule -M -m -o {{ nginx_selinux_tempdir }}/nginx-plus-module.mod {{ nginx_selinux_tempdir }}/nginx-plus-module.te", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Compile SELinux NGINX Plus module", "module": "ansible.builtin.command", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Compile SELinux NGINX Plus module", "args": {"creates": "{{ nginx_selinux_tempdir }}/nginx-plus-module.pp"}, "changed_when": false}, "module_options": "semodule_package -o {{ nginx_selinux_tempdir }}/nginx-plus-module.pp -m {{ nginx_selinux_tempdir }}/nginx-plus-module.mod", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Import SELinux NGINX Plus module", "module": "ansible.builtin.command", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Import SELinux NGINX Plus module", "changed_when": false, "when": "nginx_selinux_module.changed | bool"}, "module_options": "semodule -i {{ nginx_selinux_tempdir }}/nginx-plus-module.pp", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set SELinux mode to enforcing", "module": "ansible.posix.selinux", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to enforcing", "when": "nginx_selinux_enforcing | bool"}, "module_options": {"state": "enforcing", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml": {"py/object": "struct4.TaskFile", "name": "debug-output.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml", "tasks": [{"py/object": "struct4.Task", "name": "Register NGINX config", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml", "options": {"name": "Register NGINX config", "ignore_errors": "{{ ansible_check_mode }}", "check_mode": false, "changed_when": false, "register": "config_full"}, "module_options": "nginx -T", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Print NGINX config", "module": "ansible.builtin.debug", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml", "options": {"name": "Print NGINX config", "when": "config_full.stdout_lines is defined"}, "module_options": {"var": "config_full.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml": {"py/object": "struct4.TaskFile", "name": "setup-logrotate.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) Install logrotate", "module": "community.general.apk", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(Alpine Linux) Install logrotate", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"name": "logrotate"}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install logrotate", "module": "ansible.builtin.apt", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(Debian/Ubuntu) Install logrotate", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"name": "logrotate", "state": "present"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install logrotate", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install logrotate", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": "logrotate", "state": "present"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) Configure logrotate repository", "module": "community.general.zypper_repository", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(SLES) Configure logrotate repository"}, "module_options": {"repo": "https://download.opensuse.org/repositories/openSUSE:Leap:42.1/standard/openSUSE:Leap:42.1.repo"}, "executable": "community.general.zypper_repository", "executable_type": "Module", "fqcn": "community.general.zypper_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) Install Logrotate", "module": "community.general.zypper", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(SLES) Install Logrotate"}, "module_options": {"name": "logrotate", "state": "present"}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create logrotate config", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "Create logrotate config", "notify": "(Handler) Run logrotate"}, "module_options": {"src": "logrotate/nginx.j2", "dest": "/etc/logrotate.d/nginx", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml": {"py/object": "struct4.TaskFile", "name": "modify-systemd.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "tasks": [{"py/object": "struct4.Task", "name": "Create override directory for NGINX systemd service", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Create override directory for NGINX systemd service"}, "module_options": {"path": "{{ nginx_service_overridepath }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create override for NGINX systemd service", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Create override for NGINX systemd service", "when": ["not nginx_service_custom | bool", "not nginx_service_clean | bool"], "notify": "(Handler) Systemd daemon-reload"}, "module_options": {"src": "{{ role_path }}/templates/services/nginx.service.override.conf.j2", "dest": "{{ nginx_service_overridepath }}/{{ nginx_service_overridefilename }}", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Customize override for NGINX systemd service", "module": "ansible.builtin.copy", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Customize override for NGINX systemd service", "when": ["nginx_service_custom | bool", "not nginx_service_clean | bool"], "notify": "(Handler) Systemd daemon-reload"}, "module_options": {"src": "{{ nginx_service_custom_file }}", "dest": "{{ nginx_service_overridepath }}/{{ nginx_service_overridefilename }}", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove override for NGINX systemd service", "module": "ansible.builtin.file", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Remove override for NGINX systemd service", "when": "nginx_service_clean | bool", "notify": "(Handler) Systemd daemon-reload"}, "module_options": {"path": "{{ nginx_service_overridepath }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-debian.yml": {"py/object": "struct4.TaskFile", "name": "setup-debian.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-debian.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Add NGINX Amplify agent repository", "module": "ansible.builtin.apt_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-debian.yml", "options": {"name": "(Debian/Ubuntu) Add NGINX Amplify agent repository"}, "module_options": {"filename": "nginx-amplify", "repo": "deb [arch=amd64 signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://packages.amplify.nginx.com/py3/{{ ansible_facts['distribution'] | lower }}/ {{ ansible_facts['distribution_release'] | lower }} amplify-agent", "update_cache": true, "mode": 420}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml": {"py/object": "struct4.TaskFile", "name": "install-amplify.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "tasks": [{"py/object": "struct4.Task", "name": "Configure NGINX Amplify agent repository", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Configure NGINX Amplify agent repository", "when": "ansible_facts['os_family'] in ['Debian', 'RedHat']"}, "module_options": "{{ role_path }}/tasks/amplify/setup-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/amplify/setup-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install NGINX Amplify agent", "module": "ansible.builtin.package", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Install NGINX Amplify agent"}, "module_options": {"name": "nginx-amplify-agent", "state": "present"}, "executable": "ansible.builtin.package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy NGINX Amplify configurator agent configuration template", "module": "ansible.builtin.copy", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Copy NGINX Amplify configurator agent configuration template"}, "module_options": {"remote_src": true, "src": "/etc/amplify-agent/agent.conf.default", "dest": "/etc/amplify-agent/agent.conf", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NGINX Amplify agent API key", "module": "ansible.builtin.lineinfile", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Configure NGINX Amplify agent API key", "notify": "(Handler) Start NGINX Amplify agent"}, "module_options": {"dest": "/etc/amplify-agent/agent.conf", "regexp": "api_key =.*", "line": "api_key = {{ nginx_amplify_api_key }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-redhat.yml": {"py/object": "struct4.TaskFile", "name": "setup-redhat.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-redhat.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/RHEL) Add NGINX Amplify agent repository", "module": "ansible.builtin.yum_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/RHEL) Add NGINX Amplify agent repository"}, "module_options": {"name": "nginx-amplify", "baseurl": "https://packages.amplify.nginx.com/{{ (ansible_facts['distribution_major_version'] == \"7\") | ternary('', 'py3/') }}{{ (ansible_facts['distribution'] == \"Amazon\") | ternary('amzn', 'centos') }}/$releasever/$basearch/", "description": "NGINX Amplify Agent", "enabled": true, "gpgcheck": true, "mode": 420}, "executable": "ansible.builtin.yum_repository", "executable_type": "Module", "fqcn": "ansible.builtin.yum_repository", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml": {"py/object": "struct4.TaskFile", "name": "install-bsd.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "tasks": [{"py/object": "struct4.Task", "name": "(FreeBSD) Fetch ports", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) Fetch ports", "args": {"creates": "/var/db/portsnap/INDEX"}}, "module_options": "portsnap fetch --interactive", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) Extract ports", "module": "ansible.builtin.command", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) Extract ports", "args": {"creates": "/usr/ports"}}, "module_options": "portsnap extract", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "community.general.pkgng", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "www/nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}"}, "executable": "community.general.pkgng", "executable_type": "Module", "fqcn": "community.general.pkgng", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "community.general.portinstall", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "www/nginx{{ nginx_version | default('') }}", "use_packages": "{{ nginx_bsd_portinstall_use_packages | default(omit) }}", "state": "{{ nginx_state }}"}, "executable": "community.general.portinstall", "executable_type": "Module", "fqcn": "community.general.portinstall", "annotations": {}}, {"py/object": "struct4.Task", "name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "community.general.openbsd_pkg", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "build": false, "state": "{{ nginx_state }}"}, "executable": "community.general.openbsd_pkg", "executable_type": "Module", "fqcn": "community.general.openbsd_pkg", "annotations": {}}, {"py/object": "struct4.Task", "name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "community.general.openbsd_pkg", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "build": true, "state": "{{ nginx_state }}"}, "executable": "community.general.openbsd_pkg", "executable_type": "Module", "fqcn": "community.general.openbsd_pkg", "annotations": {}}, {"py/object": "struct4.Task", "name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "ansible.builtin.command", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": "pkg_add www/nginx{{ nginx_version | default('') }}", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "ansible.builtin.fail", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool"}, "module_options": {"msg": "{{ ansible_facts['system'] }} {{ nginx_setup | capitalize }} NGINX port not implemented."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "ansible.builtin.command", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": "pkg install www/nginx{{ nginx_version | default('') }}", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "ansible.builtin.fail", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool"}, "module_options": {"msg": "{{ ansible_facts['system'] }} {{ nginx_setup | capitalize }} NGINX port not implemented."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml": {"py/object": "struct4.TaskFile", "name": "install-alpine.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "ansible.builtin.lineinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "when": "nginx_manage_repo | bool"}, "module_options": {"path": "/etc/apk/repositories", "insertafter": "EOF", "line": "{{ nginx_repository | default(nginx_default_repository_alpine) }}", "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX", "module": "community.general.apk", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ (nginx_repository is not defined and nginx_setup != 'uninstall') | ternary('@nginx', '') }}{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml": {"py/object": "struct4.TaskFile", "name": "install-suse.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml", "tasks": [{"py/object": "struct4.Task", "name": "(SLES) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "community.general.zypper_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml", "options": {"name": "(SLES) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx-{{ nginx_branch }}", "repo": "{{ nginx_repository | default(nginx_default_repository_suse) }}", "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "community.general.zypper_repository", "executable_type": "Module", "fqcn": "community.general.zypper_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) {{ nginx_setup | capitalize }} NGINX", "module": "community.general.zypper", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml", "options": {"name": "(SLES) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "disable_recommends": false, "update_cache": true}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml": {"py/object": "struct4.TaskFile", "name": "install-oss.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX from repository", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX from repository", "when": "nginx_install_from == \"nginx_repository\""}, "module_options": "{{ role_path }}/tasks/opensource/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/opensource/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX from source", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX from source", "when": "nginx_install_from == \"source\""}, "module_options": "{{ role_path }}/tasks/opensource/install-source.yml", "executable": "{{ role_path }}/tasks/opensource/install-source.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX from package", "module": "ansible.builtin.package", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX from package", "when": "nginx_install_from == \"os_repository\"", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}"}, "executable": "ansible.builtin.package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX in Unix systems", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX in Unix systems", "when": "ansible_facts['system'] | lower is search('bsd')"}, "module_options": "{{ role_path }}/tasks/opensource/install-bsd.yml", "executable": "{{ role_path }}/tasks/opensource/install-bsd.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml": {"py/object": "struct4.TaskFile", "name": "install-debian.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "ansible.builtin.apt_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "loop": "{{ nginx_repository | default(nginx_default_repository_debian) }}", "when": "nginx_manage_repo | bool"}, "module_options": {"filename": "nginx", "repo": "{{ item }}", "update_cache": true, "mode": 420, "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Unpin', 'Pin') }} NGINX repository", "module": "ansible.builtin.blockinfile", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Unpin', 'Pin') }} NGINX repository", "when": "nginx_repository is not defined"}, "module_options": {"path": "/etc/apt/preferences.d/99nginx", "create": true, "block": "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n", "mode": 420, "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX", "module": "ansible.builtin.apt", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml": {"py/object": "struct4.TaskFile", "name": "install-source.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "tasks": [{"py/object": "struct4.Task", "name": "(RHEL 8) Install Python 3", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(RHEL 8) Install Python 3"}, "module_options": {"name": ["python3", "python3-pip", "python3-devel"], "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RHEL 8) Set Python 3 as default", "module": "community.general.alternatives", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(RHEL 8) Set Python 3 as default"}, "module_options": {"name": "python", "path": "/usr/bin/python3", "link": "/usr/bin/python"}, "executable": "community.general.alternatives", "executable_type": "Module", "fqcn": "community.general.alternatives", "annotations": {}}, {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install build tools", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install build tools", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": ["ca-certificates", "gcc", "gd", "gd-devel", "glibc", "glibc-common", "make", "perl-core", "tar", "unzip", "wget", "zlib-devel"], "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Install backports repo for 'buster'", "module": "ansible.builtin.apt_repository", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian) Install backports repo for 'buster'", "when": "ansible_facts['distribution_release'] == \"buster\""}, "module_options": {"filename": "buster-backports", "repo": "deb http://ftp.us.debian.org/debian buster-backports main", "update_cache": true, "mode": 420}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install build tools", "module": "ansible.builtin.apt", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install build tools", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"name": ["build-essential", "checkinstall", "libtemplate-perl", "python3-minimal", "perl", "tar", "zlib1g-dev"], "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Install build tools", "module": "community.general.apk", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install build tools", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"name": ["alpine-sdk", "build-base", "git", "openrc", "perl", "python3", "linux-headers", "tar", "wget"], "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Enable OpenRC", "module": "ansible.builtin.copy", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Enable OpenRC", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"content": "", "dest": "/run/openrc/softlevel", "force": false, "owner": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for PCRE install", "module": "ansible.builtin.stat", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for PCRE install", "register": "pcre_result"}, "module_options": {"path": "/tmp/{{ pcre_version }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for ZLib install", "module": "ansible.builtin.stat", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for ZLib install", "register": "zlib_result"}, "module_options": {"path": "/tmp/{{ zlib_version }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for OpenSSL install", "module": "ansible.builtin.stat", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for OpenSSL install", "register": "openssl_result"}, "module_options": {"path": "/tmp/{{ openssl_version }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install PCRE dependency from package", "module": "ansible.builtin.yum", "index": 10, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install PCRE dependency from package", "when": ["nginx_install_source_pcre | bool", "ansible_facts['os_family'] == \"RedHat\""]}, "module_options": {"name": "pcre-devel", "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install PCRE dependency from package", "module": "ansible.builtin.apt", "index": 11, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install PCRE dependency from package", "when": ["nginx_install_source_pcre | bool", "ansible_facts['os_family'] == \"Debian\""]}, "module_options": {"name": "libpcre3-dev", "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Install PCRE dependency from package", "module": "community.general.apk", "index": 12, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install PCRE dependency from package", "when": ["nginx_install_source_pcre | bool", "ansible_facts['os_family'] == \"Alpine\""]}, "module_options": {"name": "pcre-dev", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "Download PCRE dependency", "module": "ansible.builtin.get_url", "index": 13, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download PCRE dependency", "register": "pcre_source"}, "module_options": {"url": "https://ftp.exim.org/pub/pcre/{{ pcre_version }}.tar.gz", "dest": "/tmp/{{ pcre_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack PCRE dependency", "module": "ansible.builtin.unarchive", "index": 14, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack PCRE dependency"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ pcre_source.dest }}", "mode": 448}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure PCRE dependency", "module": "ansible.builtin.command", "index": 15, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure PCRE dependency", "args": {"chdir": "/tmp/{{ pcre_version }}", "creates": "/tmp/makefile"}}, "module_options": "./configure", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Make PCRE dependency", "module": "community.general.make", "index": 16, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make PCRE dependency"}, "module_options": {"chdir": "/tmp/{{ pcre_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install PCRE dependency", "module": "community.general.make", "index": 17, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install PCRE dependency"}, "module_options": {"chdir": "/tmp/{{ pcre_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install ZLib dependency from package", "module": "ansible.builtin.yum", "index": 18, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install ZLib dependency from package", "when": ["nginx_install_source_zlib | bool", "ansible_facts['os_family'] == \"RedHat\""]}, "module_options": {"name": "zlib-devel", "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install ZLib dependency from package", "module": "ansible.builtin.apt", "index": 19, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install ZLib dependency from package", "when": ["nginx_install_source_zlib | bool", "ansible_facts['os_family'] == \"Debian\""]}, "module_options": {"name": "zlib1g-dev", "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Install ZLib dependency from package", "module": "community.general.apk", "index": 20, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install ZLib dependency from package", "when": ["nginx_install_source_zlib | bool", "ansible_facts['os_family'] == \"Alpine\""]}, "module_options": {"name": "zlib-dev", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "Download ZLib dependency", "module": "ansible.builtin.get_url", "index": 21, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download ZLib dependency", "register": "zlib_source"}, "module_options": {"url": "https://zlib.net/{{ zlib_version }}.tar.gz", "dest": "/tmp/{{ zlib_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack ZLib dependency", "module": "ansible.builtin.unarchive", "index": 22, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack ZLib dependency"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ zlib_source.dest }}", "mode": 448}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure ZLib dependency", "module": "ansible.builtin.command", "index": 23, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure ZLib dependency", "args": {"chdir": "/tmp/{{ zlib_version }}", "creates": "/tmp/makefile"}}, "module_options": "./configure", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Make ZLib dependency", "module": "community.general.make", "index": 24, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make ZLib dependency"}, "module_options": {"chdir": "/tmp/{{ zlib_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install ZLib dependency", "module": "community.general.make", "index": 25, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install ZLib dependency"}, "module_options": {"chdir": "/tmp/{{ zlib_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install OpenSSL dependency from package", "module": "ansible.builtin.yum", "index": 26, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install OpenSSL dependency from package", "when": ["nginx_install_source_openssl | bool", "ansible_facts['os_family'] == \"RedHat\""]}, "module_options": {"name": "openssl-devel", "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install OpenSSL dependency from package", "module": "ansible.builtin.apt", "index": 27, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install OpenSSL dependency from package", "when": ["nginx_install_source_openssl | bool", "ansible_facts['os_family'] == \"Debian\""]}, "module_options": {"name": "libssl-dev", "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Install OpenSSL dependency from package", "module": "community.general.apk", "index": 28, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install OpenSSL dependency from package", "when": ["nginx_install_source_openssl | bool", "ansible_facts['os_family'] == \"Alpine\""]}, "module_options": {"name": "openssl-dev", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "Download OpenSSL dependency", "module": "ansible.builtin.get_url", "index": 29, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download OpenSSL dependency", "register": "openssl_source"}, "module_options": {"url": "https://www.openssl.org/source/{{ openssl_version }}.tar.gz", "dest": "/tmp/{{ openssl_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack OpenSSL dependency", "module": "ansible.builtin.unarchive", "index": 30, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack OpenSSL dependency"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ openssl_source.dest }}", "mode": 448}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure OpenSSL dependency", "module": "ansible.builtin.command", "index": 31, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure OpenSSL dependency", "args": {"chdir": "/tmp/{{ openssl_version }}", "creates": "/tmp/makefile"}}, "module_options": "./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl shared zlib", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Make OpenSSL dependency", "module": "community.general.make", "index": 32, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make OpenSSL dependency"}, "module_options": {"chdir": "/tmp/{{ openssl_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install OpenSSL dependency", "module": "community.general.make", "index": 33, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install OpenSSL dependency"}, "module_options": {"chdir": "/tmp/{{ openssl_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fetch NGINX version", "module": "ansible.builtin.uri", "index": 34, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Fetch NGINX version", "check_mode": false, "register": "nginx_versions"}, "module_options": {"url": "https://version.nginx.com/nginx/{{ nginx_branch }}", "return_content": true}, "executable": "ansible.builtin.uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set NGINX version", "module": "ansible.builtin.set_fact", "index": 35, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Set NGINX version"}, "module_options": {"nginx_version": "{{ 'nginx-' + (nginx_versions.content | regex_search('([0-9]+\\.){2}[0-9]+')) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for NGINX install", "module": "ansible.builtin.stat", "index": 36, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for NGINX install", "register": "nginx_result"}, "module_options": {"path": "/usr/sbin/nginx", "follow": true}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add NGINX user", "module": "ansible.builtin.user", "index": 37, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Add NGINX user"}, "module_options": {"name": "nginx"}, "executable": "ansible.builtin.user", "executable_type": "Module", "fqcn": "ansible.builtin.user", "annotations": {}}, {"py/object": "struct4.Task", "name": "Download NGINX", "module": "ansible.builtin.get_url", "index": 38, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download NGINX", "register": "nginx_source"}, "module_options": {"url": "https://nginx.org/download/{{ nginx_version }}.tar.gz", "dest": "/tmp/{{ nginx_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack NGINX", "module": "ansible.builtin.unarchive", "index": 39, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack NGINX"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ nginx_source.dest }}", "mode": 493}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set static modules", "module": "ansible.builtin.set_fact", "index": 40, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Set static modules", "loop": "{{ nginx_static_modules }}"}, "module_options": {"nginx_install_source_static_modules": "{{ nginx_install_source_static_modules | default('') + ' --with-' + item }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NGINX", "module": "ansible.builtin.command", "index": 41, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure NGINX", "args": {"chdir": "/tmp/{{ nginx_version }}", "creates": "/tmp/makefile"}, "register": "nginx_configure"}, "module_options": "./configure --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --lock-path=/var/lock/nginx.lock --modules-path=/usr/lib/nginx/modules --prefix=/usr --pid-path=/var/run/nginx.pid --with-mail=dynamic --with-stream {{ nginx_install_source_pcre | ternary('', '--with-pcre=../' + pcre_version) }} {{ nginx_install_source_zlib | ternary('', '--with-zlib=../' + zlib_version) }} {{ nginx_install_source_openssl | ternary('', '--with-openssl=../' + openssl_version) }} {{ nginx_install_source_static_modules | default('') }}", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Make NGINX", "module": "community.general.make", "index": 42, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make NGINX"}, "module_options": {"chdir": "/tmp/{{ nginx_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install NGINX", "module": "community.general.make", "index": 43, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install NGINX"}, "module_options": {"chdir": "/tmp/{{ nginx_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload systemd NGINX service file", "module": "ansible.builtin.copy", "index": 44, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload systemd NGINX service file", "when": "ansible_facts['service_mgr'] == \"systemd\""}, "module_options": {"src": "services/nginx.systemd", "dest": "/lib/systemd/system/nginx.service", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable systemd NGINX service file", "module": "ansible.builtin.systemd", "index": 45, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Enable systemd NGINX service file", "when": "ansible_facts['service_mgr'] == \"systemd\"", "notify": "(Handler) Run NGINX"}, "module_options": {"daemon_reload": true, "name": "nginx", "state": "restarted", "enabled": true}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload upstart NGINX service file", "module": "ansible.builtin.copy", "index": 46, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload upstart NGINX service file", "when": "ansible_facts['service_mgr'] == \"upstart\""}, "module_options": {"src": "services/nginx.upstart", "dest": "/etc/init.d/nginx", "owner": "root", "group": "root", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload Upstart NGINX service conf file", "module": "ansible.builtin.copy", "index": 47, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload Upstart NGINX service conf file", "when": "ansible_facts['service_mgr'] == \"upstart\""}, "module_options": {"src": "services/nginx.conf.upstart", "dest": "/etc/init/nginx.conf", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable Upstart NGINX service reload", "module": "ansible.builtin.command", "index": 48, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Enable Upstart NGINX service reload", "when": "ansible_facts['service_mgr'] == \"upstart\""}, "module_options": "initctl reload-configuration", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Start Upstart NGINX service reload", "module": "ansible.builtin.command", "index": 49, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Start Upstart NGINX service reload", "when": "ansible_facts['service_mgr'] == \"upstart\"", "notify": "(Handler) Run NGINX"}, "module_options": "nginx", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload SysVinit NGINX service file", "module": "ansible.builtin.copy", "index": 50, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload SysVinit NGINX service file", "when": "ansible_facts['service_mgr'] == \"sysvinit\"", "notify": "(Handler) Run NGINX"}, "module_options": {"src": "services/nginx.sysvinit", "dest": "/etc/init.d/nginx", "owner": "root", "group": "root", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload OpenRC NGINX service file", "module": "ansible.builtin.copy", "index": 51, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload OpenRC NGINX service file", "when": "ansible_facts['service_mgr'] == \"openrc\""}, "module_options": {"src": "services/nginx.openrc", "dest": "/etc/init.d/nginx", "owner": "root", "group": "root", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable OpenRC NGINX service", "module": "ansible.builtin.command", "index": 52, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Enable OpenRC NGINX service", "when": "ansible_facts['service_mgr'] == \"openrc\"", "notify": "(Handler) Run NGINX"}, "module_options": "rc-update add nginx default", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Cleanup downloads", "module": "ansible.builtin.file", "index": 53, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Cleanup downloads", "loop": ["{{ pcre_source.dest }}", "{{ zlib_source.dest }}", "{{ openssl_source.dest }}", "{{ nginx_source.dest }}"], "when": "item is defined"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml": {"py/object": "struct4.TaskFile", "name": "install-redhat.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/RHEL) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "ansible.builtin.yum_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/RHEL) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx", "baseurl": "{{ nginx_repository | default(lookup('vars', 'nginx_default_repository_' + ((ansible_facts['distribution'] == 'Amazon') | ternary('amazon', 'redhat')))) }}", "description": "NGINX Repository", "enabled": true, "gpgcheck": true, "mode": 420, "module_hotfixes": "{{ omit if ansible_version.full is version('2.11', '<') else true }}", "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.yum_repository", "executable_type": "Module", "fqcn": "ansible.builtin.yum_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/RHEL) {{ nginx_setup | capitalize }} NGINX", "module": "ansible.builtin.yum", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/RHEL) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml": {"py/object": "struct4.TaskFile", "name": "setup-keys.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) Set up NGINX signing key URL", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Alpine Linux) Set up NGINX signing key URL"}, "module_options": {"keysite": "{{ nginx_signing_key | default(nginx_default_signing_key_rsa_pub) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Download NGINX signing key", "module": "ansible.builtin.get_url", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Alpine Linux) Download NGINX signing key"}, "module_options": {"url": "{{ keysite }}", "dest": "/etc/apk/keys/nginx_signing.rsa.pub", "mode": 256}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Set up NGINX signing key URL", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Set up NGINX signing key URL", "when": "ansible_facts['os_family'] != \"Alpine\""}, "module_options": {"keysite": "{{ nginx_signing_key | default(nginx_default_signing_key_pgp) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Add NGINX signing key", "module": "ansible.builtin.apt_key", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Debian/Ubuntu) Add NGINX signing key", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"id": "573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62", "keyring": "/usr/share/keyrings/nginx-archive-keyring.gpg", "url": "{{ keysite }}"}, "executable": "ansible.builtin.apt_key", "executable_type": "Module", "fqcn": "ansible.builtin.apt_key", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL/SLES) Add NGINX signing key", "module": "ansible.builtin.rpm_key", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL/SLES) Add NGINX signing key", "when": "ansible_facts['os_family'] in ['RedHat', 'Suse']"}, "module_options": {"fingerprint": "573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62", "key": "{{ keysite }}"}, "executable": "ansible.builtin.rpm_key", "executable_type": "Module", "fqcn": "ansible.builtin.rpm_key", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml": {"py/object": "struct4.TaskFile", "name": "install-modules.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "tasks": [{"py/object": "struct4.Task", "name": "(CentOS) Install GeoIP EPEL dependencies", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "(CentOS) Install GeoIP EPEL dependencies", "when": ["ansible_facts['distribution'] == \"CentOS\"", "\"geoip\" in nginx_modules", "nginx_install_epel_release | bool"]}, "module_options": {"name": "epel-release"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RHEL) Import EPEL GPG key", "module": "ansible.builtin.rpm_key", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "(RHEL) Import EPEL GPG key"}, "module_options": {"state": "present", "key": "https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_facts['distribution_major_version'] }}"}, "executable": "ansible.builtin.rpm_key", "executable_type": "Module", "fqcn": "ansible.builtin.rpm_key", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RHEL) Install package dependencies", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "(RHEL) Install package dependencies"}, "module_options": {"name": "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_facts['distribution_major_version'] }}.noarch.rpm"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup NGINX modules", "module": "ansible.builtin.package", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "Setup NGINX modules", "loop": "{{ nginx_modules }}", "when": ["(item.name | default(item) in nginx_modules_list and nginx_type == 'opensource') or (item.name | default(item) in nginx_plus_modules_list and nginx_type == 'plus')", "not (item.name | default(item) == \"auth-spnego\") or not (ansible_facts['os_family'] == \"Alpine\" and (ansible_facts['distribution_version'] | regex_search('^[0-9]+\\\\.[0-9]+') is version('3.8', '==')))", "not (item.name | default(item) == \"brotli\") or not ((ansible_facts['os_family'] == \"Alpine\") or (ansible_facts['distribution'] == \"Amazon\") or (ansible_facts['os_family'] == \"Debian\" and ansible_facts['distribution_major_version'] is version('9', '==')) or (ansible_facts['distribution'] == \"OracleLinux\") or (ansible_facts['os_family'] == \"RedHat\" and ansible_facts['distribution_major_version'] is version('8', '<')) or (ansible_facts['os_family'] == \"Suse\" and ansible_facts['distribution_major_version'] is version('12', '<')))", "not (item.name | default(item) == \"geoip\") or not ((ansible_facts['os_family'] == \"FreeBSD\") or (ansible_facts['os_family'] == \"RedHat\" and ansible_facts['distribution_major_version'] is version('8', '==')))", "not (item.name | default(item) == \"geoip2\") or not ((ansible_facts['distribution'] == 'Amazon') or (ansible_facts['os_family'] == \"Suse\"))", "not (item.name | default(item) == \"opentracing\") or not ((ansible_facts['distribution'] == 'Amazon') or (ansible_facts['os_family'] == \"Suse\" and ansible_facts['distribution_major_version'] is version('12', '==')))"]}, "module_options": {"name": "nginx-{{ (nginx_type == 'plus') | ternary('plus-', '') }}module-{{ item.name | default(item) }}{{ item.version | default(nginx_version) | default('') }}{{ (nginx_repository is not defined and ansible_facts['os_family'] == 'Alpine' and nginx_type != 'plus') | ternary('@nginx', '') }}", "state": "{{ item.state | default('present') }}"}, "executable": "ansible.builtin.package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml": {"py/object": "struct4.TaskFile", "name": "install-alpine.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.lineinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"path": "/etc/apk/repositories", "insertafter": "EOF", "line": "{{ nginx_repository | default(nginx_plus_default_repository_alpine) }}", "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX Plus", "module": "community.general.apk", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "repository": "{{ nginx_repository | default(nginx_plus_default_repository_alpine) }}", "state": "{{ nginx_state }}"}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml": {"py/object": "struct4.TaskFile", "name": "install-freebsd.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "tasks": [{"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification", "module": "ansible.builtin.blockinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "options": {"name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification"}, "module_options": {"path": "/usr/local/etc/pkg.conf", "block": "PKG_ENV: { SSL_NO_VERIFY_PEER: \"1\",\nSSL_CLIENT_CERT_FILE: \"/etc/ssl/nginx/nginx-repo.crt\",\nSSL_CLIENT_KEY_FILE: \"/etc/ssl/nginx/nginx-repo.key\" }\n", "state": "{{ nginx_license_status | default ('present') }}"}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.blockinfile", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "options": {"name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"path": "/etc/pkg/nginx-plus.conf", "create": true, "block": "nginx-plus: {\nURL: {{ nginx_repository | default(nginx_plus_default_repository_freebsd) }}\nENABLED: yes\nMIRROR_TYPE: SRV\n}\n", "state": "{{ nginx_license_status | default ('present') }}", "mode": 420}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX Plus", "module": "community.general.pkgng", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "options": {"name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX Plus", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}"}, "executable": "community.general.pkgng", "executable_type": "Module", "fqcn": "community.general.pkgng", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml": {"py/object": "struct4.TaskFile", "name": "install-suse.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml", "tasks": [{"py/object": "struct4.Task", "name": "(SLES) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "community.general.zypper_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml", "options": {"name": "(SLES) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx-plus", "repo": "{{ nginx_repository | default(nginx_plus_default_repository_suse) }}", "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}"}, "executable": "community.general.zypper_repository", "executable_type": "Module", "fqcn": "community.general.zypper_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) {{ nginx_setup | capitalize }} NGINX Plus", "module": "community.general.zypper", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml", "options": {"name": "(SLES) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml": {"py/object": "struct4.TaskFile", "name": "install-debian.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification", "module": "ansible.builtin.blockinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification"}, "module_options": {"path": "/etc/apt/apt.conf.d/90nginx", "create": true, "block": "Acquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::Verify-Peer \"true\";\nAcquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::Verify-Host \"true\";\nAcquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::SslCert     \"/etc/ssl/nginx/nginx-repo.crt\";\nAcquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::SslKey      \"/etc/ssl/nginx/nginx-repo.key\";\n", "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}", "mode": 292}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.apt_repository", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"filename": "nginx-plus", "repo": "{{ nginx_repository | default(nginx_plus_default_repository_debian) }}", "update_cache": false, "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}", "mode": 420}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX Plus", "module": "ansible.builtin.apt", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml": {"py/object": "struct4.TaskFile", "name": "remove-license.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "tasks": [{"py/object": "struct4.Task", "name": "Set NGINX Plus license state to absent", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "Set NGINX Plus license state to absent"}, "module_options": {"nginx_license_status": "absent"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Delete NGINX Plus license", "module": "ansible.builtin.file", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Delete NGINX Plus license", "when": "ansible_facts['distribution'] != \"Alpine\""}, "module_options": {"path": "/etc/ssl/nginx", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Delete NGINX Plus license", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "(Alpine Linux) Delete NGINX Plus license", "loop": ["/etc/apk/cert.key", "/etc/apk/cert.pem"], "when": "ansible_facts['distribution'] == \"Alpine\""}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove NGINX Plus repository data", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "Remove NGINX Plus repository data"}, "module_options": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml": {"py/object": "struct4.TaskFile", "name": "setup-license.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Create SSL directory", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Create SSL directory"}, "module_options": {"path": "/etc/ssl/nginx", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Copy NGINX Plus certificate and license key", "module": "ansible.builtin.copy", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Copy NGINX Plus certificate and license key", "loop": ["{{ nginx_license['certificate'] }}", "{{ nginx_license['key'] }}"]}, "module_options": {"src": "{{ item }}", "dest": "/etc/ssl/nginx", "decrypt": true, "mode": 292}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Create APK directory", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Alpine Linux) Create APK directory"}, "module_options": {"path": "/etc/apk", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Copy NGINX Plus key", "module": "ansible.builtin.copy", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Alpine Linux) Copy NGINX Plus key"}, "module_options": {"src": "{{ nginx_license['key'] }}", "dest": "/etc/apk/cert.key", "decrypt": true, "mode": 292}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Copy NGINX Plus certificate", "module": "ansible.builtin.copy", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Alpine Linux) Copy NGINX Plus certificate"}, "module_options": {"src": "{{ nginx_license['certificate'] }}", "dest": "/etc/apk/cert.pem", "decrypt": true, "mode": 292}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) Combine NGINX Plus certificate and license key", "module": "ansible.builtin.assemble", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(SLES) Combine NGINX Plus certificate and license key", "when": "ansible_facts['os_family'] == \"Suse\""}, "module_options": {"src": "/etc/ssl/nginx", "dest": "/etc/ssl/nginx/nginx-repo-bundle.crt", "mode": 292}, "executable": "ansible.builtin.assemble", "executable_type": "Module", "fqcn": "ansible.builtin.assemble", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml": {"py/object": "struct4.TaskFile", "name": "install-redhat.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ (nginx_license_status is defined or nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.yum_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ (nginx_license_status is defined or nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx-plus", "baseurl": "{{ nginx_repository | default(lookup('vars', 'nginx_plus_default_repository_' + ((ansible_facts['distribution'] == 'Amazon') | ternary('amazon', 'redhat')))) }}", "description": "NGINX Plus Repository", "sslclientcert": "/etc/ssl/nginx/nginx-repo.crt", "sslclientkey": "/etc/ssl/nginx/nginx-repo.key", "enabled": true, "gpgcheck": true, "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}", "mode": 420}, "executable": "ansible.builtin.yum_repository", "executable_type": "Module", "fqcn": "ansible.builtin.yum_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ nginx_setup | capitalize }} NGINX Plus", "module": "ansible.builtin.yum", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}}, "role_dict": {"nginxinc.nginx": {"py/object": "struct4.Role", "name": "nginxinc.nginx", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx", "fqcn": "nginxinc.nginx", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check whether you are using a supported NGINX distribution", "module": "ansible.builtin.assert", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Check whether you are using a supported NGINX distribution", "when": ["nginx_enable | bool", "(nginx_install_from == \"nginx_repository\" or nginx_type == \"plus\")"], "ignore_errors": true, "tags": "nginx_check_support"}, "module_options": {"that": "(nginx_type == \"opensource\" and ansible_facts['distribution'] in nginx_distributions) or (nginx_type == \"plus\" and ansible_facts['distribution'] in nginx_plus_distributions)", "success_msg": "Your OS, {{ ansible_facts['distribution'] }} is supported by NGINX {{ (nginx_type=='plus') | ternary('Plus', 'Open Source') }}", "fail_msg": "Your OS, {{ ansible_facts['distribution'] }} is not supported by NGINX {{ (nginx_type=='plus') | ternary('Plus', 'Open Source') }}"}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check that NGINX setup is an allowed value", "module": "ansible.builtin.assert", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Check that NGINX setup is an allowed value", "when": "nginx_enable | bool", "ignore_errors": true, "tags": "nginx_check_support"}, "module_options": {"that": "nginx_setup in nginx_setup_vars", "fail_msg": "The value {{ nginx_setup }} you used for `nginx_setup` is not allowed. Try one of {{ nginx_setup_vars | join(', ') }}."}, "executable": "ansible.builtin.assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set up prerequisites", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Set up prerequisites", "when": "nginx_state != \"absent\"", "tags": "nginx_prerequisites"}, "module_options": "{{ role_path }}/tasks/prerequisites/prerequisites.yml", "executable": "{{ role_path }}/tasks/prerequisites/prerequisites.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set up signing keys", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Set up signing keys", "when": "(nginx_enable | bool and nginx_install_from == \"nginx_repository\") or nginx_amplify_enable | bool", "tags": "nginx_key"}, "module_options": "{{ role_path }}/tasks/keys/setup-keys.yml", "executable": "{{ role_path }}/tasks/keys/setup-keys.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX Open Source", "module": "ansible.builtin.include_tasks", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX Open Source", "when": "nginx_type == \"opensource\"", "tags": "nginx_install_oss"}, "module_options": "{{ role_path }}/tasks/opensource/install-oss.yml", "executable": "{{ role_path }}/tasks/opensource/install-oss.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set up NGINX Plus license", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Set up NGINX Plus license", "when": ["nginx_type == \"plus\"", "nginx_setup_license | bool"], "tags": "nginx_setup_license"}, "module_options": "{{ role_path }}/tasks/plus/setup-license.yml", "executable": "{{ role_path }}/tasks/plus/setup-license.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX Plus", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX Plus", "when": "nginx_type == \"plus\"", "tags": "nginx_install_plus"}, "module_options": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX dynamic modules", "module": "ansible.builtin.include_tasks", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX dynamic modules", "when": ["nginx_modules is defined", "nginx_modules | length > 0"], "tags": "nginx_install_modules"}, "module_options": "{{ role_path }}/tasks/modules/install-modules.yml", "executable": "{{ role_path }}/tasks/modules/install-modules.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove NGINX Plus license", "module": "ansible.builtin.include_tasks", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Remove NGINX Plus license", "when": ["nginx_type == \"plus\"", "nginx_remove_license | bool"], "tags": "nginx_remove_license"}, "module_options": "{{ role_path }}/tasks/plus/remove-license.yml", "executable": "{{ role_path }}/tasks/plus/remove-license.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Modify systemd parameters", "module": "ansible.builtin.include_tasks", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Modify systemd parameters", "when": ["ansible_facts['service_mgr'] == \"systemd\"", "nginx_service_modify | bool"], "tags": "nginx_modify_systemd"}, "module_options": "{{ role_path }}/tasks/config/modify-systemd.yml", "executable": "{{ role_path }}/tasks/config/modify-systemd.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Trigger handlers if necessary", "module": "ansible.builtin.meta", "index": 10, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Trigger handlers if necessary"}, "module_options": "flush_handlers", "executable": "ansible.builtin.meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "Debug NGINX output", "module": "ansible.builtin.include_tasks", "index": 11, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Debug NGINX output", "when": ["nginx_debug_output | bool", "nginx_state != \"absent\""], "tags": "nginx_debug_output"}, "module_options": "{{ role_path }}/tasks/config/debug-output.yml", "executable": "{{ role_path }}/tasks/config/debug-output.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure logrotate for NGINX", "module": "ansible.builtin.include_tasks", "index": 12, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Configure logrotate for NGINX", "when": ["nginx_logrotate_conf_enable | bool", "nginx_state != \"absent\""], "tags": "nginx_logrotate_config"}, "module_options": "{{ role_path }}/tasks/config/setup-logrotate.yml", "executable": "{{ role_path }}/tasks/config/setup-logrotate.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install NGINX Amplify", "module": "ansible.builtin.include_tasks", "index": 13, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/main.yml", "options": {"name": "Install NGINX Amplify", "when": ["nginx_amplify_enable | bool", "nginx_amplify_api_key is defined", "nginx_amplify_api_key | length > 0"], "tags": "nginx_install_amplify"}, "module_options": "{{ role_path }}/tasks/amplify/install-amplify.yml", "executable": "{{ role_path }}/tasks/amplify/install-amplify.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-dependencies.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) Install dependencies", "module": "community.general.apk", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(Alpine Linux) Install dependencies", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"name": "{{ nginx_alpine_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install dependencies", "module": "ansible.builtin.apt", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(Debian/Ubuntu) Install dependencies", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"name": "{{ nginx_debian_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install dependencies", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install dependencies", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": "{{ nginx_redhat_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) Install dependencies", "module": "community.general.zypper", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(SLES) Install dependencies", "when": "ansible_facts['os_family'] == \"Suse\""}, "module_options": {"name": "{{ nginx_sles_dependencies }}", "update_cache": true, "state": "latest"}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) Install dependencies using package(s)", "module": "community.general.pkgng", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(FreeBSD) Install dependencies using package(s)", "when": "nginx_bsd_install_packages | bool"}, "module_options": {"name": "{{ nginx_freebsd_dependencies }}", "state": "latest"}, "executable": "community.general.pkgng", "executable_type": "Module", "fqcn": "community.general.pkgng", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) Install dependencies using port(s)", "module": "community.general.portinstall", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/install-dependencies.yml", "options": {"name": "(FreeBSD) Install dependencies using port(s)", "loop": "{{ nginx_freebsd_dependencies }}", "when": "not nginx_bsd_install_packages | bool"}, "module_options": {"name": "{{ item }}", "use_packages": "{{ nginx_bsd_portinstall_use_packages | default(omit) }}", "state": "latest"}, "executable": "community.general.portinstall", "executable_type": "Module", "fqcn": "community.general.portinstall", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "prerequisites.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "tasks": [{"py/object": "struct4.Task", "name": "Install dependencies", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "options": {"name": "Install dependencies"}, "module_options": "{{ role_path }}/tasks/prerequisites/install-dependencies.yml", "executable": "{{ role_path }}/tasks/prerequisites/install-dependencies.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if SELinux is enabled", "module": "ansible.builtin.debug", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "options": {"name": "Check if SELinux is enabled", "when": "ansible_facts['selinux'] is undefined"}, "module_options": {"msg": "You need to enable SELinux, if it was disabled you need to reboot"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure SELinux", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/prerequisites.yml", "options": {"name": "Configure SELinux", "when": "ansible_facts['selinux']['mode'] is defined"}, "module_options": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable": "{{ role_path }}/tasks/prerequisites/setup-selinux.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-selinux.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "tasks": [{"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install dependencies", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "(CentOS/RHEL) Install dependencies", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": ["libselinux-utils", "policycoreutils", "selinux-policy-targeted"]}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set SELinux mode to permissive", "module": "ansible.posix.selinux", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to permissive"}, "module_options": {"state": "permissive", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux HTTP network connections", "module": "ansible.posix.seboolean", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux HTTP network connections", "loop": ["httpd_can_network_connect", "httpd_can_network_relay"]}, "module_options": {"name": "{{ item }}", "state": true, "persistent": true}, "executable": "ansible.posix.seboolean", "executable_type": "Module", "fqcn": "ansible.posix.seboolean", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux TCP connections on specific ports", "module": "community.general.seport", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux TCP connections on specific ports", "when": "nginx_selinux_tcp_ports is defined"}, "module_options": {"ports": "{{ nginx_selinux_tcp_ports }}", "proto": "tcp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow SELinux UDP connections on specific ports", "module": "community.general.seport", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Allow SELinux UDP connections on specific ports", "when": "nginx_selinux_udp_ports is defined"}, "module_options": {"ports": "{{ nginx_selinux_udp_ports }}", "proto": "udp", "setype": "http_port_t", "state": "present"}, "executable": "community.general.seport", "executable_type": "Module", "fqcn": "community.general.seport", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create SELinux NGINX Plus module", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Create SELinux NGINX Plus module", "register": "nginx_selinux_module"}, "module_options": {"src": "{{ role_path }}/templates/selinux/nginx-plus-module.te.j2", "dest": "{{ nginx_selinux_tempdir }}/nginx-plus-module.te", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check SELinux NGINX Plus module", "module": "ansible.builtin.command", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Check SELinux NGINX Plus module", "args": {"creates": "{{ nginx_selinux_tempdir }}/nginx-plus-module.mod"}, "changed_when": false}, "module_options": "checkmodule -M -m -o {{ nginx_selinux_tempdir }}/nginx-plus-module.mod {{ nginx_selinux_tempdir }}/nginx-plus-module.te", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Compile SELinux NGINX Plus module", "module": "ansible.builtin.command", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Compile SELinux NGINX Plus module", "args": {"creates": "{{ nginx_selinux_tempdir }}/nginx-plus-module.pp"}, "changed_when": false}, "module_options": "semodule_package -o {{ nginx_selinux_tempdir }}/nginx-plus-module.pp -m {{ nginx_selinux_tempdir }}/nginx-plus-module.mod", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Import SELinux NGINX Plus module", "module": "ansible.builtin.command", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Import SELinux NGINX Plus module", "changed_when": false, "when": "nginx_selinux_module.changed | bool"}, "module_options": "semodule -i {{ nginx_selinux_tempdir }}/nginx-plus-module.pp", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set SELinux mode to enforcing", "module": "ansible.posix.selinux", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/prerequisites/setup-selinux.yml", "options": {"name": "Set SELinux mode to enforcing", "when": "nginx_selinux_enforcing | bool"}, "module_options": {"state": "enforcing", "policy": "targeted"}, "executable": "ansible.posix.selinux", "executable_type": "Module", "fqcn": "ansible.posix.selinux", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "debug-output.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml", "tasks": [{"py/object": "struct4.Task", "name": "Register NGINX config", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml", "options": {"name": "Register NGINX config", "ignore_errors": "{{ ansible_check_mode }}", "check_mode": false, "changed_when": false, "register": "config_full"}, "module_options": "nginx -T", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Print NGINX config", "module": "ansible.builtin.debug", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/debug-output.yml", "options": {"name": "Print NGINX config", "when": "config_full.stdout_lines is defined"}, "module_options": {"var": "config_full.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "fqcn": "ansible.builtin.debug", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-logrotate.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) Install logrotate", "module": "community.general.apk", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(Alpine Linux) Install logrotate", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"name": "logrotate"}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install logrotate", "module": "ansible.builtin.apt", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(Debian/Ubuntu) Install logrotate", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"name": "logrotate", "state": "present"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install logrotate", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) Install logrotate", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": "logrotate", "state": "present"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) Configure logrotate repository", "module": "community.general.zypper_repository", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(SLES) Configure logrotate repository"}, "module_options": {"repo": "https://download.opensuse.org/repositories/openSUSE:Leap:42.1/standard/openSUSE:Leap:42.1.repo"}, "executable": "community.general.zypper_repository", "executable_type": "Module", "fqcn": "community.general.zypper_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) Install Logrotate", "module": "community.general.zypper", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "(SLES) Install Logrotate"}, "module_options": {"name": "logrotate", "state": "present"}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create logrotate config", "module": "ansible.builtin.template", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/setup-logrotate.yml", "options": {"name": "Create logrotate config", "notify": "(Handler) Run logrotate"}, "module_options": {"src": "logrotate/nginx.j2", "dest": "/etc/logrotate.d/nginx", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "modify-systemd.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "tasks": [{"py/object": "struct4.Task", "name": "Create override directory for NGINX systemd service", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Create override directory for NGINX systemd service"}, "module_options": {"path": "{{ nginx_service_overridepath }}", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create override for NGINX systemd service", "module": "ansible.builtin.template", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Create override for NGINX systemd service", "when": ["not nginx_service_custom | bool", "not nginx_service_clean | bool"], "notify": "(Handler) Systemd daemon-reload"}, "module_options": {"src": "{{ role_path }}/templates/services/nginx.service.override.conf.j2", "dest": "{{ nginx_service_overridepath }}/{{ nginx_service_overridefilename }}", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Customize override for NGINX systemd service", "module": "ansible.builtin.copy", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Customize override for NGINX systemd service", "when": ["nginx_service_custom | bool", "not nginx_service_clean | bool"], "notify": "(Handler) Systemd daemon-reload"}, "module_options": {"src": "{{ nginx_service_custom_file }}", "dest": "{{ nginx_service_overridepath }}/{{ nginx_service_overridefilename }}", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove override for NGINX systemd service", "module": "ansible.builtin.file", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/config/modify-systemd.yml", "options": {"name": "Remove override for NGINX systemd service", "when": "nginx_service_clean | bool", "notify": "(Handler) Systemd daemon-reload"}, "module_options": {"path": "{{ nginx_service_overridepath }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-debian.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-debian.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Add NGINX Amplify agent repository", "module": "ansible.builtin.apt_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-debian.yml", "options": {"name": "(Debian/Ubuntu) Add NGINX Amplify agent repository"}, "module_options": {"filename": "nginx-amplify", "repo": "deb [arch=amd64 signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://packages.amplify.nginx.com/py3/{{ ansible_facts['distribution'] | lower }}/ {{ ansible_facts['distribution_release'] | lower }} amplify-agent", "update_cache": true, "mode": 420}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-amplify.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "tasks": [{"py/object": "struct4.Task", "name": "Configure NGINX Amplify agent repository", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Configure NGINX Amplify agent repository", "when": "ansible_facts['os_family'] in ['Debian', 'RedHat']"}, "module_options": "{{ role_path }}/tasks/amplify/setup-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/amplify/setup-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install NGINX Amplify agent", "module": "ansible.builtin.package", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Install NGINX Amplify agent"}, "module_options": {"name": "nginx-amplify-agent", "state": "present"}, "executable": "ansible.builtin.package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy NGINX Amplify configurator agent configuration template", "module": "ansible.builtin.copy", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Copy NGINX Amplify configurator agent configuration template"}, "module_options": {"remote_src": true, "src": "/etc/amplify-agent/agent.conf.default", "dest": "/etc/amplify-agent/agent.conf", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NGINX Amplify agent API key", "module": "ansible.builtin.lineinfile", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/install-amplify.yml", "options": {"name": "Configure NGINX Amplify agent API key", "notify": "(Handler) Start NGINX Amplify agent"}, "module_options": {"dest": "/etc/amplify-agent/agent.conf", "regexp": "api_key =.*", "line": "api_key = {{ nginx_amplify_api_key }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-redhat.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-redhat.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/RHEL) Add NGINX Amplify agent repository", "module": "ansible.builtin.yum_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/amplify/setup-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/RHEL) Add NGINX Amplify agent repository"}, "module_options": {"name": "nginx-amplify", "baseurl": "https://packages.amplify.nginx.com/{{ (ansible_facts['distribution_major_version'] == \"7\") | ternary('', 'py3/') }}{{ (ansible_facts['distribution'] == \"Amazon\") | ternary('amzn', 'centos') }}/$releasever/$basearch/", "description": "NGINX Amplify Agent", "enabled": true, "gpgcheck": true, "mode": 420}, "executable": "ansible.builtin.yum_repository", "executable_type": "Module", "fqcn": "ansible.builtin.yum_repository", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-bsd.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "tasks": [{"py/object": "struct4.Task", "name": "(FreeBSD) Fetch ports", "module": "ansible.builtin.command", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) Fetch ports", "args": {"creates": "/var/db/portsnap/INDEX"}}, "module_options": "portsnap fetch --interactive", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) Extract ports", "module": "ansible.builtin.command", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) Extract ports", "args": {"creates": "/usr/ports"}}, "module_options": "portsnap extract", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "community.general.pkgng", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "www/nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}"}, "executable": "community.general.pkgng", "executable_type": "Module", "fqcn": "community.general.pkgng", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "community.general.portinstall", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "www/nginx{{ nginx_version | default('') }}", "use_packages": "{{ nginx_bsd_portinstall_use_packages | default(omit) }}", "state": "{{ nginx_state }}"}, "executable": "community.general.portinstall", "executable_type": "Module", "fqcn": "community.general.portinstall", "annotations": {}}, {"py/object": "struct4.Task", "name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "community.general.openbsd_pkg", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "build": false, "state": "{{ nginx_state }}"}, "executable": "community.general.openbsd_pkg", "executable_type": "Module", "fqcn": "community.general.openbsd_pkg", "annotations": {}}, {"py/object": "struct4.Task", "name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "community.general.openbsd_pkg", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(OpenBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "build": true, "state": "{{ nginx_state }}"}, "executable": "community.general.openbsd_pkg", "executable_type": "Module", "fqcn": "community.general.openbsd_pkg", "annotations": {}}, {"py/object": "struct4.Task", "name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "ansible.builtin.command", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": "pkg_add www/nginx{{ nginx_version | default('') }}", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "ansible.builtin.fail", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(NetBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool"}, "module_options": {"msg": "{{ ansible_facts['system'] }} {{ nginx_setup | capitalize }} NGINX port not implemented."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX package", "module": "ansible.builtin.command", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX package", "when": "nginx_bsd_install_packages | bool", "notify": "(Handler) Run NGINX"}, "module_options": "pkg install www/nginx{{ nginx_version | default('') }}", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX port", "module": "ansible.builtin.fail", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-bsd.yml", "options": {"name": "(DragonFlyBSD/HardenedBSD) {{ nginx_setup | capitalize }} NGINX port", "when": "not nginx_bsd_install_packages | bool"}, "module_options": {"msg": "{{ ansible_facts['system'] }} {{ nginx_setup | capitalize }} NGINX port not implemented."}, "executable": "ansible.builtin.fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-alpine.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "ansible.builtin.lineinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "when": "nginx_manage_repo | bool"}, "module_options": {"path": "/etc/apk/repositories", "insertafter": "EOF", "line": "{{ nginx_repository | default(nginx_default_repository_alpine) }}", "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX", "module": "community.general.apk", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ (nginx_repository is not defined and nginx_setup != 'uninstall') | ternary('@nginx', '') }}{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-suse.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml", "tasks": [{"py/object": "struct4.Task", "name": "(SLES) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "community.general.zypper_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml", "options": {"name": "(SLES) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx-{{ nginx_branch }}", "repo": "{{ nginx_repository | default(nginx_default_repository_suse) }}", "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "community.general.zypper_repository", "executable_type": "Module", "fqcn": "community.general.zypper_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) {{ nginx_setup | capitalize }} NGINX", "module": "community.general.zypper", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-suse.yml", "options": {"name": "(SLES) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "disable_recommends": false, "update_cache": true}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-oss.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "tasks": [{"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX from repository", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX from repository", "when": "nginx_install_from == \"nginx_repository\""}, "module_options": "{{ role_path }}/tasks/opensource/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/opensource/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX from source", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX from source", "when": "nginx_install_from == \"source\""}, "module_options": "{{ role_path }}/tasks/opensource/install-source.yml", "executable": "{{ role_path }}/tasks/opensource/install-source.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX from package", "module": "ansible.builtin.package", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX from package", "when": "nginx_install_from == \"os_repository\"", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}"}, "executable": "ansible.builtin.package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "{{ nginx_setup | capitalize }} NGINX in Unix systems", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-oss.yml", "options": {"name": "{{ nginx_setup | capitalize }} NGINX in Unix systems", "when": "ansible_facts['system'] | lower is search('bsd')"}, "module_options": "{{ role_path }}/tasks/opensource/install-bsd.yml", "executable": "{{ role_path }}/tasks/opensource/install-bsd.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-debian.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "ansible.builtin.apt_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "loop": "{{ nginx_repository | default(nginx_default_repository_debian) }}", "when": "nginx_manage_repo | bool"}, "module_options": {"filename": "nginx", "repo": "{{ item }}", "update_cache": true, "mode": 420, "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Unpin', 'Pin') }} NGINX repository", "module": "ansible.builtin.blockinfile", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Unpin', 'Pin') }} NGINX repository", "when": "nginx_repository is not defined"}, "module_options": {"path": "/etc/apt/preferences.d/99nginx", "create": true, "block": "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n", "mode": 420, "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX", "module": "ansible.builtin.apt", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-source.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "tasks": [{"py/object": "struct4.Task", "name": "(RHEL 8) Install Python 3", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(RHEL 8) Install Python 3"}, "module_options": {"name": ["python3", "python3-pip", "python3-devel"], "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RHEL 8) Set Python 3 as default", "module": "community.general.alternatives", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(RHEL 8) Set Python 3 as default"}, "module_options": {"name": "python", "path": "/usr/bin/python3", "link": "/usr/bin/python"}, "executable": "community.general.alternatives", "executable_type": "Module", "fqcn": "community.general.alternatives", "annotations": {}}, {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install build tools", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install build tools", "when": "ansible_facts['os_family'] == \"RedHat\""}, "module_options": {"name": ["ca-certificates", "gcc", "gd", "gd-devel", "glibc", "glibc-common", "make", "perl-core", "tar", "unzip", "wget", "zlib-devel"], "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian) Install backports repo for 'buster'", "module": "ansible.builtin.apt_repository", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian) Install backports repo for 'buster'", "when": "ansible_facts['distribution_release'] == \"buster\""}, "module_options": {"filename": "buster-backports", "repo": "deb http://ftp.us.debian.org/debian buster-backports main", "update_cache": true, "mode": 420}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install build tools", "module": "ansible.builtin.apt", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install build tools", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"name": ["build-essential", "checkinstall", "libtemplate-perl", "python3-minimal", "perl", "tar", "zlib1g-dev"], "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Install build tools", "module": "community.general.apk", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install build tools", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"name": ["alpine-sdk", "build-base", "git", "openrc", "perl", "python3", "linux-headers", "tar", "wget"], "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Enable OpenRC", "module": "ansible.builtin.copy", "index": 6, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Enable OpenRC", "when": "ansible_facts['os_family'] == \"Alpine\""}, "module_options": {"content": "", "dest": "/run/openrc/softlevel", "force": false, "owner": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for PCRE install", "module": "ansible.builtin.stat", "index": 7, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for PCRE install", "register": "pcre_result"}, "module_options": {"path": "/tmp/{{ pcre_version }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for ZLib install", "module": "ansible.builtin.stat", "index": 8, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for ZLib install", "register": "zlib_result"}, "module_options": {"path": "/tmp/{{ zlib_version }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for OpenSSL install", "module": "ansible.builtin.stat", "index": 9, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for OpenSSL install", "register": "openssl_result"}, "module_options": {"path": "/tmp/{{ openssl_version }}"}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install PCRE dependency from package", "module": "ansible.builtin.yum", "index": 10, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install PCRE dependency from package", "when": ["nginx_install_source_pcre | bool", "ansible_facts['os_family'] == \"RedHat\""]}, "module_options": {"name": "pcre-devel", "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install PCRE dependency from package", "module": "ansible.builtin.apt", "index": 11, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install PCRE dependency from package", "when": ["nginx_install_source_pcre | bool", "ansible_facts['os_family'] == \"Debian\""]}, "module_options": {"name": "libpcre3-dev", "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Install PCRE dependency from package", "module": "community.general.apk", "index": 12, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install PCRE dependency from package", "when": ["nginx_install_source_pcre | bool", "ansible_facts['os_family'] == \"Alpine\""]}, "module_options": {"name": "pcre-dev", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "Download PCRE dependency", "module": "ansible.builtin.get_url", "index": 13, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download PCRE dependency", "register": "pcre_source"}, "module_options": {"url": "https://ftp.exim.org/pub/pcre/{{ pcre_version }}.tar.gz", "dest": "/tmp/{{ pcre_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack PCRE dependency", "module": "ansible.builtin.unarchive", "index": 14, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack PCRE dependency"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ pcre_source.dest }}", "mode": 448}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure PCRE dependency", "module": "ansible.builtin.command", "index": 15, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure PCRE dependency", "args": {"chdir": "/tmp/{{ pcre_version }}", "creates": "/tmp/makefile"}}, "module_options": "./configure", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Make PCRE dependency", "module": "community.general.make", "index": 16, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make PCRE dependency"}, "module_options": {"chdir": "/tmp/{{ pcre_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install PCRE dependency", "module": "community.general.make", "index": 17, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install PCRE dependency"}, "module_options": {"chdir": "/tmp/{{ pcre_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install ZLib dependency from package", "module": "ansible.builtin.yum", "index": 18, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install ZLib dependency from package", "when": ["nginx_install_source_zlib | bool", "ansible_facts['os_family'] == \"RedHat\""]}, "module_options": {"name": "zlib-devel", "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install ZLib dependency from package", "module": "ansible.builtin.apt", "index": 19, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install ZLib dependency from package", "when": ["nginx_install_source_zlib | bool", "ansible_facts['os_family'] == \"Debian\""]}, "module_options": {"name": "zlib1g-dev", "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Install ZLib dependency from package", "module": "community.general.apk", "index": 20, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install ZLib dependency from package", "when": ["nginx_install_source_zlib | bool", "ansible_facts['os_family'] == \"Alpine\""]}, "module_options": {"name": "zlib-dev", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "Download ZLib dependency", "module": "ansible.builtin.get_url", "index": 21, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download ZLib dependency", "register": "zlib_source"}, "module_options": {"url": "https://zlib.net/{{ zlib_version }}.tar.gz", "dest": "/tmp/{{ zlib_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack ZLib dependency", "module": "ansible.builtin.unarchive", "index": 22, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack ZLib dependency"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ zlib_source.dest }}", "mode": 448}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure ZLib dependency", "module": "ansible.builtin.command", "index": 23, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure ZLib dependency", "args": {"chdir": "/tmp/{{ zlib_version }}", "creates": "/tmp/makefile"}}, "module_options": "./configure", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Make ZLib dependency", "module": "community.general.make", "index": 24, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make ZLib dependency"}, "module_options": {"chdir": "/tmp/{{ zlib_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install ZLib dependency", "module": "community.general.make", "index": 25, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install ZLib dependency"}, "module_options": {"chdir": "/tmp/{{ zlib_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "(CentOS/RHEL) Install OpenSSL dependency from package", "module": "ansible.builtin.yum", "index": 26, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(CentOS/RHEL) Install OpenSSL dependency from package", "when": ["nginx_install_source_openssl | bool", "ansible_facts['os_family'] == \"RedHat\""]}, "module_options": {"name": "openssl-devel", "update_cache": true}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Install OpenSSL dependency from package", "module": "ansible.builtin.apt", "index": 27, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Debian/Ubuntu) Install OpenSSL dependency from package", "when": ["nginx_install_source_openssl | bool", "ansible_facts['os_family'] == \"Debian\""]}, "module_options": {"name": "libssl-dev", "update_cache": true}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Install OpenSSL dependency from package", "module": "community.general.apk", "index": 28, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "(Alpine Linux) Install OpenSSL dependency from package", "when": ["nginx_install_source_openssl | bool", "ansible_facts['os_family'] == \"Alpine\""]}, "module_options": {"name": "openssl-dev", "update_cache": true}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}, {"py/object": "struct4.Task", "name": "Download OpenSSL dependency", "module": "ansible.builtin.get_url", "index": 29, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download OpenSSL dependency", "register": "openssl_source"}, "module_options": {"url": "https://www.openssl.org/source/{{ openssl_version }}.tar.gz", "dest": "/tmp/{{ openssl_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack OpenSSL dependency", "module": "ansible.builtin.unarchive", "index": 30, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack OpenSSL dependency"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ openssl_source.dest }}", "mode": 448}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure OpenSSL dependency", "module": "ansible.builtin.command", "index": 31, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure OpenSSL dependency", "args": {"chdir": "/tmp/{{ openssl_version }}", "creates": "/tmp/makefile"}}, "module_options": "./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl shared zlib", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Make OpenSSL dependency", "module": "community.general.make", "index": 32, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make OpenSSL dependency"}, "module_options": {"chdir": "/tmp/{{ openssl_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install OpenSSL dependency", "module": "community.general.make", "index": 33, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install OpenSSL dependency"}, "module_options": {"chdir": "/tmp/{{ openssl_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fetch NGINX version", "module": "ansible.builtin.uri", "index": 34, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Fetch NGINX version", "check_mode": false, "register": "nginx_versions"}, "module_options": {"url": "https://version.nginx.com/nginx/{{ nginx_branch }}", "return_content": true}, "executable": "ansible.builtin.uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set NGINX version", "module": "ansible.builtin.set_fact", "index": 35, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Set NGINX version"}, "module_options": {"nginx_version": "{{ 'nginx-' + (nginx_versions.content | regex_search('([0-9]+\\.){2}[0-9]+')) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for NGINX install", "module": "ansible.builtin.stat", "index": 36, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Check for NGINX install", "register": "nginx_result"}, "module_options": {"path": "/usr/sbin/nginx", "follow": true}, "executable": "ansible.builtin.stat", "executable_type": "Module", "fqcn": "ansible.builtin.stat", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add NGINX user", "module": "ansible.builtin.user", "index": 37, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Add NGINX user"}, "module_options": {"name": "nginx"}, "executable": "ansible.builtin.user", "executable_type": "Module", "fqcn": "ansible.builtin.user", "annotations": {}}, {"py/object": "struct4.Task", "name": "Download NGINX", "module": "ansible.builtin.get_url", "index": 38, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Download NGINX", "register": "nginx_source"}, "module_options": {"url": "https://nginx.org/download/{{ nginx_version }}.tar.gz", "dest": "/tmp/{{ nginx_version }}.tar.gz", "mode": 384}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack NGINX", "module": "ansible.builtin.unarchive", "index": 39, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Unpack NGINX"}, "module_options": {"copy": false, "dest": "/tmp/", "src": "{{ nginx_source.dest }}", "mode": 493}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "fqcn": "ansible.builtin.unarchive", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set static modules", "module": "ansible.builtin.set_fact", "index": 40, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Set static modules", "loop": "{{ nginx_static_modules }}"}, "module_options": {"nginx_install_source_static_modules": "{{ nginx_install_source_static_modules | default('') + ' --with-' + item }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NGINX", "module": "ansible.builtin.command", "index": 41, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Configure NGINX", "args": {"chdir": "/tmp/{{ nginx_version }}", "creates": "/tmp/makefile"}, "register": "nginx_configure"}, "module_options": "./configure --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --lock-path=/var/lock/nginx.lock --modules-path=/usr/lib/nginx/modules --prefix=/usr --pid-path=/var/run/nginx.pid --with-mail=dynamic --with-stream {{ nginx_install_source_pcre | ternary('', '--with-pcre=../' + pcre_version) }} {{ nginx_install_source_zlib | ternary('', '--with-zlib=../' + zlib_version) }} {{ nginx_install_source_openssl | ternary('', '--with-openssl=../' + openssl_version) }} {{ nginx_install_source_static_modules | default('') }}", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Make NGINX", "module": "community.general.make", "index": 42, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Make NGINX"}, "module_options": {"chdir": "/tmp/{{ nginx_version }}"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install NGINX", "module": "community.general.make", "index": 43, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Install NGINX"}, "module_options": {"chdir": "/tmp/{{ nginx_version }}", "target": "install"}, "executable": "community.general.make", "executable_type": "Module", "fqcn": "community.general.make", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload systemd NGINX service file", "module": "ansible.builtin.copy", "index": 44, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload systemd NGINX service file", "when": "ansible_facts['service_mgr'] == \"systemd\""}, "module_options": {"src": "services/nginx.systemd", "dest": "/lib/systemd/system/nginx.service", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable systemd NGINX service file", "module": "ansible.builtin.systemd", "index": 45, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Enable systemd NGINX service file", "when": "ansible_facts['service_mgr'] == \"systemd\"", "notify": "(Handler) Run NGINX"}, "module_options": {"daemon_reload": true, "name": "nginx", "state": "restarted", "enabled": true}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload upstart NGINX service file", "module": "ansible.builtin.copy", "index": 46, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload upstart NGINX service file", "when": "ansible_facts['service_mgr'] == \"upstart\""}, "module_options": {"src": "services/nginx.upstart", "dest": "/etc/init.d/nginx", "owner": "root", "group": "root", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload Upstart NGINX service conf file", "module": "ansible.builtin.copy", "index": 47, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload Upstart NGINX service conf file", "when": "ansible_facts['service_mgr'] == \"upstart\""}, "module_options": {"src": "services/nginx.conf.upstart", "dest": "/etc/init/nginx.conf", "owner": "root", "group": "root", "mode": 420}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable Upstart NGINX service reload", "module": "ansible.builtin.command", "index": 48, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Enable Upstart NGINX service reload", "when": "ansible_facts['service_mgr'] == \"upstart\""}, "module_options": "initctl reload-configuration", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Start Upstart NGINX service reload", "module": "ansible.builtin.command", "index": 49, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Start Upstart NGINX service reload", "when": "ansible_facts['service_mgr'] == \"upstart\"", "notify": "(Handler) Run NGINX"}, "module_options": "nginx", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload SysVinit NGINX service file", "module": "ansible.builtin.copy", "index": 50, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload SysVinit NGINX service file", "when": "ansible_facts['service_mgr'] == \"sysvinit\"", "notify": "(Handler) Run NGINX"}, "module_options": {"src": "services/nginx.sysvinit", "dest": "/etc/init.d/nginx", "owner": "root", "group": "root", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload OpenRC NGINX service file", "module": "ansible.builtin.copy", "index": 51, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Upload OpenRC NGINX service file", "when": "ansible_facts['service_mgr'] == \"openrc\""}, "module_options": {"src": "services/nginx.openrc", "dest": "/etc/init.d/nginx", "owner": "root", "group": "root", "mode": 493}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable OpenRC NGINX service", "module": "ansible.builtin.command", "index": 52, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Enable OpenRC NGINX service", "when": "ansible_facts['service_mgr'] == \"openrc\"", "notify": "(Handler) Run NGINX"}, "module_options": "rc-update add nginx default", "executable": "ansible.builtin.command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Cleanup downloads", "module": "ansible.builtin.file", "index": 53, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-source.yml", "options": {"name": "Cleanup downloads", "loop": ["{{ pcre_source.dest }}", "{{ zlib_source.dest }}", "{{ openssl_source.dest }}", "{{ nginx_source.dest }}"], "when": "item is defined"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-redhat.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/RHEL) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "module": "ansible.builtin.yum_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/RHEL) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx", "baseurl": "{{ nginx_repository | default(lookup('vars', 'nginx_default_repository_' + ((ansible_facts['distribution'] == 'Amazon') | ternary('amazon', 'redhat')))) }}", "description": "NGINX Repository", "enabled": true, "gpgcheck": true, "mode": 420, "module_hotfixes": "{{ omit if ansible_version.full is version('2.11', '<') else true }}", "state": "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"}, "executable": "ansible.builtin.yum_repository", "executable_type": "Module", "fqcn": "ansible.builtin.yum_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/RHEL) {{ nginx_setup | capitalize }} NGINX", "module": "ansible.builtin.yum", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/opensource/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/RHEL) {{ nginx_setup | capitalize }} NGINX", "ignore_errors": "{{ ansible_check_mode }}", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-keys.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) Set up NGINX signing key URL", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Alpine Linux) Set up NGINX signing key URL"}, "module_options": {"keysite": "{{ nginx_signing_key | default(nginx_default_signing_key_rsa_pub) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Download NGINX signing key", "module": "ansible.builtin.get_url", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Alpine Linux) Download NGINX signing key"}, "module_options": {"url": "{{ keysite }}", "dest": "/etc/apk/keys/nginx_signing.rsa.pub", "mode": 256}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "fqcn": "ansible.builtin.get_url", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Set up NGINX signing key URL", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Set up NGINX signing key URL", "when": "ansible_facts['os_family'] != \"Alpine\""}, "module_options": {"keysite": "{{ nginx_signing_key | default(nginx_default_signing_key_pgp) }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) Add NGINX signing key", "module": "ansible.builtin.apt_key", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Debian/Ubuntu) Add NGINX signing key", "when": "ansible_facts['os_family'] == \"Debian\""}, "module_options": {"id": "573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62", "keyring": "/usr/share/keyrings/nginx-archive-keyring.gpg", "url": "{{ keysite }}"}, "executable": "ansible.builtin.apt_key", "executable_type": "Module", "fqcn": "ansible.builtin.apt_key", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL/SLES) Add NGINX signing key", "module": "ansible.builtin.rpm_key", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/keys/setup-keys.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL/SLES) Add NGINX signing key", "when": "ansible_facts['os_family'] in ['RedHat', 'Suse']"}, "module_options": {"fingerprint": "573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62", "key": "{{ keysite }}"}, "executable": "ansible.builtin.rpm_key", "executable_type": "Module", "fqcn": "ansible.builtin.rpm_key", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-modules.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "tasks": [{"py/object": "struct4.Task", "name": "(CentOS) Install GeoIP EPEL dependencies", "module": "ansible.builtin.yum", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "(CentOS) Install GeoIP EPEL dependencies", "when": ["ansible_facts['distribution'] == \"CentOS\"", "\"geoip\" in nginx_modules", "nginx_install_epel_release | bool"]}, "module_options": {"name": "epel-release"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RHEL) Import EPEL GPG key", "module": "ansible.builtin.rpm_key", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "(RHEL) Import EPEL GPG key"}, "module_options": {"state": "present", "key": "https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_facts['distribution_major_version'] }}"}, "executable": "ansible.builtin.rpm_key", "executable_type": "Module", "fqcn": "ansible.builtin.rpm_key", "annotations": {}}, {"py/object": "struct4.Task", "name": "(RHEL) Install package dependencies", "module": "ansible.builtin.yum", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "(RHEL) Install package dependencies"}, "module_options": {"name": "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_facts['distribution_major_version'] }}.noarch.rpm"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup NGINX modules", "module": "ansible.builtin.package", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/modules/install-modules.yml", "options": {"name": "Setup NGINX modules", "loop": "{{ nginx_modules }}", "when": ["(item.name | default(item) in nginx_modules_list and nginx_type == 'opensource') or (item.name | default(item) in nginx_plus_modules_list and nginx_type == 'plus')", "not (item.name | default(item) == \"auth-spnego\") or not (ansible_facts['os_family'] == \"Alpine\" and (ansible_facts['distribution_version'] | regex_search('^[0-9]+\\\\.[0-9]+') is version('3.8', '==')))", "not (item.name | default(item) == \"brotli\") or not ((ansible_facts['os_family'] == \"Alpine\") or (ansible_facts['distribution'] == \"Amazon\") or (ansible_facts['os_family'] == \"Debian\" and ansible_facts['distribution_major_version'] is version('9', '==')) or (ansible_facts['distribution'] == \"OracleLinux\") or (ansible_facts['os_family'] == \"RedHat\" and ansible_facts['distribution_major_version'] is version('8', '<')) or (ansible_facts['os_family'] == \"Suse\" and ansible_facts['distribution_major_version'] is version('12', '<')))", "not (item.name | default(item) == \"geoip\") or not ((ansible_facts['os_family'] == \"FreeBSD\") or (ansible_facts['os_family'] == \"RedHat\" and ansible_facts['distribution_major_version'] is version('8', '==')))", "not (item.name | default(item) == \"geoip2\") or not ((ansible_facts['distribution'] == 'Amazon') or (ansible_facts['os_family'] == \"Suse\"))", "not (item.name | default(item) == \"opentracing\") or not ((ansible_facts['distribution'] == 'Amazon') or (ansible_facts['os_family'] == \"Suse\" and ansible_facts['distribution_major_version'] is version('12', '==')))"]}, "module_options": {"name": "nginx-{{ (nginx_type == 'plus') | ternary('plus-', '') }}module-{{ item.name | default(item) }}{{ item.version | default(nginx_version) | default('') }}{{ (nginx_repository is not defined and ansible_facts['os_family'] == 'Alpine' and nginx_type != 'plus') | ternary('@nginx', '') }}", "state": "{{ item.state | default('present') }}"}, "executable": "ansible.builtin.package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-alpine.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Alpine Linux) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.lineinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"path": "/etc/apk/repositories", "insertafter": "EOF", "line": "{{ nginx_repository | default(nginx_plus_default_repository_alpine) }}", "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "fqcn": "ansible.builtin.lineinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX Plus", "module": "community.general.apk", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-alpine.yml", "options": {"name": "(Alpine Linux) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "repository": "{{ nginx_repository | default(nginx_plus_default_repository_alpine) }}", "state": "{{ nginx_state }}"}, "executable": "community.general.apk", "executable_type": "Module", "fqcn": "community.general.apk", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-freebsd.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "tasks": [{"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification", "module": "ansible.builtin.blockinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "options": {"name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification"}, "module_options": {"path": "/usr/local/etc/pkg.conf", "block": "PKG_ENV: { SSL_NO_VERIFY_PEER: \"1\",\nSSL_CLIENT_CERT_FILE: \"/etc/ssl/nginx/nginx-repo.crt\",\nSSL_CLIENT_KEY_FILE: \"/etc/ssl/nginx/nginx-repo.key\" }\n", "state": "{{ nginx_license_status | default ('present') }}"}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.blockinfile", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "options": {"name": "(FreeBSD) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"path": "/etc/pkg/nginx-plus.conf", "create": true, "block": "nginx-plus: {\nURL: {{ nginx_repository | default(nginx_plus_default_repository_freebsd) }}\nENABLED: yes\nMIRROR_TYPE: SRV\n}\n", "state": "{{ nginx_license_status | default ('present') }}", "mode": 420}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX Plus", "module": "community.general.pkgng", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-freebsd.yml", "options": {"name": "(FreeBSD) {{ nginx_setup | capitalize }} NGINX Plus", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}"}, "executable": "community.general.pkgng", "executable_type": "Module", "fqcn": "community.general.pkgng", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-suse.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml", "tasks": [{"py/object": "struct4.Task", "name": "(SLES) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "community.general.zypper_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml", "options": {"name": "(SLES) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx-plus", "repo": "{{ nginx_repository | default(nginx_plus_default_repository_suse) }}", "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}"}, "executable": "community.general.zypper_repository", "executable_type": "Module", "fqcn": "community.general.zypper_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) {{ nginx_setup | capitalize }} NGINX Plus", "module": "community.general.zypper", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-suse.yml", "options": {"name": "(SLES) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true}, "executable": "community.general.zypper", "executable_type": "Module", "fqcn": "community.general.zypper", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-debian.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification", "module": "ansible.builtin.blockinfile", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification"}, "module_options": {"path": "/etc/apt/apt.conf.d/90nginx", "create": true, "block": "Acquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::Verify-Peer \"true\";\nAcquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::Verify-Host \"true\";\nAcquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::SslCert     \"/etc/ssl/nginx/nginx-repo.crt\";\nAcquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::SslKey      \"/etc/ssl/nginx/nginx-repo.key\";\n", "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}", "mode": 292}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "fqcn": "ansible.builtin.blockinfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.apt_repository", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"filename": "nginx-plus", "repo": "{{ nginx_repository | default(nginx_plus_default_repository_debian) }}", "update_cache": false, "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}", "mode": 420}, "executable": "ansible.builtin.apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX Plus", "module": "ansible.builtin.apt", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-debian.yml", "options": {"name": "(Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "remove-license.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "tasks": [{"py/object": "struct4.Task", "name": "Set NGINX Plus license state to absent", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "Set NGINX Plus license state to absent"}, "module_options": {"nginx_license_status": "absent"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Delete NGINX Plus license", "module": "ansible.builtin.file", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Delete NGINX Plus license", "when": "ansible_facts['distribution'] != \"Alpine\""}, "module_options": {"path": "/etc/ssl/nginx", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Delete NGINX Plus license", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "(Alpine Linux) Delete NGINX Plus license", "loop": ["/etc/apk/cert.key", "/etc/apk/cert.pem"], "when": "ansible_facts['distribution'] == \"Alpine\""}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove NGINX Plus repository data", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/remove-license.yml", "options": {"name": "Remove NGINX Plus repository data"}, "module_options": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable": "{{ role_path }}/tasks/plus/install-{{ ansible_facts['os_family'] | lower }}.yml", "executable_type": "TaskFile", "fqcn": "", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "setup-license.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Create SSL directory", "module": "ansible.builtin.file", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Create SSL directory"}, "module_options": {"path": "/etc/ssl/nginx", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Debian/Red Hat/SLES OSs) Copy NGINX Plus certificate and license key", "module": "ansible.builtin.copy", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Debian/Red Hat/SLES OSs) Copy NGINX Plus certificate and license key", "loop": ["{{ nginx_license['certificate'] }}", "{{ nginx_license['key'] }}"]}, "module_options": {"src": "{{ item }}", "dest": "/etc/ssl/nginx", "decrypt": true, "mode": 292}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Create APK directory", "module": "ansible.builtin.file", "index": 2, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Alpine Linux) Create APK directory"}, "module_options": {"path": "/etc/apk", "state": "directory", "mode": 493}, "executable": "ansible.builtin.file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Copy NGINX Plus key", "module": "ansible.builtin.copy", "index": 3, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Alpine Linux) Copy NGINX Plus key"}, "module_options": {"src": "{{ nginx_license['key'] }}", "dest": "/etc/apk/cert.key", "decrypt": true, "mode": 292}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Alpine Linux) Copy NGINX Plus certificate", "module": "ansible.builtin.copy", "index": 4, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(Alpine Linux) Copy NGINX Plus certificate"}, "module_options": {"src": "{{ nginx_license['certificate'] }}", "dest": "/etc/apk/cert.pem", "decrypt": true, "mode": 292}, "executable": "ansible.builtin.copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "(SLES) Combine NGINX Plus certificate and license key", "module": "ansible.builtin.assemble", "index": 5, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/setup-license.yml", "options": {"name": "(SLES) Combine NGINX Plus certificate and license key", "when": "ansible_facts['os_family'] == \"Suse\""}, "module_options": {"src": "/etc/ssl/nginx", "dest": "/etc/ssl/nginx/nginx-repo-bundle.crt", "mode": 292}, "executable": "ansible.builtin.assemble", "executable_type": "Module", "fqcn": "ansible.builtin.assemble", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install-redhat.yml", "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml", "tasks": [{"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ (nginx_license_status is defined or nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX Plus repository", "module": "ansible.builtin.yum_repository", "index": 0, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ (nginx_license_status is defined or nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX Plus repository", "when": "nginx_manage_repo | bool"}, "module_options": {"name": "nginx-plus", "baseurl": "{{ nginx_repository | default(lookup('vars', 'nginx_plus_default_repository_' + ((ansible_facts['distribution'] == 'Amazon') | ternary('amazon', 'redhat')))) }}", "description": "NGINX Plus Repository", "sslclientcert": "/etc/ssl/nginx/nginx-repo.crt", "sslclientkey": "/etc/ssl/nginx/nginx-repo.key", "enabled": true, "gpgcheck": true, "state": "{{ nginx_license_status | default((nginx_setup == 'uninstall') | ternary('absent', 'present')) }}", "mode": 420}, "executable": "ansible.builtin.yum_repository", "executable_type": "Module", "fqcn": "ansible.builtin.yum_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ nginx_setup | capitalize }} NGINX Plus", "module": "ansible.builtin.yum", "index": 1, "defined_in": "./role-test/testdata/nginxinc-nginx/nginxinc.nginx/tasks/plus/install-redhat.yml", "options": {"name": "(Amazon Linux/CentOS/Oracle Linux/RHEL) {{ nginx_setup | capitalize }} NGINX Plus", "ignore_errors": "{{ ansible_check_mode }}", "when": "nginx_license_status is not defined", "notify": "(Handler) Run NGINX"}, "module_options": {"name": "nginx-plus{{ nginx_version | default('') }}", "state": "{{ nginx_state }}", "update_cache": true, "allow_downgrade": "{{ omit if ansible_version.full is version('2.12', '<') else true }}"}, "executable": "ansible.builtin.yum", "executable_type": "Module", "fqcn": "ansible.builtin.yum", "annotations": {}}], "role": "nginxinc.nginx", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}}, "annotations": {}}