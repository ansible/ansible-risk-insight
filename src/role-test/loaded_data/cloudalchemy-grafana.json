{"py/object": "struct4.Repository", "name": "", "path": "", "my_collection_name": "", "playbooks": [], "roles": [], "installed_collections_path": "", "installed_collections": [], "installed_roles_path": "./role-test/testdata/cloudalchemy-grafana", "installed_roles": [{"py/object": "struct4.Role", "name": "cloudalchemy.grafana", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana", "fqcn": "cloudalchemy.grafana", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "preflight.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check variable types", "module": "assert", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Check variable types"}, "module_options": {"that": ["grafana_server is mapping", "grafana_database is mapping", "grafana_security is mapping"]}, "executable": "assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when datasources aren't configured when dashboards are set to be installed", "module": "fail", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when datasources aren't configured when dashboards are set to be installed", "when": "grafana_dashboards != [] and grafana_datasources == []"}, "module_options": {"msg": "You need to specify datasources for dashboards!!!"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana admin user isn't set", "module": "fail", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana admin user isn't set", "when": ["grafana_security.admin_user == '' or grafana_security.admin_user is not defined"]}, "module_options": {"msg": "Please specify grafana admin user (grafana_security.admin_user)"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana admin password isn't set", "module": "fail", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana admin password isn't set", "when": ["grafana_security.admin_password == '' or grafana_security.admin_password is not defined"]}, "module_options": {"msg": "Please specify grafana admin password (grafana_security.admin_password)"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail on incorrect variable types in datasource definitions", "module": "fail", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail on incorrect variable types in datasource definitions", "when": "( item.isDefault is defined and item.isDefault is string ) or ( item.basicAuth is defined and item.basicAuth is string )", "with_items": "{{ grafana_datasources }}"}, "module_options": {"msg": "Boolean variables in grafana_datasources shouldn't be passed as strings. Please remove unneeded apostrophes."}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail on bad database configuration", "module": "fail", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail on bad database configuration", "when": "( grafana_database.type == \"sqlite3\" and grafana_database.url is defined ) or ( grafana_database.type != \"sqlite3\" and grafana_database.path is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.host is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.user is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.password is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.server_cert_name is defined )"}, "module_options": {"msg": "Wrong database configuration. Please look at http://docs.grafana.org/installation/configuration/#database"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana domain isn't properly configured", "module": "fail", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana domain isn't properly configured", "when": ["grafana_server.root_url is defined", "grafana_server.root_url is search(grafana_server.domain)"]}, "module_options": {"msg": "Check server configuration. Please look at http://docs.grafana.org/installation/configuration/#server"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana_api_keys uses invalid role names", "module": "fail", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana_api_keys uses invalid role names", "when": ["item.role not in ['Viewer', 'Editor', 'Admin']"], "with_items": "{{ grafana_api_keys }}"}, "module_options": {"msg": "Check grafana_api_keys. The role can only be one of the following values: Viewer, Editor or Admin."}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana_ldap isn't set when grafana_auth.ldap is", "module": "fail", "index": 8, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana_ldap isn't set when grafana_auth.ldap is", "when": ["'ldap' in grafana_auth", "grafana_ldap is not defined or ('servers' not in grafana_ldap or 'group_mappings' not in grafana_ldap)"]}, "module_options": {"msg": "You need to configure grafana_ldap.servers and grafana_ldap.group_mappings when grafana_auth.ldap is set"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Force grafana_use_provisioning to false if grafana_version is < 5.0 ( grafana_version is set to '{{ grafana_version }}' )", "module": "set_fact", "index": 9, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Force grafana_use_provisioning to false if grafana_version is < 5.0 ( grafana_version is set to '{{ grafana_version }}' )", "when": ["grafana_version != 'latest'", "grafana_version is version_compare('5.0', '<')"]}, "module_options": {"grafana_use_provisioning": false}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if grafana_port is lower than 1024 and grafana_cap_net_bind_service is not true", "module": "fail", "index": 10, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail if grafana_port is lower than 1024 and grafana_cap_net_bind_service is not true", "when": ["grafana_port | int <= 1024", "not grafana_cap_net_bind_service"]}, "module_options": {"msg": "Trying to use a port lower than 1024 without setting grafana_cap_net_bind_service."}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if grafana_server.socket not defined when in socket mode", "module": "fail", "index": 11, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail if grafana_server.socket not defined when in socket mode", "when": ["grafana_server.protocol is defined and grafana_server.protocol == 'socket'", "grafana_server.socket is undefined or grafana_server.socket == ''"]}, "module_options": {"msg": "You need to configure grafana_server.socket when grafana_server.protocol is set to 'socket'"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "configure.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure grafana configuration directories exist", "module": "file", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Ensure grafana configuration directories exist", "with_items": ["/etc/grafana", "/etc/grafana/datasources", "/etc/grafana/provisioning", "/etc/grafana/provisioning/datasources", "/etc/grafana/provisioning/dashboards", "/etc/grafana/provisioning/notifiers", "/etc/grafana/provisioning/plugins"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "root", "group": "grafana"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana main configuration file", "module": "template", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana main configuration file", "no_log": true, "notify": "restart grafana"}, "module_options": {"src": "grafana.ini.j2", "dest": "/etc/grafana/grafana.ini", "owner": "root", "group": "grafana", "mode": 416}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana LDAP configuration file", "module": "template", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana LDAP configuration file", "when": ["'ldap' in grafana_auth", "'enabled' not in grafana_auth.ldap or grafana_auth.ldap.enabled"], "no_log": true, "notify": "restart grafana"}, "module_options": {"src": "ldap.toml.j2", "dest": "{{ grafana_auth.ldap.config_file | default('/etc/grafana/ldap.toml') }}", "owner": "root", "group": "grafana", "mode": 416}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana directories", "module": "file", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana directories", "with_items": ["{{ grafana_logs_dir }}", "{{ grafana_data_dir }}", "{{ grafana_data_dir }}/dashboards", "{{ grafana_data_dir }}/plugins"]}, "module_options": {"path": "{{ item }}", "state": "directory", "mode": 493, "owner": "grafana", "group": "grafana"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana socket directory", "module": "file", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana socket directory"}, "module_options": {"path": "{{ grafana_server.socket | dirname }}", "state": "directory", "mode": 509, "owner": "grafana", "group": "grafana"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure grafana socket directory created on startup", "module": "template", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Ensure grafana socket directory created on startup"}, "module_options": {"src": "tmpfiles.j2", "dest": "/etc/tmpfiles.d/grafana.conf", "owner": "root", "group": "root", "mode": 420}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable grafana to ports lower than port 1024", "module": "capabilities", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Enable grafana to ports lower than port 1024", "when": ["grafana_port | int <= 1024", "grafana_cap_net_bind_service"]}, "module_options": {"path": "/usr/sbin/grafana-server", "capability": "CAP_NET_BIND_SERVICE+ep", "state": "present"}, "executable": "capabilities", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable and start Grafana systemd unit", "module": "systemd", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Enable and start Grafana systemd unit"}, "module_options": {"name": "grafana-server", "enabled": true, "state": "started", "daemon_reload": true}, "executable": "systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "dashboards.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "tasks": [{"py/object": "struct4.Task", "name": "Create local grafana dashboard directory", "module": "tempfile", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Create local grafana dashboard directory", "register": "_tmp_dashboards", "changed_when": false, "check_mode": false}, "module_options": {"state": "directory"}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "download grafana dashboard from grafana.net to local directory", "module": "command", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "download grafana dashboard from grafana.net to local directory", "args": {"creates": "{{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json", "warn": false}, "register": "_download_dashboards", "until": "_download_dashboards is succeeded", "retries": 5, "delay": 2, "with_items": "{{ grafana_dashboards }}", "when": "grafana_dashboards | length > 0", "changed_when": false, "check_mode": false, "tags": ["skip_ansible_lint"]}, "module_options": "curl --fail --compressed https://grafana.com/api/dashboards/{{ item.dashboard_id }}/revisions/{{ item.revision_id }}/download -o {{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json\n", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the correct data source name in the dashboard", "module": "replace", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Set the correct data source name in the dashboard", "changed_when": false, "with_items": "{{ grafana_dashboards }}", "when": "grafana_dashboards | length > 0"}, "module_options": {"dest": "{{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json", "regexp": "\"(?:\\${)?DS_[A-Z0-9_-]+(?:})?\"", "replace": "\"{{ item.datasource }}\""}, "executable": "replace", "executable_type": "Module", "fqcn": "ansible.builtin.replace", "annotations": {}}, {"py/object": "struct4.Task", "name": "Import grafana dashboards through API", "module": "uri", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Import grafana dashboards through API", "no_log": true, "with_fileglob": ["{{ _tmp_dashboards.path }}/*", "{{ grafana_dashboards_dir }}/*.json"], "when": "not grafana_use_provisioning"}, "module_options": {"url": "{{ grafana_api_url }}/api/dashboards/db", "user": "{{ grafana_security.admin_user }}", "password": "{{ grafana_security.admin_password }}", "force_basic_auth": true, "method": "POST", "body_format": "json", "body": "{\n  \"dashboard\": {{ lookup(\"file\", item) }},\n  \"overwrite\": true,\n  \"message\": \"Updated by ansible\"\n}\n"}, "executable": "uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create/Update dashboards file (provisioning)", "module": "copy", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Create/Update dashboards file (provisioning)", "become": true, "notify": "restart grafana"}, "module_options": {"dest": "/etc/grafana/provisioning/dashboards/ansible.yml", "content": "apiVersion: 1\nproviders:\n - name: 'default'\n   orgId: 1\n   folder: ''\n   type: file\n   options:\n     path: \"{{ grafana_data_dir }}/dashboards\"\n", "backup": false, "owner": "root", "group": "grafana", "mode": 416}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Register previously copied dashboards", "module": "find", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Register previously copied dashboards", "register": "_dashboards_present", "when": "grafana_provisioning_synced"}, "module_options": {"paths": "{{ grafana_data_dir }}/dashboards", "hidden": true, "patterns": ["*.json"]}, "executable": "find", "executable_type": "Module", "fqcn": "ansible.builtin.find", "annotations": {}}, {"py/object": "struct4.Task", "name": "Import grafana dashboards", "module": "copy", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Import grafana dashboards", "become": true, "with_fileglob": ["{{ _tmp_dashboards.path }}/*", "{{ grafana_dashboards_dir }}/*.json"], "register": "_dashboards_copied", "notify": "provisioned dashboards changed"}, "module_options": {"src": "{{ item }}", "dest": "{{ grafana_data_dir }}/dashboards/{{ item | basename }}"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get dashboard lists", "module": "set_fact", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Get dashboard lists", "when": "grafana_provisioning_synced"}, "module_options": {"_dashboards_present_list": "{{ _dashboards_present | json_query('files[*].path') | default([]) }}", "_dashboards_copied_list": "{{ _dashboards_copied | json_query('results[*].dest') | default([]) }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove dashboards not present on deployer machine (synchronize)", "module": "file", "index": 8, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Remove dashboards not present on deployer machine (synchronize)", "become": true, "with_items": "{{ _dashboards_present_list | difference( _dashboards_copied_list ) }}", "when": "grafana_provisioning_synced"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "notifications.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/notifications.yml", "tasks": [{"py/object": "struct4.Task", "name": "Create/Delete/Update alert notifications channels (provisioning)", "module": "copy", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/notifications.yml", "options": {"name": "Create/Delete/Update alert notifications channels (provisioning)", "become": true, "notify": "restart grafana", "when": "grafana_use_provisioning"}, "module_options": {"content": "apiVersion: 1\n{{ grafana_alert_notifications | to_nice_yaml }}\n", "dest": "/etc/grafana/provisioning/notifiers/ansible.yml", "owner": "root", "group": "grafana", "mode": 416}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "api_keys.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure grafana key directory exists", "module": "file", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Ensure grafana key directory exists", "become": false, "delegate_to": "localhost"}, "module_options": {"path": "{{ grafana_api_keys_dir }}/{{ inventory_hostname }}", "state": "directory"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check api key list", "module": "uri", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Check api key list", "no_log": true, "register": "existing_api_keys"}, "module_options": {"url": "{{ grafana_api_url }}/api/auth/keys", "user": "{{ grafana_security.admin_user }}", "password": "{{ grafana_security.admin_password }}", "force_basic_auth": true, "return_content": true}, "executable": "uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana api keys", "module": "uri", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Create grafana api keys", "with_items": "{{ grafana_api_keys }}", "no_log": true, "when": "((existing_api_keys['json'] | selectattr(\"name\", \"equalto\", item['name'])) | list) | length == 0", "register": "new_api_keys"}, "module_options": {"url": "{{ grafana_api_url }}/api/auth/keys", "user": "{{ grafana_security.admin_user }}", "password": "{{ grafana_security.admin_password }}", "force_basic_auth": true, "method": "POST", "body_format": "json", "body": "{{ item | to_json }}"}, "executable": "uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create api keys file to allow the keys to be seen and used by other automation", "module": "copy", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Create api keys file to allow the keys to be seen and used by other automation", "become": false, "when": "item['json'] is defined", "with_items": "{{ new_api_keys['results'] }}", "delegate_to": "localhost"}, "module_options": {"dest": "{{ grafana_api_keys_dir }}/{{ inventory_hostname }}/{{ item['item']['name'] }}.key", "content": "{{ item['json']['key'] }}", "backup": false}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "plugins.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check which plugins are installed", "module": "find", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml", "options": {"name": "Check which plugins are installed", "register": "installed_plugins"}, "module_options": {"file_type": "directory", "recurse": false, "paths": "{{ grafana_data_dir }}/plugins"}, "executable": "find", "executable_type": "Module", "fqcn": "ansible.builtin.find", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install plugins", "module": "command", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml", "options": {"name": "Install plugins", "become": true, "args": {"creates": "{{ grafana_data_dir }}/plugins/{{ item }}"}, "with_items": "{{ grafana_plugins | difference(installed_plugins.files) }}", "register": "_plugin_install", "until": "_plugin_install is succeeded", "retries": 5, "delay": 2, "notify": ["restart grafana"]}, "module_options": "grafana-cli --pluginsDir {{ grafana_data_dir }}/plugins plugins install {{ item }}", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "datasources.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure datasources exist (via API)", "module": "grafana_datasource", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml", "options": {"name": "Ensure datasources exist (via API)", "with_items": "{{ grafana_datasources }}", "when": "not grafana_use_provisioning"}, "module_options": {"grafana_url": "{{ grafana_api_url }}", "grafana_user": "{{ grafana_security.admin_user }}", "grafana_password": "{{ grafana_security.admin_password }}", "name": "{{ item.name }}", "url": "{{ item.url }}", "ds_type": "{{ item.type }}", "access": "{{ item.access | default(omit) }}", "is_default": "{{ item.isDefault | default(omit) }}", "basic_auth_user": "{{ item.basicAuthUser | default(omit) }}", "basic_auth_password": "{{ item.basicAuthPassword | default(omit) }}", "database": "{{ item.database | default(omit) }}", "user": "{{ item.user | default(omit) }}", "password": "{{ item.password | default(omit) }}", "aws_auth_type": "{{ item.aws_auth_type | default(omit) }}", "aws_default_region": "{{ item.aws_default_region | default(omit) }}", "aws_access_key": "{{ item.aws_access_key | default(omit) }}", "aws_secret_key": "{{ item.aws_secret_key | default(omit) }}", "aws_credentials_profile": "{{ item.aws_credentials_profile | default(omit) }}", "aws_custom_metrics_namespaces": "{{ item.aws_custom_metrics_namespaces | default(omit) }}"}, "executable": "grafana_datasource", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create/Update datasources file (provisioning)", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml", "options": {"name": "Create/Update datasources file (provisioning)", "become": true, "notify": "restart grafana", "when": "grafana_use_provisioning"}, "module_options": {"dest": "/etc/grafana/provisioning/datasources/ansible.yml", "content": "apiVersion: 1\ndeleteDatasources: []\ndatasources:\n{{ grafana_datasources | to_nice_yaml }}\n", "backup": false, "owner": "root", "group": "grafana", "mode": 416}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "tasks": [{"py/object": "struct4.Task", "name": "Update apt cache", "module": "apt", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Update apt cache", "register": "_pre_update_apt_cache", "until": "_pre_update_apt_cache is succeeded", "when": ["ansible_pkg_mgr == \"apt\""]}, "module_options": {"update_cache": true}, "executable": "apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install dependencies", "module": "package", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Install dependencies", "register": "_install_dep_packages", "until": "_install_dep_packages is succeeded", "retries": 5, "delay": 2}, "module_options": {"name": "{{ grafana_dependencies }}", "state": "present"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove conflicting grafana packages", "module": "package", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Remove conflicting grafana packages", "register": "_old_grafana_pkgs"}, "module_options": {"name": "grafana-data", "state": "absent"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Clean apt cache", "module": "command", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Clean apt cache", "when": ["_old_grafana_pkgs is changed", "ansible_pkg_mgr == \"apt\""]}, "module_options": "apt clean", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add Grafana repository file [RHEL/CentOS]", "module": "template", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Add Grafana repository file [RHEL/CentOS]", "when": "ansible_pkg_mgr in ['yum', 'dnf']"}, "module_options": {"src": "{{ grafana_yum_repo_template }}", "dest": "/etc/yum.repos.d/{{ grafana_yum_repo_template | basename | regex_replace('\\.j2$', '') }}", "force": true, "backup": true}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Import Grafana GPG signing key [Debian/Ubuntu]", "module": "apt_key", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Import Grafana GPG signing key [Debian/Ubuntu]", "register": "_add_apt_key", "until": "_add_apt_key is succeeded", "retries": 5, "delay": 2}, "module_options": {"url": "https://packages.grafana.com/gpg.key", "state": "present", "validate_certs": false}, "executable": "apt_key", "executable_type": "Module", "fqcn": "ansible.builtin.apt_key", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add Grafana repository [Debian/Ubuntu]", "module": "apt_repository", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Add Grafana repository [Debian/Ubuntu]", "register": "_update_apt_cache", "until": "_update_apt_cache is succeeded", "retries": 5, "delay": 2}, "module_options": {"repo": "deb https://packages.grafana.com/oss/deb stable main", "state": "present", "update_cache": true}, "executable": "apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Grafana", "module": "package", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Install Grafana", "register": "_install_packages", "until": "_install_packages is succeeded", "retries": 5, "delay": 2, "notify": "restart grafana"}, "module_options": {"name": "{{ grafana_package }}", "state": "{{ (grafana_version == 'latest') | ternary('latest', 'present') }}"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Gather variables for each operating system", "module": "include_vars", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Gather variables for each operating system", "with_first_found": ["{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml", "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml", "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml", "{{ ansible_distribution | lower }}.yml", "{{ ansible_os_family | lower }}.yml"], "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards"]}, "module_options": "{{ item }}", "executable": "include_vars", "executable_type": "Module", "fqcn": "ansible.builtin.include_vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards"]}, "module_options": "preflight.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"become": true, "tags": ["grafana_install"]}, "module_options": "install.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"become": true, "tags": ["grafana_configure"]}, "module_options": "configure.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_plugins != []", "tags": ["grafana_configure"]}, "module_options": "plugins.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart grafana before configuring datasources and dashboards", "module": "meta", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Restart grafana before configuring datasources and dashboards", "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards", "grafana_run"]}, "module_options": "flush_handlers", "executable": "meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "Wait for grafana to start (http/s)", "module": "wait_for", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Wait for grafana to start (http/s)", "when": "grafana_server.protocol is undefined or grafana_server.protocol in ['http', 'https']", "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards", "grafana_run"]}, "module_options": {"host": "{{ grafana_address }}", "port": "{{ grafana_port }}"}, "executable": "wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, {"py/object": "struct4.Task", "name": "Wait for grafana to start (socket)", "module": "wait_for", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Wait for grafana to start (socket)", "when": "grafana_server.protocol is defined and grafana_server.protocol == 'socket'", "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards", "grafana_run"]}, "module_options": {"path": "{{ grafana_server.socket }}"}, "executable": "wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 8, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_api_keys | length > 0", "tags": ["grafana_configure", "grafana_run"]}, "module_options": "api_keys.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 9, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_datasources != []", "tags": ["grafana_configure", "grafana_datasources", "grafana_run"]}, "module_options": "datasources.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 10, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_alert_notifications | length > 0", "tags": ["grafana_configure", "grafana_notifications", "grafana_run"]}, "module_options": "notifications.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if there are any dashboards in local {{ grafana_dashboards_dir }}", "module": "set_fact", "index": 11, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Check if there are any dashboards in local {{ grafana_dashboards_dir }}", "become": false, "tags": ["grafana_configure", "grafana_dashboards", "grafana_run"]}, "module_options": {"found_dashboards": "{{ lookup('fileglob', grafana_dashboards_dir + '/*.json', wantlist=True) }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 12, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_dashboards | length > 0 or found_dashboards | length > 0", "tags": ["grafana_configure", "grafana_dashboards", "grafana_run"]}, "module_options": "dashboards.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}], "modules": [], "taskfiles": [], "version": "", "module_dict": {}, "task_dict": {"{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check variable types", "module": "assert", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Check variable types"}, "module_options": {"that": ["grafana_server is mapping", "grafana_database is mapping", "grafana_security is mapping"]}, "executable": "assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Fail when datasources aren't configured when dashboards are set to be installed", "module": "fail", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when datasources aren't configured when dashboards are set to be installed", "when": "grafana_dashboards != [] and grafana_datasources == []"}, "module_options": {"msg": "You need to specify datasources for dashboards!!!"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Fail when grafana admin user isn't set", "module": "fail", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana admin user isn't set", "when": ["grafana_security.admin_user == '' or grafana_security.admin_user is not defined"]}, "module_options": {"msg": "Please specify grafana admin user (grafana_security.admin_user)"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Fail when grafana admin password isn't set", "module": "fail", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana admin password isn't set", "when": ["grafana_security.admin_password == '' or grafana_security.admin_password is not defined"]}, "module_options": {"msg": "Please specify grafana admin password (grafana_security.admin_password)"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Fail on incorrect variable types in datasource definitions", "module": "fail", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail on incorrect variable types in datasource definitions", "when": "( item.isDefault is defined and item.isDefault is string ) or ( item.basicAuth is defined and item.basicAuth is string )", "with_items": "{{ grafana_datasources }}"}, "module_options": {"msg": "Boolean variables in grafana_datasources shouldn't be passed as strings. Please remove unneeded apostrophes."}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Fail on bad database configuration", "module": "fail", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail on bad database configuration", "when": "( grafana_database.type == \"sqlite3\" and grafana_database.url is defined ) or ( grafana_database.type != \"sqlite3\" and grafana_database.path is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.host is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.user is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.password is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.server_cert_name is defined )"}, "module_options": {"msg": "Wrong database configuration. Please look at http://docs.grafana.org/installation/configuration/#database"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Fail when grafana domain isn't properly configured", "module": "fail", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana domain isn't properly configured", "when": ["grafana_server.root_url is defined", "grafana_server.root_url is search(grafana_server.domain)"]}, "module_options": {"msg": "Check server configuration. Please look at http://docs.grafana.org/installation/configuration/#server"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Fail when grafana_api_keys uses invalid role names", "module": "fail", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana_api_keys uses invalid role names", "when": ["item.role not in ['Viewer', 'Editor', 'Admin']"], "with_items": "{{ grafana_api_keys }}"}, "module_options": {"msg": "Check grafana_api_keys. The role can only be one of the following values: Viewer, Editor or Admin."}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "Fail when grafana_ldap isn't set when grafana_auth.ldap is", "module": "fail", "index": 8, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana_ldap isn't set when grafana_auth.ldap is", "when": ["'ldap' in grafana_auth", "grafana_ldap is not defined or ('servers' not in grafana_ldap or 'group_mappings' not in grafana_ldap)"]}, "module_options": {"msg": "You need to configure grafana_ldap.servers and grafana_ldap.group_mappings when grafana_auth.ldap is set"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "Force grafana_use_provisioning to false if grafana_version is < 5.0 ( grafana_version is set to '{{ grafana_version }}' )", "module": "set_fact", "index": 9, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Force grafana_use_provisioning to false if grafana_version is < 5.0 ( grafana_version is set to '{{ grafana_version }}' )", "when": ["grafana_version != 'latest'", "grafana_version is version_compare('5.0', '<')"]}, "module_options": {"grafana_use_provisioning": false}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "Fail if grafana_port is lower than 1024 and grafana_cap_net_bind_service is not true", "module": "fail", "index": 10, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail if grafana_port is lower than 1024 and grafana_cap_net_bind_service is not true", "when": ["grafana_port | int <= 1024", "not grafana_cap_net_bind_service"]}, "module_options": {"msg": "Trying to use a port lower than 1024 without setting grafana_cap_net_bind_service."}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml\", \"index\": 11}": {"py/object": "struct4.Task", "name": "Fail if grafana_server.socket not defined when in socket mode", "module": "fail", "index": 11, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail if grafana_server.socket not defined when in socket mode", "when": ["grafana_server.protocol is defined and grafana_server.protocol == 'socket'", "grafana_server.socket is undefined or grafana_server.socket == ''"]}, "module_options": {"msg": "You need to configure grafana_server.socket when grafana_server.protocol is set to 'socket'"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure grafana configuration directories exist", "module": "file", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Ensure grafana configuration directories exist", "with_items": ["/etc/grafana", "/etc/grafana/datasources", "/etc/grafana/provisioning", "/etc/grafana/provisioning/datasources", "/etc/grafana/provisioning/dashboards", "/etc/grafana/provisioning/notifiers", "/etc/grafana/provisioning/plugins"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "root", "group": "grafana"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Create grafana main configuration file", "module": "template", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana main configuration file", "no_log": true, "notify": "restart grafana"}, "module_options": {"src": "grafana.ini.j2", "dest": "/etc/grafana/grafana.ini", "owner": "root", "group": "grafana", "mode": 416}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Create grafana LDAP configuration file", "module": "template", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana LDAP configuration file", "when": ["'ldap' in grafana_auth", "'enabled' not in grafana_auth.ldap or grafana_auth.ldap.enabled"], "no_log": true, "notify": "restart grafana"}, "module_options": {"src": "ldap.toml.j2", "dest": "{{ grafana_auth.ldap.config_file | default('/etc/grafana/ldap.toml') }}", "owner": "root", "group": "grafana", "mode": 416}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Create grafana directories", "module": "file", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana directories", "with_items": ["{{ grafana_logs_dir }}", "{{ grafana_data_dir }}", "{{ grafana_data_dir }}/dashboards", "{{ grafana_data_dir }}/plugins"]}, "module_options": {"path": "{{ item }}", "state": "directory", "mode": 493, "owner": "grafana", "group": "grafana"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Create grafana socket directory", "module": "file", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana socket directory"}, "module_options": {"path": "{{ grafana_server.socket | dirname }}", "state": "directory", "mode": 509, "owner": "grafana", "group": "grafana"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Ensure grafana socket directory created on startup", "module": "template", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Ensure grafana socket directory created on startup"}, "module_options": {"src": "tmpfiles.j2", "dest": "/etc/tmpfiles.d/grafana.conf", "owner": "root", "group": "root", "mode": 420}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Enable grafana to ports lower than port 1024", "module": "capabilities", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Enable grafana to ports lower than port 1024", "when": ["grafana_port | int <= 1024", "grafana_cap_net_bind_service"]}, "module_options": {"path": "/usr/sbin/grafana-server", "capability": "CAP_NET_BIND_SERVICE+ep", "state": "present"}, "executable": "capabilities", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Enable and start Grafana systemd unit", "module": "systemd", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Enable and start Grafana systemd unit"}, "module_options": {"name": "grafana-server", "enabled": true, "state": "started", "daemon_reload": true}, "executable": "systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Create local grafana dashboard directory", "module": "tempfile", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Create local grafana dashboard directory", "register": "_tmp_dashboards", "changed_when": false, "check_mode": false}, "module_options": {"state": "directory"}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "download grafana dashboard from grafana.net to local directory", "module": "command", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "download grafana dashboard from grafana.net to local directory", "args": {"creates": "{{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json", "warn": false}, "register": "_download_dashboards", "until": "_download_dashboards is succeeded", "retries": 5, "delay": 2, "with_items": "{{ grafana_dashboards }}", "when": "grafana_dashboards | length > 0", "changed_when": false, "check_mode": false, "tags": ["skip_ansible_lint"]}, "module_options": "curl --fail --compressed https://grafana.com/api/dashboards/{{ item.dashboard_id }}/revisions/{{ item.revision_id }}/download -o {{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json\n", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Set the correct data source name in the dashboard", "module": "replace", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Set the correct data source name in the dashboard", "changed_when": false, "with_items": "{{ grafana_dashboards }}", "when": "grafana_dashboards | length > 0"}, "module_options": {"dest": "{{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json", "regexp": "\"(?:\\${)?DS_[A-Z0-9_-]+(?:})?\"", "replace": "\"{{ item.datasource }}\""}, "executable": "replace", "executable_type": "Module", "fqcn": "ansible.builtin.replace", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Import grafana dashboards through API", "module": "uri", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Import grafana dashboards through API", "no_log": true, "with_fileglob": ["{{ _tmp_dashboards.path }}/*", "{{ grafana_dashboards_dir }}/*.json"], "when": "not grafana_use_provisioning"}, "module_options": {"url": "{{ grafana_api_url }}/api/dashboards/db", "user": "{{ grafana_security.admin_user }}", "password": "{{ grafana_security.admin_password }}", "force_basic_auth": true, "method": "POST", "body_format": "json", "body": "{\n  \"dashboard\": {{ lookup(\"file\", item) }},\n  \"overwrite\": true,\n  \"message\": \"Updated by ansible\"\n}\n"}, "executable": "uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Create/Update dashboards file (provisioning)", "module": "copy", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Create/Update dashboards file (provisioning)", "become": true, "notify": "restart grafana"}, "module_options": {"dest": "/etc/grafana/provisioning/dashboards/ansible.yml", "content": "apiVersion: 1\nproviders:\n - name: 'default'\n   orgId: 1\n   folder: ''\n   type: file\n   options:\n     path: \"{{ grafana_data_dir }}/dashboards\"\n", "backup": false, "owner": "root", "group": "grafana", "mode": 416}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Register previously copied dashboards", "module": "find", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Register previously copied dashboards", "register": "_dashboards_present", "when": "grafana_provisioning_synced"}, "module_options": {"paths": "{{ grafana_data_dir }}/dashboards", "hidden": true, "patterns": ["*.json"]}, "executable": "find", "executable_type": "Module", "fqcn": "ansible.builtin.find", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Import grafana dashboards", "module": "copy", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Import grafana dashboards", "become": true, "with_fileglob": ["{{ _tmp_dashboards.path }}/*", "{{ grafana_dashboards_dir }}/*.json"], "register": "_dashboards_copied", "notify": "provisioned dashboards changed"}, "module_options": {"src": "{{ item }}", "dest": "{{ grafana_data_dir }}/dashboards/{{ item | basename }}"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Get dashboard lists", "module": "set_fact", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Get dashboard lists", "when": "grafana_provisioning_synced"}, "module_options": {"_dashboards_present_list": "{{ _dashboards_present | json_query('files[*].path') | default([]) }}", "_dashboards_copied_list": "{{ _dashboards_copied | json_query('results[*].dest') | default([]) }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "Remove dashboards not present on deployer machine (synchronize)", "module": "file", "index": 8, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Remove dashboards not present on deployer machine (synchronize)", "become": true, "with_items": "{{ _dashboards_present_list | difference( _dashboards_copied_list ) }}", "when": "grafana_provisioning_synced"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/notifications.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Create/Delete/Update alert notifications channels (provisioning)", "module": "copy", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/notifications.yml", "options": {"name": "Create/Delete/Update alert notifications channels (provisioning)", "become": true, "notify": "restart grafana", "when": "grafana_use_provisioning"}, "module_options": {"content": "apiVersion: 1\n{{ grafana_alert_notifications | to_nice_yaml }}\n", "dest": "/etc/grafana/provisioning/notifiers/ansible.yml", "owner": "root", "group": "grafana", "mode": 416}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure grafana key directory exists", "module": "file", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Ensure grafana key directory exists", "become": false, "delegate_to": "localhost"}, "module_options": {"path": "{{ grafana_api_keys_dir }}/{{ inventory_hostname }}", "state": "directory"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Check api key list", "module": "uri", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Check api key list", "no_log": true, "register": "existing_api_keys"}, "module_options": {"url": "{{ grafana_api_url }}/api/auth/keys", "user": "{{ grafana_security.admin_user }}", "password": "{{ grafana_security.admin_password }}", "force_basic_auth": true, "return_content": true}, "executable": "uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Create grafana api keys", "module": "uri", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Create grafana api keys", "with_items": "{{ grafana_api_keys }}", "no_log": true, "when": "((existing_api_keys['json'] | selectattr(\"name\", \"equalto\", item['name'])) | list) | length == 0", "register": "new_api_keys"}, "module_options": {"url": "{{ grafana_api_url }}/api/auth/keys", "user": "{{ grafana_security.admin_user }}", "password": "{{ grafana_security.admin_password }}", "force_basic_auth": true, "method": "POST", "body_format": "json", "body": "{{ item | to_json }}"}, "executable": "uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Create api keys file to allow the keys to be seen and used by other automation", "module": "copy", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Create api keys file to allow the keys to be seen and used by other automation", "become": false, "when": "item['json'] is defined", "with_items": "{{ new_api_keys['results'] }}", "delegate_to": "localhost"}, "module_options": {"dest": "{{ grafana_api_keys_dir }}/{{ inventory_hostname }}/{{ item['item']['name'] }}.key", "content": "{{ item['json']['key'] }}", "backup": false}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Check which plugins are installed", "module": "find", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml", "options": {"name": "Check which plugins are installed", "register": "installed_plugins"}, "module_options": {"file_type": "directory", "recurse": false, "paths": "{{ grafana_data_dir }}/plugins"}, "executable": "find", "executable_type": "Module", "fqcn": "ansible.builtin.find", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Install plugins", "module": "command", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml", "options": {"name": "Install plugins", "become": true, "args": {"creates": "{{ grafana_data_dir }}/plugins/{{ item }}"}, "with_items": "{{ grafana_plugins | difference(installed_plugins.files) }}", "register": "_plugin_install", "until": "_plugin_install is succeeded", "retries": 5, "delay": 2, "notify": ["restart grafana"]}, "module_options": "grafana-cli --pluginsDir {{ grafana_data_dir }}/plugins plugins install {{ item }}", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Ensure datasources exist (via API)", "module": "grafana_datasource", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml", "options": {"name": "Ensure datasources exist (via API)", "with_items": "{{ grafana_datasources }}", "when": "not grafana_use_provisioning"}, "module_options": {"grafana_url": "{{ grafana_api_url }}", "grafana_user": "{{ grafana_security.admin_user }}", "grafana_password": "{{ grafana_security.admin_password }}", "name": "{{ item.name }}", "url": "{{ item.url }}", "ds_type": "{{ item.type }}", "access": "{{ item.access | default(omit) }}", "is_default": "{{ item.isDefault | default(omit) }}", "basic_auth_user": "{{ item.basicAuthUser | default(omit) }}", "basic_auth_password": "{{ item.basicAuthPassword | default(omit) }}", "database": "{{ item.database | default(omit) }}", "user": "{{ item.user | default(omit) }}", "password": "{{ item.password | default(omit) }}", "aws_auth_type": "{{ item.aws_auth_type | default(omit) }}", "aws_default_region": "{{ item.aws_default_region | default(omit) }}", "aws_access_key": "{{ item.aws_access_key | default(omit) }}", "aws_secret_key": "{{ item.aws_secret_key | default(omit) }}", "aws_credentials_profile": "{{ item.aws_credentials_profile | default(omit) }}", "aws_custom_metrics_namespaces": "{{ item.aws_custom_metrics_namespaces | default(omit) }}"}, "executable": "grafana_datasource", "executable_type": "Module", "fqcn": "", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Create/Update datasources file (provisioning)", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml", "options": {"name": "Create/Update datasources file (provisioning)", "become": true, "notify": "restart grafana", "when": "grafana_use_provisioning"}, "module_options": {"dest": "/etc/grafana/provisioning/datasources/ansible.yml", "content": "apiVersion: 1\ndeleteDatasources: []\ndatasources:\n{{ grafana_datasources | to_nice_yaml }}\n", "backup": false, "owner": "root", "group": "grafana", "mode": 416}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Update apt cache", "module": "apt", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Update apt cache", "register": "_pre_update_apt_cache", "until": "_pre_update_apt_cache is succeeded", "when": ["ansible_pkg_mgr == \"apt\""]}, "module_options": {"update_cache": true}, "executable": "apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "Install dependencies", "module": "package", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Install dependencies", "register": "_install_dep_packages", "until": "_install_dep_packages is succeeded", "retries": 5, "delay": 2}, "module_options": {"name": "{{ grafana_dependencies }}", "state": "present"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "Remove conflicting grafana packages", "module": "package", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Remove conflicting grafana packages", "register": "_old_grafana_pkgs"}, "module_options": {"name": "grafana-data", "state": "absent"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "Clean apt cache", "module": "command", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Clean apt cache", "when": ["_old_grafana_pkgs is changed", "ansible_pkg_mgr == \"apt\""]}, "module_options": "apt clean", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "Add Grafana repository file [RHEL/CentOS]", "module": "template", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Add Grafana repository file [RHEL/CentOS]", "when": "ansible_pkg_mgr in ['yum', 'dnf']"}, "module_options": {"src": "{{ grafana_yum_repo_template }}", "dest": "/etc/yum.repos.d/{{ grafana_yum_repo_template | basename | regex_replace('\\.j2$', '') }}", "force": true, "backup": true}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Import Grafana GPG signing key [Debian/Ubuntu]", "module": "apt_key", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Import Grafana GPG signing key [Debian/Ubuntu]", "register": "_add_apt_key", "until": "_add_apt_key is succeeded", "retries": 5, "delay": 2}, "module_options": {"url": "https://packages.grafana.com/gpg.key", "state": "present", "validate_certs": false}, "executable": "apt_key", "executable_type": "Module", "fqcn": "ansible.builtin.apt_key", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Add Grafana repository [Debian/Ubuntu]", "module": "apt_repository", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Add Grafana repository [Debian/Ubuntu]", "register": "_update_apt_cache", "until": "_update_apt_cache is succeeded", "retries": 5, "delay": 2}, "module_options": {"repo": "deb https://packages.grafana.com/oss/deb stable main", "state": "present", "update_cache": true}, "executable": "apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Install Grafana", "module": "package", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Install Grafana", "register": "_install_packages", "until": "_install_packages is succeeded", "retries": 5, "delay": 2, "notify": "restart grafana"}, "module_options": {"name": "{{ grafana_package }}", "state": "{{ (grafana_version == 'latest') | ternary('latest', 'present') }}"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 0}": {"py/object": "struct4.Task", "name": "Gather variables for each operating system", "module": "include_vars", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Gather variables for each operating system", "with_first_found": ["{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml", "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml", "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml", "{{ ansible_distribution | lower }}.yml", "{{ ansible_os_family | lower }}.yml"], "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards"]}, "module_options": "{{ item }}", "executable": "include_vars", "executable_type": "Module", "fqcn": "ansible.builtin.include_vars", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 1}": {"py/object": "struct4.Task", "name": "", "module": "include", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards"]}, "module_options": "preflight.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 2}": {"py/object": "struct4.Task", "name": "", "module": "include", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"become": true, "tags": ["grafana_install"]}, "module_options": "install.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 3}": {"py/object": "struct4.Task", "name": "", "module": "include", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"become": true, "tags": ["grafana_configure"]}, "module_options": "configure.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 4}": {"py/object": "struct4.Task", "name": "", "module": "include", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_plugins != []", "tags": ["grafana_configure"]}, "module_options": "plugins.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 5}": {"py/object": "struct4.Task", "name": "Restart grafana before configuring datasources and dashboards", "module": "meta", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Restart grafana before configuring datasources and dashboards", "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards", "grafana_run"]}, "module_options": "flush_handlers", "executable": "meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 6}": {"py/object": "struct4.Task", "name": "Wait for grafana to start (http/s)", "module": "wait_for", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Wait for grafana to start (http/s)", "when": "grafana_server.protocol is undefined or grafana_server.protocol in ['http', 'https']", "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards", "grafana_run"]}, "module_options": {"host": "{{ grafana_address }}", "port": "{{ grafana_port }}"}, "executable": "wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 7}": {"py/object": "struct4.Task", "name": "Wait for grafana to start (socket)", "module": "wait_for", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Wait for grafana to start (socket)", "when": "grafana_server.protocol is defined and grafana_server.protocol == 'socket'", "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards", "grafana_run"]}, "module_options": {"path": "{{ grafana_server.socket }}"}, "executable": "wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 8}": {"py/object": "struct4.Task", "name": "", "module": "include", "index": 8, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_api_keys | length > 0", "tags": ["grafana_configure", "grafana_run"]}, "module_options": "api_keys.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 9}": {"py/object": "struct4.Task", "name": "", "module": "include", "index": 9, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_datasources != []", "tags": ["grafana_configure", "grafana_datasources", "grafana_run"]}, "module_options": "datasources.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 10}": {"py/object": "struct4.Task", "name": "", "module": "include", "index": 10, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_alert_notifications | length > 0", "tags": ["grafana_configure", "grafana_notifications", "grafana_run"]}, "module_options": "notifications.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 11}": {"py/object": "struct4.Task", "name": "Check if there are any dashboards in local {{ grafana_dashboards_dir }}", "module": "set_fact", "index": 11, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Check if there are any dashboards in local {{ grafana_dashboards_dir }}", "become": false, "tags": ["grafana_configure", "grafana_dashboards", "grafana_run"]}, "module_options": {"found_dashboards": "{{ lookup('fileglob', grafana_dashboards_dir + '/*.json', wantlist=True) }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, "{\"path\": \"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml\", \"index\": 12}": {"py/object": "struct4.Task", "name": "", "module": "include", "index": 12, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_dashboards | length > 0 or found_dashboards | length > 0", "tags": ["grafana_configure", "grafana_dashboards", "grafana_run"]}, "module_options": "dashboards.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}}, "taskfile_dict": {"./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml": {"py/object": "struct4.TaskFile", "name": "preflight.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check variable types", "module": "assert", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Check variable types"}, "module_options": {"that": ["grafana_server is mapping", "grafana_database is mapping", "grafana_security is mapping"]}, "executable": "assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when datasources aren't configured when dashboards are set to be installed", "module": "fail", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when datasources aren't configured when dashboards are set to be installed", "when": "grafana_dashboards != [] and grafana_datasources == []"}, "module_options": {"msg": "You need to specify datasources for dashboards!!!"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana admin user isn't set", "module": "fail", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana admin user isn't set", "when": ["grafana_security.admin_user == '' or grafana_security.admin_user is not defined"]}, "module_options": {"msg": "Please specify grafana admin user (grafana_security.admin_user)"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana admin password isn't set", "module": "fail", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana admin password isn't set", "when": ["grafana_security.admin_password == '' or grafana_security.admin_password is not defined"]}, "module_options": {"msg": "Please specify grafana admin password (grafana_security.admin_password)"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail on incorrect variable types in datasource definitions", "module": "fail", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail on incorrect variable types in datasource definitions", "when": "( item.isDefault is defined and item.isDefault is string ) or ( item.basicAuth is defined and item.basicAuth is string )", "with_items": "{{ grafana_datasources }}"}, "module_options": {"msg": "Boolean variables in grafana_datasources shouldn't be passed as strings. Please remove unneeded apostrophes."}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail on bad database configuration", "module": "fail", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail on bad database configuration", "when": "( grafana_database.type == \"sqlite3\" and grafana_database.url is defined ) or ( grafana_database.type != \"sqlite3\" and grafana_database.path is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.host is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.user is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.password is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.server_cert_name is defined )"}, "module_options": {"msg": "Wrong database configuration. Please look at http://docs.grafana.org/installation/configuration/#database"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana domain isn't properly configured", "module": "fail", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana domain isn't properly configured", "when": ["grafana_server.root_url is defined", "grafana_server.root_url is search(grafana_server.domain)"]}, "module_options": {"msg": "Check server configuration. Please look at http://docs.grafana.org/installation/configuration/#server"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana_api_keys uses invalid role names", "module": "fail", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana_api_keys uses invalid role names", "when": ["item.role not in ['Viewer', 'Editor', 'Admin']"], "with_items": "{{ grafana_api_keys }}"}, "module_options": {"msg": "Check grafana_api_keys. The role can only be one of the following values: Viewer, Editor or Admin."}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana_ldap isn't set when grafana_auth.ldap is", "module": "fail", "index": 8, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana_ldap isn't set when grafana_auth.ldap is", "when": ["'ldap' in grafana_auth", "grafana_ldap is not defined or ('servers' not in grafana_ldap or 'group_mappings' not in grafana_ldap)"]}, "module_options": {"msg": "You need to configure grafana_ldap.servers and grafana_ldap.group_mappings when grafana_auth.ldap is set"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Force grafana_use_provisioning to false if grafana_version is < 5.0 ( grafana_version is set to '{{ grafana_version }}' )", "module": "set_fact", "index": 9, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Force grafana_use_provisioning to false if grafana_version is < 5.0 ( grafana_version is set to '{{ grafana_version }}' )", "when": ["grafana_version != 'latest'", "grafana_version is version_compare('5.0', '<')"]}, "module_options": {"grafana_use_provisioning": false}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if grafana_port is lower than 1024 and grafana_cap_net_bind_service is not true", "module": "fail", "index": 10, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail if grafana_port is lower than 1024 and grafana_cap_net_bind_service is not true", "when": ["grafana_port | int <= 1024", "not grafana_cap_net_bind_service"]}, "module_options": {"msg": "Trying to use a port lower than 1024 without setting grafana_cap_net_bind_service."}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if grafana_server.socket not defined when in socket mode", "module": "fail", "index": 11, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail if grafana_server.socket not defined when in socket mode", "when": ["grafana_server.protocol is defined and grafana_server.protocol == 'socket'", "grafana_server.socket is undefined or grafana_server.socket == ''"]}, "module_options": {"msg": "You need to configure grafana_server.socket when grafana_server.protocol is set to 'socket'"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml": {"py/object": "struct4.TaskFile", "name": "configure.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure grafana configuration directories exist", "module": "file", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Ensure grafana configuration directories exist", "with_items": ["/etc/grafana", "/etc/grafana/datasources", "/etc/grafana/provisioning", "/etc/grafana/provisioning/datasources", "/etc/grafana/provisioning/dashboards", "/etc/grafana/provisioning/notifiers", "/etc/grafana/provisioning/plugins"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "root", "group": "grafana"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana main configuration file", "module": "template", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana main configuration file", "no_log": true, "notify": "restart grafana"}, "module_options": {"src": "grafana.ini.j2", "dest": "/etc/grafana/grafana.ini", "owner": "root", "group": "grafana", "mode": 416}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana LDAP configuration file", "module": "template", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana LDAP configuration file", "when": ["'ldap' in grafana_auth", "'enabled' not in grafana_auth.ldap or grafana_auth.ldap.enabled"], "no_log": true, "notify": "restart grafana"}, "module_options": {"src": "ldap.toml.j2", "dest": "{{ grafana_auth.ldap.config_file | default('/etc/grafana/ldap.toml') }}", "owner": "root", "group": "grafana", "mode": 416}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana directories", "module": "file", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana directories", "with_items": ["{{ grafana_logs_dir }}", "{{ grafana_data_dir }}", "{{ grafana_data_dir }}/dashboards", "{{ grafana_data_dir }}/plugins"]}, "module_options": {"path": "{{ item }}", "state": "directory", "mode": 493, "owner": "grafana", "group": "grafana"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana socket directory", "module": "file", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana socket directory"}, "module_options": {"path": "{{ grafana_server.socket | dirname }}", "state": "directory", "mode": 509, "owner": "grafana", "group": "grafana"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure grafana socket directory created on startup", "module": "template", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Ensure grafana socket directory created on startup"}, "module_options": {"src": "tmpfiles.j2", "dest": "/etc/tmpfiles.d/grafana.conf", "owner": "root", "group": "root", "mode": 420}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable grafana to ports lower than port 1024", "module": "capabilities", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Enable grafana to ports lower than port 1024", "when": ["grafana_port | int <= 1024", "grafana_cap_net_bind_service"]}, "module_options": {"path": "/usr/sbin/grafana-server", "capability": "CAP_NET_BIND_SERVICE+ep", "state": "present"}, "executable": "capabilities", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable and start Grafana systemd unit", "module": "systemd", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Enable and start Grafana systemd unit"}, "module_options": {"name": "grafana-server", "enabled": true, "state": "started", "daemon_reload": true}, "executable": "systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml": {"py/object": "struct4.TaskFile", "name": "dashboards.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "tasks": [{"py/object": "struct4.Task", "name": "Create local grafana dashboard directory", "module": "tempfile", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Create local grafana dashboard directory", "register": "_tmp_dashboards", "changed_when": false, "check_mode": false}, "module_options": {"state": "directory"}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "download grafana dashboard from grafana.net to local directory", "module": "command", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "download grafana dashboard from grafana.net to local directory", "args": {"creates": "{{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json", "warn": false}, "register": "_download_dashboards", "until": "_download_dashboards is succeeded", "retries": 5, "delay": 2, "with_items": "{{ grafana_dashboards }}", "when": "grafana_dashboards | length > 0", "changed_when": false, "check_mode": false, "tags": ["skip_ansible_lint"]}, "module_options": "curl --fail --compressed https://grafana.com/api/dashboards/{{ item.dashboard_id }}/revisions/{{ item.revision_id }}/download -o {{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json\n", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the correct data source name in the dashboard", "module": "replace", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Set the correct data source name in the dashboard", "changed_when": false, "with_items": "{{ grafana_dashboards }}", "when": "grafana_dashboards | length > 0"}, "module_options": {"dest": "{{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json", "regexp": "\"(?:\\${)?DS_[A-Z0-9_-]+(?:})?\"", "replace": "\"{{ item.datasource }}\""}, "executable": "replace", "executable_type": "Module", "fqcn": "ansible.builtin.replace", "annotations": {}}, {"py/object": "struct4.Task", "name": "Import grafana dashboards through API", "module": "uri", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Import grafana dashboards through API", "no_log": true, "with_fileglob": ["{{ _tmp_dashboards.path }}/*", "{{ grafana_dashboards_dir }}/*.json"], "when": "not grafana_use_provisioning"}, "module_options": {"url": "{{ grafana_api_url }}/api/dashboards/db", "user": "{{ grafana_security.admin_user }}", "password": "{{ grafana_security.admin_password }}", "force_basic_auth": true, "method": "POST", "body_format": "json", "body": "{\n  \"dashboard\": {{ lookup(\"file\", item) }},\n  \"overwrite\": true,\n  \"message\": \"Updated by ansible\"\n}\n"}, "executable": "uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create/Update dashboards file (provisioning)", "module": "copy", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Create/Update dashboards file (provisioning)", "become": true, "notify": "restart grafana"}, "module_options": {"dest": "/etc/grafana/provisioning/dashboards/ansible.yml", "content": "apiVersion: 1\nproviders:\n - name: 'default'\n   orgId: 1\n   folder: ''\n   type: file\n   options:\n     path: \"{{ grafana_data_dir }}/dashboards\"\n", "backup": false, "owner": "root", "group": "grafana", "mode": 416}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Register previously copied dashboards", "module": "find", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Register previously copied dashboards", "register": "_dashboards_present", "when": "grafana_provisioning_synced"}, "module_options": {"paths": "{{ grafana_data_dir }}/dashboards", "hidden": true, "patterns": ["*.json"]}, "executable": "find", "executable_type": "Module", "fqcn": "ansible.builtin.find", "annotations": {}}, {"py/object": "struct4.Task", "name": "Import grafana dashboards", "module": "copy", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Import grafana dashboards", "become": true, "with_fileglob": ["{{ _tmp_dashboards.path }}/*", "{{ grafana_dashboards_dir }}/*.json"], "register": "_dashboards_copied", "notify": "provisioned dashboards changed"}, "module_options": {"src": "{{ item }}", "dest": "{{ grafana_data_dir }}/dashboards/{{ item | basename }}"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get dashboard lists", "module": "set_fact", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Get dashboard lists", "when": "grafana_provisioning_synced"}, "module_options": {"_dashboards_present_list": "{{ _dashboards_present | json_query('files[*].path') | default([]) }}", "_dashboards_copied_list": "{{ _dashboards_copied | json_query('results[*].dest') | default([]) }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove dashboards not present on deployer machine (synchronize)", "module": "file", "index": 8, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Remove dashboards not present on deployer machine (synchronize)", "become": true, "with_items": "{{ _dashboards_present_list | difference( _dashboards_copied_list ) }}", "when": "grafana_provisioning_synced"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/notifications.yml": {"py/object": "struct4.TaskFile", "name": "notifications.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/notifications.yml", "tasks": [{"py/object": "struct4.Task", "name": "Create/Delete/Update alert notifications channels (provisioning)", "module": "copy", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/notifications.yml", "options": {"name": "Create/Delete/Update alert notifications channels (provisioning)", "become": true, "notify": "restart grafana", "when": "grafana_use_provisioning"}, "module_options": {"content": "apiVersion: 1\n{{ grafana_alert_notifications | to_nice_yaml }}\n", "dest": "/etc/grafana/provisioning/notifiers/ansible.yml", "owner": "root", "group": "grafana", "mode": 416}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml": {"py/object": "struct4.TaskFile", "name": "api_keys.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure grafana key directory exists", "module": "file", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Ensure grafana key directory exists", "become": false, "delegate_to": "localhost"}, "module_options": {"path": "{{ grafana_api_keys_dir }}/{{ inventory_hostname }}", "state": "directory"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check api key list", "module": "uri", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Check api key list", "no_log": true, "register": "existing_api_keys"}, "module_options": {"url": "{{ grafana_api_url }}/api/auth/keys", "user": "{{ grafana_security.admin_user }}", "password": "{{ grafana_security.admin_password }}", "force_basic_auth": true, "return_content": true}, "executable": "uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana api keys", "module": "uri", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Create grafana api keys", "with_items": "{{ grafana_api_keys }}", "no_log": true, "when": "((existing_api_keys['json'] | selectattr(\"name\", \"equalto\", item['name'])) | list) | length == 0", "register": "new_api_keys"}, "module_options": {"url": "{{ grafana_api_url }}/api/auth/keys", "user": "{{ grafana_security.admin_user }}", "password": "{{ grafana_security.admin_password }}", "force_basic_auth": true, "method": "POST", "body_format": "json", "body": "{{ item | to_json }}"}, "executable": "uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create api keys file to allow the keys to be seen and used by other automation", "module": "copy", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Create api keys file to allow the keys to be seen and used by other automation", "become": false, "when": "item['json'] is defined", "with_items": "{{ new_api_keys['results'] }}", "delegate_to": "localhost"}, "module_options": {"dest": "{{ grafana_api_keys_dir }}/{{ inventory_hostname }}/{{ item['item']['name'] }}.key", "content": "{{ item['json']['key'] }}", "backup": false}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml": {"py/object": "struct4.TaskFile", "name": "plugins.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check which plugins are installed", "module": "find", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml", "options": {"name": "Check which plugins are installed", "register": "installed_plugins"}, "module_options": {"file_type": "directory", "recurse": false, "paths": "{{ grafana_data_dir }}/plugins"}, "executable": "find", "executable_type": "Module", "fqcn": "ansible.builtin.find", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install plugins", "module": "command", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml", "options": {"name": "Install plugins", "become": true, "args": {"creates": "{{ grafana_data_dir }}/plugins/{{ item }}"}, "with_items": "{{ grafana_plugins | difference(installed_plugins.files) }}", "register": "_plugin_install", "until": "_plugin_install is succeeded", "retries": 5, "delay": 2, "notify": ["restart grafana"]}, "module_options": "grafana-cli --pluginsDir {{ grafana_data_dir }}/plugins plugins install {{ item }}", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml": {"py/object": "struct4.TaskFile", "name": "datasources.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure datasources exist (via API)", "module": "grafana_datasource", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml", "options": {"name": "Ensure datasources exist (via API)", "with_items": "{{ grafana_datasources }}", "when": "not grafana_use_provisioning"}, "module_options": {"grafana_url": "{{ grafana_api_url }}", "grafana_user": "{{ grafana_security.admin_user }}", "grafana_password": "{{ grafana_security.admin_password }}", "name": "{{ item.name }}", "url": "{{ item.url }}", "ds_type": "{{ item.type }}", "access": "{{ item.access | default(omit) }}", "is_default": "{{ item.isDefault | default(omit) }}", "basic_auth_user": "{{ item.basicAuthUser | default(omit) }}", "basic_auth_password": "{{ item.basicAuthPassword | default(omit) }}", "database": "{{ item.database | default(omit) }}", "user": "{{ item.user | default(omit) }}", "password": "{{ item.password | default(omit) }}", "aws_auth_type": "{{ item.aws_auth_type | default(omit) }}", "aws_default_region": "{{ item.aws_default_region | default(omit) }}", "aws_access_key": "{{ item.aws_access_key | default(omit) }}", "aws_secret_key": "{{ item.aws_secret_key | default(omit) }}", "aws_credentials_profile": "{{ item.aws_credentials_profile | default(omit) }}", "aws_custom_metrics_namespaces": "{{ item.aws_custom_metrics_namespaces | default(omit) }}"}, "executable": "grafana_datasource", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create/Update datasources file (provisioning)", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml", "options": {"name": "Create/Update datasources file (provisioning)", "become": true, "notify": "restart grafana", "when": "grafana_use_provisioning"}, "module_options": {"dest": "/etc/grafana/provisioning/datasources/ansible.yml", "content": "apiVersion: 1\ndeleteDatasources: []\ndatasources:\n{{ grafana_datasources | to_nice_yaml }}\n", "backup": false, "owner": "root", "group": "grafana", "mode": 416}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml": {"py/object": "struct4.TaskFile", "name": "install.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "tasks": [{"py/object": "struct4.Task", "name": "Update apt cache", "module": "apt", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Update apt cache", "register": "_pre_update_apt_cache", "until": "_pre_update_apt_cache is succeeded", "when": ["ansible_pkg_mgr == \"apt\""]}, "module_options": {"update_cache": true}, "executable": "apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install dependencies", "module": "package", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Install dependencies", "register": "_install_dep_packages", "until": "_install_dep_packages is succeeded", "retries": 5, "delay": 2}, "module_options": {"name": "{{ grafana_dependencies }}", "state": "present"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove conflicting grafana packages", "module": "package", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Remove conflicting grafana packages", "register": "_old_grafana_pkgs"}, "module_options": {"name": "grafana-data", "state": "absent"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Clean apt cache", "module": "command", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Clean apt cache", "when": ["_old_grafana_pkgs is changed", "ansible_pkg_mgr == \"apt\""]}, "module_options": "apt clean", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add Grafana repository file [RHEL/CentOS]", "module": "template", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Add Grafana repository file [RHEL/CentOS]", "when": "ansible_pkg_mgr in ['yum', 'dnf']"}, "module_options": {"src": "{{ grafana_yum_repo_template }}", "dest": "/etc/yum.repos.d/{{ grafana_yum_repo_template | basename | regex_replace('\\.j2$', '') }}", "force": true, "backup": true}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Import Grafana GPG signing key [Debian/Ubuntu]", "module": "apt_key", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Import Grafana GPG signing key [Debian/Ubuntu]", "register": "_add_apt_key", "until": "_add_apt_key is succeeded", "retries": 5, "delay": 2}, "module_options": {"url": "https://packages.grafana.com/gpg.key", "state": "present", "validate_certs": false}, "executable": "apt_key", "executable_type": "Module", "fqcn": "ansible.builtin.apt_key", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add Grafana repository [Debian/Ubuntu]", "module": "apt_repository", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Add Grafana repository [Debian/Ubuntu]", "register": "_update_apt_cache", "until": "_update_apt_cache is succeeded", "retries": 5, "delay": 2}, "module_options": {"repo": "deb https://packages.grafana.com/oss/deb stable main", "state": "present", "update_cache": true}, "executable": "apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Grafana", "module": "package", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Install Grafana", "register": "_install_packages", "until": "_install_packages is succeeded", "retries": 5, "delay": 2, "notify": "restart grafana"}, "module_options": {"name": "{{ grafana_package }}", "state": "{{ (grafana_version == 'latest') | ternary('latest', 'present') }}"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml": {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Gather variables for each operating system", "module": "include_vars", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Gather variables for each operating system", "with_first_found": ["{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml", "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml", "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml", "{{ ansible_distribution | lower }}.yml", "{{ ansible_os_family | lower }}.yml"], "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards"]}, "module_options": "{{ item }}", "executable": "include_vars", "executable_type": "Module", "fqcn": "ansible.builtin.include_vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards"]}, "module_options": "preflight.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"become": true, "tags": ["grafana_install"]}, "module_options": "install.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"become": true, "tags": ["grafana_configure"]}, "module_options": "configure.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_plugins != []", "tags": ["grafana_configure"]}, "module_options": "plugins.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart grafana before configuring datasources and dashboards", "module": "meta", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Restart grafana before configuring datasources and dashboards", "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards", "grafana_run"]}, "module_options": "flush_handlers", "executable": "meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "Wait for grafana to start (http/s)", "module": "wait_for", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Wait for grafana to start (http/s)", "when": "grafana_server.protocol is undefined or grafana_server.protocol in ['http', 'https']", "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards", "grafana_run"]}, "module_options": {"host": "{{ grafana_address }}", "port": "{{ grafana_port }}"}, "executable": "wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, {"py/object": "struct4.Task", "name": "Wait for grafana to start (socket)", "module": "wait_for", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Wait for grafana to start (socket)", "when": "grafana_server.protocol is defined and grafana_server.protocol == 'socket'", "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards", "grafana_run"]}, "module_options": {"path": "{{ grafana_server.socket }}"}, "executable": "wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 8, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_api_keys | length > 0", "tags": ["grafana_configure", "grafana_run"]}, "module_options": "api_keys.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 9, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_datasources != []", "tags": ["grafana_configure", "grafana_datasources", "grafana_run"]}, "module_options": "datasources.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 10, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_alert_notifications | length > 0", "tags": ["grafana_configure", "grafana_notifications", "grafana_run"]}, "module_options": "notifications.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if there are any dashboards in local {{ grafana_dashboards_dir }}", "module": "set_fact", "index": 11, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Check if there are any dashboards in local {{ grafana_dashboards_dir }}", "become": false, "tags": ["grafana_configure", "grafana_dashboards", "grafana_run"]}, "module_options": {"found_dashboards": "{{ lookup('fileglob', grafana_dashboards_dir + '/*.json', wantlist=True) }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 12, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_dashboards | length > 0 or found_dashboards | length > 0", "tags": ["grafana_configure", "grafana_dashboards", "grafana_run"]}, "module_options": "dashboards.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}}, "role_dict": {"cloudalchemy.grafana": {"py/object": "struct4.Role", "name": "cloudalchemy.grafana", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana", "fqcn": "cloudalchemy.grafana", "collection": "", "taskfiles": [{"py/object": "struct4.TaskFile", "name": "preflight.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check variable types", "module": "assert", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Check variable types"}, "module_options": {"that": ["grafana_server is mapping", "grafana_database is mapping", "grafana_security is mapping"]}, "executable": "assert", "executable_type": "Module", "fqcn": "ansible.builtin.assert", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when datasources aren't configured when dashboards are set to be installed", "module": "fail", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when datasources aren't configured when dashboards are set to be installed", "when": "grafana_dashboards != [] and grafana_datasources == []"}, "module_options": {"msg": "You need to specify datasources for dashboards!!!"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana admin user isn't set", "module": "fail", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana admin user isn't set", "when": ["grafana_security.admin_user == '' or grafana_security.admin_user is not defined"]}, "module_options": {"msg": "Please specify grafana admin user (grafana_security.admin_user)"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana admin password isn't set", "module": "fail", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana admin password isn't set", "when": ["grafana_security.admin_password == '' or grafana_security.admin_password is not defined"]}, "module_options": {"msg": "Please specify grafana admin password (grafana_security.admin_password)"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail on incorrect variable types in datasource definitions", "module": "fail", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail on incorrect variable types in datasource definitions", "when": "( item.isDefault is defined and item.isDefault is string ) or ( item.basicAuth is defined and item.basicAuth is string )", "with_items": "{{ grafana_datasources }}"}, "module_options": {"msg": "Boolean variables in grafana_datasources shouldn't be passed as strings. Please remove unneeded apostrophes."}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail on bad database configuration", "module": "fail", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail on bad database configuration", "when": "( grafana_database.type == \"sqlite3\" and grafana_database.url is defined ) or ( grafana_database.type != \"sqlite3\" and grafana_database.path is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.host is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.user is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.password is defined ) or ( grafana_database.type == \"sqlite3\" and grafana_database.server_cert_name is defined )"}, "module_options": {"msg": "Wrong database configuration. Please look at http://docs.grafana.org/installation/configuration/#database"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana domain isn't properly configured", "module": "fail", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana domain isn't properly configured", "when": ["grafana_server.root_url is defined", "grafana_server.root_url is search(grafana_server.domain)"]}, "module_options": {"msg": "Check server configuration. Please look at http://docs.grafana.org/installation/configuration/#server"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana_api_keys uses invalid role names", "module": "fail", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana_api_keys uses invalid role names", "when": ["item.role not in ['Viewer', 'Editor', 'Admin']"], "with_items": "{{ grafana_api_keys }}"}, "module_options": {"msg": "Check grafana_api_keys. The role can only be one of the following values: Viewer, Editor or Admin."}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when grafana_ldap isn't set when grafana_auth.ldap is", "module": "fail", "index": 8, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail when grafana_ldap isn't set when grafana_auth.ldap is", "when": ["'ldap' in grafana_auth", "grafana_ldap is not defined or ('servers' not in grafana_ldap or 'group_mappings' not in grafana_ldap)"]}, "module_options": {"msg": "You need to configure grafana_ldap.servers and grafana_ldap.group_mappings when grafana_auth.ldap is set"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Force grafana_use_provisioning to false if grafana_version is < 5.0 ( grafana_version is set to '{{ grafana_version }}' )", "module": "set_fact", "index": 9, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Force grafana_use_provisioning to false if grafana_version is < 5.0 ( grafana_version is set to '{{ grafana_version }}' )", "when": ["grafana_version != 'latest'", "grafana_version is version_compare('5.0', '<')"]}, "module_options": {"grafana_use_provisioning": false}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if grafana_port is lower than 1024 and grafana_cap_net_bind_service is not true", "module": "fail", "index": 10, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail if grafana_port is lower than 1024 and grafana_cap_net_bind_service is not true", "when": ["grafana_port | int <= 1024", "not grafana_cap_net_bind_service"]}, "module_options": {"msg": "Trying to use a port lower than 1024 without setting grafana_cap_net_bind_service."}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if grafana_server.socket not defined when in socket mode", "module": "fail", "index": 11, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/preflight.yml", "options": {"name": "Fail if grafana_server.socket not defined when in socket mode", "when": ["grafana_server.protocol is defined and grafana_server.protocol == 'socket'", "grafana_server.socket is undefined or grafana_server.socket == ''"]}, "module_options": {"msg": "You need to configure grafana_server.socket when grafana_server.protocol is set to 'socket'"}, "executable": "fail", "executable_type": "Module", "fqcn": "ansible.builtin.fail", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "configure.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure grafana configuration directories exist", "module": "file", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Ensure grafana configuration directories exist", "with_items": ["/etc/grafana", "/etc/grafana/datasources", "/etc/grafana/provisioning", "/etc/grafana/provisioning/datasources", "/etc/grafana/provisioning/dashboards", "/etc/grafana/provisioning/notifiers", "/etc/grafana/provisioning/plugins"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "root", "group": "grafana"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana main configuration file", "module": "template", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana main configuration file", "no_log": true, "notify": "restart grafana"}, "module_options": {"src": "grafana.ini.j2", "dest": "/etc/grafana/grafana.ini", "owner": "root", "group": "grafana", "mode": 416}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana LDAP configuration file", "module": "template", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana LDAP configuration file", "when": ["'ldap' in grafana_auth", "'enabled' not in grafana_auth.ldap or grafana_auth.ldap.enabled"], "no_log": true, "notify": "restart grafana"}, "module_options": {"src": "ldap.toml.j2", "dest": "{{ grafana_auth.ldap.config_file | default('/etc/grafana/ldap.toml') }}", "owner": "root", "group": "grafana", "mode": 416}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana directories", "module": "file", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana directories", "with_items": ["{{ grafana_logs_dir }}", "{{ grafana_data_dir }}", "{{ grafana_data_dir }}/dashboards", "{{ grafana_data_dir }}/plugins"]}, "module_options": {"path": "{{ item }}", "state": "directory", "mode": 493, "owner": "grafana", "group": "grafana"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana socket directory", "module": "file", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Create grafana socket directory"}, "module_options": {"path": "{{ grafana_server.socket | dirname }}", "state": "directory", "mode": 509, "owner": "grafana", "group": "grafana"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure grafana socket directory created on startup", "module": "template", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Ensure grafana socket directory created on startup"}, "module_options": {"src": "tmpfiles.j2", "dest": "/etc/tmpfiles.d/grafana.conf", "owner": "root", "group": "root", "mode": 420}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable grafana to ports lower than port 1024", "module": "capabilities", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Enable grafana to ports lower than port 1024", "when": ["grafana_port | int <= 1024", "grafana_cap_net_bind_service"]}, "module_options": {"path": "/usr/sbin/grafana-server", "capability": "CAP_NET_BIND_SERVICE+ep", "state": "present"}, "executable": "capabilities", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable and start Grafana systemd unit", "module": "systemd", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/configure.yml", "options": {"name": "Enable and start Grafana systemd unit"}, "module_options": {"name": "grafana-server", "enabled": true, "state": "started", "daemon_reload": true}, "executable": "systemd", "executable_type": "Module", "fqcn": "ansible.builtin.systemd", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "dashboards.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "tasks": [{"py/object": "struct4.Task", "name": "Create local grafana dashboard directory", "module": "tempfile", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Create local grafana dashboard directory", "register": "_tmp_dashboards", "changed_when": false, "check_mode": false}, "module_options": {"state": "directory"}, "executable": "tempfile", "executable_type": "Module", "fqcn": "ansible.builtin.tempfile", "annotations": {}}, {"py/object": "struct4.Task", "name": "download grafana dashboard from grafana.net to local directory", "module": "command", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "download grafana dashboard from grafana.net to local directory", "args": {"creates": "{{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json", "warn": false}, "register": "_download_dashboards", "until": "_download_dashboards is succeeded", "retries": 5, "delay": 2, "with_items": "{{ grafana_dashboards }}", "when": "grafana_dashboards | length > 0", "changed_when": false, "check_mode": false, "tags": ["skip_ansible_lint"]}, "module_options": "curl --fail --compressed https://grafana.com/api/dashboards/{{ item.dashboard_id }}/revisions/{{ item.revision_id }}/download -o {{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json\n", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the correct data source name in the dashboard", "module": "replace", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Set the correct data source name in the dashboard", "changed_when": false, "with_items": "{{ grafana_dashboards }}", "when": "grafana_dashboards | length > 0"}, "module_options": {"dest": "{{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json", "regexp": "\"(?:\\${)?DS_[A-Z0-9_-]+(?:})?\"", "replace": "\"{{ item.datasource }}\""}, "executable": "replace", "executable_type": "Module", "fqcn": "ansible.builtin.replace", "annotations": {}}, {"py/object": "struct4.Task", "name": "Import grafana dashboards through API", "module": "uri", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Import grafana dashboards through API", "no_log": true, "with_fileglob": ["{{ _tmp_dashboards.path }}/*", "{{ grafana_dashboards_dir }}/*.json"], "when": "not grafana_use_provisioning"}, "module_options": {"url": "{{ grafana_api_url }}/api/dashboards/db", "user": "{{ grafana_security.admin_user }}", "password": "{{ grafana_security.admin_password }}", "force_basic_auth": true, "method": "POST", "body_format": "json", "body": "{\n  \"dashboard\": {{ lookup(\"file\", item) }},\n  \"overwrite\": true,\n  \"message\": \"Updated by ansible\"\n}\n"}, "executable": "uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create/Update dashboards file (provisioning)", "module": "copy", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Create/Update dashboards file (provisioning)", "become": true, "notify": "restart grafana"}, "module_options": {"dest": "/etc/grafana/provisioning/dashboards/ansible.yml", "content": "apiVersion: 1\nproviders:\n - name: 'default'\n   orgId: 1\n   folder: ''\n   type: file\n   options:\n     path: \"{{ grafana_data_dir }}/dashboards\"\n", "backup": false, "owner": "root", "group": "grafana", "mode": 416}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Register previously copied dashboards", "module": "find", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Register previously copied dashboards", "register": "_dashboards_present", "when": "grafana_provisioning_synced"}, "module_options": {"paths": "{{ grafana_data_dir }}/dashboards", "hidden": true, "patterns": ["*.json"]}, "executable": "find", "executable_type": "Module", "fqcn": "ansible.builtin.find", "annotations": {}}, {"py/object": "struct4.Task", "name": "Import grafana dashboards", "module": "copy", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Import grafana dashboards", "become": true, "with_fileglob": ["{{ _tmp_dashboards.path }}/*", "{{ grafana_dashboards_dir }}/*.json"], "register": "_dashboards_copied", "notify": "provisioned dashboards changed"}, "module_options": {"src": "{{ item }}", "dest": "{{ grafana_data_dir }}/dashboards/{{ item | basename }}"}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}, {"py/object": "struct4.Task", "name": "Get dashboard lists", "module": "set_fact", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Get dashboard lists", "when": "grafana_provisioning_synced"}, "module_options": {"_dashboards_present_list": "{{ _dashboards_present | json_query('files[*].path') | default([]) }}", "_dashboards_copied_list": "{{ _dashboards_copied | json_query('results[*].dest') | default([]) }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove dashboards not present on deployer machine (synchronize)", "module": "file", "index": 8, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/dashboards.yml", "options": {"name": "Remove dashboards not present on deployer machine (synchronize)", "become": true, "with_items": "{{ _dashboards_present_list | difference( _dashboards_copied_list ) }}", "when": "grafana_provisioning_synced"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "notifications.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/notifications.yml", "tasks": [{"py/object": "struct4.Task", "name": "Create/Delete/Update alert notifications channels (provisioning)", "module": "copy", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/notifications.yml", "options": {"name": "Create/Delete/Update alert notifications channels (provisioning)", "become": true, "notify": "restart grafana", "when": "grafana_use_provisioning"}, "module_options": {"content": "apiVersion: 1\n{{ grafana_alert_notifications | to_nice_yaml }}\n", "dest": "/etc/grafana/provisioning/notifiers/ansible.yml", "owner": "root", "group": "grafana", "mode": 416}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "api_keys.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure grafana key directory exists", "module": "file", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Ensure grafana key directory exists", "become": false, "delegate_to": "localhost"}, "module_options": {"path": "{{ grafana_api_keys_dir }}/{{ inventory_hostname }}", "state": "directory"}, "executable": "file", "executable_type": "Module", "fqcn": "ansible.builtin.file", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check api key list", "module": "uri", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Check api key list", "no_log": true, "register": "existing_api_keys"}, "module_options": {"url": "{{ grafana_api_url }}/api/auth/keys", "user": "{{ grafana_security.admin_user }}", "password": "{{ grafana_security.admin_password }}", "force_basic_auth": true, "return_content": true}, "executable": "uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create grafana api keys", "module": "uri", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Create grafana api keys", "with_items": "{{ grafana_api_keys }}", "no_log": true, "when": "((existing_api_keys['json'] | selectattr(\"name\", \"equalto\", item['name'])) | list) | length == 0", "register": "new_api_keys"}, "module_options": {"url": "{{ grafana_api_url }}/api/auth/keys", "user": "{{ grafana_security.admin_user }}", "password": "{{ grafana_security.admin_password }}", "force_basic_auth": true, "method": "POST", "body_format": "json", "body": "{{ item | to_json }}"}, "executable": "uri", "executable_type": "Module", "fqcn": "ansible.builtin.uri", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create api keys file to allow the keys to be seen and used by other automation", "module": "copy", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/api_keys.yml", "options": {"name": "Create api keys file to allow the keys to be seen and used by other automation", "become": false, "when": "item['json'] is defined", "with_items": "{{ new_api_keys['results'] }}", "delegate_to": "localhost"}, "module_options": {"dest": "{{ grafana_api_keys_dir }}/{{ inventory_hostname }}/{{ item['item']['name'] }}.key", "content": "{{ item['json']['key'] }}", "backup": false}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "plugins.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check which plugins are installed", "module": "find", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml", "options": {"name": "Check which plugins are installed", "register": "installed_plugins"}, "module_options": {"file_type": "directory", "recurse": false, "paths": "{{ grafana_data_dir }}/plugins"}, "executable": "find", "executable_type": "Module", "fqcn": "ansible.builtin.find", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install plugins", "module": "command", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/plugins.yml", "options": {"name": "Install plugins", "become": true, "args": {"creates": "{{ grafana_data_dir }}/plugins/{{ item }}"}, "with_items": "{{ grafana_plugins | difference(installed_plugins.files) }}", "register": "_plugin_install", "until": "_plugin_install is succeeded", "retries": 5, "delay": 2, "notify": ["restart grafana"]}, "module_options": "grafana-cli --pluginsDir {{ grafana_data_dir }}/plugins plugins install {{ item }}", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "datasources.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml", "tasks": [{"py/object": "struct4.Task", "name": "Ensure datasources exist (via API)", "module": "grafana_datasource", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml", "options": {"name": "Ensure datasources exist (via API)", "with_items": "{{ grafana_datasources }}", "when": "not grafana_use_provisioning"}, "module_options": {"grafana_url": "{{ grafana_api_url }}", "grafana_user": "{{ grafana_security.admin_user }}", "grafana_password": "{{ grafana_security.admin_password }}", "name": "{{ item.name }}", "url": "{{ item.url }}", "ds_type": "{{ item.type }}", "access": "{{ item.access | default(omit) }}", "is_default": "{{ item.isDefault | default(omit) }}", "basic_auth_user": "{{ item.basicAuthUser | default(omit) }}", "basic_auth_password": "{{ item.basicAuthPassword | default(omit) }}", "database": "{{ item.database | default(omit) }}", "user": "{{ item.user | default(omit) }}", "password": "{{ item.password | default(omit) }}", "aws_auth_type": "{{ item.aws_auth_type | default(omit) }}", "aws_default_region": "{{ item.aws_default_region | default(omit) }}", "aws_access_key": "{{ item.aws_access_key | default(omit) }}", "aws_secret_key": "{{ item.aws_secret_key | default(omit) }}", "aws_credentials_profile": "{{ item.aws_credentials_profile | default(omit) }}", "aws_custom_metrics_namespaces": "{{ item.aws_custom_metrics_namespaces | default(omit) }}"}, "executable": "grafana_datasource", "executable_type": "Module", "fqcn": "", "annotations": {}}, {"py/object": "struct4.Task", "name": "Create/Update datasources file (provisioning)", "module": "copy", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/datasources.yml", "options": {"name": "Create/Update datasources file (provisioning)", "become": true, "notify": "restart grafana", "when": "grafana_use_provisioning"}, "module_options": {"dest": "/etc/grafana/provisioning/datasources/ansible.yml", "content": "apiVersion: 1\ndeleteDatasources: []\ndatasources:\n{{ grafana_datasources | to_nice_yaml }}\n", "backup": false, "owner": "root", "group": "grafana", "mode": 416}, "executable": "copy", "executable_type": "Module", "fqcn": "ansible.builtin.copy", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "install.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "tasks": [{"py/object": "struct4.Task", "name": "Update apt cache", "module": "apt", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Update apt cache", "register": "_pre_update_apt_cache", "until": "_pre_update_apt_cache is succeeded", "when": ["ansible_pkg_mgr == \"apt\""]}, "module_options": {"update_cache": true}, "executable": "apt", "executable_type": "Module", "fqcn": "ansible.builtin.apt", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install dependencies", "module": "package", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Install dependencies", "register": "_install_dep_packages", "until": "_install_dep_packages is succeeded", "retries": 5, "delay": 2}, "module_options": {"name": "{{ grafana_dependencies }}", "state": "present"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove conflicting grafana packages", "module": "package", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Remove conflicting grafana packages", "register": "_old_grafana_pkgs"}, "module_options": {"name": "grafana-data", "state": "absent"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}, {"py/object": "struct4.Task", "name": "Clean apt cache", "module": "command", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Clean apt cache", "when": ["_old_grafana_pkgs is changed", "ansible_pkg_mgr == \"apt\""]}, "module_options": "apt clean", "executable": "command", "executable_type": "Module", "fqcn": "ansible.builtin.command", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add Grafana repository file [RHEL/CentOS]", "module": "template", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Add Grafana repository file [RHEL/CentOS]", "when": "ansible_pkg_mgr in ['yum', 'dnf']"}, "module_options": {"src": "{{ grafana_yum_repo_template }}", "dest": "/etc/yum.repos.d/{{ grafana_yum_repo_template | basename | regex_replace('\\.j2$', '') }}", "force": true, "backup": true}, "executable": "template", "executable_type": "Module", "fqcn": "ansible.builtin.template", "annotations": {}}, {"py/object": "struct4.Task", "name": "Import Grafana GPG signing key [Debian/Ubuntu]", "module": "apt_key", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Import Grafana GPG signing key [Debian/Ubuntu]", "register": "_add_apt_key", "until": "_add_apt_key is succeeded", "retries": 5, "delay": 2}, "module_options": {"url": "https://packages.grafana.com/gpg.key", "state": "present", "validate_certs": false}, "executable": "apt_key", "executable_type": "Module", "fqcn": "ansible.builtin.apt_key", "annotations": {}}, {"py/object": "struct4.Task", "name": "Add Grafana repository [Debian/Ubuntu]", "module": "apt_repository", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Add Grafana repository [Debian/Ubuntu]", "register": "_update_apt_cache", "until": "_update_apt_cache is succeeded", "retries": 5, "delay": 2}, "module_options": {"repo": "deb https://packages.grafana.com/oss/deb stable main", "state": "present", "update_cache": true}, "executable": "apt_repository", "executable_type": "Module", "fqcn": "ansible.builtin.apt_repository", "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Grafana", "module": "package", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/install.yml", "options": {"name": "Install Grafana", "register": "_install_packages", "until": "_install_packages is succeeded", "retries": 5, "delay": 2, "notify": "restart grafana"}, "module_options": {"name": "{{ grafana_package }}", "state": "{{ (grafana_version == 'latest') | ternary('latest', 'present') }}"}, "executable": "package", "executable_type": "Module", "fqcn": "ansible.builtin.package", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}, {"py/object": "struct4.TaskFile", "name": "main.yml", "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "tasks": [{"py/object": "struct4.Task", "name": "Gather variables for each operating system", "module": "include_vars", "index": 0, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Gather variables for each operating system", "with_first_found": ["{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml", "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml", "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml", "{{ ansible_distribution | lower }}.yml", "{{ ansible_os_family | lower }}.yml"], "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards"]}, "module_options": "{{ item }}", "executable": "include_vars", "executable_type": "Module", "fqcn": "ansible.builtin.include_vars", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 1, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards"]}, "module_options": "preflight.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 2, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"become": true, "tags": ["grafana_install"]}, "module_options": "install.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 3, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"become": true, "tags": ["grafana_configure"]}, "module_options": "configure.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 4, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_plugins != []", "tags": ["grafana_configure"]}, "module_options": "plugins.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart grafana before configuring datasources and dashboards", "module": "meta", "index": 5, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Restart grafana before configuring datasources and dashboards", "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards", "grafana_run"]}, "module_options": "flush_handlers", "executable": "meta", "executable_type": "Module", "fqcn": "ansible.builtin.meta", "annotations": {}}, {"py/object": "struct4.Task", "name": "Wait for grafana to start (http/s)", "module": "wait_for", "index": 6, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Wait for grafana to start (http/s)", "when": "grafana_server.protocol is undefined or grafana_server.protocol in ['http', 'https']", "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards", "grafana_run"]}, "module_options": {"host": "{{ grafana_address }}", "port": "{{ grafana_port }}"}, "executable": "wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, {"py/object": "struct4.Task", "name": "Wait for grafana to start (socket)", "module": "wait_for", "index": 7, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Wait for grafana to start (socket)", "when": "grafana_server.protocol is defined and grafana_server.protocol == 'socket'", "tags": ["grafana_install", "grafana_configure", "grafana_datasources", "grafana_notifications", "grafana_dashboards", "grafana_run"]}, "module_options": {"path": "{{ grafana_server.socket }}"}, "executable": "wait_for", "executable_type": "Module", "fqcn": "ansible.builtin.wait_for", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 8, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_api_keys | length > 0", "tags": ["grafana_configure", "grafana_run"]}, "module_options": "api_keys.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 9, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_datasources != []", "tags": ["grafana_configure", "grafana_datasources", "grafana_run"]}, "module_options": "datasources.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 10, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_alert_notifications | length > 0", "tags": ["grafana_configure", "grafana_notifications", "grafana_run"]}, "module_options": "notifications.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if there are any dashboards in local {{ grafana_dashboards_dir }}", "module": "set_fact", "index": 11, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"name": "Check if there are any dashboards in local {{ grafana_dashboards_dir }}", "become": false, "tags": ["grafana_configure", "grafana_dashboards", "grafana_run"]}, "module_options": {"found_dashboards": "{{ lookup('fileglob', grafana_dashboards_dir + '/*.json', wantlist=True) }}"}, "executable": "set_fact", "executable_type": "Module", "fqcn": "ansible.builtin.set_fact", "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include", "index": 12, "defined_in": "./role-test/testdata/cloudalchemy-grafana/cloudalchemy.grafana/tasks/main.yml", "options": {"when": "grafana_dashboards | length > 0 or found_dashboards | length > 0", "tags": ["grafana_configure", "grafana_dashboards", "grafana_run"]}, "module_options": "dashboards.yml", "executable": "include", "executable_type": "Module", "fqcn": "ansible.builtin.include", "annotations": {}}], "role": "cloudalchemy.grafana", "used_in": [], "annotations": {}}], "modules": [], "source": "", "annotations": {}, "used_in": []}}, "annotations": {}}