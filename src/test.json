{"py/object": "struct4.Repository", "name": "", "path": "testdata/scm_repo", "galaxy_yml": "testdata/scm_repo/galaxy.yml", "my_collection_name": "debops.debops", "playbooks": [{"py/object": "struct4.Playbook", "name": "common.yml", "defined_in": "testdata/scm_repo/playbooks/common.yml", "tasks": [{"py/object": "struct4.Task", "name": "Check for Ansible version without known vulnerabilities", "module": "ansible.builtin.assert", "index": 0, "defined_in": "testdata/scm_repo/playbooks/common.yml", "options": {"name": "Check for Ansible version without known vulnerabilities", "run_once": true, "delegate_to": "localhost"}, "module_options": {"that": ["ansible_version.full is version_compare(\"2.1.5.0\", \">=\")", "((ansible_version.minor == 2) and (ansible_version.full is version_compare(\"2.2.2.0\", \">=\"))) or (ansible_version.minor != 2)"], "msg": "VULNERABLE or unsupported Ansible version DETECTED, please update to\nAnsible >= v2.1.5 or a newer Ansible release >= v2.2.2! To skip, add\n\"--skip-tags play::security-assertions\" parameter. Check the\ndebops-playbook changelog for details. Exiting.\n"}, "fqcn": "ansible.builtin.assert", "used_in": ["testdata/scm_repo/playbooks/common.yml"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare nullmailer environment", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/playbooks/common.yml", "options": {"name": "Prepare nullmailer environment", "tags": ["role::nullmailer", "role::ferm", "role::tcpwrappers"]}, "module_options": {"name": "nullmailer", "tasks_from": "main_env"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/common.yml"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare pki environment", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/playbooks/common.yml", "options": {"name": "Prepare pki environment", "tags": ["role::pki", "role::pki:secret", "role::secret"]}, "module_options": {"name": "pki", "tasks_from": "main_env"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/common.yml"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare sshd environment", "module": "ansible.builtin.import_role", "index": 3, "defined_in": "testdata/scm_repo/playbooks/common.yml", "options": {"name": "Prepare sshd environment", "tags": ["role::sshd", "role::ldap"]}, "module_options": {"name": "sshd", "tasks_from": "main_env"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/common.yml"], "annotations": {}}], "roles": [{"py/object": "struct4.RoleInPlay", "name": "apt_proxy", "options": {"role": "apt_proxy", "tags": ["role::apt_proxy", "skip::apt_proxy"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 0, "play_index": 1, "role_path": "testdata/scm_repo/roles/apt_proxy", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt", "options": {"role": "apt", "tags": ["role::apt", "skip::apt"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 1, "play_index": 1, "role_path": "testdata/scm_repo/roles/apt", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "debops_fact", "options": {"role": "debops_fact", "tags": ["role::debops_fact", "skip::debops_fact"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 0, "play_index": 3, "role_path": "testdata/scm_repo/roles/debops_fact", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "environment", "options": {"role": "environment", "tags": ["role::environment", "skip::environment"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 1, "play_index": 3, "role_path": "testdata/scm_repo/roles/environment", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "resolvconf", "options": {"role": "resolvconf", "tags": ["role::resolvconf", "skip::resolvconf"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 2, "play_index": 3, "role_path": "testdata/scm_repo/roles/resolvconf", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "python", "options": {"role": "python", "tags": ["role::python", "skip::python", "role::netbase", "role::ldap"], "python__dependent_packages3": ["{{ netbase__python__dependent_packages3 }}", "{{ ldap__python__dependent_packages3 }}"], "python__dependent_packages2": ["{{ netbase__python__dependent_packages2 }}", "{{ ldap__python__dependent_packages2 }}"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 3, "play_index": 3, "role_path": "testdata/scm_repo/roles/python", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "netbase", "options": {"role": "netbase", "tags": ["role::netbase", "skip::netbase"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 4, "play_index": 3, "role_path": "testdata/scm_repo/roles/netbase", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "secret", "options": {"role": "secret", "tags": ["role::secret", "role::pki", "role::pki:secret"], "secret_directories": ["{{ pki_env_secret_directories }}"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 5, "play_index": 3, "role_path": "testdata/scm_repo/roles/secret", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "fhs", "options": {"role": "fhs", "tags": ["role::fhs", "skip::fhs"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 6, "play_index": 3, "role_path": "testdata/scm_repo/roles/fhs", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt_preferences", "options": {"role": "apt_preferences", "tags": ["role::apt_preferences", "skip::apt_preferences"], "apt_preferences__dependent_list": ["{{ etckeeper__apt_preferences__dependent_list }}", "{{ apt_install__apt_preferences__dependent_list }}", "{{ yadm__apt_preferences__dependent_list }}"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 7, "play_index": 3, "role_path": "testdata/scm_repo/roles/apt_preferences", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "tzdata", "options": {"role": "tzdata", "tags": ["role::tzdata", "skip::tzdata"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 8, "play_index": 3, "role_path": "testdata/scm_repo/roles/tzdata", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "etckeeper", "options": {"role": "etckeeper", "tags": ["role::etckeeper", "skip::etckeeper"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 9, "play_index": 3, "role_path": "testdata/scm_repo/roles/etckeeper", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "cron", "options": {"role": "cron", "tags": ["role::cron", "skip::cron"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 10, "play_index": 3, "role_path": "testdata/scm_repo/roles/cron", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "atd", "options": {"role": "atd", "tags": ["role::atd", "skip::atd"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 11, "play_index": 3, "role_path": "testdata/scm_repo/roles/atd", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "dhparam", "options": {"role": "dhparam", "tags": ["role::dhparam", "skip::dhparam"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 12, "play_index": 3, "role_path": "testdata/scm_repo/roles/dhparam", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "pki", "options": {"role": "pki", "tags": ["role::pki", "skip::pki"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 13, "play_index": 3, "role_path": "testdata/scm_repo/roles/pki", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "machine", "options": {"role": "machine", "tags": ["role::machine", "skip::machine"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 14, "play_index": 3, "role_path": "testdata/scm_repo/roles/machine", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "lldpd", "options": {"role": "lldpd", "tags": ["role::lldpd", "skip::lldpd"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 15, "play_index": 3, "role_path": "testdata/scm_repo/roles/lldpd", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "ldap", "options": {"role": "ldap", "tags": ["role::ldap", "skip::ldap"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 16, "play_index": 3, "role_path": "testdata/scm_repo/roles/ldap", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "ldap", "options": {"role": "ldap", "tags": ["role::ldap", "skip::ldap"], "ldap__dependent_tasks": ["{{ nullmailer__ldap__dependent_tasks }}", "{{ sudo__ldap__dependent_tasks }}", "{{ sshd__ldap__dependent_tasks }}"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 17, "play_index": 3, "role_path": "testdata/scm_repo/roles/ldap", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "keyring", "options": {"role": "keyring", "tags": ["role::keyring", "skip::keyring", "role::yadm"], "keyring__dependent_gpg_keys": ["{{ yadm__keyring__dependent_gpg_keys }}"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 18, "play_index": 3, "role_path": "testdata/scm_repo/roles/keyring", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "yadm", "options": {"role": "yadm", "tags": ["role::yadm", "skip::yadm"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 19, "play_index": 3, "role_path": "testdata/scm_repo/roles/yadm", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sudo", "options": {"role": "sudo", "tags": ["role::sudo", "skip::sudo"], "sudo__dependent_sudoers": ["{{ sshd__sudo__dependent_sudoers }}"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 20, "play_index": 3, "role_path": "testdata/scm_repo/roles/sudo", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "nsswitch", "options": {"role": "nsswitch", "tags": ["role::nsswitch", "skip::nsswitch"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 21, "play_index": 3, "role_path": "testdata/scm_repo/roles/nsswitch", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "root_account", "options": {"role": "root_account", "tags": ["role::root_account", "skip::root_account"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 22, "play_index": 3, "role_path": "testdata/scm_repo/roles/root_account", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "libuser", "options": {"role": "libuser", "tags": ["role::libuser", "skip::libuser"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 23, "play_index": 3, "role_path": "testdata/scm_repo/roles/libuser", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "system_groups", "options": {"role": "system_groups", "tags": ["role::system_groups", "skip::system_groups"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 24, "play_index": 3, "role_path": "testdata/scm_repo/roles/system_groups", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "system_users", "options": {"role": "system_users", "tags": ["role::system_users", "skip::system_users"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 25, "play_index": 3, "role_path": "testdata/scm_repo/roles/system_users", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "pam_access", "options": {"role": "pam_access", "tags": ["role::pam_access", "skip::pam_access"], "pam_access__dependent_rules": ["{{ sshd__pam_access__dependent_rules }}"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 26, "play_index": 3, "role_path": "testdata/scm_repo/roles/pam_access", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt_listchanges", "options": {"role": "apt_listchanges", "tags": ["role::apt_listchanges", "skip::apt_listchanges"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 27, "play_index": 3, "role_path": "testdata/scm_repo/roles/apt_listchanges", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt_install", "options": {"role": "apt_install", "tags": ["role::apt_install", "skip::apt_install"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 28, "play_index": 3, "role_path": "testdata/scm_repo/roles/apt_install", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "etc_services", "options": {"role": "etc_services", "tags": ["role::etc_services", "skip::etc_services"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 29, "play_index": 3, "role_path": "testdata/scm_repo/roles/etc_services", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "logrotate", "options": {"role": "logrotate", "tags": ["role::logrotate", "skip::logrotate"], "logrotate__dependent_config": ["{{ rsyslog__logrotate__dependent_config }}"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 30, "play_index": 3, "role_path": "testdata/scm_repo/roles/logrotate", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "auth", "options": {"role": "auth", "tags": ["role::auth", "skip::auth"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 31, "play_index": 3, "role_path": "testdata/scm_repo/roles/auth", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "users", "options": {"role": "users", "tags": ["role::users", "skip::users"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 32, "play_index": 3, "role_path": "testdata/scm_repo/roles/users", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "mount", "options": {"role": "mount", "tags": ["role::mount", "skip::mount"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 33, "play_index": 3, "role_path": "testdata/scm_repo/roles/mount", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "resources", "options": {"role": "resources", "tags": ["role::resources", "skip::resources"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 34, "play_index": 3, "role_path": "testdata/scm_repo/roles/resources", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "ferm", "options": {"role": "ferm", "tags": ["role::ferm", "skip::ferm"], "ferm__dependent_rules": ["{{ ntp__ferm__dependent_rules }}", "{{ nullmailer__ferm__dependent_rules }}", "{{ rsyslog__ferm__dependent_rules }}", "{{ sshd__ferm__dependent_rules }}"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 35, "play_index": 3, "role_path": "testdata/scm_repo/roles/ferm", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "tcpwrappers", "options": {"role": "tcpwrappers", "tags": ["role::tcpwrappers", "skip::tcpwrappers"], "tcpwrappers_dependent_allow": ["{{ nullmailer__tcpwrappers__dependent_allow }}", "{{ sshd__tcpwrappers__dependent_allow }}"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 36, "play_index": 3, "role_path": "testdata/scm_repo/roles/tcpwrappers", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "locales", "options": {"role": "locales", "tags": ["role::locales", "skip::locales"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 37, "play_index": 3, "role_path": "testdata/scm_repo/roles/locales", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "ntp", "options": {"role": "ntp", "tags": ["role::ntp", "skip::ntp"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 38, "play_index": 3, "role_path": "testdata/scm_repo/roles/ntp", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "proc_hidepid", "options": {"role": "proc_hidepid", "tags": ["role::proc_hidepid", "skip::proc_hidepid"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 39, "play_index": 3, "role_path": "testdata/scm_repo/roles/proc_hidepid", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "console", "options": {"role": "console", "tags": ["role::console", "skip::console"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 40, "play_index": 3, "role_path": "testdata/scm_repo/roles/console", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sysctl", "options": {"role": "sysctl", "tags": ["role::sysctl", "skip::sysctl"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 41, "play_index": 3, "role_path": "testdata/scm_repo/roles/sysctl", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "nullmailer", "options": {"role": "nullmailer", "tags": ["role::nullmailer", "skip::nullmailer"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 42, "play_index": 3, "role_path": "testdata/scm_repo/roles/nullmailer", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "journald", "options": {"role": "journald", "tags": ["role::journald", "skip::journald"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 43, "play_index": 3, "role_path": "testdata/scm_repo/roles/journald", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "rsyslog", "options": {"role": "rsyslog", "tags": ["role::rsyslog", "skip::rsyslog"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 44, "play_index": 3, "role_path": "testdata/scm_repo/roles/rsyslog", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "unattended_upgrades", "options": {"role": "unattended_upgrades", "tags": ["role::unattended_upgrades", "skip::unattended_upgrades"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 45, "play_index": 3, "role_path": "testdata/scm_repo/roles/unattended_upgrades", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "authorized_keys", "options": {"role": "authorized_keys", "tags": ["role::authorized_keys", "skip::authorized_keys"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 46, "play_index": 3, "role_path": "testdata/scm_repo/roles/authorized_keys", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sshd", "options": {"role": "sshd", "tags": ["role::sshd", "skip::sshd"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 47, "play_index": 3, "role_path": "testdata/scm_repo/roles/sshd", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt_mark", "options": {"role": "apt_mark", "tags": ["role::apt_mark", "skip::apt_mark"]}, "defined_in": "testdata/scm_repo/playbooks/common.yml", "role_index": 48, "play_index": 3, "role_path": "testdata/scm_repo/roles/apt_mark", "annotations": {}}], "import_playbooks": ["testdata/scm_repo/playbooks/service/core.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "site.yml", "defined_in": "testdata/scm_repo/playbooks/site.yml", "tasks": [], "roles": [], "import_playbooks": ["testdata/scm_repo/playbooks/net.yml", "testdata/scm_repo/playbooks/sys.yml", "testdata/scm_repo/playbooks/common.yml", "testdata/scm_repo/playbooks/env.yml", "testdata/scm_repo/playbooks/srv.yml", "testdata/scm_repo/playbooks/app.yml", "testdata/scm_repo/playbooks/virt.yml", "testdata/scm_repo/playbooks/hw.yml", "testdata/scm_repo/playbooks/agent.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "upgrade.yml", "defined_in": "testdata/scm_repo/playbooks/upgrade.yml", "tasks": [{"py/object": "struct4.Task", "name": "Upgrade safe packages with refreshed cache", "module": "ansible.builtin.apt", "index": 0, "defined_in": "testdata/scm_repo/playbooks/upgrade.yml", "options": {"name": "Upgrade safe packages with refreshed cache"}, "module_options": {"update_cache": true, "upgrade": "safe"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/playbooks/upgrade.yml"], "annotations": {}}], "roles": [], "import_playbooks": [], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "hw.yml", "defined_in": "testdata/scm_repo/playbooks/hw.yml", "tasks": [], "roles": [], "import_playbooks": ["testdata/scm_repo/playbooks/hw/all.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "net.yml", "defined_in": "testdata/scm_repo/playbooks/net.yml", "tasks": [], "roles": [], "import_playbooks": ["testdata/scm_repo/playbooks/net/all.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "bootstrap-sss.yml", "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "tasks": [{"py/object": "struct4.Task", "name": "Initialize Ansible support via raw tasks", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "options": {"name": "Initialize Ansible support via raw tasks", "tags": ["role::python_raw", "skip::python_raw", "role::python"]}, "module_options": {"name": "python", "tasks_from": "main_raw"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/bootstrap-sss.yml"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare pki environment", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "options": {"name": "Prepare pki environment", "tags": ["role::pki", "role::pki:secret", "role::secret"]}, "module_options": {"name": "pki", "tasks_from": "main_env"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/bootstrap-sss.yml"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare sshd environment", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "options": {"name": "Prepare sshd environment", "tags": ["role::sshd", "role::ldap"]}, "module_options": {"name": "sshd", "tasks_from": "main_env"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/bootstrap-sss.yml"], "annotations": {}}], "roles": [{"py/object": "struct4.RoleInPlay", "name": "apt_proxy", "options": {"role": "apt_proxy", "tags": ["role::apt_proxy", "skip::apt_proxy"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 0, "play_index": 1, "role_path": "testdata/scm_repo/roles/apt_proxy", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt", "options": {"role": "apt", "tags": ["role::apt", "skip::apt"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 1, "play_index": 1, "role_path": "testdata/scm_repo/roles/apt", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "resolvconf", "options": {"role": "resolvconf", "tags": ["role::resolvconf", "skip::resolvconf"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 0, "play_index": 3, "role_path": "testdata/scm_repo/roles/resolvconf", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "python", "options": {"role": "python", "tags": ["role::python", "skip::python", "role::netbase", "role::ldap"], "python__dependent_packages3": ["{{ netbase__python__dependent_packages3 }}", "{{ ldap__python__dependent_packages3 }}"], "python__dependent_packages2": ["{{ netbase__python__dependent_packages2 }}", "{{ ldap__python__dependent_packages2 }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 1, "play_index": 3, "role_path": "testdata/scm_repo/roles/python", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "netbase", "options": {"role": "netbase", "tags": ["role::netbase", "skip::netbase"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 2, "play_index": 3, "role_path": "testdata/scm_repo/roles/netbase", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "secret", "options": {"role": "secret", "tags": ["role::secret", "role::pki", "role::pki:secret"], "secret_directories": ["{{ pki_env_secret_directories }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 3, "play_index": 3, "role_path": "testdata/scm_repo/roles/secret", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "fhs", "options": {"role": "fhs", "tags": ["role::fhs", "skip::fhs"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 4, "play_index": 3, "role_path": "testdata/scm_repo/roles/fhs", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt_preferences", "options": {"role": "apt_preferences", "tags": ["role::apt_preferences", "skip::apt_preferences"], "apt_preferences__dependent_list": ["{{ etckeeper__apt_preferences__dependent_list }}", "{{ yadm__apt_preferences__dependent_list }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 5, "play_index": 3, "role_path": "testdata/scm_repo/roles/apt_preferences", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "etckeeper", "options": {"role": "etckeeper", "tags": ["role::etckeeper", "skip::etckeeper"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 6, "play_index": 3, "role_path": "testdata/scm_repo/roles/etckeeper", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "cron", "options": {"role": "cron", "tags": ["role::cron", "skip::cron"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 7, "play_index": 3, "role_path": "testdata/scm_repo/roles/cron", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "atd", "options": {"role": "atd", "tags": ["role::atd", "skip::atd"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 8, "play_index": 3, "role_path": "testdata/scm_repo/roles/atd", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "dhparam", "options": {"role": "dhparam", "tags": ["role::dhparam", "skip::dhparam"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 9, "play_index": 3, "role_path": "testdata/scm_repo/roles/dhparam", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "pki", "options": {"role": "pki", "tags": ["role::pki", "skip::pki"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 10, "play_index": 3, "role_path": "testdata/scm_repo/roles/pki", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "machine", "options": {"role": "machine", "tags": ["role::machine", "skip::machine"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 11, "play_index": 3, "role_path": "testdata/scm_repo/roles/machine", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "ldap", "options": {"role": "ldap", "tags": ["role::ldap", "skip::ldap"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 12, "play_index": 3, "role_path": "testdata/scm_repo/roles/ldap", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "ldap", "options": {"role": "ldap", "tags": ["role::ldap", "skip::ldap"], "ldap__dependent_tasks": ["{{ sudo__ldap__dependent_tasks }}", "{{ sshd__ldap__dependent_tasks }}", "{{ sssd__ldap__dependent_tasks }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 13, "play_index": 3, "role_path": "testdata/scm_repo/roles/ldap", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sssd", "options": {"role": "sssd", "tags": ["role::sssd", "skip::sssd"], "when": "ansible_local.ldap.posix_enabled|d()|bool"}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 14, "play_index": 3, "role_path": "testdata/scm_repo/roles/sssd", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "keyring", "options": {"role": "keyring", "tags": ["role::keyring", "skip::keyring", "role::yadm"], "keyring__dependent_gpg_keys": ["{{ yadm__keyring__dependent_gpg_keys }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 15, "play_index": 3, "role_path": "testdata/scm_repo/roles/keyring", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "yadm", "options": {"role": "yadm", "tags": ["role::yadm", "skip::yadm"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 16, "play_index": 3, "role_path": "testdata/scm_repo/roles/yadm", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sudo", "options": {"role": "sudo", "tags": ["role::sudo", "skip::sudo", "role::system_groups"], "sudo__dependent_sudoers": ["{{ sshd__sudo__dependent_sudoers }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 17, "play_index": 3, "role_path": "testdata/scm_repo/roles/sudo", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "nsswitch", "options": {"role": "nsswitch", "tags": ["role::nsswitch", "skip::nsswitch"], "nsswitch__dependent_services": ["{{ sssd__nsswitch__dependent_services }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 18, "play_index": 3, "role_path": "testdata/scm_repo/roles/nsswitch", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "libuser", "options": {"role": "libuser", "tags": ["role::libuser", "skip::libuser"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 19, "play_index": 3, "role_path": "testdata/scm_repo/roles/libuser", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "system_groups", "options": {"role": "system_groups", "tags": ["role::system_groups", "skip::system_groups"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 20, "play_index": 3, "role_path": "testdata/scm_repo/roles/system_groups", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "system_users", "options": {"role": "system_users", "tags": ["role::system_users", "skip::system_users"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 21, "play_index": 3, "role_path": "testdata/scm_repo/roles/system_users", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "pam_access", "options": {"role": "pam_access", "tags": ["role::pam_access", "skip::pam_access"], "pam_access__dependent_rules": ["{{ sshd__pam_access__dependent_rules }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 22, "play_index": 3, "role_path": "testdata/scm_repo/roles/pam_access", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sshd", "options": {"role": "sshd", "tags": ["role::sshd", "skip::sshd"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-sss.yml", "role_index": 23, "play_index": 3, "role_path": "testdata/scm_repo/roles/sshd", "annotations": {}}], "import_playbooks": ["testdata/scm_repo/playbooks/service/core.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "env.yml", "defined_in": "testdata/scm_repo/playbooks/env.yml", "tasks": [], "roles": [], "import_playbooks": ["testdata/scm_repo/playbooks/env/all.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "srv.yml", "defined_in": "testdata/scm_repo/playbooks/srv.yml", "tasks": [], "roles": [], "import_playbooks": ["testdata/scm_repo/playbooks/srv/all.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "bootstrap.yml", "defined_in": "testdata/scm_repo/playbooks/bootstrap.yml", "tasks": [{"py/object": "struct4.Task", "name": "Initialize Ansible support via raw tasks", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/playbooks/bootstrap.yml", "options": {"name": "Initialize Ansible support via raw tasks", "tags": ["role::python_raw", "skip::python_raw", "role::python"]}, "module_options": {"name": "python", "tasks_from": "main_raw"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/bootstrap.yml"], "annotations": {}}], "roles": [{"py/object": "struct4.RoleInPlay", "name": "apt_proxy", "options": {"role": "apt_proxy", "tags": ["role::apt_proxy", "skip::apt_proxy"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap.yml", "role_index": 0, "play_index": 1, "role_path": "testdata/scm_repo/roles/apt_proxy", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt", "options": {"role": "apt", "tags": ["role::apt", "skip::apt"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap.yml", "role_index": 1, "play_index": 1, "role_path": "testdata/scm_repo/roles/apt", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "resolvconf", "options": {"role": "resolvconf", "tags": ["role::resolvconf", "skip::resolvconf"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap.yml", "role_index": 0, "play_index": 3, "role_path": "testdata/scm_repo/roles/resolvconf", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "python", "options": {"role": "python", "tags": ["role::python", "skip::python", "role::netbase"], "python__dependent_packages3": ["{{ netbase__python__dependent_packages3 }}"], "python__dependent_packages2": ["{{ netbase__python__dependent_packages2 }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap.yml", "role_index": 1, "play_index": 3, "role_path": "testdata/scm_repo/roles/python", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "netbase", "options": {"role": "netbase", "tags": ["role::netbase", "skip::netbase"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap.yml", "role_index": 2, "play_index": 3, "role_path": "testdata/scm_repo/roles/netbase", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "fhs", "options": {"role": "fhs", "tags": ["role::fhs", "skip::fhs"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap.yml", "role_index": 3, "play_index": 3, "role_path": "testdata/scm_repo/roles/fhs", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sudo", "options": {"role": "sudo", "tags": ["role::sudo", "skip::sudo", "role::system_groups"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap.yml", "role_index": 4, "play_index": 3, "role_path": "testdata/scm_repo/roles/sudo", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "libuser", "options": {"role": "libuser", "tags": ["role::libuser", "skip::libuser"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap.yml", "role_index": 5, "play_index": 3, "role_path": "testdata/scm_repo/roles/libuser", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "system_groups", "options": {"role": "system_groups", "tags": ["role::system_groups", "skip::system_groups"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap.yml", "role_index": 6, "play_index": 3, "role_path": "testdata/scm_repo/roles/system_groups", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "system_users", "options": {"role": "system_users", "tags": ["role::system_users", "skip::system_users"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap.yml", "role_index": 7, "play_index": 3, "role_path": "testdata/scm_repo/roles/system_users", "annotations": {}}], "import_playbooks": ["testdata/scm_repo/playbooks/service/core.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "virt.yml", "defined_in": "testdata/scm_repo/playbooks/virt.yml", "tasks": [], "roles": [], "import_playbooks": ["testdata/scm_repo/playbooks/virt/all.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "bootstrap-ldap.yml", "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "tasks": [{"py/object": "struct4.Task", "name": "Initialize Ansible support via raw tasks", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "options": {"name": "Initialize Ansible support via raw tasks", "tags": ["role::python_raw", "skip::python_raw", "role::python"]}, "module_options": {"name": "python", "tasks_from": "main_raw"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare pki environment", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "options": {"name": "Prepare pki environment", "tags": ["role::pki", "role::pki:secret", "role::secret"]}, "module_options": {"name": "pki", "tasks_from": "main_env"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare sshd environment", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "options": {"name": "Prepare sshd environment", "tags": ["role::sshd", "role::ldap"]}, "module_options": {"name": "sshd", "tasks_from": "main_env"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml"], "annotations": {}}], "roles": [{"py/object": "struct4.RoleInPlay", "name": "apt_proxy", "options": {"role": "apt_proxy", "tags": ["role::apt_proxy", "skip::apt_proxy"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 0, "play_index": 1, "role_path": "testdata/scm_repo/roles/apt_proxy", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt", "options": {"role": "apt", "tags": ["role::apt", "skip::apt"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 1, "play_index": 1, "role_path": "testdata/scm_repo/roles/apt", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "resolvconf", "options": {"role": "resolvconf", "tags": ["role::resolvconf", "skip::resolvconf"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 0, "play_index": 3, "role_path": "testdata/scm_repo/roles/resolvconf", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "python", "options": {"role": "python", "tags": ["role::python", "skip::python", "role::netbase", "role::ldap"], "python__dependent_packages3": ["{{ netbase__python__dependent_packages3 }}", "{{ ldap__python__dependent_packages3 }}"], "python__dependent_packages2": ["{{ netbase__python__dependent_packages2 }}", "{{ ldap__python__dependent_packages2 }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 1, "play_index": 3, "role_path": "testdata/scm_repo/roles/python", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "netbase", "options": {"role": "netbase", "tags": ["role::netbase", "skip::netbase"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 2, "play_index": 3, "role_path": "testdata/scm_repo/roles/netbase", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "secret", "options": {"role": "secret", "tags": ["role::secret", "role::pki", "role::pki:secret"], "secret_directories": ["{{ pki_env_secret_directories }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 3, "play_index": 3, "role_path": "testdata/scm_repo/roles/secret", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "fhs", "options": {"role": "fhs", "tags": ["role::fhs", "skip::fhs"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 4, "play_index": 3, "role_path": "testdata/scm_repo/roles/fhs", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt_preferences", "options": {"role": "apt_preferences", "tags": ["role::apt_preferences", "skip::apt_preferences"], "apt_preferences__dependent_list": ["{{ etckeeper__apt_preferences__dependent_list }}", "{{ yadm__apt_preferences__dependent_list }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 5, "play_index": 3, "role_path": "testdata/scm_repo/roles/apt_preferences", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "etckeeper", "options": {"role": "etckeeper", "tags": ["role::etckeeper", "skip::etckeeper"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 6, "play_index": 3, "role_path": "testdata/scm_repo/roles/etckeeper", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "cron", "options": {"role": "cron", "tags": ["role::cron", "skip::cron"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 7, "play_index": 3, "role_path": "testdata/scm_repo/roles/cron", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "atd", "options": {"role": "atd", "tags": ["role::atd", "skip::atd"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 8, "play_index": 3, "role_path": "testdata/scm_repo/roles/atd", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "dhparam", "options": {"role": "dhparam", "tags": ["role::dhparam", "skip::dhparam"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 9, "play_index": 3, "role_path": "testdata/scm_repo/roles/dhparam", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "pki", "options": {"role": "pki", "tags": ["role::pki", "skip::pki"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 10, "play_index": 3, "role_path": "testdata/scm_repo/roles/pki", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "machine", "options": {"role": "machine", "tags": ["role::machine", "skip::machine"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 11, "play_index": 3, "role_path": "testdata/scm_repo/roles/machine", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "ldap", "options": {"role": "ldap", "tags": ["role::ldap", "skip::ldap"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 12, "play_index": 3, "role_path": "testdata/scm_repo/roles/ldap", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "ldap", "options": {"role": "ldap", "tags": ["role::ldap", "skip::ldap"], "ldap__dependent_tasks": ["{{ nslcd__ldap__dependent_tasks }}", "{{ sudo__ldap__dependent_tasks }}", "{{ sshd__ldap__dependent_tasks }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 13, "play_index": 3, "role_path": "testdata/scm_repo/roles/ldap", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "nslcd", "options": {"role": "nslcd", "tags": ["role::nslcd", "skip::nslcd"], "when": "(ansible_local.ldap.posix_enabled|d())|bool"}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 14, "play_index": 3, "role_path": "testdata/scm_repo/roles/nslcd", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "nscd", "options": {"role": "nscd", "tags": ["role::nscd", "skip::nscd"], "when": "(ansible_local.ldap.posix_enabled|d())|bool"}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 15, "play_index": 3, "role_path": "testdata/scm_repo/roles/nscd", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "keyring", "options": {"role": "keyring", "tags": ["role::keyring", "skip::keyring", "role::yadm"], "keyring__dependent_gpg_keys": ["{{ yadm__keyring__dependent_gpg_keys }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 16, "play_index": 3, "role_path": "testdata/scm_repo/roles/keyring", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "yadm", "options": {"role": "yadm", "tags": ["role::yadm", "skip::yadm"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 17, "play_index": 3, "role_path": "testdata/scm_repo/roles/yadm", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sudo", "options": {"role": "sudo", "tags": ["role::sudo", "skip::sudo", "role::system_groups"], "sudo__dependent_sudoers": ["{{ sshd__sudo__dependent_sudoers }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 18, "play_index": 3, "role_path": "testdata/scm_repo/roles/sudo", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "nsswitch", "options": {"role": "nsswitch", "tags": ["role::nsswitch", "skip::nsswitch"], "nsswitch__dependent_services": ["{{ nslcd__nsswitch__dependent_services }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 19, "play_index": 3, "role_path": "testdata/scm_repo/roles/nsswitch", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "libuser", "options": {"role": "libuser", "tags": ["role::libuser", "skip::libuser"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 20, "play_index": 3, "role_path": "testdata/scm_repo/roles/libuser", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "system_groups", "options": {"role": "system_groups", "tags": ["role::system_groups", "skip::system_groups"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 21, "play_index": 3, "role_path": "testdata/scm_repo/roles/system_groups", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "system_users", "options": {"role": "system_users", "tags": ["role::system_users", "skip::system_users"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 22, "play_index": 3, "role_path": "testdata/scm_repo/roles/system_users", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "pam_access", "options": {"role": "pam_access", "tags": ["role::pam_access", "skip::pam_access"], "pam_access__dependent_rules": ["{{ sshd__pam_access__dependent_rules }}"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 23, "play_index": 3, "role_path": "testdata/scm_repo/roles/pam_access", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sshd", "options": {"role": "sshd", "tags": ["role::sshd", "skip::sshd"]}, "defined_in": "testdata/scm_repo/playbooks/bootstrap-ldap.yml", "role_index": 24, "play_index": 3, "role_path": "testdata/scm_repo/roles/sshd", "annotations": {}}], "import_playbooks": ["testdata/scm_repo/playbooks/service/core.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "sys.yml", "defined_in": "testdata/scm_repo/playbooks/sys.yml", "tasks": [], "roles": [], "import_playbooks": ["testdata/scm_repo/playbooks/sys/all.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "agent.yml", "defined_in": "testdata/scm_repo/playbooks/agent.yml", "tasks": [], "roles": [], "import_playbooks": ["testdata/scm_repo/playbooks/agent/all.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "app.yml", "defined_in": "testdata/scm_repo/playbooks/app.yml", "tasks": [], "roles": [], "import_playbooks": ["testdata/scm_repo/playbooks/app/all.yml"], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "reboot.yml", "defined_in": "testdata/scm_repo/playbooks/reboot.yml", "tasks": [], "roles": [{"py/object": "struct4.RoleInPlay", "name": "reboot", "options": {"role": "reboot", "tags": ["role::reboot", "skip::reboot"]}, "defined_in": "testdata/scm_repo/playbooks/reboot.yml", "role_index": 0, "play_index": 0, "role_path": "testdata/scm_repo/roles/reboot", "annotations": {}}], "import_playbooks": [], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "php.yml", "defined_in": "testdata/scm_repo/playbooks/service/php.yml", "tasks": [{"py/object": "struct4.Task", "name": "Apply keyring configuration for php environment", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/playbooks/service/php.yml", "options": {"name": "Apply keyring configuration for php environment", "vars": {"keyring__dependent_apt_keys": ["{{ php__keyring__dependent_apt_keys }}"]}, "tags": ["role::keyring", "skip::keyring", "role::php"]}, "module_options": {"name": "keyring"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/service/php.yml"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare php environment", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/playbooks/service/php.yml", "options": {"name": "Prepare php environment", "tags": ["role::php", "role::php:env", "role::logrotate"]}, "module_options": {"name": "php", "tasks_from": "main_env"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/service/php.yml"], "annotations": {}}], "roles": [{"py/object": "struct4.RoleInPlay", "name": "apt_preferences", "options": {"role": "apt_preferences", "tags": ["role::apt_preferences", "skip::apt_preferences"], "apt_preferences__dependent_list": ["{{ php__apt_preferences__dependent_list }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/php.yml", "role_index": 0, "play_index": 0, "role_path": "testdata/scm_repo/roles/apt_preferences", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "cron", "options": {"role": "cron", "tags": ["role::cron", "skip::cron"]}, "defined_in": "testdata/scm_repo/playbooks/service/php.yml", "role_index": 1, "play_index": 0, "role_path": "testdata/scm_repo/roles/cron", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "logrotate", "options": {"role": "logrotate", "tags": ["role::logrotate", "skip::logrotate"], "logrotate__dependent_config": ["{{ php__logrotate__dependent_config }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/php.yml", "role_index": 2, "play_index": 0, "role_path": "testdata/scm_repo/roles/logrotate", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "php", "options": {"role": "php", "tags": ["role::php", "skip::php"]}, "defined_in": "testdata/scm_repo/playbooks/service/php.yml", "role_index": 3, "play_index": 0, "role_path": "testdata/scm_repo/roles/php", "annotations": {}}], "import_playbooks": [], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "minio.yml", "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "tasks": [{"py/object": "struct4.Task", "name": "Prepare minio environment", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "options": {"name": "Prepare minio environment", "tags": ["role::minio", "role::etc_services", "role::ferm", "role::keyring", "role::golang", "role::nginx"]}, "module_options": {"name": "minio", "tasks_from": "main_env"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/service/minio.yml"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare sysfs environment", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "options": {"name": "Prepare sysfs environment", "tags": ["role::sysfs", "role::secret"]}, "module_options": {"name": "sysfs", "tasks_from": "main_env"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/service/minio.yml"], "annotations": {}}], "roles": [{"py/object": "struct4.RoleInPlay", "name": "keyring", "options": {"role": "keyring", "tags": ["role::keyring", "skip::keyring", "role::golang"], "keyring__dependent_gpg_user": "{{ golang__keyring__dependent_gpg_user }}", "keyring__dependent_gpg_keys": ["{{ nginx__keyring__dependent_apt_keys }}", "{{ golang__keyring__dependent_gpg_keys }}"], "golang__dependent_packages": ["{{ minio__golang__dependent_packages }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "role_index": 0, "play_index": 0, "role_path": "testdata/scm_repo/roles/keyring", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "secret", "options": {"role": "secret", "tags": ["role::secret", "role::sysfs"], "secret__directories": ["{{ sysfs__secret__directories | d([]) }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "role_index": 1, "play_index": 0, "role_path": "testdata/scm_repo/roles/secret", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt_preferences", "options": {"role": "apt_preferences", "tags": ["role::apt_preferences", "skip::apt_preferences"], "apt_preferences__dependent_list": ["{{ golang__apt_preferences__dependent_list }}", "{{ nginx__apt_preferences__dependent_list }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "role_index": 2, "play_index": 0, "role_path": "testdata/scm_repo/roles/apt_preferences", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "etc_services", "options": {"role": "etc_services", "tags": ["role::etc_services", "skip::etc_services"], "etc_services__dependent_list": ["{{ minio__etc_services__dependent_list }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "role_index": 3, "play_index": 0, "role_path": "testdata/scm_repo/roles/etc_services", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "ferm", "options": {"role": "ferm", "tags": ["role::ferm", "skip::ferm"], "ferm__dependent_rules": ["{{ minio__ferm__dependent_rules }}", "{{ nginx__ferm__dependent_rules }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "role_index": 4, "play_index": 0, "role_path": "testdata/scm_repo/roles/ferm", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sysctl", "options": {"role": "sysctl", "tags": ["role::sysctl", "skip::sysctl"], "sysctl__dependent_parameters": ["{{ minio__sysctl__dependent_parameters }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "role_index": 5, "play_index": 0, "role_path": "testdata/scm_repo/roles/sysctl", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sysfs", "options": {"role": "sysfs", "tags": ["role::sysfs", "skip::sysfs"], "sysfs__dependent_attributes": ["{{ minio__sysfs__dependent_attributes }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "role_index": 6, "play_index": 0, "role_path": "testdata/scm_repo/roles/sysfs", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "python", "options": {"role": "python", "tags": ["role::python", "skip::python"], "python__dependent_packages3": ["{{ nginx__python__dependent_packages3 }}"], "python__dependent_packages2": ["{{ nginx__python__dependent_packages2 }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "role_index": 7, "play_index": 0, "role_path": "testdata/scm_repo/roles/python", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "nginx", "options": {"role": "nginx", "tags": ["role::nginx", "skip::nginx"], "nginx__dependent_upstreams": ["{{ minio__nginx__dependent_upstreams }}"], "nginx__dependent_servers": ["{{ minio__nginx__dependent_servers }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "role_index": 8, "play_index": 0, "role_path": "testdata/scm_repo/roles/nginx", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "golang", "options": {"role": "golang", "tags": ["role::golang", "skip::golang"], "golang__dependent_packages": ["{{ minio__golang__dependent_packages }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "role_index": 9, "play_index": 0, "role_path": "testdata/scm_repo/roles/golang", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "minio", "options": {"role": "minio", "tags": ["role::minio", "skip::minio"]}, "defined_in": "testdata/scm_repo/playbooks/service/minio.yml", "role_index": 10, "play_index": 0, "role_path": "testdata/scm_repo/roles/minio", "annotations": {}}], "import_playbooks": [], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "nodejs.yml", "defined_in": "testdata/scm_repo/playbooks/service/nodejs.yml", "tasks": [], "roles": [{"py/object": "struct4.RoleInPlay", "name": "keyring", "options": {"role": "keyring", "tags": ["role::keyring", "skip::keyring", "role::nodejs"], "keyring__dependent_apt_keys": ["{{ nodejs__keyring__dependent_apt_keys }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/nodejs.yml", "role_index": 0, "play_index": 0, "role_path": "testdata/scm_repo/roles/keyring", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt_preferences", "options": {"role": "apt_preferences", "tags": ["role::apt_preferences", "skip::apt_preferences"], "apt_preferences__dependent_list": ["{{ nodejs__apt_preferences__dependent_list }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/nodejs.yml", "role_index": 1, "play_index": 0, "role_path": "testdata/scm_repo/roles/apt_preferences", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "nodejs", "options": {"role": "nodejs", "tags": ["role::nodejs", "skip::nodejs"]}, "defined_in": "testdata/scm_repo/playbooks/service/nodejs.yml", "role_index": 2, "play_index": 0, "role_path": "testdata/scm_repo/roles/nodejs", "annotations": {}}], "import_playbooks": [], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "redis_server.yml", "defined_in": "testdata/scm_repo/playbooks/service/redis_server.yml", "tasks": [{"py/object": "struct4.Task", "name": "Prepare sysfs environment", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/playbooks/service/redis_server.yml", "options": {"name": "Prepare sysfs environment", "tags": ["role::sysfs", "role::secret"]}, "module_options": {"name": "sysfs", "tasks_from": "main_env"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/service/redis_server.yml"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare redis_server environment", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/playbooks/service/redis_server.yml", "options": {"name": "Prepare redis_server environment", "tags": ["role::redis_server", "role::ferm"]}, "module_options": {"name": "redis_server", "tasks_from": "main_env"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/playbooks/service/redis_server.yml"], "annotations": {}}], "roles": [{"py/object": "struct4.RoleInPlay", "name": "secret", "options": {"role": "secret", "tags": ["role::secret", "role::sysfs"], "secret__directories": ["{{ sysfs__secret__directories | d([]) }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/redis_server.yml", "role_index": 0, "play_index": 0, "role_path": "testdata/scm_repo/roles/secret", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt_preferences", "options": {"role": "apt_preferences", "tags": ["role::apt_preferences", "skip::apt_preferences"], "apt_preferences__dependent_list": ["{{ redis_server__apt_preferences__dependent_list }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/redis_server.yml", "role_index": 1, "play_index": 0, "role_path": "testdata/scm_repo/roles/apt_preferences", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "etc_services", "options": {"role": "etc_services", "tags": ["role::etc_services", "skip::etc_services"], "etc_services__dependent_list": ["{{ redis_server__etc_services__dependent_list }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/redis_server.yml", "role_index": 2, "play_index": 0, "role_path": "testdata/scm_repo/roles/etc_services", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "ferm", "options": {"role": "ferm", "tags": ["role::ferm", "skip::ferm"], "ferm__dependent_rules": ["{{ redis_server__ferm__dependent_rules }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/redis_server.yml", "role_index": 3, "play_index": 0, "role_path": "testdata/scm_repo/roles/ferm", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sysctl", "options": {"role": "sysctl", "tags": ["role::sysctl", "skip::sysctl"], "sysctl__dependent_parameters": ["{{ redis_server__sysctl__dependent_parameters }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/redis_server.yml", "role_index": 4, "play_index": 0, "role_path": "testdata/scm_repo/roles/sysctl", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "sysfs", "options": {"role": "sysfs", "tags": ["role::sysfs", "skip::sysfs"], "sysfs__dependent_attributes": ["{{ redis_server__sysfs__dependent_attributes }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/redis_server.yml", "role_index": 5, "play_index": 0, "role_path": "testdata/scm_repo/roles/sysfs", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "python", "options": {"role": "python", "tags": ["role::python", "skip::python", "role::redis_server"], "python__dependent_packages3": ["{{ redis_server__python__dependent_packages3 }}"], "python__dependent_packages2": ["{{ redis_server__python__dependent_packages2 }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/redis_server.yml", "role_index": 6, "play_index": 0, "role_path": "testdata/scm_repo/roles/python", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "redis_server", "options": {"role": "redis_server", "tags": ["role::redis_server", "skip::redis_server"]}, "defined_in": "testdata/scm_repo/playbooks/service/redis_server.yml", "role_index": 7, "play_index": 0, "role_path": "testdata/scm_repo/roles/redis_server", "annotations": {}}], "import_playbooks": [], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "console.yml", "defined_in": "testdata/scm_repo/playbooks/service/console.yml", "tasks": [], "roles": [{"py/object": "struct4.RoleInPlay", "name": "console", "options": {"role": "console", "tags": ["role::console", "skip::console"]}, "defined_in": "testdata/scm_repo/playbooks/service/console.yml", "role_index": 0, "play_index": 0, "role_path": "testdata/scm_repo/roles/console", "annotations": {}}], "import_playbooks": [], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "ansible.yml", "defined_in": "testdata/scm_repo/playbooks/service/ansible.yml", "tasks": [], "roles": [{"py/object": "struct4.RoleInPlay", "name": "keyring", "options": {"role": "keyring", "tags": ["role::keyring", "skip::keyring", "role::ansible"], "keyring__dependent_apt_keys": ["{{ ansible__keyring__dependent_apt_keys }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/ansible.yml", "role_index": 0, "play_index": 0, "role_path": "testdata/scm_repo/roles/keyring", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "apt_preferences", "options": {"role": "apt_preferences", "tags": ["role::apt_preferences", "skip::apt_preferences"], "apt_preferences__dependent_list": ["{{ ansible__apt_preferences__dependent_list }}"]}, "defined_in": "testdata/scm_repo/playbooks/service/ansible.yml", "role_index": 1, "play_index": 0, "role_path": "testdata/scm_repo/roles/apt_preferences", "annotations": {}}, {"py/object": "struct4.RoleInPlay", "name": "ansible", "options": {"role": "ansible", "tags": ["role::ansible", "skip::ansible"]}, "defined_in": "testdata/scm_repo/playbooks/service/ansible.yml", "role_index": 2, "play_index": 0, "role_path": "testdata/scm_repo/roles/ansible", "annotations": {}}], "import_playbooks": [], "source": "", "used_in": [], "annotations": {}}, {"py/object": "struct4.Playbook", "name": "apt.yml", "defined_in": "testdata/scm_repo/playbooks/service/apt.yml", "tasks": [], "roles": [{"py/object": "struct4.RoleInPlay", "name": "apt", "options": {"role": "apt", "tags": ["role::apt", "skip::apt"]}, "defined_in": "testdata/scm_repo/playbooks/service/apt.yml", "role_index": 0, "play_index": 0, "role_path": "testdata/scm_repo/roles/apt", "annotations": {}}], "import_playbooks": [], "source": "", "used_in": [], "annotations": {}}], "roles": [{"py/object": "struct4.Role", "name": "freeradius", "defined_in": "testdata/scm_repo/roles/freeradius", "task_yamls": ["testdata/scm_repo/roles/freeradius/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install FreeRADIUS packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Install FreeRADIUS packages", "with_flattened": ["{{ freeradius__base_packages }}", "{{ freeradius__packages }}"], "register": "freeradius__register_packages", "until": "freeradius__register_packages is succeeded"}, "module_options": {"name": "{{ item }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable FreeRADIUS service in systemd to start at boot time", "module": "ansible.builtin.systemd", "index": 4, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Enable FreeRADIUS service in systemd to start at boot time", "when": "ansible_service_mgr == 'systemd'"}, "module_options": {"name": "freeradius.service", "enabled": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save FreeRADIUS local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Save FreeRADIUS local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/freeradius.fact.j2", "dest": "/etc/ansible/facts.d/freeradius.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of FreeRADIUS Conffiles", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Get list of FreeRADIUS Conffiles", "register": "freeradius__register_conffiles", "changed_when": false, "check_mode": false}, "module_options": "cat /var/lib/dpkg/info/freeradius-config.conffiles", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of FreeRADIUS configuration files", "module": "vars", "index": 9, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Add/remove diversion of FreeRADIUS configuration files", "dpkg_divert": {"path": "{{ divert_path }}", "divert": "{{ divert_divert }}", "state": "{{ item.state|d(\"present\") }}", "delete": true}, "loop": "{{ freeradius__combined_configuration | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"path\":   divert_path, \"divert\": divert_divert, \"state\":  item.state|d(\"present\")} }}"}, "notify": ["Check freeradius configuration and restart"], "when": "(item.name|d() and item.divert|d(False)|bool and item.state|d('present') in [ 'present', 'absent' ])", "no_log": "{{ debops__no_log | d(item.no_log) | d(False) }}"}, "module_options": {"divert_path": "{{ freeradius__conf_base_path + \"/\" + (item.filename | d(item.name)) }}", "divert_divert": "{{ freeradius__conf_base_path + \"/\" + (item.divert_filename | d((((item.filename | d(item.name))|dirname + \"/.\") if ((item.filename | d(item.name))|dirname) else \".\") + (item.filename | d(item.name))|basename + \".dpkg-divert\")) }}"}, "fqcn": "ansible.builtin.vars", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create missing configuration directories", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Create missing configuration directories", "with_items": "{{ freeradius__combined_configuration | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"path\": ((freeradius__conf_base_path + \"/\" + (item.filename | d(item.name))) | dirname)} }}"}, "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and (item.link_src|d() or item.options|d() or item.raw|d()))", "no_log": "{{ debops__no_log | d(item.no_log) | d(False) }}"}, "module_options": {"path": "{{ (freeradius__conf_base_path + \"/\" + (item.filename | d(item.name))) | dirname }}", "state": "directory", "owner": "{{ freeradius__user }}", "group": "{{ freeradius__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate FreeRADIUS configuration files", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Generate FreeRADIUS configuration files", "with_items": "{{ freeradius__combined_configuration | debops.debops.parse_kv_items }}", "notify": ["Check freeradius configuration and restart"], "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and not item.link_src|d() and (item.options|d() or item.raw|d()))", "no_log": "{{ debops__no_log | d(item.no_log) | d(False) }}"}, "module_options": {"src": "etc/freeradius/template.conf.j2", "dest": "{{ freeradius__conf_base_path + \"/\" + (item.filename | d(item.name)) }}", "owner": "{{ item.owner | d(freeradius__user) }}", "group": "{{ item.group | d(freeradius__group) }}", "mode": "{{ item.mode  | d(\"0640\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create configuration file symlinks", "module": "ansible.builtin.file", "index": 12, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Create configuration file symlinks", "with_items": "{{ freeradius__combined_configuration | debops.debops.parse_kv_items }}", "notify": ["Check freeradius configuration and restart"], "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and item.link_src|d())", "no_log": "{{ debops__no_log | d(item.no_log) | d(False) }}"}, "module_options": {"dest": "{{ freeradius__conf_base_path + \"/\" + (item.filename | d(item.name)) }}", "src": "{{ item.link_src }}", "state": "link", "owner": "{{ item.owner | d(freeradius__user) }}", "group": "{{ item.group | d(freeradius__group) }}", "mode": "{{ item.mode  | d(\"0640\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove FreeRADIUS configuration files", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/freeradius/tasks/main.yml", "options": {"name": "Remove FreeRADIUS configuration files", "with_items": "{{ freeradius__combined_configuration | debops.debops.parse_kv_items }}", "notify": ["Check freeradius configuration and restart"], "when": "(item.name|d() and not item.divert|d(False)|bool and item.state|d('present') == 'absent')", "no_log": "{{ debops__no_log | d(item.no_log) | d(False) }}"}, "module_options": {"dest": "{{ freeradius__conf_base_path + \"/\" + (item.filename | d(item.name)) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/freeradius"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "mosquitto", "defined_in": "testdata/scm_repo/roles/mosquitto", "task_yamls": ["testdata/scm_repo/roles/mosquitto/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if supported version of libwebsockets is available", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Check if supported version of libwebsockets is available", "register": "mosquitto__register_websockets", "when": "ansible_pkg_mgr == 'apt'", "changed_when": false, "check_mode": false}, "module_options": "apt-cache -q madison {{ mosquitto__websockets_packages | join(' ') }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Install required packages", "register": "mosquitto__register_packages", "until": "mosquitto__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (mosquitto__base_packages + mosquitto__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required Python modules", "module": "ansible.builtin.pip", "index": 4, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Install required Python modules", "with_items": "{{ mosquitto__pip_packages }}", "register": "mosquitto__register_pip_install", "until": "mosquitto__register_pip_install is succeeded", "when": "mosquitto__pip_packages|d()"}, "module_options": {"name": "{{ item }}", "state": "present"}, "fqcn": "ansible.builtin.pip", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check the installed Mosquitto version", "module": "ansible.builtin.shell", "index": 5, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Check the installed Mosquitto version", "args": {"executable": "bash"}, "register": "mosquitto__register_version", "changed_when": false, "check_mode": false, "tags": ["role::mosquitto:passwd"]}, "module_options": "set -o nounset -o pipefail -o errexit && mosquitto -h | head -n 1 | awk '{print $3}' || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the required UNIX group exists", "module": "ansible.builtin.group", "index": 6, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Ensure that the required UNIX group exists"}, "module_options": {"name": "{{ mosquitto__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add Mosquitto user to specified system groups", "module": "ansible.builtin.user", "index": 7, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Add Mosquitto user to specified system groups", "notify": ["Restart mosquitto"]}, "module_options": {"name": "{{ mosquitto__user }}", "group": "{{ mosquitto__group }}", "groups": "{{ ([ mosquitto__append_groups ] if mosquitto__append_groups is string else mosquitto__append_groups) | join(\",\") }}", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure the password file exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Make sure the password file exists", "when": "mosquitto__password|bool", "tags": ["role::mosquitto:passwd"]}, "module_options": {"path": "{{ mosquitto__password_file }}", "state": "{{ \"file\" if (ansible_local.mosquitto.password|d()|bool) else \"touch\" }}", "owner": "root", "group": "{{ mosquitto__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check current list of user entries", "module": "ansible.builtin.command", "index": 9, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Check current list of user entries", "register": "mosquitto__register_passwd", "when": "mosquitto__password|bool", "changed_when": false, "check_mode": false, "tags": ["role::mosquitto:passwd"]}, "module_options": "awk -F ':' '{print $1}' {{ mosquitto__password_file }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove user/password entries", "module": "ansible.builtin.command", "index": 10, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Remove user/password entries", "with_flattened": ["{{ mosquitto__auth_users }}", "{{ mosquitto__auth_group_users }}", "{{ mosquitto__auth_host_users }}"], "when": "(mosquitto__password|bool and item.state|d('present') == 'absent' and (item.name | d(item) in mosquitto__register_passwd.stdout_lines) and mosquitto__version is version_compare('1.4.0', '>='))", "notify": ["Reload mosquitto"], "tags": ["role::mosquitto:passwd"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "mosquitto_passwd -D {{ mosquitto__password_file }} {{ item.name | d(item) }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create user/password entries", "module": "ansible.builtin.command", "index": 11, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Create user/password entries", "environment": {"MOSQUITTO_PASSWORD": "{{ item.password | d(lookup(\"password\", mosquitto__password_secret_path + \"/\" + item.name | d(item))) }}"}, "with_flattened": ["{{ mosquitto__auth_users }}", "{{ mosquitto__auth_group_users }}", "{{ mosquitto__auth_host_users }}"], "when": "(mosquitto__password|bool and item.state|d('present') != 'absent' and (item.name | d(item) not in mosquitto__register_passwd.stdout_lines) and mosquitto__version is version_compare('1.4.0', '>='))", "notify": ["Reload mosquitto"], "tags": ["role::mosquitto:passwd"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "mosquitto_passwd -b {{ mosquitto__password_file }} {{ item.name | d(item) }} ${MOSQUITTO_PASSWORD}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage Mosquitto ACL file", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Manage Mosquitto ACL file", "when": "mosquitto__acl|bool", "notify": ["Reload mosquitto"], "tags": ["role::mosquitto:acl"]}, "module_options": {"src": "etc/mosquitto/acl.j2", "dest": "{{ mosquitto__acl_file }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Mosquitto default configuration if empty", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Remove Mosquitto default configuration if empty", "when": "not mosquitto__combined_options|d()", "notify": ["Restart mosquitto"], "tags": ["role::mosquitto:config", "role::mosquitto:passwd", "role::mosquitto:acl"]}, "module_options": {"path": "/etc/mosquitto/conf.d/00_default.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Mosquitto default configuration", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Generate Mosquitto default configuration", "notify": ["Restart mosquitto"], "tags": ["role::mosquitto:config", "role::mosquitto:passwd", "role::mosquitto:acl"]}, "module_options": {"src": "etc/mosquitto/conf.d/default.conf.j2", "dest": "/etc/mosquitto/conf.d/00_default.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Mosquitto listener configuration", "module": "ansible.builtin.file", "index": 15, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Remove Mosquitto listener configuration", "with_dict": "{{ mosquitto__combined_listeners }}", "notify": ["Restart mosquitto"], "when": "item.value.state|d('present') == 'absent'", "tags": ["role::mosquitto:listeners"]}, "module_options": {"dest": "/etc/mosquitto/conf.d/listener_{{ item.key }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Mosquitto listener configuration", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Generate Mosquitto listener configuration", "with_dict": "{{ mosquitto__combined_listeners }}", "notify": ["Restart mosquitto"], "when": "item.value.state|d('present') != 'absent'", "tags": ["role::mosquitto:listeners"]}, "module_options": {"src": "etc/mosquitto/conf.d/listener.conf.j2", "dest": "/etc/mosquitto/conf.d/listener_{{ item.key }}.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Mosquitto bridge configuration", "module": "ansible.builtin.file", "index": 17, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Remove Mosquitto bridge configuration", "with_dict": "{{ mosquitto__combined_bridges }}", "notify": ["Restart mosquitto"], "when": "item.value.state|d('present') == 'absent'", "tags": ["role::mosquitto:bridges"]}, "module_options": {"dest": "/etc/mosquitto/conf.d/bridge_{{ item.value.connection | d(item.key) }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Mosquitto bridge configuration", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Generate Mosquitto bridge configuration", "with_dict": "{{ mosquitto__combined_bridges }}", "notify": ["Restart mosquitto"], "when": "item.value.state|d('present') != 'absent'", "tags": ["role::mosquitto:bridges"]}, "module_options": {"src": "etc/mosquitto/conf.d/bridge.conf.j2", "dest": "/etc/mosquitto/conf.d/bridge_{{ item.value.connection | d(item.key) }}.conf", "owner": "root", "group": "{{ item.value.group | d(\"root\") }}", "mode": "{{ item.value.mode | d(\"0644\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Avahi service directory exists", "module": "ansible.builtin.file", "index": 19, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Make sure that Avahi service directory exists", "when": "mosquitto__avahi|bool", "tags": ["role::mosquitto:avahi", "role::mosquitto:listeners"]}, "module_options": {"path": "/etc/avahi/services", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Avahi Mosquitto service file", "module": "ansible.builtin.template", "index": 20, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Generate Avahi Mosquitto service file", "when": "mosquitto__avahi|bool", "tags": ["role::mosquitto:avahi", "role::mosquitto:listeners"]}, "module_options": {"src": "etc/avahi/services/mosquitto.service.j2", "dest": "/etc/avahi/services/mosquitto.service", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that WebSockets public HTTP directory exists", "module": "ansible.builtin.file", "index": 21, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Make sure that WebSockets public HTTP directory exists", "when": "mosquitto__websockets|bool"}, "module_options": {"path": "{{ mosquitto__http_dir_path }}", "state": "directory", "owner": "{{ mosquitto__http_dir_owner }}", "group": "{{ mosquitto__http_dir_group }}", "mode": "{{ mosquitto__http_dir_mode }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 22, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists", "tags": ["role::mosquitto:passwd"]}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Mosquitto local facts", "module": "ansible.builtin.template", "index": 23, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Save Mosquitto local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts", "role::mosquitto:passwd"]}, "module_options": {"src": "etc/ansible/facts.d/mosquitto.fact.j2", "dest": "/etc/ansible/facts.d/mosquitto.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 24, "defined_in": "testdata/scm_repo/roles/mosquitto/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified", "tags": ["role::mosquitto:passwd"]}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/mosquitto"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "btrfs", "defined_in": "testdata/scm_repo/roles/btrfs", "task_yamls": ["testdata/scm_repo/roles/btrfs/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Combine BTRFS subvolumes", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/btrfs/tasks/main.yml", "options": {"name": "Combine BTRFS subvolumes"}, "module_options": {"btrfs__subvolumes_combined": "{{ btrfs__subvolumes | combine(btrfs__subvolumes_host_group) | combine(btrfs__subvolumes_host) }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/btrfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure required packages are installed", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/btrfs/tasks/main.yml", "options": {"name": "Ensure required packages are installed", "register": "btrfs__register_packages", "until": "btrfs__register_packages is succeeded", "tags": ["role::btrfs:pkts"]}, "module_options": {"name": "{{ q(\"flattened\", btrfs__base_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/btrfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create BTRFS subvolumes", "module": "btrfs_subvolume", "index": 2, "defined_in": "testdata/scm_repo/roles/btrfs/tasks/main.yml", "options": {"name": "Create BTRFS subvolumes", "when": "(item.value.state|d(\"present\") == \"present\")", "with_dict": "{{ btrfs__subvolumes_combined }}", "tags": ["role::btrfs:subvolumes"]}, "module_options": {"state": "present", "path": "{{ item.key }}", "qgroups": "{{ item.value.qgroups|d(omit) }}", "commit": "{{ item.value.commit|d(omit) }}", "recursive": "{{ item.value.recursive|d(omit) }}"}, "fqcn": "btrfs_subvolume", "used_in": ["testdata/scm_repo/roles/btrfs"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove BTRFS subvolumes", "module": "btrfs_subvolume", "index": 3, "defined_in": "testdata/scm_repo/roles/btrfs/tasks/main.yml", "options": {"name": "Remove BTRFS subvolumes", "when": "(item.value.state|d(\"present\") != \"present\")", "with_dict": "{{ btrfs__subvolumes_combined }}", "tags": ["role::btrfs:subvolumes"]}, "module_options": {"state": "absent", "path": "{{ item.key }}"}, "fqcn": "btrfs_subvolume", "used_in": ["testdata/scm_repo/roles/btrfs"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Set directory permissions", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/btrfs/tasks/main.yml", "options": {"name": "Set directory permissions", "when": "(item.value.state|d(\"present\") == \"present\")", "with_dict": "{{ btrfs__subvolumes_combined }}", "tags": ["role::btrfs:subvolumes"]}, "module_options": {"path": "{{ item.key }}", "state": "directory", "owner": "{{ item.value.dir_owner  | d(omit) }}", "group": "{{ item.value.dir_group  | d(omit) }}", "mode": "{{ item.value.dir_mode   | d(omit) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/btrfs"], "annotations": {}}], "modules": [{"py/object": "struct4.Module", "name": "btrfs_subvolume", "fqcn": "btrfs_subvolume", "collection": "", "role": "btrfs", "defined_in": "testdata/scm_repo/roles/btrfs/library/btrfs_subvolume.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/btrfs/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/btrfs/tasks/main.yml\", \"index\": 3}"], "annotations": {}}], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "postgresql_server", "defined_in": "testdata/scm_repo/roles/postgresql_server", "task_yamls": ["testdata/scm_repo/roles/postgresql_server/tasks/install_postgresql.yml", "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "testdata/scm_repo/roles/postgresql_server/tasks/secure_installation.yml", "testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml", "testdata/scm_repo/roles/postgresql_server/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Check if database server is installed", "module": "ansible.builtin.shell", "index": 0, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/install_postgresql.yml", "options": {"name": "Check if database server is installed", "environment": {"LC_MESSAGES": "C"}, "args": {"executable": "bash"}, "register": "postgresql_server__register_installed", "changed_when": false, "check_mode": false, "failed_when": false}, "module_options": "set -o nounset -o pipefail -o errexit && dpkg-query -W -f='${Version}\\n' 'postgresql' 'postgresql-{{ postgresql_server__version }}' | grep -v '^$'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install PostgreSQL packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/install_postgresql.yml", "options": {"name": "Install PostgreSQL packages", "register": "postgresql_server__register_packages", "until": "postgresql_server__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (postgresql_server__base_packages + postgresql_server__python_packages + postgresql_server__packages + ([ \"autopostgresqlbackup\" ] if (postgresql_server__autopostgresqlbackup|d())|bool else []))) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if default PostgreSQL cluster exists", "module": "ansible.builtin.stat", "index": 2, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/install_postgresql.yml", "options": {"name": "Check if default PostgreSQL cluster exists", "register": "postgresql_server__register_installed_main"}, "module_options": {"path": "/var/lib/postgresql/{{ postgresql_server__version }}/main/postmaster.opts"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove default PostgreSQL cluster on first install", "module": "ansible.builtin.command", "index": 3, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/install_postgresql.yml", "options": {"name": "Remove default PostgreSQL cluster on first install", "when": "((postgresql_server__register_installed|d() and not postgresql_server__register_installed.stdout) and (postgresql_server__register_installed_main|d() and postgresql_server__register_installed_main.stat.exists) and (ansible_local is undefined or (ansible_local|d() and ansible_local.postgresql is undefined or (ansible_local|d() and ansible_local.postgresql|d() and ansible_local.postgresql.server != 'localhost'))))"}, "module_options": "pg_dropcluster --stop {{ postgresql_server__version }} main", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if shared memory support is available", "module": "ansible.builtin.shell", "index": 0, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Check if shared memory support is available", "args": {"executable": "bash", "warn": false}, "register": "postgresql_server__register_shm", "changed_when": false, "check_mode": false, "tags": ["role::postgresql_server:config"]}, "module_options": "set -o nounset -o pipefail -o errexit && mount | grep /dev/shm || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create PostgreSQL clusters", "module": "ansible.builtin.command", "index": 1, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Create PostgreSQL clusters", "environment": {"LANG": "{{ item.locale | d(postgresql_server__locale) }}", "LC_ALL": "{{ item.locale | d(postgresql_server__locale) }}"}, "args": {"creates": "/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/postgresql.conf"}, "register": "postgresql_server__register_createcluster", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "item.name|d() and item.port|d()"}, "module_options": "pg_createcluster --user={{ item.user | d(postgresql_server__user) }} --group={{ item.group | d(postgresql_server__group) }} --locale={{ item.locale | d(postgresql_server__locale) }} --start-conf={{ item.start_conf | d(postgresql_server__start_conf) }} --port={{ item.port }} {{ item.version | d(postgresql_server__version) }} {{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove data directory for PostgreSQL replication standby clusters", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Remove data directory for PostgreSQL replication standby clusters", "when": ["item.item.standby is defined", "item is changed", "item is success"], "with_items": "{{ postgresql_server__register_createcluster.results }}", "loop_control": {"label": "{{ item.item }}"}}, "module_options": {"path": "{{ item.item.data_directory | d(postgresql_server__data_directory + \"/\" + (item.item.version | d(postgresql_server__version)) + \"/\" + item.item.name) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Synchronize data for PostgreSQL replication standby clusters", "module": "ansible.builtin.command", "index": 3, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Synchronize data for PostgreSQL replication standby clusters", "environment": {"LANG": "{{ item.item.locale | d(postgresql_server__locale) }}", "LC_ALL": "{{ item.item.locale | d(postgresql_server__locale) }}"}, "become": true, "become_user": "{{ item.user | d(postgresql_server__user) }}", "when": ["item.item.standby is defined", "item is changed", "item is success"], "with_items": "{{ postgresql_server__register_createcluster.results }}", "loop_control": {"label": "{{ item.item }}"}}, "module_options": "pg_basebackup --pgdata={{ item.item.data_directory | d(postgresql_server__data_directory + \"/\"\n                                         + (item.item.version | d(postgresql_server__version))\n                                         + \"/\" + item.item.name) }}\n--dbname=\"{{ item.item.standby.conninfo }}\" --write-recovery-conf {% if item.item.standby.slot_name is defined %} --slot={{ item.item.standby.slot_name }} --create-slot {% endif %}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Log directory path", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Log directory path", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "item.log_directory|d() and item.log_directory is abs", "tags": ["role::postgresql_server:config"]}, "module_options": {"name": "{{ item.log_directory }}", "mode": "0750", "owner": "{{ item.user | d(postgresql_server__user) }}", "group": "{{ item.group | d(postgresql_server__group) }}", "state": "directory", "recurse": true}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that conf.d directories exist", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Ensure that conf.d directories exist", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "item.name|d()", "tags": ["role::postgresql_server:config"]}, "module_options": {"path": "/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/conf.d", "state": "directory", "owner": "{{ item.user | d(postgresql_server__user) }}", "group": "{{ item.group | d(postgresql_server__group) }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure PostgreSQL clusters", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Configure PostgreSQL clusters", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "item.name|d()", "register": "postgresql_server__register_config", "tags": ["role::postgresql_server:config"]}, "module_options": {"src": "etc/postgresql/postgresql.conf.j2", "dest": "/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/postgresql.conf", "owner": "{{ item.user | d(postgresql_server__user) }}", "group": "{{ item.group | d(postgresql_server__group) }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure PostgreSQL cluster environment", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Configure PostgreSQL cluster environment", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "item.name|d()", "register": "postgresql_server__register_config_environment", "tags": ["role::postgresql_server:config"]}, "module_options": {"src": "etc/postgresql/environment.j2", "dest": "/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/environment", "owner": "{{ item.user | d(postgresql_server__user) }}", "group": "{{ item.group | d(postgresql_server__group) }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure PostgreSQL user identification", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Configure PostgreSQL user identification", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "item.name|d()", "register": "postgresql_server__register_config_ident", "tags": ["role::postgresql_server:config"]}, "module_options": {"src": "etc/postgresql/pg_ident.conf.j2", "dest": "/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/pg_ident.conf", "owner": "{{ item.user | d(postgresql_server__user) }}", "group": "{{ item.group | d(postgresql_server__group) }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure PostgreSQL cluster host authentication", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Configure PostgreSQL cluster host authentication", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "item.name|d()", "register": "postgresql_server__register_config_hba", "tags": ["role::postgresql_server:config"]}, "module_options": {"src": "etc/postgresql/pg_hba.conf.j2", "dest": "/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/pg_hba.conf", "owner": "{{ item.user | d(postgresql_server__user) }}", "group": "{{ item.group | d(postgresql_server__group) }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure PostgreSQL cluster trusted local roles", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Configure PostgreSQL cluster trusted local roles", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "item.name|d()", "register": "postgresql_server__register_trusted", "tags": ["role::postgresql_server:config"]}, "module_options": {"src": "etc/postgresql/trusted.j2", "dest": "/etc/postgresql/{{ (item.version | d(postgresql_server__version)) + \"/\" + item.name + \"/trusted\" }}", "owner": "{{ item.user | d(postgresql_server__user) }}", "group": "{{ item.group | d(postgresql_server__group) }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure PostgreSQL cluster start options", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Configure PostgreSQL cluster start options", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "item.name|d()", "register": "postgresql_server__register_config_start", "tags": ["role::postgresql_server:config"]}, "module_options": {"src": "etc/postgresql/start.conf.j2", "dest": "/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/start.conf", "owner": "{{ item.user | d(postgresql_server__user) }}", "group": "{{ item.group | d(postgresql_server__group) }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink SSL root certificate", "module": "ansible.builtin.file", "index": 12, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Symlink SSL root certificate", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "((postgresql_server__pki|d() and postgresql_server__pki | bool) and (item.name|d()) and ((item.version|d() and item.version == '9.1') or (postgresql_server__version|d() and postgresql_server__version == '9.1')))"}, "module_options": {"src": "{{ item.pki_path | d(postgresql_server__pki_path) + \"/\" + item.pki_realm | d(postgresql_server__pki_realm) + \"/\" + item.pki_ca | d(postgresql_server__pki_ca) }}", "dest": "{{ (item.data_directory | d(postgresql_server__data_directory + (item.version | d(postgresql_server__version)) + \"/\" + item.name)) + \"/root.crt\" }}", "state": "link", "mode": "0644"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink SSL certificate", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Symlink SSL certificate", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "((postgresql_server__pki|d() and postgresql_server__pki | bool) and (item.name|d()) and ((item.version|d() and item.version == '9.1') or (postgresql_server__version|d() and postgresql_server__version == '9.1')))"}, "module_options": {"src": "{{ item.pki_path | d(postgresql_server__pki_path) + \"/\" + item.pki_realm | d(postgresql_server__pki_realm) + \"/\" + item.pki_crt | d(postgresql_server__pki_crt) }}", "dest": "{{ (item.data_directory | d(postgresql_server__data_directory + (item.version | d(postgresql_server__version)) + \"/\" + item.name)) + \"/server.crt\" }}", "state": "link", "mode": "0644"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink SSL key", "module": "ansible.builtin.file", "index": 14, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Symlink SSL key", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "((postgresql_server__pki|d() and postgresql_server__pki | bool) and (item.name|d()) and ((item.version|d() and item.version == '9.1') or (postgresql_server__version|d() and postgresql_server__version == '9.1')))"}, "module_options": {"src": "{{ item.pki_path | d(postgresql_server__pki_path) + \"/\" + item.pki_realm | d(postgresql_server__pki_realm) + \"/\" + item.pki_key | d(postgresql_server__pki_key) }}", "dest": "{{ (item.data_directory | d(postgresql_server__data_directory + (item.version | d(postgresql_server__version)) + \"/\" + item.name)) + \"/server.key\" }}", "state": "link", "mode": "0640"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start PostgreSQL clusters when not started", "module": "ansible.builtin.command", "index": 15, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Start PostgreSQL clusters when not started", "args": {"creates": "{{ item.external_pid_file | d(\"/var/run/postgresql/\" + (item.version | d(postgresql_server__version)) + \"-\" + item.name + \".pid\") }}"}, "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "(ansible_service_mgr != 'systemd' and ((item.name|d()) and (item.start_conf is undefined or item.start_conf == 'auto')))"}, "module_options": "pg_ctlcluster {{ item.version | d(postgresql_server__version) }} {{ item.name }} start", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start PostgreSQL clusters when not started (systemd)", "module": "ansible.builtin.service", "index": 16, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Start PostgreSQL clusters when not started (systemd)", "with_flattened": ["{{ postgresql_server__clusters }}"], "when": "(ansible_service_mgr == 'systemd' and ((item.name|d()) and (item.start_conf is undefined or item.start_conf == 'auto')))"}, "module_options": {"name": "postgresql@{{ item.version | d(postgresql_server__version) }}-{{ item.name }}.service", "state": "started"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload PostgreSQL clusters when needed", "module": "ansible.builtin.command", "index": 17, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Reload PostgreSQL clusters when needed", "with_flattened": ["{{ postgresql_server__register_config.results }}", "{{ postgresql_server__register_config_hba.results }}", "{{ postgresql_server__register_config_ident.results }}", "{{ postgresql_server__register_trusted.results }}"], "when": "(ansible_service_mgr != 'systemd' and ((item is changed and (item.item.start_conf is undefined or item.item.start_conf == 'auto'))))", "tags": ["role::postgresql_server:config"]}, "module_options": "pg_ctlcluster {{ item.item.version | d(postgresql_server__version) }} {{ item.item.name }} reload", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload PostgreSQL clusters when needed (systemd)", "module": "ansible.builtin.service", "index": 18, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml", "options": {"name": "Reload PostgreSQL clusters when needed (systemd)", "with_flattened": ["{{ postgresql_server__register_config.results }}", "{{ postgresql_server__register_config_hba.results }}", "{{ postgresql_server__register_config_ident.results }}", "{{ postgresql_server__register_trusted.results }}"], "when": "(ansible_service_mgr == 'systemd' and ((item is changed and (item.item.start_conf is undefined or item.item.start_conf == 'auto'))))", "tags": ["role::postgresql_server:config"]}, "module_options": {"name": "postgresql@{{ item.item.version | d(postgresql_server__version) }}-{{ item.item.name }}.service", "state": "reloaded"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update default admin password", "module": "community.postgresql.postgresql_user", "index": 0, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/secure_installation.yml", "options": {"name": "Update default admin password", "with_flattened": ["{{ postgresql_server__clusters }}"], "become": true, "become_user": "{{ item.user | d(postgresql_server__user) }}", "when": ["item.name|d()", "item.standby is not defined"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.user | d(postgresql_server__user) }}", "password": "{{ item.admin_password | d(postgresql_server__admin_password) }}", "encrypted": true, "port": "{{ item.port }}", "state": "present"}, "fqcn": "community.postgresql.postgresql_user", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Grant connect on postgres to PUBLIC", "module": "postgresql_privs", "index": 1, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/secure_installation.yml", "options": {"name": "Grant connect on postgres to PUBLIC", "with_flattened": ["{{ postgresql_server__clusters }}"], "become": true, "become_user": "{{ item.user | d(postgresql_server__user) }}", "when": ["item.name|d()", "item.standby is not defined"], "changed_when": false}, "module_options": {"database": "postgres", "port": "{{ item.port }}", "role": "PUBLIC", "type": "database", "privs": "CONNECT", "state": "present"}, "fqcn": "community.postgresql.postgresql_privs", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Revoke temporary on postgres from PUBLIC", "module": "postgresql_privs", "index": 2, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/secure_installation.yml", "options": {"name": "Revoke temporary on postgres from PUBLIC", "with_flattened": ["{{ postgresql_server__clusters }}"], "become": true, "become_user": "{{ item.user | d(postgresql_server__user) }}", "when": ["item.name|d()", "item.standby is not defined"], "changed_when": false}, "module_options": {"database": "postgres", "port": "{{ item.port }}", "role": "PUBLIC", "type": "database", "privs": "TEMPORARY", "state": "absent"}, "fqcn": "community.postgresql.postgresql_privs", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Divert the original autopostgresqlbackup script", "module": "dpkg_divert", "index": 0, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml", "options": {"name": "Divert the original autopostgresqlbackup script"}, "module_options": {"path": "/usr/sbin/autopostgresqlbackup", "divert": "/usr/share/doc/autopostgresqlbackup/script.dpkg-divert"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Divert the original autopostgresqlbackup cron job", "module": "dpkg_divert", "index": 1, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml", "options": {"name": "Divert the original autopostgresqlbackup cron job"}, "module_options": {"path": "/etc/cron.daily/autopostgresqlbackup", "divert": "/usr/share/doc/autopostgresqlbackup/cron.dpkg-divert"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure autopostgresqlbackup defaults", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml", "options": {"name": "Configure autopostgresqlbackup defaults", "with_flattened": ["{{ postgresql_server__clusters }}"]}, "module_options": {"src": "etc/default/autopostgresqlbackup.j2", "dest": "/etc/default/autopostgresqlbackup-{{ item.version | d(postgresql_server__version) }}-{{ item.name }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure autopostgresqlbackup", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml", "options": {"name": "Configure autopostgresqlbackup", "with_flattened": ["{{ postgresql_server__clusters }}"]}, "module_options": {"src": "usr/sbin/autopostgresqlbackup.j2", "dest": "/usr/sbin/autopostgresqlbackup-{{ item.version | d(postgresql_server__version) }}-{{ item.name }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable autopostgresqlbackup from running daily", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml", "options": {"name": "Disable autopostgresqlbackup from running daily", "when": "((item.auto_backup|d() and not item.auto_backup | bool) or not postgresql_server__auto_backup | bool)", "with_flattened": ["{{ postgresql_server__clusters }}"]}, "module_options": {"path": "/etc/cron.daily/autopostgresqlbackup-{{ (item.version | d(postgresql_server__version)) | replace(\".\",\"_\") }}-{{ item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable autopostgresqlbackup to run daily", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml", "options": {"name": "Enable autopostgresqlbackup to run daily", "when": "((item.auto_backup is undefined or item.auto_backup | bool) and postgresql_server__auto_backup | bool)", "with_flattened": ["{{ postgresql_server__clusters }}"]}, "module_options": {"src": "etc/cron.daily/autopostgresqlbackup.j2", "dest": "/etc/cron.daily/autopostgresqlbackup-{{ (item.version | d(postgresql_server__version)) | replace(\".\",\"_\") }}-{{ item.name }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get default PostgreSQL version", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Get default PostgreSQL version", "environment": {"LC_ALL": "C"}, "args": {"executable": "bash"}, "register": "postgresql_server__register_version", "changed_when": false, "check_mode": false, "tags": ["role::postgresql_server:packages", "role::postgresql_server:config", "role::postgresql_server:auto_backup"]}, "module_options": "set -o nounset -o pipefail -o errexit && apt-cache policy postgresql | grep -E '^\\s+Candidate:\\s+' | awk '{print $2}' | cut -d+ -f1", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set default PostgreSQL version variable", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Set default PostgreSQL version variable", "tags": ["role::postgresql_server:packages", "role::postgresql_server:config", "role::postgresql_server:auto_backup"]}, "module_options": {"postgresql_server__version": "{{ (ansible_local.postgresql.version if (ansible_local.postgresql.version|d()) else (postgresql_server__preferred_version if postgresql_server__preferred_version|d() else postgresql_server__register_version.stdout)) }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install PostgreSQL database service", "module": "ansible.builtin.include_tasks", "index": 4, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Install PostgreSQL database service", "tags": ["role::postgresql_server:packages"]}, "module_options": "install_postgresql.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure custom PostgreSQL data directory", "module": "ansible.builtin.lineinfile", "index": 5, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Configure custom PostgreSQL data directory", "when": "postgresql_server__data_directory != '/var/lib/postgresql'"}, "module_options": {"path": "/etc/postgresql-common/createcluster.conf", "regexp": "^data_directory\\s+=", "line": "data_directory = '{{ postgresql_server__data_directory }}/%v/%c'", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that custom PostgreSQL data directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Make sure that custom PostgreSQL data directory exists", "when": "postgresql_server__data_directory != '/var/lib/postgresql'"}, "module_options": {"path": "{{ postgresql_server__data_directory }}", "state": "directory", "owner": "{{ postgresql_server__user }}", "group": "{{ postgresql_server__group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that custom PostgreSQL Log directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Make sure that custom PostgreSQL Log directory exists", "when": "postgresql_server__log_directory|d()"}, "module_options": {"path": "{{ postgresql_server__log_directory }}", "state": "directory", "owner": "{{ postgresql_server__user }}", "group": "{{ postgresql_server__group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Count number of currently configured clusters", "module": "ansible.builtin.set_fact", "index": 8, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Count number of currently configured clusters", "tags": ["role::postgresql_server:config"]}, "module_options": {"postgresql_server__fact_cluster_count": "{{ (postgresql_server__clusters|length|int) * 1 }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get current maximum shared memory value", "module": "ansible.builtin.command", "index": 9, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Get current maximum shared memory value", "register": "postgresql_server__register_sysctl_shmmax", "changed_when": false, "check_mode": false, "tags": ["role::postgresql_server:config"]}, "module_options": "cat /proc/sys/kernel/shmmax", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage PostgreSQL clusters", "module": "ansible.builtin.include_tasks", "index": 10, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Manage PostgreSQL clusters"}, "module_options": "manage_clusters.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Secure PostgreSQL installation", "module": "ansible.builtin.include_tasks", "index": 11, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Secure PostgreSQL installation"}, "module_options": "secure_installation.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage AutoPostgreSQLBackup script", "module": "ansible.builtin.include_tasks", "index": 12, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Manage AutoPostgreSQLBackup script", "when": "postgresql_server__autopostgresqlbackup|bool", "tags": ["role::postgresql_server:auto_backup"]}, "module_options": "manage_autopostgresqlbackup.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local fact directory exists", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Make sure that Ansible local fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save PostgreSQL local facts", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Save PostgreSQL local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts", "role::postgresql_server:config"]}, "module_options": {"src": "etc/ansible/facts.d/postgresql.fact.j2", "dest": "/etc/ansible/facts.d/postgresql.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 15, "defined_in": "testdata/scm_repo/roles/postgresql_server/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/postgresql_server"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "iscsi", "defined_in": "testdata/scm_repo/roles/iscsi", "task_yamls": ["testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml", "testdata/scm_repo/roles/iscsi/tasks/main.yml", "testdata/scm_repo/roles/iscsi/tasks/iscsi/pre_main.yml", "testdata/scm_repo/roles/iscsi/tasks/iscsi/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Unmount filesystems if requested", "module": "ansible.posix.mount", "index": 0, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml", "options": {"name": "Unmount filesystems if requested", "with_items": "{{ iscsi__logical_volumes }}", "when": "iscsi__logical_volumes|d(False) and item.vg|d() and item.lv|d() and item.size|d() and item.mount|d(False) and (item.state is defined and item.state == 'absent')"}, "module_options": {"name": "{{ item.mount }}", "src": "{{ \"/dev/mapper/\" + item.vg + \"-\" + item.lv }}", "fstype": "{{ item.fs_type | d(iscsi__default_fs_type) }}", "state": "absent"}, "fqcn": "ansible.posix.mount", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove Logical Volumes if requested", "module": "lvol", "index": 1, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml", "options": {"name": "Remove Logical Volumes if requested", "with_items": "{{ iscsi__logical_volumes }}", "when": "iscsi__logical_volumes|d(False) and item.vg|d() and item.lv|d() and item.size|d() and item.state|d() and item.state == 'absent'"}, "module_options": {"vg": "{{ item.vg }}", "lv": "{{ item.lv }}", "size": "{{ item.size }}", "force": "{{ item.force | d(omit) }}", "state": "absent"}, "fqcn": "community.general.lvol", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage LVM Volume Groups", "module": "lvg", "index": 2, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml", "options": {"name": "Manage LVM Volume Groups", "with_items": "{{ iscsi__register_targets.results }}", "when": "iscsi__register_targets|d(False) and iscsi__register_targets.results|d() and item.devicenodes|d() and item.item.lvm_vg|d()"}, "module_options": {"vg": "{{ item.item.lvm_vg }}", "pvs": "{{ item.devicenodes      | join(\",\") }}", "state": "{{ item.item.lvm_state   | d(\"present\") }}", "pesize": "{{ item.item.lvm_pesize  | d(omit) }}", "force": "{{ item.item.lvm_force   | d(omit) }}", "vg_options": "{{ item.item.lvm_options | d(omit) }}"}, "fqcn": "community.general.lvg", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage LVM Logical Volumes", "module": "lvol", "index": 3, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml", "options": {"name": "Manage LVM Logical Volumes", "with_items": "{{ iscsi__logical_volumes }}", "when": "iscsi__logical_volumes|d(False) and item.vg|d() and item.lv|d() and item.size|d() and (item.state is undefined or item.state != 'absent')"}, "module_options": {"vg": "{{ item.vg }}", "lv": "{{ item.lv }}", "size": "{{ item.size }}", "force": "{{ item.force | d(omit) }}", "state": "present"}, "fqcn": "community.general.lvol", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage filesystems", "module": "filesystem", "index": 4, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml", "options": {"name": "Manage filesystems", "with_items": "{{ iscsi__logical_volumes }}", "when": "iscsi__logical_volumes|d(False) and item.vg|d() and item.lv|d() and item.size|d() and (item.state is undefined or item.state != 'absent') and ((item.mount|d() and (item.fs is undefined or item.fs|d()) or item.fs|d()))"}, "module_options": {"dev": "{{ \"/dev/mapper/\" + item.vg + \"-\" + item.lv }}", "fstype": "{{ item.fs_type  | d(iscsi__default_fs_type) }}", "force": "{{ item.fs_force | d(omit) }}", "opts": "{{ item.fs_opts  | d(omit) }}"}, "fqcn": "community.general.filesystem", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage mount points", "module": "ansible.posix.mount", "index": 5, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml", "options": {"name": "Manage mount points", "with_items": "{{ iscsi__logical_volumes }}", "when": "iscsi__logical_volumes|d(False) and item.vg|d() and item.lv|d() and item.size|d() and item.mount|d(False) and (item.state is undefined or item.state != 'absent')"}, "module_options": {"name": "{{ item.mount }}", "src": "{{ \"/dev/mapper/\" + item.vg + \"-\" + item.lv }}", "fstype": "{{ item.fs_type      | d(iscsi__default_fs_type) }}", "opts": "{{ item.mount_opts   | d(iscsi__default_mount_options) }}", "state": "{{ item.mount_state  | d(\"mounted\") }}", "dump": "{{ item.mount_dump   | d(omit) }}", "passno": "{{ item.mount_passno | d(omit) }}", "fstab": "{{ item.mount_fstab  | d(omit) }}"}, "fqcn": "ansible.posix.mount", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps pre_tasks hook", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "DebOps pre_tasks hook"}, "module_options": "{{ lookup('debops.debops.task_src', 'iscsi/pre_main.yml') }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required iSCSI packages", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Install required iSCSI packages", "register": "iscsi__register_packages", "until": "iscsi__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", iscsi__packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure iSCSI Initiator IQN", "module": "ansible.builtin.lineinfile", "index": 5, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Configure iSCSI Initiator IQN", "register": "iscsi__register_initiatorname"}, "module_options": {"dest": "/etc/iscsi/initiatorname.iscsi", "regexp": "^InitiatorName=iqn", "line": "InitiatorName={{ iscsi__initiator_name }}", "state": "present", "mode": "0600"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure iSCSI discovery authentication", "module": "ansible.builtin.lineinfile", "index": 6, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Configure iSCSI discovery authentication", "with_dict": "{{ iscsi__default_options }}", "when": "item|d(False) and item.value", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"dest": "/etc/iscsi/iscsid.conf", "regexp": "{{ (item.key | replace(\".\",\"\\.\")) + \"\\s=\\s\" }}", "line": "{{ item.key + \" = \" + item.value }}", "state": "present", "mode": "0600"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart iSCSI service if initial configuration changed", "module": "ansible.builtin.service", "index": 7, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Restart iSCSI service if initial configuration changed", "when": "iscsi__enabled|d() and iscsi__register_initiatorname|d() and iscsi__register_initiatorname is changed"}, "module_options": {"name": "open-iscsi", "state": "restarted"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate iSCSI interface configuration", "module": "ansible.builtin.shell", "index": 8, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Generate iSCSI interface configuration", "args": {"creates": "/etc/iscsi/ifaces/{{ item }}"}, "with_items": "{{ iscsi__interfaces }}", "when": "(iscsi__interfaces|d(False) and item in ansible_interfaces)"}, "module_options": "iscsiadm -m iface -I {{ item }} -o new ; iscsiadm -m iface -I {{ item }} --op=update -n iface.net_ifacename -v {{ item }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Discover iSCSI targets on portals", "module": "open_iscsi", "index": 9, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Discover iSCSI targets on portals", "with_items": "{{ iscsi__portals }}", "register": "iscsi__register_discover_targets", "when": "iscsi__portals|d(False) and item not in ansible_local.iscsi.discovered_portals|d([])"}, "module_options": {"discover": true, "portal": "{{ item }}"}, "fqcn": "community.general.open_iscsi", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Log in to specified iSCSI targets", "module": "open_iscsi", "index": 10, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Log in to specified iSCSI targets", "with_items": "{{ iscsi__targets }}", "register": "iscsi__register_targets", "when": "iscsi__targets|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"target": "{{ item.target }}", "login": "{{ False if (not item.login|d(True)) else True }}", "node_auth": "{{ \"CHAP\" if (item.auth|d(False)) else omit }}", "node_user": "{{ item.auth_username if (item.auth|d(False)) else omit }}", "node_pass": "{{ item.auth_password if (item.auth|d(False)) else omit }}", "auto_node_startup": "{{ False if (not item.auto|d(True)) else True }}"}, "fqcn": "community.general.open_iscsi", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure that local facts directory exists", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Make sure that local facts directory exists"}, "module_options": {"dest": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save iSCSI facts", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Save iSCSI facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/iscsi.fact.j2", "dest": "/etc/ansible/facts.d/iscsi.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage LVM", "module": "ansible.builtin.include_tasks", "index": 13, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "Manage LVM", "when": "(((ansible_system_capabilities_enforced|d())|bool and \"cap_sys_admin\" in ansible_system_capabilities) or not (ansible_system_capabilities_enforced|d(True))|bool)"}, "module_options": "manage_lvm.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps post_tasks hook", "module": "ansible.builtin.include_tasks", "index": 14, "defined_in": "testdata/scm_repo/roles/iscsi/tasks/main.yml", "options": {"name": "DebOps post_tasks hook"}, "module_options": "{{ lookup('debops.debops.task_src', 'iscsi/post_main.yml') }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/iscsi"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "docker_registry", "defined_in": "testdata/scm_repo/roles/docker_registry", "task_yamls": ["testdata/scm_repo/roles/docker_registry/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Install required packages", "register": "docker_registry__register_packages", "until": "docker_registry__register_packages is succeeded"}, "module_options": {"name": "{{ (docker_registry__base_packages + docker_registry__packages) | flatten }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the original docker-registry config file", "module": "dpkg_divert", "index": 4, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Divert the original docker-registry config file", "notify": ["Restart docker-registry"]}, "module_options": {"path": "/etc/docker/registry/config.yml"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create Docker Registry UNIX group", "module": "ansible.builtin.group", "index": 5, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Create Docker Registry UNIX group"}, "module_options": {"name": "{{ docker_registry__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Docker Registry UNIX account", "module": "ansible.builtin.user", "index": 6, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Create Docker Registry UNIX account"}, "module_options": {"name": "{{ docker_registry__user }}", "group": "{{ docker_registry__group }}", "groups": "{{ docker_registry__additional_groups | flatten }}", "home": "{{ docker_registry__home }}", "comment": "{{ docker_registry__comment }}", "shell": "{{ docker_registry__shell }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required directories", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Create required directories", "with_items": [{"path": "{{ docker_registry__config_file | dirname }}", "mode": "0755"}, {"path": "{{ docker_registry__storage_dir | dirname }}", "mode": "0755"}, {"path": "{{ docker_registry__storage_dir }}", "owner": "{{ docker_registry__user }}", "group": "{{ docker_registry__group }}", "mode": "{{ docker_registry__storage_mode }}"}]}, "module_options": {"name": "{{ item.path }}", "state": "directory", "owner": "{{ item.owner | d(omit) }}", "group": "{{ item.group | d(omit) }}", "mode": "{{ item.mode }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required build directories", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Create required build directories", "with_items": [{"path": "{{ docker_registry__src }}", "mode": "0755"}, {"path": "{{ docker_registry__git_dir | dirname }}", "mode": "0755"}]}, "module_options": {"name": "{{ item.path }}", "state": "directory", "mode": "{{ item.mode }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone Docker Registry source code", "module": "ansible.builtin.git", "index": 9, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Clone Docker Registry source code", "register": "docker_registry__register_source"}, "module_options": {"repo": "{{ docker_registry__git_repo }}", "dest": "{{ docker_registry__git_dest }}", "version": "{{ docker_registry__git_version }}", "separate_git_dir": "{{ docker_registry__git_dir }}", "verify_commit": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Build Docker Registry binaries", "module": "ansible.builtin.command", "index": 10, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Build Docker Registry binaries", "environment": {"GOPATH": "{{ docker_registry__gopath }}", "GOCACHE": "{{ docker_registry__gopath + \"/cache\" }}"}, "args": {"chdir": "{{ docker_registry__git_dest }}"}, "when": "docker_registry__register_source is changed", "register": "docker_registry__register_build"}, "module_options": "make clean binaries", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Docker Registry binary", "module": "ansible.builtin.copy", "index": 11, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Install Docker Registry binary", "notify": ["Restart docker-registry"], "when": "docker_registry__upstream|bool and docker_registry__register_build is changed"}, "module_options": {"src": "{{ docker_registry__git_dest + \"/bin/registry\" }}", "dest": "/usr/local/bin/docker-registry", "remote_src": true, "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 12, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Docker Registry local facts", "module": "ansible.builtin.template", "index": 13, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Save Docker Registry local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/docker_registry.fact.j2", "dest": "/etc/ansible/facts.d/docker_registry.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 14, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Docker Registry configuration", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Generate Docker Registry configuration", "notify": ["Restart docker-registry"], "register": "docker_registry__register_config"}, "module_options": {"src": "etc/docker/registry/config.yml.j2", "dest": "{{ docker_registry__config_file }}", "owner": "{{ docker_registry__user }}", "group": "{{ docker_registry__group }}", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Docker Registry systemd unit", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Generate Docker Registry systemd unit", "register": "docker_registry__register_systemd"}, "module_options": {"src": "etc/systemd/system/docker-registry.service.j2", "dest": "/etc/systemd/system/docker-registry.service", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable Docker Registry service", "module": "ansible.builtin.systemd", "index": 17, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Enable Docker Registry service"}, "module_options": {"name": "docker-registry", "daemon_reload": "{{ True if docker_registry__register_systemd is changed else omit }}", "enabled": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install garbage collector script", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Install garbage collector script", "loop": [{"path": "usr/local/bin/docker-registry-gc", "mode": "0755"}, {"path": "etc/sudoers.d/docker-registry-gc", "mode": "0440"}], "when": "docker_registry__garbage_collector_enabled|bool"}, "module_options": {"src": "{{ item.path }}.j2", "dest": "/{{ item.path }}", "mode": "{{ item.mode }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure garbage collection in cron", "module": "ansible.builtin.cron", "index": 19, "defined_in": "testdata/scm_repo/roles/docker_registry/tasks/main.yml", "options": {"name": "Configure garbage collection in cron"}, "module_options": {"name": "Perform garbage collection in Docker Registry", "cron_file": "docker-registry-gc", "user": "{{ docker_registry__user }}", "job": "/usr/local/bin/docker-registry-gc", "special_time": "{{ docker_registry__garbage_collector_interval }}", "state": "{{ \"present\" if docker_registry__garbage_collector_enabled|bool else \"absent\" }}"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/docker_registry"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "nfs_server", "defined_in": "testdata/scm_repo/roles/nfs_server", "task_yamls": ["testdata/scm_repo/roles/nfs_server/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/nfs_server/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nfs_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/nfs_server/tasks/main.yml", "options": {"name": "Install required packages", "register": "nfs_server__register_packages", "until": "nfs_server__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (nfs_server__base_packages + nfs_server__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/nfs_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NFS server", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/nfs_server/tasks/main.yml", "options": {"name": "Configure NFS server", "with_items": ["etc/default/nfs-common", "etc/default/nfs-kernel-server", "etc/modprobe.d/nfs-server.conf"], "notify": ["Restart nfs-kernel-server service"]}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nfs_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create /etc/exports.d/ directory", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/nfs_server/tasks/main.yml", "options": {"name": "Create /etc/exports.d/ directory"}, "module_options": {"path": "/etc/exports.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nfs_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure exported directories exist", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/nfs_server/tasks/main.yml", "options": {"name": "Ensure exported directories exist", "with_flattened": ["{{ nfs_server__combined_exports }}"], "when": "item.path|d() and item.state|d('present') != 'absent' and item.acl|d()"}, "module_options": {"path": "{{ item.path }}", "state": "directory", "owner": "{{ item.owner | d(\"root\") }}", "group": "{{ item.group | d(\"root\") }}", "mode": "{{ item.mode  | d(\"0755\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nfs_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Bind mount requested directories", "module": "ansible.posix.mount", "index": 5, "defined_in": "testdata/scm_repo/roles/nfs_server/tasks/main.yml", "options": {"name": "Bind mount requested directories", "with_flattened": ["{{ nfs_server__combined_exports }}"], "when": "item.path|d() and item.state|d('present') != 'absent' and item.acl|d() and item.bind|d()"}, "module_options": {"name": "{{ item.path }}", "src": "{{ item.bind.src | d(item.bind) }}", "opts": "{{ ( [ \"bind\" ] + item.bind.options | d([]) ) | join(\",\") }}", "fstype": "none", "state": "mounted"}, "fqcn": "ansible.posix.mount", "used_in": ["testdata/scm_repo/roles/nfs_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure NFS exports", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/nfs_server/tasks/main.yml", "options": {"name": "Configure NFS exports", "notify": ["Reload NFS exports"]}, "module_options": {"src": "etc/exports.d/ansible.exports.j2", "dest": "/etc/exports.d/ansible.exports", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nfs_server"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "redis_sentinel", "defined_in": "testdata/scm_repo/roles/redis_sentinel", "task_yamls": ["testdata/scm_repo/roles/redis_sentinel/tasks/main_env.yml", "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare Redis Sentinel role environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main_env.yml", "options": {"name": "Prepare Redis Sentinel role environment"}, "module_options": {"redis_sentinel__env_ports": "{{ lookup(\"template\", \"lookup/redis_sentinel__env_ports.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Redis Sentinel packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Install Redis Sentinel packages", "register": "redis_sentinel__register_packages", "until": "redis_sentinel__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (redis_sentinel__base_packages + redis_sentinel__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that standalone Redis Sentinel is stopped on install", "module": "ansible.builtin.systemd", "index": 4, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Ensure that standalone Redis Sentinel is stopped on install", "when": "((ansible_local is undefined or ansible_local.redis_sentinel is undefined) and ansible_service_mgr == 'systemd')"}, "module_options": {"name": "redis-sentinel.service", "state": "stopped"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup Redis Sentinel local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Setup Redis Sentinel local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/redis_sentinel.fact.j2", "dest": "/etc/ansible/facts.d/redis_sentinel.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Redis Sentinel auth UNIX group", "module": "ansible.builtin.group", "index": 8, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Create Redis Sentinel auth UNIX group"}, "module_options": {"name": "{{ redis_sentinel__auth_group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Redis Sentinel instance directories", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Create Redis Sentinel instance directories", "loop": "{{ redis_sentinel__combined_configuration | debops.debops.parse_kv_items | product([ \"\", \"/reconfig.d\", \"/notify.d\" ]) | list }}", "when": "item.0.name|d() and item.0.state|d('present') not in [ 'absent', 'init', 'ignore' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "/etc/redis/sentinel-{{ item.0.name + item.1 }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate initial Redis Sentinel configuration", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Generate initial Redis Sentinel configuration", "with_items": "{{ redis_sentinel__combined_configuration | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ]", "notify": ["Refresh host facts"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/redis/sentinel-instance/sentinel.conf.j2", "dest": "/etc/redis/sentinel-{{ item.name }}/sentinel.conf", "owner": "{{ redis_sentinel__user }}", "group": "{{ redis_sentinel__auth_group }}", "mode": "0640", "force": false}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Redis Sentinel notify and reconfig scripts", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Generate Redis Sentinel notify and reconfig scripts", "loop": "{{ redis_sentinel__combined_configuration | debops.debops.parse_kv_items | product([ \"notify.sh\", \"reconfig.sh\" ]) | list }}", "when": "item.0.name|d() and item.0.state|d('present') not in [ 'absent', 'init', 'ignore' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/redis/sentinel-instance/{{ item.1 }}.j2", "dest": "/etc/redis/sentinel-{{ item.0.name }}/{{ item.1 }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom systemd unit files", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Install custom systemd unit files", "with_items": ["etc/systemd/system/redis-sentinel@.service", "etc/systemd/system/redis-sentinel.service"], "notify": ["Reload service manager"]}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create systemd override directories for instances", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Create systemd override directories for instances", "with_items": "{{ redis_sentinel__combined_configuration | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ] and item.systemd_override|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "/etc/systemd/system/redis-sentinel@{{ item.name }}.service.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate systemd instance override files", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Generate systemd instance override files", "with_items": "{{ redis_sentinel__combined_configuration | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ] and item.systemd_override|d()", "notify": ["Reload service manager"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/systemd/system/redis-sentinel@.service.d/ansible-override.conf.j2", "dest": "/etc/systemd/system/redis-sentinel@{{ item.name }}.service.d/ansible-override.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop Redis Sentinel instances if requested", "module": "ansible.builtin.systemd", "index": 15, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Stop Redis Sentinel instances if requested", "with_items": "{{ redis_sentinel__combined_configuration | debops.debops.parse_kv_items }}", "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') == 'absent'", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "redis-sentinel@{{ item.name }}.service", "state": "stopped", "enabled": false}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Redis Sentinel instance systemd override if requested", "module": "ansible.builtin.file", "index": 16, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Remove Redis Sentinel instance systemd override if requested", "with_items": "{{ redis_sentinel__combined_configuration | debops.debops.parse_kv_items }}", "notify": ["Reload service manager"], "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') == 'absent'", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "/etc/systemd/system/redis-sentinel@{{ item.name }}.service.d", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Redis Sentinel instance configuration if requested", "module": "ansible.builtin.file", "index": 17, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Remove Redis Sentinel instance configuration if requested", "with_items": "{{ redis_sentinel__combined_configuration | debops.debops.parse_kv_items }}", "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') == 'absent'", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "/etc/redis/sentinel-{{ item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd configuration when needed", "module": "ansible.builtin.meta", "index": 18, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Reload systemd configuration when needed"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that Redis Sentinel instances are started", "module": "ansible.builtin.systemd", "index": 19, "defined_in": "testdata/scm_repo/roles/redis_sentinel/tasks/main.yml", "options": {"name": "Ensure that Redis Sentinel instances are started", "with_items": "{{ redis_sentinel__combined_configuration | debops.debops.parse_kv_items }}", "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "redis-sentinel@{{ item.name }}.service", "state": "started", "enabled": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/redis_sentinel"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "tftpd", "defined_in": "testdata/scm_repo/roles/tftpd", "task_yamls": ["testdata/scm_repo/roles/tftpd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/tftpd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/tftpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/tftpd/tasks/main.yml", "options": {"name": "Install required packages", "register": "tftpd__register_install", "until": "tftpd__register_install is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (tftpd__base_packages + tftpd__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/tftpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure tftpd service", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/tftpd/tasks/main.yml", "options": {"name": "Configure tftpd service", "notify": ["Restart tftpd-hpa"]}, "module_options": {"src": "etc/default/tftpd-hpa.j2", "dest": "/etc/default/tftpd-hpa", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tftpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create the upload directory if enabled", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/tftpd/tasks/main.yml", "options": {"name": "Create the upload directory if enabled", "when": "tftpd__upload_enabled|bool"}, "module_options": {"path": "{{ tftpd__directory + \"/\" + tftpd__upload_directory }}", "owner": "{{ tftpd__username }}", "group": "{{ tftpd__upload_group }}", "mode": "{{ tftpd__upload_mode }}", "state": "directory"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tftpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/tftpd/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tftpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save tftpd local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/tftpd/tasks/main.yml", "options": {"name": "Save tftpd local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/tftpd.fact.j2", "dest": "/etc/ansible/facts.d/tftpd.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tftpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/tftpd/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/tftpd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "system_groups", "defined_in": "testdata/scm_repo/roles/system_groups", "task_yamls": ["testdata/scm_repo/roles/system_groups/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create a fact that knows the Ansible connection type", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Create a fact that knows the Ansible connection type", "tags": ["meta::facts"]}, "module_options": {"system_groups__fact_ansible_connection": "{{ ansible_connection }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that requested UNIX system groups exist", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Ensure that requested UNIX system groups exist", "with_items": "{{ system_groups__combined_list | debops.debops.parse_kv_items }}", "when": "system_groups__enabled|bool and item.name|d() and item.state|d('present') not in [ 'init', 'absent', 'ignore' ]"}, "module_options": {"name": "{{ item.name }}", "gid": "{{ item.gid | d(omit) }}", "state": "present", "system": "{{ item.system | d(True) }}"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of existing UNIX accounts", "module": "ansible.builtin.getent", "index": 4, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Get list of existing UNIX accounts", "when": "system_groups__enabled|bool"}, "module_options": {"database": "passwd"}, "fqcn": "ansible.builtin.getent", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add specified UNIX accounts to system groups if present", "module": "ansible.builtin.user", "index": 5, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Add specified UNIX accounts to system groups if present", "with_items": "{{ lookup(\"template\", \"lookup/system_groups_members.j2\") | from_yaml }}", "when": "system_groups__enabled|bool", "throttle": "{{ system_groups__throttle }}"}, "module_options": {"name": "{{ item.name }}", "append": "{{ item.append }}", "groups": "{{ item.groups }}", "create_home": false}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove sudo configuration if not specified", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Remove sudo configuration if not specified", "with_items": "{{ system_groups__combined_list | debops.debops.parse_kv_items }}", "when": "system_groups__enabled|bool and system_groups__sudo_enabled|bool and item.name|d() and item.state|d('present') not in [ 'init', 'absent', 'ignore' ] and not item.sudoers|d()"}, "module_options": {"path": "/etc/sudoers.d/{{ item.sudoers_filename | d(\"system_groups-\" + item.name) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure sudo for UNIX system groups", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Configure sudo for UNIX system groups", "with_items": "{{ system_groups__combined_list | debops.debops.parse_kv_items }}", "when": "system_groups__enabled|bool and system_groups__sudo_enabled|bool and item.name|d() and item.state|d('present') not in [ 'init', 'absent', 'ignore' ] and item.sudoers|d()"}, "module_options": {"src": "etc/sudoers.d/system_groups.j2", "dest": "/etc/sudoers.d/{{ item.sudoers_filename | d(\"system_groups-\" + item.name) }}", "owner": "root", "group": "root", "mode": "0440", "validate": "/usr/sbin/visudo -cf %s"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove tmpfiles configuration if not specified", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Remove tmpfiles configuration if not specified", "with_items": "{{ system_groups__combined_list | debops.debops.parse_kv_items }}", "when": "system_groups__enabled|bool and ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') not in [ 'init', 'absent', 'ignore' ] and not item.tmpfiles|d()"}, "module_options": {"path": "/etc/tmpfiles.d/{{ item.tmpfiles_filename | d(\"system_groups-\" + item.name + \".conf\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate tmpfiles configuration for UNIX system groups", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Generate tmpfiles configuration for UNIX system groups", "with_items": "{{ system_groups__combined_list | debops.debops.parse_kv_items }}", "notify": ["Create temporary files"], "when": "system_groups__enabled|bool and ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') not in [ 'init', 'absent', 'ignore' ] and item.tmpfiles|d()"}, "module_options": {"src": "etc/tmpfiles.d/system_groups.conf.j2", "dest": "/etc/tmpfiles.d/{{ item.tmpfiles_filename | d(\"system_groups-\" + item.name + \".conf\") }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save system groups local facts", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Save system groups local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/system_groups.fact.j2", "dest": "/etc/ansible/facts.d/system_groups.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 12, "defined_in": "testdata/scm_repo/roles/system_groups/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/system_groups"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/bootstrap.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "lldpd", "defined_in": "testdata/scm_repo/roles/lldpd", "task_yamls": ["testdata/scm_repo/roles/lldpd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/lldpd/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/lldpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/lldpd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/lldpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/lldpd/tasks/main.yml", "options": {"name": "Install required packages", "register": "lldpd__register_packages", "until": "lldpd__register_packages is succeeded", "when": "lldpd__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", (lldpd__base_packages + lldpd__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/lldpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/lldpd/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists", "when": "lldpd__enabled|bool"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lldpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save lldpd local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/lldpd/tasks/main.yml", "options": {"name": "Save lldpd local facts", "notify": ["Refresh host facts"], "when": "lldpd__enabled|bool", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/lldpd.fact.j2", "dest": "/etc/ansible/facts.d/lldpd.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lldpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/lldpd/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/lldpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert daemon configuration file if requested", "module": "dpkg_divert", "index": 6, "defined_in": "testdata/scm_repo/roles/lldpd/tasks/main.yml", "options": {"name": "Divert daemon configuration file if requested", "notify": ["Restart lldpd"], "when": "lldpd__enabled|bool"}, "module_options": {"path": "/etc/default/lldpd", "state": "{{ \"present\" if ((lldpd__default_daemon_arguments + lldpd__daemon_arguments)|flatten)|d() else \"absent\" }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/lldpd"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate daemon environment configuration", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/lldpd/tasks/main.yml", "options": {"name": "Generate daemon environment configuration", "notify": ["Restart lldpd"], "when": "lldpd__enabled|bool and (lldpd__default_daemon_arguments + lldpd__daemon_arguments)|flatten|d()"}, "module_options": {"src": "etc/default/lldpd.j2", "dest": "/etc/default/lldpd", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lldpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove lldpd configuration files if requested", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/lldpd/tasks/main.yml", "options": {"name": "Remove lldpd configuration files if requested", "loop": "{{ lldpd__combined_configuration | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "notify": ["Restart lldpd"], "when": "lldpd__enabled|bool and item.state|d('present') in [ 'absent' ]"}, "module_options": {"path": "{{ \"/etc/lldpd.d/\" + item.name + \".conf\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lldpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate lldpd configuration files", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/lldpd/tasks/main.yml", "options": {"name": "Generate lldpd configuration files", "loop": "{{ lldpd__combined_configuration | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "notify": ["Restart lldpd"], "when": "lldpd__enabled|bool and item.state|d('present') not in [ 'absent', 'init', 'ignore' ]"}, "module_options": {"src": "etc/lldpd.d/template.conf.j2", "dest": "{{ \"/etc/lldpd.d/\" + item.name + \".conf\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lldpd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "postgresql", "defined_in": "testdata/scm_repo/roles/postgresql", "task_yamls": ["testdata/scm_repo/roles/postgresql/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get default PostgreSQL version", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Get default PostgreSQL version", "environment": {"LC_ALL": "C"}, "args": {"executable": "bash"}, "register": "postgresql__register_version", "check_mode": false, "changed_when": false}, "module_options": "set -o nounset -o pipefail -o errexit && apt-cache policy postgresql-client | grep -E '^\\s+Candidate:\\s+' | awk '{print $2}' | cut -d+ -f1", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set default PostgreSQL version variable", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Set default PostgreSQL version variable"}, "module_options": {"postgresql__version": "{{ (ansible_local.postgresql.version if (ansible_local.postgresql.version|d()) else (postgresql__preferred_version if postgresql__preferred_version|d() else postgresql__register_version.stdout)) }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install PostgreSQL packages", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Install PostgreSQL packages", "register": "postgresql__register_packages", "until": "postgresql__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (postgresql__base_packages + postgresql__python_packages + postgresql__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if database server is installed", "module": "ansible.builtin.shell", "index": 5, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Check if database server is installed", "environment": {"LC_MESSAGES": "C"}, "args": {"executable": "bash"}, "register": "postgresql__register_server", "changed_when": false, "check_mode": false, "failed_when": false}, "module_options": "set -o nounset -o pipefail -o errexit && dpkg-query -W -f='${Version}\\n' 'postgresql' | grep -v '^$'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure system-wide user to cluster mapping", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Configure system-wide user to cluster mapping"}, "module_options": {"src": "etc/postgresql-common/user_clusters.j2", "dest": "/etc/postgresql-common/user_clusters", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local fact directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Make sure that Ansible local fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save PostgreSQL local facts", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Save PostgreSQL local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/postgresql.fact.j2", "dest": "/etc/ansible/facts.d/postgresql.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 9, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Drop PostgreSQL roles if requested", "module": "community.postgresql.postgresql_user", "index": 10, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Drop PostgreSQL roles if requested", "with_flattened": ["{{ postgresql__roles }}", "{{ postgresql_roles|d([]) }}", "{{ postgresql__dependent_roles }}"], "become": true, "become_user": "{{ postgresql__user }}", "delegate_to": "{{ postgresql__delegate_to }}", "when": "item.state|d('present') == 'absent'", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.name | d(item.role) }}", "port": "{{ item.port | d(postgresql__port if postgresql__port else omit) }}", "state": "absent"}, "fqcn": "community.postgresql.postgresql_user", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create PostgreSQL roles", "module": "community.postgresql.postgresql_user", "index": 11, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Create PostgreSQL roles", "with_flattened": ["{{ postgresql__roles }}", "{{ postgresql_roles|d([]) }}", "{{ postgresql__dependent_roles }}"], "become": true, "become_user": "{{ postgresql__user }}", "delegate_to": "{{ postgresql__delegate_to }}", "when": "item.state|d('present') == 'present'", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.name | d(item.role) }}", "port": "{{ item.port | d(postgresql__port if postgresql__port else omit) }}", "password": "{{ item.password | d(lookup(\"password\", secret + \"/postgresql/\" + postgresql__password_hostname + \"/\" + (item.port | d(postgresql__port)) + \"/credentials/\" + item.name | d(item.role) + \"/password \" + \"length=\" + postgresql__password_length + \" chars=\" + postgresql__password_characters)) }}", "encrypted": "{{ item.encrypted | d(True) }}", "expires": "{{ item.expires | d(omit) }}", "role_attr_flags": "{{ (item.flags|d() | join(\",\")) | d(omit) }}", "state": "present"}, "fqcn": "community.postgresql.postgresql_user", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Drop PostgreSQL databases if requested", "module": "community.postgresql.postgresql_db", "index": 12, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Drop PostgreSQL databases if requested", "with_flattened": ["{{ postgresql__databases }}", "{{ postgresql_databases|d([]) }}", "{{ postgresql__dependent_databases }}"], "become": true, "become_user": "{{ postgresql__user }}", "delegate_to": "{{ postgresql__delegate_to }}", "when": "item.state|d('present') == 'absent'"}, "module_options": {"name": "{{ item.name | d(item.database) }}", "port": "{{ item.port | d(postgresql__port if postgresql__port else omit) }}", "state": "absent"}, "fqcn": "community.postgresql.postgresql_db", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create PostgreSQL databases", "module": "community.postgresql.postgresql_db", "index": 13, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Create PostgreSQL databases", "with_flattened": ["{{ postgresql__databases }}", "{{ postgresql_databases|d([]) }}", "{{ postgresql__dependent_databases }}"], "become": true, "become_user": "{{ postgresql__user }}", "delegate_to": "{{ postgresql__delegate_to }}", "when": "(item.state|d('present') == 'present') and item.create_db|d(True)"}, "module_options": {"name": "{{ item.name | d(item.database) }}", "port": "{{ item.port | d(postgresql__port if postgresql__port else omit) }}", "owner": "{{ item.owner | d(omit) }}", "template": "{{ item.template | d(omit) }}", "encoding": "{{ item.encoding | d(omit) }}", "lc_collate": "{{ item.lc_collate | d(omit) }}", "lc_ctype": "{{ item.lc_ctype | d(omit) }}", "state": "present"}, "fqcn": "community.postgresql.postgresql_db", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Enable or disable specified database extensions", "module": "community.postgresql.postgresql_ext", "index": 14, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Enable or disable specified database extensions", "with_flattened": ["{{ postgresql__extensions }}", "{{ postgresql__dependent_extensions }}"], "become": true, "become_user": "{{ postgresql__user }}", "delegate_to": "{{ postgresql__delegate_to }}", "when": "item.state|d('present') in ['present', 'absent']"}, "module_options": {"db": "{{ item.database }}", "name": "{{ item.extension }}", "port": "{{ item.port | d(postgresql__port if postgresql__port else omit) }}", "state": "{{ item.state | d(\"present\") }}"}, "fqcn": "community.postgresql.postgresql_ext", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Grant public schema permissions", "module": "community.postgresql.postgresql_privs", "index": 15, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Grant public schema permissions", "with_flattened": ["{{ postgresql__databases }}", "{{ postgresql_databases|d([]) }}", "{{ postgresql__dependent_databases }}"], "become": true, "become_user": "{{ postgresql__user }}", "delegate_to": "{{ postgresql__delegate_to }}", "when": "(item.state|d('present') == 'present') and item.owner|d()"}, "module_options": {"roles": "{{ item.owner }}", "port": "{{ item.port | d(postgresql__port if postgresql__port else omit) }}", "type": "{{ item.type | d(\"schema\") }}", "database": "{{ item.name | d(item.database) }}", "objs": "{{ item.objs | d(\"public\") }}", "privs": "{{ item.public_privs | d([\"ALL\"]) | join(\",\") }}", "grant_option": "{{ item.grant_option | d(\"yes\") }}", "state": "present"}, "fqcn": "community.postgresql.postgresql_privs", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Grant PostgreSQL groups", "module": "community.postgresql.postgresql_privs", "index": 16, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Grant PostgreSQL groups", "with_flattened": ["{{ postgresql__groups }}", "{{ postgresql_groups|d([]) }}", "{{ postgresql__dependent_groups }}"], "become": true, "become_user": "{{ postgresql__user }}", "delegate_to": "{{ postgresql__delegate_to }}", "when": "(item.state|d('present') == 'present') and item.enabled|d(True)|bool"}, "module_options": {"roles": "{{ item.roles | join(\",\") }}", "port": "{{ item.port | d(postgresql__port if postgresql__port else omit) }}", "type": "group", "database": "{{ item.database }}", "objs": "{{ item.groups | join(\",\") }}", "grant_option": "{{ item.grant_option | d(omit) }}", "state": "present"}, "fqcn": "community.postgresql.postgresql_privs", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Grant database privileges to PostgreSQL roles", "module": "community.postgresql.postgresql_user", "index": 17, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Grant database privileges to PostgreSQL roles", "with_flattened": ["{{ postgresql__roles }}", "{{ postgresql_roles|d([]) }}", "{{ postgresql__dependent_roles }}"], "become": true, "become_user": "{{ postgresql__user }}", "delegate_to": "{{ postgresql__delegate_to }}", "when": "(item.state|d('present') == 'present') and (item.db|d() and item.priv|d())", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.name | d(item.role) }}", "port": "{{ item.port | d(postgresql__port if postgresql__port else omit) }}", "db": "{{ item.db }}", "priv": "{{ item.priv | join(\"/\") }}", "state": "present"}, "fqcn": "community.postgresql.postgresql_user", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure required system groups exist", "module": "ansible.builtin.group", "index": 18, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Make sure required system groups exist", "with_flattened": ["{{ postgresql__pgpass }}", "{{ postgresql_pgpass|d([]) }}", "{{ postgresql__dependent_pgpass }}"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.group | d(item.owner) }}", "state": "present", "system": "{{ item.system | d(True) }}"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure required system accounts exist", "module": "ansible.builtin.user", "index": 19, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Make sure required system accounts exist", "with_flattened": ["{{ postgresql__pgpass }}", "{{ postgresql_pgpass|d([]) }}", "{{ postgresql__dependent_pgpass }}"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.owner }}", "group": "{{ item.group | d(item.owner) }}", "home": "{{ item.home | d(omit) }}", "state": "present", "system": "{{ item.system | d(True) }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Populate ~/.pgpass file", "module": "ansible.builtin.lineinfile", "index": 20, "defined_in": "testdata/scm_repo/roles/postgresql/tasks/main.yml", "options": {"name": "Populate ~/.pgpass file", "with_flattened": ["{{ postgresql__pgpass }}", "{{ postgresql_pgpass|d([]) }}", "{{ postgresql__dependent_pgpass }}"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"dest": "{{ \"~\" + item.owner }}/.pgpass", "regexp": "{{ \"^\" + ([ ((item.server  | d(postgresql__server if postgresql__server else \"localhost\")) | replace(\".\",\"\\.\")), (item.port     | d(postgresql__port)), (item.database | d(\"\\*\")), (item.name     | d(item.role | d(item.owner | d(\"\\*\")))) ] | join(\":\") ) + \":\" }}", "line": "{{ [ (item.server   | d(postgresql__server if postgresql__server else \"localhost\")), (item.port     | d(postgresql__port)), (item.database | d(\"*\")), (item.role     | d(item.owner)), (item.password | d(lookup(\"password\", secret + \"/postgresql/\" + (item.server | d(postgresql__password_hostname)) + \"/\" + (item.port | d(postgresql__port)) + \"/credentials/\" + item.name | d(item.role | d(item.owner)) + \"/password length=\" + postgresql__password_length) ) | regex_replace(\"\\\\\", \"\\\\\\\\\" ) | regex_replace(\":\", \"\\:\" )) ] | join(\":\") }}", "state": "present", "create": true, "owner": "{{ item.owner }}", "group": "{{ item.owner }}", "mode": "0600"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/postgresql"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "netbase", "defined_in": "testdata/scm_repo/roles/netbase", "task_yamls": ["testdata/scm_repo/roles/netbase/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/netbase/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/netbase"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/netbase/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/netbase"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/netbase/tasks/main.yml", "options": {"name": "Install required packages", "register": "netbase__register_packages", "until": "netbase__register_packages is succeeded", "when": "netbase__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", (netbase__base_packages + netbase__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/netbase"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/netbase/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/netbase"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save netbase local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/netbase/tasks/main.yml", "options": {"name": "Save netbase local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/netbase.fact.j2", "dest": "/etc/ansible/facts.d/netbase.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/netbase"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/netbase/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/netbase"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage the hostname", "module": "ansible.builtin.hostname", "index": 6, "defined_in": "testdata/scm_repo/roles/netbase/tasks/main.yml", "options": {"name": "Manage the hostname", "notify": ["Refresh host facts"], "when": "netbase__enabled|bool and netbase__hostname_config_enabled|bool"}, "module_options": {"name": "{{ netbase__hostname }}"}, "fqcn": "ansible.builtin.hostname", "used_in": ["testdata/scm_repo/roles/netbase"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate /etc/hosts database", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/netbase/tasks/main.yml", "options": {"name": "Generate /etc/hosts database", "notify": ["Refresh host facts"], "when": "netbase__enabled|bool and netbase__hosts_config_type == 'template'"}, "module_options": {"src": "etc/hosts.j2", "dest": "/etc/hosts", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/netbase"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage entries in /etc/hosts", "module": "ansible.builtin.lineinfile", "index": 8, "defined_in": "testdata/scm_repo/roles/netbase/tasks/main.yml", "options": {"name": "Manage entries in /etc/hosts", "loop": "{{ netbase__combined_hosts | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {item.name: (item.value|d([])) | selectattr(\"name\", \"defined\") | map(attribute=\"name\") | list} }}"}, "notify": ["Refresh host facts"], "when": "netbase__enabled|bool and netbase__hosts_config_type == 'lineinfile' and item.name|d()"}, "module_options": {"dest": "/etc/hosts", "regexp": "^{{ item.name | replace(\".\",\"\\.\") }}\\s+", "line": "{{ item.name }}\t{{ ('\t' if (item.name | string | length < 8) else '') }}{{ item.value if (item.value is string) else ((item.value|d()) | selectattr('name', 'defined') | map(attribute='name') | list | join(' ')) }}", "state": "{{ \"present\" if item.value|d() else \"absent\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/netbase"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage entries in /etc/networks", "module": "ansible.builtin.lineinfile", "index": 9, "defined_in": "testdata/scm_repo/roles/netbase/tasks/main.yml", "options": {"name": "Manage entries in /etc/networks", "with_dict": "{{ netbase__networks | combine(netbase__group_networks, netbase__host_networks) }}", "notify": ["Refresh host facts"], "when": "netbase__enabled|bool"}, "module_options": {"dest": "/etc/networks", "regexp": "^{{ item.key | replace(\".\",\"\\.\") }}\\s+", "line": "{{ item.key }}\t{{ item.value if (item.value is string) else (item.value|d() | join(' ')) }}", "state": "{{ \"present\" if item.value|d() else \"absent\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/netbase"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if databases were modified", "module": "ansible.builtin.meta", "index": 10, "defined_in": "testdata/scm_repo/roles/netbase/tasks/main.yml", "options": {"name": "Update Ansible facts if databases were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/netbase"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/bootstrap.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "saslauthd", "defined_in": "testdata/scm_repo/roles/saslauthd", "task_yamls": ["testdata/scm_repo/roles/saslauthd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Install required packages", "register": "saslauthd__register_packages", "until": "saslauthd__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (saslauthd__base_packages + saslauthd__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop saslauthd instance before removal", "module": "ansible.builtin.command", "index": 4, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Stop saslauthd instance before removal", "with_items": "{{ saslauthd__combined_instances | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.socket_path|d() and item.state|d('present') == 'absent'"}, "module_options": "/etc/init.d/saslauthd stop-instance saslauthd-{{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove saslauthd instance if requested", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Remove saslauthd instance if requested", "with_items": "{{ saslauthd__combined_instances | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.socket_path|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "/etc/default/saslauthd-{{ item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate saslauthd instance configuration", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Generate saslauthd instance configuration", "with_items": "{{ saslauthd__combined_instances | debops.debops.parse_kv_items }}", "notify": ["Restart saslauthd"], "when": "item.name|d() and item.socket_path|d() and item.state|d('present') != 'absent'"}, "module_options": {"src": "etc/default/saslauthd.j2", "dest": "/etc/default/saslauthd-{{ item.name }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that required UNIX groups exist", "module": "ansible.builtin.group", "index": 7, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Ensure that required UNIX groups exist", "with_items": "{{ saslauthd__combined_instances | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.group|d() and item.state|d('present') != 'absent'"}, "module_options": {"name": "{{ item.group }}", "state": "present", "system": "{{ (item.system | d(True)) | bool }}"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create SASL config directory", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Create SASL config directory", "with_items": "{{ saslauthd__combined_instances | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.config_path|d() and item.state|d('present') != 'absent'"}, "module_options": {"path": "{{ item.config_path | dirname }}", "state": "directory", "owner": "{{ item.config_dir_owner | d(\"root\") }}", "group": "{{ item.config_dir_group | d(\"root\") }}", "mode": "{{ item.config_dir_mode   | d(\"0755\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove SASL instance configuration if requested", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Remove SASL instance configuration if requested", "with_items": "{{ saslauthd__combined_instances | debops.debops.parse_kv_items }}", "notify": "{{ item.notify if item.notify|d() else omit }}", "when": "item.name|d() and item.config_path|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ item.config_path }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate SASL instance configuration", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Generate SASL instance configuration", "with_items": "{{ saslauthd__combined_instances | debops.debops.parse_kv_items }}", "notify": "{{ item.notify if item.notify|d() else omit }}", "when": "item.name|d() and item.config_path|d() and item.state|d('present') != 'absent'"}, "module_options": {"src": "etc/instance.conf.j2", "dest": "{{ item.config_path }}", "owner": "{{ item.config_owner | d(\"root\") }}", "group": "{{ item.config_group | d(\"sasl\") }}", "mode": "{{ item.config_mode | d(\"0640\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove SASL LDAP profiles if requested", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Remove SASL LDAP profiles if requested", "with_items": "{{ saslauthd__ldap_combined_profiles | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ \"/etc/saslauthd.conf\" if (item.name == \"global\") else \"/etc/saslauthd-\" + item.name + \".conf\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate SASL LDAP profiles", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Generate SASL LDAP profiles", "with_items": "{{ saslauthd__ldap_combined_profiles | debops.debops.parse_kv_items }}", "notify": ["Restart saslauthd"], "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"src": "etc/saslauthd.conf.j2", "dest": "{{ \"/etc/saslauthd.conf\" if (item.name == \"global\") else \"/etc/saslauthd-\" + item.name + \".conf\" }}", "owner": "{{ item.owner | d(\"root\") }}", "group": "{{ item.group | d(\"sasl\") }}", "mode": "{{ item.mode | d(\"0640\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of dpkg-stateoverride paths", "module": "ansible.builtin.shell", "index": 13, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Get list of dpkg-stateoverride paths", "args": {"executable": "bash"}, "register": "saslauthd__register_statoverride", "changed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && dpkg-statoverride --list | awk '{print $4}'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove a dpkg-statoverride entry if requested", "module": "ansible.builtin.command", "index": 14, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Remove a dpkg-statoverride entry if requested", "with_items": "{{ saslauthd__combined_instances | debops.debops.parse_kv_items }}", "notify": ["Restart saslauthd"], "when": "item.name|d() and item.socket_path|d() and item.state|d('present') == 'absent' and item.socket_path in saslauthd__register_statoverride.stdout_lines"}, "module_options": "dpkg-statoverride --remove {{ item.socket_path }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create a dpkg-statoverride entry", "module": "ansible.builtin.command", "index": 15, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Create a dpkg-statoverride entry", "with_items": "{{ saslauthd__combined_instances | debops.debops.parse_kv_items }}", "notify": ["Restart saslauthd"], "when": "item.name|d() and item.socket_path|d() and item.state|d('present') != 'absent' and item.socket_path not in saslauthd__register_statoverride.stdout_lines"}, "module_options": "dpkg-statoverride --add {{ item.socket_owner | d('root') }} {{ item.socket_group | d('sasl') }} {{ item.socket_mode  | d('710') }} {{ item.socket_path }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 16, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save saslauthd local facts", "module": "ansible.builtin.template", "index": 17, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Save saslauthd local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/saslauthd.fact.j2", "dest": "/etc/ansible/facts.d/saslauthd.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 18, "defined_in": "testdata/scm_repo/roles/saslauthd/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/saslauthd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "etesync", "defined_in": "testdata/scm_repo/roles/etesync", "task_yamls": ["testdata/scm_repo/roles/etesync/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Install required packages", "register": "etesync__register_packages", "until": "etesync__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (etesync__base_packages + etesync__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create EteSync system group", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Create EteSync system group"}, "module_options": {"name": "{{ etesync__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create EteSync system user", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Create EteSync system user"}, "module_options": {"name": "{{ etesync__user }}", "group": "{{ etesync__group }}", "home": "{{ etesync__home }}", "comment": "{{ etesync__gecos }}", "shell": "{{ etesync__shell }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create additional directories used by EteSync", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Create additional directories used by EteSync", "with_items": ["{{ etesync__etc }}", "{{ etesync__src }}", "{{ etesync__git_dest | dirname }}", "{{ etesync__lib }}", "{{ etesync__data }}"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "{{ etesync__user }}", "group": "{{ etesync__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone EteSync source code", "module": "ansible.builtin.git", "index": 6, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Clone EteSync source code", "become": true, "become_user": "{{ etesync__user }}", "register": "etesync__register_source"}, "module_options": {"repo": "{{ etesync__git_repo }}", "dest": "{{ etesync__git_checkout }}", "separate_git_dir": "{{ etesync__git_dest }}", "version": "{{ etesync__git_version }}", "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Verify git tag signature", "module": "ansible.builtin.shell", "index": 7, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Verify git tag signature", "args": {"chdir": "{{ etesync__git_checkout }}", "warn": false}, "become": true, "become_user": "{{ etesync__user }}", "changed_when": false}, "module_options": "git verify-tag --raw \"$(git describe)\"", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install EteSync requirements in virtualenv", "module": "ansible.builtin.pip", "index": 8, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Install EteSync requirements in virtualenv", "register": "etesync__register_pip_install", "until": "etesync__register_pip_install is succeeded", "become": true, "become_user": "{{ etesync__user }}", "notify": ["Restart gunicorn for etesync"], "when": "etesync__register_source is changed"}, "module_options": {"virtualenv": "{{ etesync__virtualenv }}", "virtualenv_python": "python3", "virtualenv_site_packages": true, "requirements": "{{ etesync__git_checkout + \"/requirements.txt\" }}", "extra_args": "--upgrade"}, "fqcn": "ansible.builtin.pip", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clean up stale Python bytecode", "module": "ansible.builtin.command", "index": 9, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Clean up stale Python bytecode", "args": {"chdir": "{{ etesync__git_checkout }}"}, "become": true, "become_user": "{{ etesync__user }}", "when": "etesync__register_source is changed"}, "module_options": "find . -name '*.pyc' -delete", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Exclude secret files from etckeeper", "module": "ansible.builtin.copy", "index": 10, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Exclude secret files from etckeeper", "tags": ["role::etesync:config"]}, "module_options": {"content": "secret.txt\n", "dest": "{{ etesync__etc + \"/.gitignore\" }}", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate EteSync configuration", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Generate EteSync configuration", "register": "etesync__register_config", "notify": ["Restart gunicorn for etesync"], "tags": ["role::etesync:config"]}, "module_options": {"src": "etc/etesync-server/etesync-server.ini.j2", "dest": "{{ etesync__etc + \"/etesync-server.ini\" }}", "owner": "root", "group": "{{ etesync__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate extended EteSync configuration", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Generate extended EteSync configuration", "register": "etesync__register_config", "notify": ["Restart gunicorn for etesync"], "tags": ["role::etesync:config"]}, "module_options": {"src": "usr/local/lib/etesync/app/etesync_site_settings.py.j2", "dest": "{{ etesync__git_checkout + \"/etesync_site_settings.py\" }}", "owner": "{{ etesync__user }}", "group": "{{ etesync__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate EteSync secret.txt file", "module": "ansible.builtin.template", "index": 13, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Generate EteSync secret.txt file", "notify": ["Restart gunicorn for etesync"], "tags": ["role::etesync:config"]}, "module_options": {"src": "etc/etesync-server/secret.txt.j2", "dest": "{{ etesync__config_secret_key_filepath }}", "owner": "root", "group": "{{ etesync__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Perform database installation or migration", "module": "ansible.builtin.shell", "index": 14, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Perform database installation or migration", "args": {"chdir": "{{ etesync__git_checkout }}", "executable": "bash"}, "become": true, "become_user": "{{ etesync__user }}", "changed_when": "(\"No migrations to apply.\" not in etesync__register_migration.stdout)", "when": "etesync__register_source is changed or etesync__register_config is changed", "register": "etesync__register_migration"}, "module_options": "## -o nounset can be enabled with virtualenv >= 16.2.\n## Ref: https://github.com/pypa/virtualenv/pull/922\nset -o pipefail -o errexit;\nsource {{ etesync__virtualenv }}/bin/activate\n./manage.py migrate\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create superuser account", "module": "ansible.builtin.shell", "index": 15, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Create superuser account", "environment": {"SUPERUSER_NAME": "{{ etesync__superuser_name }}", "SUPERUSER_EMAIL": "{{ etesync__superuser_email }}", "SUPERUSER_PASSWORD": "{{ etesync__superuser_password }}"}, "args": {"chdir": "{{ etesync__git_checkout }}", "executable": "bash"}, "become": true, "become_user": "{{ etesync__user }}", "when": "(\"etesync\" not in ansible_local)", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "set -o pipefail -o errexit; source {{ etesync__virtualenv }}/bin/activate; echo \"from django.contrib.auth.models import User; User.objects.create_superuser('${SUPERUSER_NAME}', '${SUPERUSER_EMAIL}', '${SUPERUSER_PASSWORD}')\" | ./manage.py shell", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Send mail with the full URL of the EteSync server", "module": "mail", "index": 16, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Send mail with the full URL of the EteSync server", "when": "(etesync__http_psk_subpath|d() and etesync__mail_to|d() and \"etesync\" not in ansible_local)"}, "module_options": {"from": "root@{{ ansible_fqdn }}", "subject": "{{ etesync__mail_subject }}", "to": "{{ etesync__mail_to|d([]) | list | join(\",\") }}", "charset": "utf8", "body": "{{ etesync__mail_body }}"}, "fqcn": "community.general.mail", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 17, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save EteSync local facts", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Save EteSync local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/etesync.fact.j2", "dest": "/etc/ansible/facts.d/etesync.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 19, "defined_in": "testdata/scm_repo/roles/etesync/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/etesync"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "netbox", "defined_in": "testdata/scm_repo/roles/netbox", "task_yamls": ["testdata/scm_repo/roles/netbox/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Install required packages", "register": "netbox__register_packages", "until": "netbox__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (netbox__base_packages + netbox__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create NetBox system group", "module": "ansible.builtin.group", "index": 2, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Create NetBox system group"}, "module_options": {"name": "{{ netbox__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create NetBox system user", "module": "ansible.builtin.user", "index": 3, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Create NetBox system user"}, "module_options": {"name": "{{ netbox__user }}", "group": "{{ netbox__group }}", "home": "{{ netbox__home }}", "comment": "{{ netbox__gecos }}", "shell": "{{ netbox__shell }}", "state": "present", "system": true, "generate_ssh_key": "{{ netbox__napalm_ssh_generate | bool }}", "ssh_key_bits": "{{ netbox__napalm_ssh_generate_bits }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create additional directories used by NetBox", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Create additional directories used by NetBox", "with_items": ["{{ netbox__src }}", "{{ netbox__lib }}", "{{ netbox__data }}", "{{ netbox__config_media_root }}", "{{ netbox__config_reports_root }}", "{{ netbox__config_scripts_root }}"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "{{ netbox__user }}", "group": "{{ netbox__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone NetBox source code", "module": "ansible.builtin.git", "index": 5, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Clone NetBox source code", "become": true, "become_user": "{{ netbox__user }}", "register": "netbox__register_source", "until": "netbox__register_source is succeeded"}, "module_options": {"repo": "{{ netbox__git_repo }}", "dest": "{{ netbox__git_dest }}", "version": "{{ netbox__git_version }}", "bare": true, "update": true, "verify_commit": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if NetBox is installed", "module": "ansible.builtin.stat", "index": 6, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Check if NetBox is installed", "register": "netbox__register_installed"}, "module_options": {"path": "{{ netbox__git_checkout }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check current virtualenv version", "module": "ansible.builtin.stat", "index": 7, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Check current virtualenv version", "register": "netbox__register_virtualenv_version"}, "module_options": {"path": "{{ netbox__virtualenv + \"/bin/python\" }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove old python2 based virtualenv", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Remove old python2 based virtualenv", "register": "netbox__register_virtalenv_deleted", "when": "( netbox__virtualenv_version == '3' and netbox__register_virtualenv_version.stat.lnk_target|d() == 'python2' )"}, "module_options": {"path": "{{ netbox__virtualenv }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create NetBox checkout directory", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Create NetBox checkout directory"}, "module_options": {"path": "{{ netbox__git_checkout }}", "state": "directory", "owner": "{{ netbox__user }}", "group": "{{ netbox__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare NetBox git worktree", "module": "ansible.builtin.copy", "index": 10, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Prepare NetBox git worktree"}, "module_options": {"content": "gitdir: {{ netbox__git_dest }}", "dest": "{{ netbox__git_checkout + \"/.git\" }}", "owner": "{{ netbox__user }}", "group": "{{ netbox__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get commit hash of target checkout", "module": "ansible.builtin.command", "index": 11, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Get commit hash of target checkout", "environment": {"GIT_WORK_TREE": "{{ netbox__git_checkout }}"}, "args": {"chdir": "{{ netbox__git_dest }}", "warn": false}, "become": true, "become_user": "{{ netbox__user }}", "register": "netbox__register_target_branch", "changed_when": "netbox__register_target_branch.stdout != netbox__register_source.before"}, "module_options": "git rev-parse {{ netbox__git_version }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Checkout NetBox", "module": "ansible.builtin.command", "index": 12, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Checkout NetBox", "environment": {"GIT_WORK_TREE": "{{ netbox__git_checkout }}"}, "args": {"chdir": "{{ netbox__git_dest }}", "warn": false}, "become": true, "become_user": "{{ netbox__user }}", "register": "netbox__register_checkout", "until": "netbox__register_checkout is succeeded", "notify": ["Restart gunicorn for netbox", "Restart netbox internal appserver", "Restart netbox Request Queue Worker"], "when": "(netbox__register_source.before is undefined or (netbox__register_source.before|d() and netbox__register_target_branch.stdout|d() and netbox__register_source.before != netbox__register_target_branch.stdout) or not netbox__register_installed.stat.exists|bool or netbox__register_virtalenv_deleted.changed|bool)"}, "module_options": "git checkout -f {{ netbox__git_version }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Python virtualenv for NetBox", "module": "ansible.builtin.pip", "index": 13, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Create Python virtualenv for NetBox", "become": true, "become_user": "{{ netbox__user }}", "register": "netbox__register_virtualenv", "until": "netbox__register_virtualenv is succeeded", "changed_when": "(netbox__register_virtualenv is success and netbox__register_virtualenv.stdout is search('New python executable in'))"}, "module_options": {"name": ["pip", "setuptools"], "virtualenv": "{{ netbox__virtualenv }}", "virtualenv_python": "{{ \"python\" + netbox__virtualenv_version }}", "state": "forcereinstall"}, "fqcn": "ansible.builtin.pip", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clean up stale Python bytecode", "module": "ansible.builtin.command", "index": 14, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Clean up stale Python bytecode", "args": {"chdir": "{{ netbox__git_checkout + \"/netbox\" }}"}, "become": true, "become_user": "{{ netbox__user }}", "when": "netbox__register_checkout is changed"}, "module_options": "find . -name '*.pyc' -delete", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install NetBox requirements in virtualenv", "module": "ansible.builtin.pip", "index": 15, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Install NetBox requirements in virtualenv", "register": "netbox__register_pip_install", "until": "netbox__register_pip_install is succeeded", "become": true, "become_user": "{{ netbox__user }}", "notify": ["Restart gunicorn for netbox", "Restart netbox internal appserver", "Restart netbox Request Queue Worker"], "when": "netbox__register_checkout is changed"}, "module_options": {"virtualenv": "{{ netbox__virtualenv }}", "requirements": "{{ netbox__git_checkout + \"/requirements.txt\" }}", "extra_args": "--upgrade"}, "fqcn": "ansible.builtin.pip", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install additional Python modules in virtualenv", "module": "ansible.builtin.pip", "index": 16, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Install additional Python modules in virtualenv", "become": true, "become_user": "{{ netbox__user }}", "with_flattened": "{{ netbox__virtualenv_pip_packages }}", "when": "netbox__register_checkout is changed and item.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"name": "{{ item.name | d(item) }}", "version": "{{ item.version | d(omit) }}", "virtualenv": "{{ netbox__virtualenv }}"}, "fqcn": "ansible.builtin.pip", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate NetBox configuration", "module": "ansible.builtin.template", "index": 17, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Generate NetBox configuration", "notify": ["Restart gunicorn for netbox", "Restart netbox internal appserver", "Restart netbox Request Queue Worker"], "register": "netbox__register_configuration", "tags": ["role::netbox:config"]}, "module_options": {"src": "usr/local/lib/netbox/configuration.py.j2", "dest": "{{ netbox__git_checkout + \"/netbox/netbox/configuration.py\" }}", "owner": "{{ netbox__user }}", "group": "{{ netbox__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate NetBox LDAP configuration", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Generate NetBox LDAP configuration", "notify": ["Restart gunicorn for netbox", "Restart netbox internal appserver", "Restart netbox Request Queue Worker"], "when": "netbox__ldap_enabled|bool", "tags": ["role::netbox:config"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "usr/local/lib/netbox/ldap_config.py.j2", "dest": "{{ netbox__git_checkout + \"/netbox/netbox/ldap_config.py\" }}", "owner": "{{ netbox__user }}", "group": "{{ netbox__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Perform database installation or migration", "module": "ansible.builtin.shell", "index": 19, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Perform database installation or migration", "environment": {"VIRTUAL_ENV": "{{ netbox__virtualenv }}", "PATH": "{{ netbox__virtualenv_env_path }}"}, "become": true, "become_user": "{{ netbox__user }}", "when": "netbox__register_checkout is changed", "register": "netbox__register_migration"}, "module_options": {"cmd": "set -o nounset -o pipefail -o errexit\n./manage.py migrate\n./manage.py trace_paths --no-input || :\n(cd .. && mkdocs build)\n./manage.py collectstatic --no-input\n./manage.py remove_stale_contenttypes --no-input\n./manage.py clearsessions\n", "chdir": "{{ netbox__git_checkout + \"/netbox\" }}", "executable": "bash"}, "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Django superuser account", "module": "django_manage", "index": 20, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Create Django superuser account", "environment": {"DJANGO_SUPERUSER_PASSWORD": "{{ netbox__superuser_password }}"}, "become": true, "become_user": "{{ netbox__user }}", "when": "(not netbox__register_installed.stat.exists|bool and not netbox__register_migration.stdout is search('No migrations to apply.'))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"command": "createsuperuser --noinput --username={{ netbox__superuser_name }} --email={{ netbox__superuser_email }}", "app_path": "{{ netbox__git_checkout + \"/netbox\" }}", "virtualenv": "{{ netbox__virtualenv }}"}, "fqcn": "community.general.django_manage", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate systemd service unit", "module": "ansible.builtin.template", "index": 21, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Generate systemd service unit", "notify": ["Reload systemd daemon (netbox)", "Restart gunicorn for netbox", "Restart netbox internal appserver"], "when": "netbox__app_internal_appserver|bool"}, "module_options": {"src": "etc/systemd/system/netbox.service.j2", "dest": "/etc/systemd/system/netbox.service", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate NetBox RQ systemd service unit", "module": "ansible.builtin.template", "index": 22, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Generate NetBox RQ systemd service unit", "notify": ["Reload systemd daemon (netbox)", "Restart netbox Request Queue Worker"], "when": "netbox__app_internal_appserver|bool"}, "module_options": {"src": "etc/systemd/system/netbox-rq.service.j2", "dest": "/etc/systemd/system/netbox-rq.service", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate NetBox netbox-manage script", "module": "ansible.builtin.template", "index": 23, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Generate NetBox netbox-manage script"}, "module_options": {"src": "usr/local/bin/netbox-manage.j2", "dest": "{{ netbox__bin + \"/netbox-manage\" }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 24, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save NetBox local facts", "module": "ansible.builtin.template", "index": 25, "defined_in": "testdata/scm_repo/roles/netbox/tasks/main.yml", "options": {"name": "Save NetBox local facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/netbox.fact.j2", "dest": "/etc/ansible/facts.d/netbox.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/netbox"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "nodejs", "defined_in": "testdata/scm_repo/roles/nodejs", "task_yamls": ["testdata/scm_repo/roles/nodejs/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/nodejs/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nodejs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove conflicting APT packages", "module": "ansible.builtin.apt", "index": 1, "defined_in": "testdata/scm_repo/roles/nodejs/tasks/main.yml", "options": {"name": "Remove conflicting APT packages", "when": "ansible_pkg_mgr == 'apt'"}, "module_options": {"name": "{{ q(\"flattened\", nodejs__remove_packages) }}", "state": "absent", "purge": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/nodejs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install APT packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/nodejs/tasks/main.yml", "options": {"name": "Install APT packages", "notify": ["Refresh host facts"], "register": "nodejs__register_packages", "until": "nodejs__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (nodejs__base_packages + nodejs__packages + nodejs__group_packages + nodejs__host_packages + nodejs__dependent_packages)) }}", "state": "{{ \"latest\" if (nodejs__node_upstream | bool and (ansible_local|d() and ansible_local.nodejs|d() and ansible_local.nodejs.node_upstream is defined and not ansible_local.nodejs.node_upstream|bool)) else \"present\" }}", "autoremove": "{{ True if (nodejs__node_upstream | bool and (ansible_local|d() and ansible_local.nodejs|d() and ansible_local.nodejs.node_upstream is defined and not ansible_local.nodejs.node_upstream|bool)) else omit }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/nodejs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Maintain 'yarn' symlink for the 'yarnpkg' package", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/nodejs/tasks/main.yml", "options": {"name": "Maintain 'yarn' symlink for the 'yarnpkg' package"}, "module_options": {"path": "/usr/local/bin/yarn", "src": "{{ omit if nodejs__yarn_upstream|bool else \"/usr/bin/yarnpkg\" }}", "state": "{{ \"absent\" if nodejs__yarn_upstream|bool else \"link\" }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nodejs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install NPM packages", "module": "npm", "index": 4, "defined_in": "testdata/scm_repo/roles/nodejs/tasks/main.yml", "options": {"name": "Install NPM packages", "with_flattened": ["{{ nodejs__npm_packages }}", "{{ nodejs__npm_group_packages }}", "{{ nodejs__npm_host_packages }}", "{{ nodejs__npm_dependent_packages }}"]}, "module_options": {"name": "{{ item.name           | d(item) }}", "state": "{{ item.state          | d(\"present\") }}", "global": "{{ (item.global        | d(True)) | bool }}", "production": "{{ (item.production    | d(nodejs__npm_production_mode)) | bool }}", "version": "{{ item.version        | d(omit) }}", "registry": "{{ item.registry       | d(omit) }}", "executable": "{{ item.executable     | d(omit) }}", "ignore_scripts": "{{ item.ignore_scripts | d(omit) }}", "path": "{{ item.path           | d(omit) }}"}, "fqcn": "community.general.npm", "used_in": ["testdata/scm_repo/roles/nodejs"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/nodejs/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nodejs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Node.js local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/nodejs/tasks/main.yml", "options": {"name": "Save Node.js local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/nodejs.fact.j2", "dest": "/etc/ansible/facts.d/nodejs.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nodejs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/nodejs/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/nodejs"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/service/nodejs.yml"]}, {"py/object": "struct4.Role", "name": "rspamd", "defined_in": "testdata/scm_repo/roles/rspamd", "task_yamls": ["testdata/scm_repo/roles/rspamd/tasks/main_cfgdir.yml", "testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml", "testdata/scm_repo/roles/rspamd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Make sure that {{ cfgdir.path }} exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_cfgdir.yml", "options": {"name": "Make sure that {{ cfgdir.path }} exists"}, "module_options": {"path": "{{ cfgdir.path }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create configuration snippets in {{ cfgdir.path }}", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_cfgdir.yml", "options": {"name": "Create configuration snippets in {{ cfgdir.path }}", "loop": "{{ cfgdir.config | rejectattr(\"state\", \"in\", [ \"absent\", \"init\", \"ignore\" ]) }}", "loop_control": {"label": "{{ item.file }}"}, "notify": ["Restart rspamd"]}, "module_options": {"src": "etc/rspamd/snippet.j2", "dest": "{{ cfgdir.path + \"/\" + item.file }}", "owner": "{{ item.owner | d(\"root\") }}", "group": "{{ item.group | d(\"_rspamd\") }}", "mode": "{{ item.mode | d(\"0640\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate a list of created configuration snippets in {{ cfgdir.path }}", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_cfgdir.yml", "options": {"name": "Generate a list of created configuration snippets in {{ cfgdir.path }}"}, "module_options": {"rspamd__created_snippets": "{{ cfgdir.config | rejectattr(\"state\", \"in\", [ \"absent\", \"init\" ]) | map(attribute=\"file\") | map(\"regex_replace\", \"^\", cfgdir.path + \"/\") }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Find all configuration snippets in {{ cfgdir.path }}", "module": "ansible.builtin.find", "index": 3, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_cfgdir.yml", "options": {"name": "Find all configuration snippets in {{ cfgdir.path }}", "register": "rspamd__found_snippets"}, "module_options": {"paths": "{{ cfgdir.path }}", "recurse": false, "file_type": "file"}, "fqcn": "ansible.builtin.find", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove superfluous configuration snippets from {{ cfgdir.path }}", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_cfgdir.yml", "options": {"name": "Remove superfluous configuration snippets from {{ cfgdir.path }}", "loop": "{{ rspamd__found_snippets.files | map(attribute=\"path\") | list | difference(rspamd__created_snippets) }}", "notify": ["Restart rspamd"]}, "module_options": {"path": "{{ item }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure the DKIM directories exist", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml", "options": {"name": "Make sure the DKIM directories exist", "loop": ["/var/lib/rspamd", "/var/lib/rspamd/dkim", "/var/lib/rspamd/dkim-archive", "{{ rspamd__dkim_log_dir }}"], "when": "rspamd__dkim_enabled|d(False)"}, "module_options": {"path": "{{ item }}", "state": "directory", "mode": "0750", "owner": "_rspamd", "group": "_rspamd"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create DKIM key generation/update configuration", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml", "options": {"name": "Create DKIM key generation/update configuration", "loop": [{"config": "{{ rspamd__dkim_keygen_combined_configuration }}", "dest": "/etc/rspamd/dkim-keygen.json"}, {"config": "{{ rspamd__dkim_update_combined_configuration }}", "dest": "/etc/rspamd/dkim-update.json"}], "loop_control": {"label": "{{ item.dest }}"}, "when": "rspamd__dkim_enabled|d(False)"}, "module_options": {"src": "etc/rspamd/dkim-json.j2", "dest": "{{ item.dest }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install DKIM scripts", "module": "ansible.builtin.copy", "index": 2, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml", "options": {"name": "Install DKIM scripts", "with_items": [{"src": "usr/local/sbin/rspamd-dkim-keygen", "dest": "/usr/local/sbin/rspamd-dkim-keygen"}, {"src": "usr/local/sbin/rspamd-dkim-update", "dest": "/usr/local/sbin/rspamd-dkim-update"}], "when": "rspamd__dkim_enabled|d(False)"}, "module_options": {"src": "{{ lookup('debops.debops.file_src', item.src) }}", "dest": "{{ item.dest }}", "owner": "{{ item.owner | d(\"root\") }}", "group": "{{ item.group | d(\"root\") }}", "mode": "{{ item.mode | d(\"0755\") }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "See if a nsupdate keyfile/keytab exists on the Ansible controller", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml", "options": {"name": "See if a nsupdate keyfile/keytab exists on the Ansible controller", "when": "rspamd__dkim_enabled|d(False) and rspamd__dkim_update_method in [ \"nsupdate_tsig\", \"nsupdate_gsstsig\" ]\n"}, "module_options": {"rspamd__dkim_local_keyfile": "{{ lookup(\"debops.debops.file_src\", \"etc/rspamd/dkim_dns_key\", errors=\"ignore\") }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy nsupdate keyfile/keytab from controller to host", "module": "ansible.builtin.copy", "index": 4, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml", "options": {"name": "Copy nsupdate keyfile/keytab from controller to host", "when": "rspamd__dkim_enabled|d(False) and rspamd__dkim_update_method in [ \"nsupdate_tsig\", \"nsupdate_gsstsig\" ] and rspamd__dkim_local_keyfile is defined and rspamd__dkim_local_keyfile|length > 0\n"}, "module_options": {"src": "{{ rspamd__dkim_local_keyfile }}", "dest": "/etc/rspamd/dkim_dns_key", "owner": "root", "group": "_rspamd", "mode": "0640"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create DKIM keys", "module": "ansible.builtin.command", "index": 5, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml", "options": {"name": "Create DKIM keys", "become": true, "become_user": "_rspamd", "register": "rspamd__dkim_tmp_output", "changed_when": "rspamd__dkim_tmp_output.rc == 2", "failed_when": "rspamd__dkim_tmp_output.rc not in [ 0, 2 ]", "when": "rspamd__dkim_enabled|d(False)", "notify": ["Restart rspamd"]}, "module_options": "/usr/local/sbin/rspamd-dkim-keygen", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure DKIM key generation/rollover cron job", "module": "ansible.builtin.cron", "index": 6, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml", "options": {"name": "Configure DKIM key generation/rollover cron job"}, "module_options": {"name": "Generate/rollover DKIM keys for rspamd", "special_time": "monthly", "cron_file": "rspamd-dkim-keygen", "user": "_rspamd", "state": "{{ \"present\" if rspamd__dkim_enabled|d(False) else \"absent\" }}", "job": "/usr/local/sbin/rspamd-dkim-keygen"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Purge DKIM configuration/scripts", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml", "options": {"name": "Purge DKIM configuration/scripts", "loop": ["/etc/rspamd/dkim-keygen.json", "/etc/rspamd/dkim-update.json", "/usr/local/sbin/rspamd-dkim-keygen", "/usr/local/sbin/rspamd-dkim-update"], "when": "not rspamd__dkim_enabled|d(False)"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install rspamd packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main.yml", "options": {"name": "Install rspamd packages", "register": "rspamd__register_packages", "until": "rspamd__register_packages is succeeded", "tags": ["role::rspamd:pkg"]}, "module_options": {"name": "{{ q(\"flattened\", (rspamd__base_packages + rspamd__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that the Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main.yml", "options": {"name": "Make sure that the Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save rspamd local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main.yml", "options": {"name": "Save rspamd local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/rspamd.fact.j2", "dest": "/etc/ansible/facts.d/rspamd.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create configuration directories and files", "module": "include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main.yml", "options": {"name": "Create configuration directories and files", "loop": [{"path": "/etc/rspamd/local.d", "config": "{{ rspamd__combined_local_configuration | debops.debops.parse_kv_items(name=\"file\") }}"}, {"path": "/etc/rspamd/override.d", "config": "{{ rspamd__combined_override_configuration | debops.debops.parse_kv_items(name=\"file\") }}"}], "loop_control": {"loop_var": "cfgdir", "label": "{{ cfgdir.path }}"}}, "module_options": "main_cfgdir.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Handle DKIM configuration", "module": "include_tasks", "index": 7, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main.yml", "options": {"name": "Handle DKIM configuration"}, "module_options": "main_dkim.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts and restart Rspamd if necessary", "module": "ansible.builtin.meta", "index": 8, "defined_in": "testdata/scm_repo/roles/rspamd/tasks/main.yml", "options": {"name": "Update Ansible facts and restart Rspamd if necessary"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/rspamd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "bitcoind", "defined_in": "testdata/scm_repo/roles/bitcoind", "task_yamls": ["testdata/scm_repo/roles/bitcoind/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Ensure specified packages are in there desired state", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/bitcoind/tasks/main.yml", "options": {"name": "Ensure specified packages are in there desired state", "register": "bitcoind__register_packages", "until": "bitcoind__register_packages is succeeded", "tags": ["role::bitcoind:pkgs"]}, "module_options": {"name": "{{ q(\"flattened\", bitcoind__base_packages) }}", "state": "{{ \"present\" if (bitcoind__deploy_state == \"present\") else \"absent\" }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/bitcoind"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create bitcoind system group", "module": "ansible.builtin.group", "index": 1, "defined_in": "testdata/scm_repo/roles/bitcoind/tasks/main.yml", "options": {"name": "Create bitcoind system group"}, "module_options": {"name": "{{ bitcoind__group }}", "state": "{{ \"present\" if (bitcoind__deploy_state == \"present\") else \"absent\" }}", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/bitcoind"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create bitcoind system user", "module": "ansible.builtin.user", "index": 2, "defined_in": "testdata/scm_repo/roles/bitcoind/tasks/main.yml", "options": {"name": "Create bitcoind system user"}, "module_options": {"name": "{{ bitcoind__user }}", "group": "{{ bitcoind__group }}", "append": false, "home": "{{ bitcoind__home_path }}", "comment": "{{ bitcoind__gecos }}", "shell": "{{ bitcoind__shell }}", "state": "{{ \"present\" if (bitcoind__deploy_state == \"present\") else \"absent\" }}", "system": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/bitcoind"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure bitcoind config dir exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/bitcoind/tasks/main.yml", "options": {"name": "Ensure bitcoind config dir exists", "when": "(bitcoind__deploy_state == \"present\")"}, "module_options": {"path": "{{ bitcoind__config_dir_path }}", "owner": "{{ bitcoind__user }}", "group": "{{ bitcoind__group }}", "mode": "0750", "state": "directory"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/bitcoind"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure bitcoind", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/bitcoind/tasks/main.yml", "options": {"name": "Configure bitcoind", "when": "(bitcoind__deploy_state == \"present\")"}, "module_options": {"src": "etc/bitcoin/bitcoin.conf.j2", "dest": "{{ bitcoind__config_file_path }}", "owner": "{{ bitcoind__user }}", "group": "{{ bitcoind__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/bitcoind"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure systemd unit file for bitcoind", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/bitcoind/tasks/main.yml", "options": {"name": "Configure systemd unit file for bitcoind", "register": "bitcoind__register_systemd_unit_file", "when": "(bitcoind__deploy_state == \"present\")"}, "module_options": {"src": "etc/systemd/system/bitcoind.service.j2", "dest": "/etc/systemd/system/bitcoind.service", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/bitcoind"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set bitcoind state using systemd", "module": "ansible.builtin.systemd", "index": 6, "defined_in": "testdata/scm_repo/roles/bitcoind/tasks/main.yml", "options": {"name": "Set bitcoind state using systemd", "register": "bitcoind__register_systemd_unit_state", "when": "(bitcoind__deploy_state == \"present\" and ansible_distribution_release not in [\"trusty\"])"}, "module_options": {"name": "bitcoind", "state": "{{ \"started\" if (bitcoind__deploy_state == \"present\") else \"stopped\" }}", "enabled": true, "masked": false, "daemon_reload": "{{ bitcoind__register_systemd_unit_file is changed }}"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/bitcoind"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "slapd", "defined_in": "testdata/scm_repo/roles/slapd", "task_yamls": ["testdata/scm_repo/roles/slapd/tasks/slapd_tasks.yml", "testdata/scm_repo/roles/slapd/tasks/prepare_rfc2307bis.yml", "testdata/scm_repo/roles/slapd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "{{ item.name }}", "module": "community.general.ldap_entry", "index": 0, "defined_in": "testdata/scm_repo/roles/slapd/tasks/slapd_tasks.yml", "options": {"name": "{{ item.name }}", "run_once": "{{ item.run_once | d(False) }}", "when": "(item.objectClass|d() or item.entry_state|d()) and item.state not in [ 'init', 'ignore' ]", "tags": ["role::slapd:tasks", "role::slapd:slapacl"], "no_log": "{{ debops__no_log | d(item.no_log) | d(True if (\"userPassword\" in (item.attributes|d({})).keys() or \"olcRootPW\"    in (item.attributes|d({})).keys()) else False) }}"}, "module_options": {"dn": "{{ item.dn if (item.dn is string) else item.dn | join(\",\") }}", "objectClass": "{{ item.objectClass | d(omit) }}", "attributes": "{{ item.attributes | d(omit) }}", "state": "{{ item.entry_state | d(item.state) }}"}, "fqcn": "community.general.ldap_entry", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "{{ item.name }}", "module": "community.general.ldap_attrs", "index": 1, "defined_in": "testdata/scm_repo/roles/slapd/tasks/slapd_tasks.yml", "options": {"name": "{{ item.name }}", "run_once": "{{ item.run_once | d(False) }}", "when": "not item.objectClass|d() and not item.entry_state|d() and item.state not in [ 'init', 'ignore' ]", "tags": ["role::slapd:tasks", "role::slapd:slapacl"], "no_log": "{{ debops__no_log | d(item.no_log) | d(True if (\"userPassword\" in (item.attributes|d({})).keys() or \"olcRootPW\"    in (item.attributes|d({})).keys()) else False) }}"}, "module_options": {"dn": "{{ item.dn if (item.dn is string) else item.dn | join(\",\") }}", "attributes": "{{ item.attributes | d({}) }}", "ordered": "{{ item.ordered | d(False) }}", "state": "{{ item.state }}"}, "fqcn": "community.general.ldap_attrs", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Install APT packages with rfc2307bis LDAP schema", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/slapd/tasks/prepare_rfc2307bis.yml", "options": {"name": "Install APT packages with rfc2307bis LDAP schema", "register": "slapd__register_rfc2307bis_packages", "until": "slapd__register_rfc2307bis_packages is succeeded"}, "module_options": {"name": "{{ slapd__rfc2307bis_packages }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the original NIS schema included in Debian", "module": "dpkg_divert", "index": 1, "defined_in": "testdata/scm_repo/roles/slapd/tasks/prepare_rfc2307bis.yml", "options": {"name": "Divert the original NIS schema included in Debian", "loop": ["nis.schema", "nis.ldif"]}, "module_options": {"path": "/etc/ldap/schema/{{ item }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Convert FusionDirectory rfc2307bis schema to ldif", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/slapd/tasks/prepare_rfc2307bis.yml", "options": {"name": "Convert FusionDirectory rfc2307bis schema to ldif", "args": {"creates": "/etc/ldap/schema/fusiondirectory/rfc2307bis.ldif", "chdir": "/etc/ldap/schema/fusiondirectory"}, "when": "\"fusiondirectory-schema\" in slapd__rfc2307bis_packages"}, "module_options": "schema2ldif rfc2307bis.schema > rfc2307bis.ldif", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink the new rfc2307bis schema in place of NIS schema", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/slapd/tasks/prepare_rfc2307bis.yml", "options": {"name": "Symlink the new rfc2307bis schema in place of NIS schema", "loop": ["rfc2307bis.schema", "rfc2307bis.ldif"], "when": "not ansible_check_mode|bool"}, "module_options": {"state": "link", "path": "/etc/ldap/schema/{{ item | replace(\"rfc2307bis\", \"nis\") }}", "src": "{{ ((\"fusiondirectory-schema\" in slapd__rfc2307bis_packages) | ternary(\"fusiondirectory\", \"gosa\")) + \"/\" + item }}", "mode": "0644"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare OpenLDAP installation to use the rfc2307bis schema", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Prepare OpenLDAP installation to use the rfc2307bis schema", "when": "(slapd__rfc2307bis_enabled|bool and (ansible_local is undefined or ansible_local.slapd is undefined))"}, "module_options": "prepare_rfc2307bis.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize BaseDN value in debconf using a DNS domain", "module": "ansible.builtin.debconf", "index": 4, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Initialize BaseDN value in debconf using a DNS domain", "loop": ["slapd/domain", "shared/organization"]}, "module_options": {"name": "slapd", "question": "{{ item }}", "vtype": "string", "value": "{{ slapd__domain }}"}, "fqcn": "ansible.builtin.debconf", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install OpenLDAP packages", "module": "ansible.builtin.package", "index": 5, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Install OpenLDAP packages", "register": "slapd__register_packages", "until": "slapd__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (slapd__base_packages + slapd__schema_packages + slapd__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow access to additional UNIX groups by the OpenLDAP service", "module": "ansible.builtin.user", "index": 6, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Allow access to additional UNIX groups by the OpenLDAP service", "register": "slapd__register_unix_groups"}, "module_options": {"name": "{{ slapd__user }}", "groups": "{{ slapd__additional_groups }}", "append": true, "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the OpenLDAP environment file", "module": "dpkg_divert", "index": 7, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Divert the OpenLDAP environment file"}, "module_options": {"path": "/etc/default/slapd"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate the OpenLDAP environment file", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Generate the OpenLDAP environment file", "register": "slapd__register_environment"}, "module_options": {"src": "etc/default/slapd.j2", "dest": "/etc/default/slapd", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart slapd if its configuration was modified", "module": "ansible.builtin.service", "index": 9, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Restart slapd if its configuration was modified", "when": "slapd__register_unix_groups is changed or slapd__register_environment is changed"}, "module_options": {"name": "slapd", "state": "restarted"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the log directory exists", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Ensure that the log directory exists"}, "module_options": {"path": "{{ slapd__log_dir }}", "state": "directory", "owner": "{{ slapd__user }}", "group": "{{ slapd__group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install helper scripts", "module": "ansible.builtin.copy", "index": 11, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Install helper scripts", "tags": ["role::slapd:scripts"]}, "module_options": {"src": "usr/local/sbin/", "dest": "/usr/local/sbin/", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that DebOps schema directory exists", "module": "ansible.builtin.file", "index": 12, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Ensure that DebOps schema directory exists"}, "module_options": {"path": "{{ slapd__debops_schema_path }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy custom DebOps schemas to the OpenLDAP host", "module": "ansible.builtin.copy", "index": 13, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Copy custom DebOps schemas to the OpenLDAP host"}, "module_options": {"src": "etc/ldap/schema/debops/", "dest": "{{ slapd__debops_schema_path + \"/\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Load custom LDAP schemas", "module": "ansible.builtin.script", "index": 14, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Load custom LDAP schemas", "loop": "{{ q(\"flattened\", slapd__combined_schemas) }}", "register": "slapd__register_load_schemas", "changed_when": "(slapd__register_load_schemas.stdout|d() and (item | basename | regex_replace('.schema$','') + ' already exists in the LDAP, skipping\u2026') not in slapd__register_load_schemas.stdout_lines)", "tags": ["role::slapd:schema"]}, "module_options": "script/ldap-load-schema {{ item }}", "fqcn": "ansible.builtin.script", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that additional database directories exist", "module": "ansible.builtin.file", "index": 15, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Ensure that additional database directories exist", "loop": "{{ slapd__additional_database_dirs }}"}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "{{ slapd__user }}", "group": "{{ slapd__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure backup snapshots as cron jobs", "module": "ansible.builtin.cron", "index": 16, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Configure backup snapshots as cron jobs", "loop": ["daily", "weekly", "monthly"], "loop_control": {"label": "{{ {\"state\": (slapd__snapshot_deploy_state if (item in slapd__snapshot_cron_jobs) else \"absent\"), \"cron_job\": item} }}"}}, "module_options": {"name": "Create {{ item }} backup snapshots of OpenLDAP databases", "special_time": "{{ item }}", "cron_file": "slapd-snapshot", "user": "root", "state": "{{ slapd__snapshot_deploy_state if (item in slapd__snapshot_cron_jobs) else \"absent\" }}", "job": "/usr/local/sbin/slapd-snapshot {{ item }}"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 17, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save OpenLDAP server local facts", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Save OpenLDAP server local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/slapd.fact.j2", "dest": "/etc/ansible/facts.d/slapd.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 19, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Perform OpenLDAP tasks", "module": "ansible.builtin.include_tasks", "index": 20, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Perform OpenLDAP tasks", "loop": "{{ q(\"flattened\", slapd__combined_tasks) | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"state\": item.state, \"dn\": item.dn, \"attributes\": item.attributes|d({})} }}"}, "when": "item.name|d() and item.dn|d() and item.state|d('present') not in [ 'init', 'ignore' ]", "tags": ["role::slapd:tasks"], "no_log": "{{ debops__no_log | d(item.no_log) | d(True if (\"userPassword\" in (item.attributes|d({})).keys() or \"olcRootPW\"    in (item.attributes|d({})).keys()) else False) }}"}, "module_options": "slapd_tasks.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove slapacl test suite if requested", "module": "ansible.builtin.file", "index": 21, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Remove slapacl test suite if requested", "when": "slapd__slapacl_deploy_state == 'absent'", "tags": ["role::slapd:slapacl", "role::slapd:tasks"]}, "module_options": {"path": "{{ slapd__slapacl_script }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Perform OpenLDAP slapacl tasks", "module": "ansible.builtin.include_tasks", "index": 22, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Perform OpenLDAP slapacl tasks", "loop": "{{ q(\"flattened\", slapd__slapacl_combined_tasks) | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"state\": item.state, \"dn\": item.dn, \"attributes\": item.attributes|d({})} }}"}, "when": "slapd__slapacl_deploy_state == 'present' and item.name|d() and item.dn|d() and item.state|d('present') not in [ 'init', 'ignore' ]", "tags": ["role::slapd:slapacl", "role::slapd:tasks"], "no_log": "{{ debops__no_log | d(item.no_log) | d(True if (\"userPassword\" in (item.attributes|d({})).keys() or \"olcRootPW\"    in (item.attributes|d({})).keys()) else False) }}"}, "module_options": "slapd_tasks.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate slapacl test suite script", "module": "ansible.builtin.template", "index": 23, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Generate slapacl test suite script", "register": "slapd__register_slapacl_script", "when": "slapd__slapacl_deploy_state == 'present'", "tags": ["role::slapd:slapacl", "role::slapd:tasks"]}, "module_options": {"src": "etc/ldap/slapacl-test-suite.j2", "dest": "{{ slapd__slapacl_script }}", "group": "{{ slapd__group }}", "mode": "0750"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Test ACL rules using slapacl", "module": "ansible.builtin.command", "index": 24, "defined_in": "testdata/scm_repo/roles/slapd/tasks/main.yml", "options": {"name": "Test ACL rules using slapacl", "environment": {"SLAPACL_STDOUT": "false"}, "become": true, "become_user": "{{ slapd__user }}", "register": "slapd__register_slapacl_test", "when": "slapd__slapacl_deploy_state == 'present' and slapd__slapacl_run_tests|bool", "changed_when": "slapd__register_slapacl_test.stderr|d()", "tags": ["role::slapd:slapacl", "role::slapd:tasks"]}, "module_options": "{{ slapd__slapacl_script }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/slapd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "ipxe", "defined_in": "testdata/scm_repo/roles/ipxe", "task_yamls": ["testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml", "testdata/scm_repo/roles/ipxe/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Create Debian netboot directories", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml", "options": {"name": "Create Debian netboot directories", "loop": "{{ ipxe__debian_netboot_combined_release_map | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ] and item.release in ipxe__debian_netboot_releases and item.architecture in ipxe__debian_netboot_architectures"}, "module_options": {"path": "{{ ipxe__debian_netboot_src + \"/\" + item.release + \"/\" + item.architecture + \"/\" + item.netboot_version + (item.netboot_subdir | d(\"\")) }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Debian installer directories", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml", "options": {"name": "Create Debian installer directories", "loop": "{{ ipxe__debian_netboot_combined_release_map | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ] and item.release in ipxe__debian_netboot_releases and item.architecture in ipxe__debian_netboot_architectures"}, "module_options": {"path": "{{ ipxe__debian_netboot_pxe_root + \"/\" + item.release + \"/\" + item.architecture + \"/\" + item.netboot_version + (item.netboot_subdir | d(\"\")) }}", "state": "directory", "mode": "0775"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download Debian netboot tarballs", "module": "ansible.builtin.get_url", "index": 2, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml", "options": {"name": "Download Debian netboot tarballs", "loop": "{{ ipxe__debian_netboot_combined_release_map | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ] and item.release in ipxe__debian_netboot_releases and item.architecture in ipxe__debian_netboot_architectures", "register": "ipxe__register_get_netboot", "until": "ipxe__register_get_netboot is succeeded"}, "module_options": {"url": "{{ item.netboot_url | d(ipxe__debian_netboot_mirror + \"/dists/\" + item.release + \"/main/installer-\" + item.architecture + \"/\" + item.netboot_version + \"/images/netboot\" + (item.netboot_subdir | d(\"\")) + \"/netboot.tar.gz\") }}", "dest": "{{ ipxe__debian_netboot_src + \"/\" + item.release + \"/\" + item.architecture + \"/\" + item.netboot_version + (item.netboot_subdir | d(\"\")) + \"/netboot.tar.gz\" }}", "checksum": "{{ item.netboot_checksum | d(omit) }}", "mode": "0644"}, "fqcn": "ansible.builtin.get_url", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack Debian netboot tarballs", "module": "ansible.builtin.unarchive", "index": 3, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml", "options": {"name": "Unpack Debian netboot tarballs", "loop": "{{ ipxe__debian_netboot_combined_release_map | debops.debops.parse_kv_items }}", "register": "ipxe__register_debian_installer", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ] and item.release in ipxe__debian_netboot_releases and item.architecture in ipxe__debian_netboot_architectures"}, "module_options": {"src": "{{ ipxe__debian_netboot_src + \"/\" + item.release + \"/\" + item.architecture + \"/\" + item.netboot_version + (item.netboot_subdir | d(\"\")) + \"/netboot.tar.gz\" }}", "dest": "{{ ipxe__debian_netboot_pxe_root + \"/\" + item.release + \"/\" + item.architecture + \"/\" + item.netboot_version + (item.netboot_subdir | d(\"\")) }}", "mode": "u=rwX,g=rwX,o=rX", "remote_src": true, "creates": "{{ ipxe__debian_netboot_pxe_root + \"/\" + item.release + \"/\" + item.architecture + \"/\" + item.netboot_version + (item.netboot_subdir | d(\"\")) + \"/pxelinux.0\" }}"}, "fqcn": "ansible.builtin.unarchive", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Point current Debian netboot symlink to correct version", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml", "options": {"name": "Point current Debian netboot symlink to correct version", "loop": "{{ ipxe__debian_netboot_combined_release_map | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ] and item.release in ipxe__debian_netboot_releases and item.architecture in ipxe__debian_netboot_architectures and (item.netboot_current|d(True))|bool"}, "module_options": {"path": "{{ ipxe__debian_netboot_pxe_root + \"/\" + item.release + \"/\" + item.architecture + \"/current\" }}", "src": "{{ item.netboot_version }}", "state": "link", "mode": "0775"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Debian firmware directories", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml", "options": {"name": "Create Debian firmware directories", "loop": "{{ ipxe__debian_netboot_combined_release_map | debops.debops.parse_kv_items }}", "when": "ipxe__debian_netboot_firmware|bool and item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ] and item.release in ipxe__debian_netboot_releases and item.firmware_version|d()"}, "module_options": {"path": "{{ ipxe__debian_netboot_src + \"/\" + item.release + \"/non-free/\" + item.firmware_version }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download Debian firmware tarballs", "module": "ansible.builtin.get_url", "index": 6, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml", "options": {"name": "Download Debian firmware tarballs", "loop": "{{ ipxe__debian_netboot_combined_release_map | debops.debops.parse_kv_items }}", "when": "ipxe__debian_netboot_firmware|bool and item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ] and item.release in ipxe__debian_netboot_releases and item.firmware_version|d()", "register": "ipxe__register_get_firmware", "until": "ipxe__register_get_firmware is succeeded"}, "module_options": {"url": "{{ item.firmware_url | d(ipxe__debian_netboot_firmware_mirror + \"/\" + item.release + \"/\" + item.firmware_version + \"/firmware.cpio.gz\") }}", "dest": "{{ ipxe__debian_netboot_src + \"/\" + item.release + \"/non-free/\" + item.firmware_version + \"/firmware.cpio.gz\" }}", "checksum": "{{ item.firmware_checksum | d(omit) }}", "mode": "0644"}, "fqcn": "ansible.builtin.get_url", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Include firmware in the Debian netboot installers", "module": "ansible.builtin.shell", "index": 7, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml", "options": {"name": "Include firmware in the Debian netboot installers", "loop": "{{ ipxe__register_debian_installer.results }}", "when": "ipxe__debian_netboot_firmware|bool and item.item.firmware_version|d() and item is changed"}, "module_options": "cat {{ ipxe__debian_netboot_src + \"/\" + item.item.release + \"/non-free/\" + item.item.firmware_version + \"/firmware.cpio.gz\" }} >> {{ ipxe__debian_netboot_pxe_root + \"/\" + item.item.release + \"/\" + item.item.architecture + \"/\" + item.item.netboot_version + (item.item.netboot_subdir | d(\"\")) + \"/debian-installer/\" + item.item.architecture + \"/initrd.gz\" }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/main.yml", "options": {"name": "Install required packages", "register": "ipxe__register_packages", "until": "ipxe__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (ipxe__base_packages + ipxe__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that iPXE script directories exist", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/main.yml", "options": {"name": "Ensure that iPXE script directories exist", "loop": "{{ ipxe__combined_scripts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"path\": (ipxe__tftp_root + \"/\" + ((item.name | regex_replace(\"\\.ipxe$\", \"\") + \".ipxe\") | dirname)), \"state\": item.state|d(\"present\")} }}"}, "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ]"}, "module_options": {"path": "{{ ipxe__tftp_root + \"/\" + (((item.name | regex_replace(\"\\.ipxe$\", \"\")) + \".ipxe\") | dirname) }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate iPXE scripts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/main.yml", "options": {"name": "Generate iPXE scripts", "loop": "{{ ipxe__combined_scripts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ]"}, "module_options": {"src": "srv/tftp/template.ipxe.j2", "dest": "{{ ipxe__tftp_root + \"/\" + (item.name | regex_replace(\"\\.ipxe$\", \"\")) + \".ipxe\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove iPXE scripts if requested", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/main.yml", "options": {"name": "Remove iPXE scripts if requested", "loop": "{{ ipxe__combined_scripts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "when": "item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ ipxe__tftp_root + \"/\" + (item.name | regex_replace(\"\\.ipxe$\", \"\")) + \".ipxe\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install bootloader files in the TFTP root directory", "module": "ansible.builtin.copy", "index": 5, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/main.yml", "options": {"name": "Install bootloader files in the TFTP root directory", "loop": "{{ ipxe__bootloaders }}"}, "module_options": {"src": "{{ item }}", "dest": "{{ ipxe__tftp_root + \"/\" + (item | basename) }}", "remote_src": true, "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Debian netboot installers", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/main.yml", "options": {"name": "Configure Debian netboot installers", "when": "ipxe__debian_netboot_enabled|bool"}, "module_options": "debian_netboot.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save iPXE local facts", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/ipxe/tasks/main.yml", "options": {"name": "Save iPXE local facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/ipxe.fact.j2", "dest": "/etc/ansible/facts.d/ipxe.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ipxe"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "extrepo", "defined_in": "testdata/scm_repo/roles/extrepo", "task_yamls": ["testdata/scm_repo/roles/extrepo/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Install required packages", "register": "extrepo__register_packages", "until": "extrepo__register_packages is succeeded", "when": "extrepo__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", (extrepo__base_packages + extrepo__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save extrepo local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Save extrepo local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/extrepo.fact.j2", "dest": "/etc/ansible/facts.d/extrepo.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original extrepo configuration", "module": "dpkg_divert", "index": 6, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Divert original extrepo configuration", "when": "extrepo__enabled|bool and ansible_pkg_mgr == 'apt'"}, "module_options": {"path": "/etc/extrepo/config.yaml", "state": "present"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate extrepo configuration file", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Generate extrepo configuration file", "register": "extrepo__register_config", "when": "extrepo__enabled|bool"}, "module_options": {"src": "etc/extrepo/config.yaml.j2", "dest": "/etc/extrepo/config.yaml", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update external APT sources if required", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Update external APT sources if required", "loop": "{{ q(\"flattened\", extrepo__combined_sources) | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "register": "extrepo__register_updated_sources", "when": "extrepo__enabled|bool and item.name in ansible_local.extrepo.sources|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ] and extrepo__register_config is changed"}, "module_options": "extrepo update {{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove external APT sources when requested", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Remove external APT sources when requested", "loop": "{{ q(\"flattened\", extrepo__combined_sources) | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "register": "extrepo__register_removed_sources", "when": "extrepo__enabled|bool and item.name and item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ \"/etc/apt/sources.list.d/extrepo_\" + item.name + \".sources\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable external APT sources", "module": "ansible.builtin.command", "index": 10, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Enable external APT sources", "loop": "{{ q(\"flattened\", extrepo__combined_sources) | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "register": "extrepo__register_enabled_sources", "when": "extrepo__enabled|bool and item.name not in ansible_local.extrepo.sources|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ]"}, "module_options": "extrepo enable {{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update APT cache if required", "module": "ansible.builtin.apt", "index": 11, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Update APT cache if required", "notify": ["Refresh host facts"], "register": "extrepo__register_apt_cache", "until": "extrepo__register_apt_cache is succeeded", "when": "(extrepo__enabled|bool and (extrepo__register_updated_sources is changed or extrepo__register_removed_sources is changed or extrepo__register_enabled_sources is changed))"}, "module_options": {"update_cache": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if APT cache was modified", "module": "ansible.builtin.meta", "index": 12, "defined_in": "testdata/scm_repo/roles/extrepo/tasks/main.yml", "options": {"name": "Update Ansible facts if APT cache was modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/extrepo"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "influxdata", "defined_in": "testdata/scm_repo/roles/influxdata", "task_yamls": ["testdata/scm_repo/roles/influxdata/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/influxdata/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/influxdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure InfluxData APT repository", "module": "ansible.builtin.apt_repository", "index": 1, "defined_in": "testdata/scm_repo/roles/influxdata/tasks/main.yml", "options": {"name": "Configure InfluxData APT repository"}, "module_options": {"repo": "{{ influxdata__repository }}", "state": "present", "update_cache": true}, "fqcn": "ansible.builtin.apt_repository", "used_in": ["testdata/scm_repo/roles/influxdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install InfluxData packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/influxdata/tasks/main.yml", "options": {"name": "Install InfluxData packages", "notify": ["Refresh host facts"], "register": "influxdata__register_install", "until": "influxdata__register_install is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (influxdata__packages + influxdata__group_packages + influxdata__host_packages + influxdata__dependent_packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/influxdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/influxdata/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/influxdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save InfluxData local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/influxdata/tasks/main.yml", "options": {"name": "Save InfluxData local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/influxdata.fact.j2", "dest": "/etc/ansible/facts.d/influxdata.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/influxdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/influxdata/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/influxdata"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "journald", "defined_in": "testdata/scm_repo/roles/journald", "task_yamls": ["testdata/scm_repo/roles/journald/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save journald local facts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Save journald local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/journald.fact.j2", "dest": "/etc/ansible/facts.d/journald.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 4, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 5, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Import DebOps secret role", "vars": {"secret__directories": ["{{ (journald__fss_verify_key_path | dirname) if journald__fss_enabled|bool else [] }}"]}}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Move persistent journal to volatile storage if requested", "module": "ansible.builtin.command", "index": 6, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Move persistent journal to volatile storage if requested", "when": "(journald__enabled|bool and journald__version is version(\"244\", \">=\") and journald__persistent_state == 'absent' and (ansible_local.journald.persistent|d(False))|bool)"}, "module_options": "journalctl --relinquish-var", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove persistent journal storage if requested", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Remove persistent journal storage if requested", "when": "journald__enabled|bool and journald__storage in [ 'auto', 'none', 'volatile' ] and journald__persistent_state == 'absent'"}, "module_options": {"path": "/var/log/journal", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create persistent journal storage directory", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Create persistent journal storage directory", "register": "journald__register_persistent", "when": "journald__enabled|bool and journald__storage in [ 'auto', 'persistent' ] and journald__persistent_state != 'absent'"}, "module_options": {"path": "/var/log/journal/{{ ansible_machine_id }}", "state": "directory", "group": "systemd-journal", "mode": "2755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Apply extended permissions in the persistent storage", "module": "ansible.builtin.command", "index": 9, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Apply extended permissions in the persistent storage", "changed_when": false, "when": "journald__enabled|bool and journald__storage in [ 'auto', 'persistent' ] and journald__persistent_state != 'absent'"}, "module_options": "systemd-tmpfiles --create --prefix /var/log/journal", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Foward Secure Seal keys when requested", "module": "ansible.builtin.command", "index": 10, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Create Foward Secure Seal keys when requested", "register": "journald__register_fss", "changed_when": "journald__register_fss.stderr_lines | count > 1", "when": "(journald__enabled|bool and journald__storage in [ 'auto', 'persistent' ] and journald__persistent_state != 'absent' and journald__fss_enabled|bool and (not ansible_local.journald.sealed|d())|bool)"}, "module_options": "journalctl --setup-keys --interval={{ journald__fss_interval }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Forward Secure Seal verification key on Ansible Controller", "module": "ansible.builtin.copy", "index": 11, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Save Forward Secure Seal verification key on Ansible Controller", "delegate_to": "localhost", "become": false, "when": "journald__register_fss is changed"}, "module_options": {"content": "{{ journald__register_fss.stdout }}", "dest": "{{ secret + \"/\" + journald__fss_verify_key_path }}", "mode": "0600"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush journal to persistent storage", "module": "ansible.builtin.systemd", "index": 12, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Flush journal to persistent storage", "when": "journald__enabled|bool and journald__persistent_state != 'absent' and journald__register_persistent is changed"}, "module_options": {"name": "systemd-journal-flush.service", "state": "restarted"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create journald configuration directory", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Create journald configuration directory", "when": "journald__enabled|bool"}, "module_options": {"path": "/etc/systemd/journald.conf.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate journald configuration", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Generate journald configuration", "register": "journald__register_config", "when": "journald__enabled|bool"}, "module_options": {"src": "etc/systemd/journald.conf.d/ansible.conf.j2", "dest": "/etc/systemd/journald.conf.d/ansible.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart journald if its configuration was modified", "module": "ansible.builtin.service", "index": 15, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Restart journald if its configuration was modified", "when": "journald__enabled|bool and journald__register_config is changed"}, "module_options": {"name": "systemd-journald", "state": "restarted"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Verify journal logs using FSS when requested", "module": "ansible.builtin.command", "index": 16, "defined_in": "testdata/scm_repo/roles/journald/tasks/main.yml", "options": {"name": "Verify journal logs using FSS when requested", "register": "journald__register_fss_verify", "when": "journald__enabled|bool and journald__persistent_state != 'absent'", "changed_when": false, "tags": ["never", "role::journald:fss:verify"]}, "module_options": "journalctl --verify --verify-key=\"{{ journald__fss_verify_key }}\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/journald"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "ferm", "defined_in": "testdata/scm_repo/roles/ferm", "task_yamls": ["testdata/scm_repo/roles/ferm/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure ferm status in debconf", "module": "ansible.builtin.debconf", "index": 2, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Configure ferm status in debconf", "when": "ansible_pkg_mgr == 'apt'"}, "module_options": {"name": "ferm", "question": "ferm/enable", "vtype": "boolean", "value": "{{ \"yes\" if ferm__enabled|bool else \"no\" }}"}, "fqcn": "ansible.builtin.debconf", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure ferm is installed", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Ensure ferm is installed", "register": "ferm__register_packages", "until": "ferm__register_packages is succeeded", "when": "ferm__enabled | bool"}, "module_options": {"name": "{{ q(\"flattened\", (ferm__base_packages + ferm__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage iptables backend using alternatives", "module": "alternatives", "index": 4, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Manage iptables backend using alternatives", "loop": [{"name": "arptables", "path": "/usr/sbin/arptables-{{ ferm__iptables_backend_type }}"}, {"name": "ebtables", "path": "/usr/sbin/ebtables-{{ ferm__iptables_backend_type }}"}, {"name": "iptables", "path": "/usr/sbin/iptables-{{ ferm__iptables_backend_type }}"}, {"name": "ip6tables", "path": "/usr/sbin/ip6tables-{{ ferm__iptables_backend_type }}"}], "when": "ferm__enabled | bool and ferm__iptables_backend_enabled|bool"}, "module_options": {"name": "{{ item.name }}", "path": "{{ item.path }}"}, "fqcn": "community.general.alternatives", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure required directories exist", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Make sure required directories exist", "loop": ["/etc/ferm/rules.d", "/etc/ferm/filter-input.d", "/etc/ferm/hooks/pre.d", "/etc/ferm/hooks/post.d", "/etc/ferm/hooks/flush.d"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "root", "group": "adm", "mode": "02750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy custom files to remote hosts", "module": "ansible.builtin.copy", "index": 6, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Copy custom files to remote hosts", "loop": "{{ (ferm__custom_files + ferm__group_custom_files + ferm__host_custom_files) | flatten }}", "loop_control": {"label": "{{ item.dest }}"}, "when": "((item.src is defined or item.content is defined) and item.dest is defined)", "register": "ferm__register_files", "tags": ["role::ferm:custom_files"]}, "module_options": {"src": "{{ item.src | d(omit) }}", "content": "{{ item.content | d(omit) }}", "dest": "{{ item.dest }}", "owner": "{{ item.owner | d(omit) }}", "group": "{{ item.group | d(omit) }}", "mode": "{{ item.mode  | d(omit) }}", "directory_mode": "{{ item.directory_mode | d(omit) }}", "follow": "{{ item.follow | d(omit) }}", "force": "{{ item.force  | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure ferm default variables", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Configure ferm default variables", "notify": ["Restart ferm"]}, "module_options": {"src": "etc/default/ferm.j2", "dest": "/etc/default/ferm", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of /etc/ferm/ferm.conf", "module": "dpkg_divert", "index": 8, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Add/remove diversion of /etc/ferm/ferm.conf"}, "module_options": {"path": "/etc/ferm/ferm.conf", "state": "{{ \"present\" if ferm__enabled|bool else \"absent\" }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure main ferm config file", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Configure main ferm config file", "notify": ["Restart ferm"], "when": "ferm__enabled|bool"}, "module_options": {"src": "etc/ferm/ferm.conf.j2", "dest": "/etc/ferm/ferm.conf", "owner": "root", "group": "adm", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove firewall rules", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Remove firewall rules", "loop": "{{ ferm__parsed_rules | dict2items }}", "loop_control": {"label": "{{ item.key }}"}, "register": "ferm__register_rules_removed", "when": "(item.value.rule_state|d(item.value.state|d('present')) == 'absent')", "tags": ["role::ferm:rules"]}, "module_options": {"dest": "/etc/ferm/rules.d/{{ \"%03d\" | format((ferm__combined_weight_map[item.value.weight_class | d(item.value.type | d(\"default\"))] | d(\"80\"))|int + (item.value.weight | d(\"0\"))|int) }}_rule_{{ item.value.name | d(item.key) }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate firewall rules", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Generate firewall rules", "loop": "{{ ferm__parsed_rules | dict2items }}", "loop_control": {"label": "{{ item.key }}"}, "register": "ferm__register_rules_created", "when": "(item.value.rule_state|d(item.value.state|d('present')) not in [ 'absent', 'ignore' ])", "tags": ["role::ferm:rules"]}, "module_options": {"src": "etc/ferm/rules.d/{{ item.value.template | d(\"rule\") }}.conf.j2", "dest": "/etc/ferm/rules.d/{{ \"%03d\" | format((ferm__combined_weight_map[item.value.weight_class | d(item.value.type | d(\"default\"))] | d(\"80\"))|int + (item.value.weight | d(\"0\"))|int) }}_rule_{{ item.value.name | d(item.key) }}.conf", "owner": "root", "group": "adm", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove unknown firewall rules", "module": "ansible.builtin.shell", "index": 12, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Remove unknown firewall rules", "loop": "{{ ferm__register_rules_removed.results + ferm__register_rules_created.results }}", "loop_control": {"label": "{{ item.item.key }}"}, "when": "(item.item.key|d() and item is changed)", "tags": ["role::ferm:rules"]}, "module_options": "find /etc/ferm/rules.d -maxdepth 1 -type f -name '*_rule_{{ item.item.value.name | d(item.item.key) }}.conf' ! -name '{{ \"%03d\" | format((ferm__combined_weight_map[item.item.value.weight_class | d(item.item.value.type | d(\"default\"))] | d(\"80\"))|int + (item.item.value.weight | d(\"0\"))|int) }}_rule_{{ item.item.value.name | d(item.item.key) }}.conf' -exec rm -vf {} +", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove iptables INPUT rules if requested", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Remove iptables INPUT rules if requested", "with_flattened": ["{{ ferm_input_list }}", "{{ ferm_input_group_list }}", "{{ ferm_input_host_list }}", "{{ ferm_input_dependent_list }}"], "when": "(ferm__enabled|bool and item.type|d() and (item.delete|d() | bool))", "register": "ferm__register_input_rules_del", "tags": ["role::ferm:rules"]}, "module_options": {"path": "/etc/ferm/filter-input.d/{{ ferm__weight_map[item.weight_class|d()] | d(item.weight | d(\"50\")) }}_{{ item.filename | d(item.type + \"_\" + item.name | d((item.dport[0] if item.dport|d() else \"rules\"))) }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure iptables INPUT rules", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Configure iptables INPUT rules", "with_flattened": ["{{ ferm_input_list }}", "{{ ferm_input_group_list }}", "{{ ferm_input_host_list }}", "{{ ferm_input_dependent_list }}"], "when": "(ferm__enabled|bool and item.type|d() and not (item.delete|d() | bool))", "register": "ferm__register_input_rules_add", "tags": ["role::ferm:rules"]}, "module_options": {"src": "etc/ferm/filter-input.d/{{ item.type }}.conf.j2", "dest": "/etc/ferm/filter-input.d/{{ ferm__weight_map[item.weight_class|d()] | d(item.weight | d(\"50\")) }}_{{ item.filename | d(item.type + \"_\" + item.name | d((item.dport[0] if item.dport|d() else \"rules\"))) }}.conf", "owner": "root", "group": "adm", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart ferm", "module": "ansible.builtin.service", "index": 15, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Restart ferm", "when": "(ferm__enabled | bool and (ferm__register_files is changed or ferm__register_rules_created is changed or ferm__register_rules_removed is changed or ferm__register_input_rules_del is changed or ferm__register_input_rules_add is changed) and not ansible_check_mode)"}, "module_options": {"name": "ferm", "state": "restarted"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clear iptables rules if ferm is disabled", "module": "ansible.builtin.service", "index": 16, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Clear iptables rules if ferm is disabled", "when": "(not ferm__enabled | bool and ferm__flush | bool)", "tags": ["role::ferm:rules"]}, "module_options": {"name": "ferm", "state": "stopped"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove deprecated ifupdown hook", "module": "ansible.builtin.file", "index": 17, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Remove deprecated ifupdown hook"}, "module_options": {"path": "/etc/network/if-pre-up.d/ferm-forward", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable ferm after changes when requested", "module": "ansible.builtin.lineinfile", "index": 18, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Disable ferm after changes when requested", "when": "not ferm__enabled | bool and not ansible_check_mode"}, "module_options": {"dest": "/etc/default/ferm", "regexp": "^ENABLED=\"", "line": "ENABLED=\"no\"", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 19, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Ensure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save ferm local facts", "module": "ansible.builtin.template", "index": 20, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Save ferm local facts", "tags": ["meta::facts", "role::ferm:rules"], "notify": ["Refresh host facts"]}, "module_options": {"src": "etc/ansible/facts.d/ferm.fact.j2", "dest": "/etc/ansible/facts.d/ferm.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 21, "defined_in": "testdata/scm_repo/roles/ferm/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/ferm"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml", "testdata/scm_repo/playbooks/service/minio.yml", "testdata/scm_repo/playbooks/service/redis_server.yml"]}, {"py/object": "struct4.Role", "name": "etherpad", "defined_in": "testdata/scm_repo/roles/etherpad", "task_yamls": ["testdata/scm_repo/roles/etherpad/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required Etherpad packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Install required Etherpad packages", "register": "etherpad__register_packages", "until": "etherpad__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (etherpad__base_packages + (etherpad__document_packages if etherpad_abiword|bool else []) + etherpad__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Etherpad system group", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Create Etherpad system group"}, "module_options": {"name": "{{ etherpad_group }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Etherpad user", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Create Etherpad user"}, "module_options": {"name": "{{ etherpad_user }}", "group": "{{ etherpad_group }}", "home": "{{ etherpad_home }}", "shell": "{{ etherpad__shell }}", "comment": "Etherpad", "system": true, "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Etherpad source directory", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Create Etherpad source directory"}, "module_options": {"path": "{{ etherpad_src_dir }}", "state": "directory", "owner": "{{ etherpad_user }}", "group": "{{ etherpad_group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Secure Etherpad home directory", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Secure Etherpad home directory"}, "module_options": {"path": "{{ etherpad_home }}", "state": "directory", "owner": "{{ etherpad_user }}", "group": "{{ etherpad_group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone Etherpad source code", "module": "ansible.builtin.git", "index": 7, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Clone Etherpad source code", "become": true, "become_user": "{{ etherpad_user }}", "register": "etherpad_register_source", "tags": ["role::etherpad:source"]}, "module_options": {"repo": "{{ etherpad_source_address + \"/\" + etherpad_repository }}", "dest": "{{ etherpad_src_dir + \"/\" + etherpad_repository }}", "version": "{{ etherpad_version }}", "bare": true, "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if Etherpad is checked out", "module": "ansible.builtin.stat", "index": 8, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Check if Etherpad is checked out", "register": "etherpad_register_directory", "tags": ["role::etherpad:source"]}, "module_options": {"path": "{{ etherpad_home + \"/\" + etherpad_repository }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Etherpad directory", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Create Etherpad directory", "when": "(etherpad_register_source is defined and etherpad_register_source is changed) or (etherpad_register_directory is defined and not etherpad_register_directory.stat.exists|bool)", "tags": ["role::etherpad:source"]}, "module_options": {"path": "{{ etherpad_home + \"/\" + etherpad_repository }}", "state": "directory", "owner": "{{ etherpad_user }}", "group": "{{ etherpad_group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare Etherpad worktree", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Prepare Etherpad worktree", "when": "(etherpad_register_source is defined and etherpad_register_source is changed) or (etherpad_register_directory is defined and not etherpad_register_directory.stat.exists|bool)", "tags": ["role::etherpad:source"]}, "module_options": {"src": "var/local/etherpad-lite/etherpad-lite/git.j2", "dest": "{{ etherpad_home + \"/\" + etherpad_repository }}/.git", "owner": "{{ etherpad_user }}", "group": "{{ etherpad_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Checkout Etherpad", "module": "ansible.builtin.command", "index": 11, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Checkout Etherpad", "args": {"chdir": "{{ etherpad_src_dir + \"/\" + etherpad_repository }}", "warn": false}, "environment": {"GIT_WORK_TREE": "{{ etherpad_home + \"/\" + etherpad_repository }}"}, "become": true, "become_user": "{{ etherpad_user }}", "register": "etherpad_register_checkout", "notify": ["Restart etherpad-lite"], "when": "(etherpad_register_source is defined and etherpad_register_source is changed) or (etherpad_register_directory is defined and not etherpad_register_directory.stat.exists|bool)", "tags": ["role::etherpad:source"]}, "module_options": "git checkout --force {{ etherpad_version }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Etherpad session key", "module": "ansible.builtin.set_fact", "index": 12, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Generate Etherpad session key", "when": "secret is defined and secret"}, "module_options": {"etherpad_session_key": "{{ lookup(\"password\", secret + \"/credentials/\" + ansible_fqdn + \"/etherpad/session_key chars=ascii,numbers,digits,hexdigits length=30\") }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Etherpad configuration", "module": "ansible.builtin.template", "index": 13, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Generate Etherpad configuration", "notify": ["Restart etherpad-lite"], "tags": ["role::etherpad:config"]}, "module_options": {"src": "var/local/etherpad-lite/etherpad-lite/settings.json.j2", "dest": "{{ etherpad_home + \"/\" + etherpad_repository }}/settings.json", "owner": "{{ etherpad_user }}", "group": "{{ etherpad_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create log directory", "module": "ansible.builtin.file", "index": 14, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Create log directory"}, "module_options": {"path": "/var/log/etherpad-lite", "state": "directory", "owner": "{{ etherpad_user }}", "group": "adm", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Etherpad dependencies", "module": "ansible.builtin.command", "index": 15, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Install Etherpad dependencies", "args": {"chdir": "{{ etherpad_home + \"/\" + etherpad_repository }}", "creates": "{{ etherpad_home }}/.node-gyp"}, "become": true, "become_user": "{{ etherpad_user }}", "when": "etherpad_register_checkout is changed"}, "module_options": "bin/installDeps.sh", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage Etherpad plugins", "module": "npm", "index": 16, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Manage Etherpad plugins", "with_flattened": ["{{ etherpad__default_plugins }}", "{{ etherpad_plugins }}"], "become": true, "become_user": "{{ etherpad_user }}", "notify": ["Restart etherpad-lite"], "tags": ["role::etherpad:plugins"]}, "module_options": {"name": "{{ item.name | d(item) }}", "path": "{{ etherpad_home + \"/\" + etherpad_repository }}", "state": "{{ item.state | d(\"present\") }}", "production": true}, "fqcn": "community.general.npm", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure etherpad-lite system service", "module": "ansible.builtin.template", "index": 17, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Configure etherpad-lite system service", "when": "ansible_service_mgr != 'systemd'"}, "module_options": {"src": "etc/default/etherpad-lite.j2", "dest": "/etc/default/etherpad-lite", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install etherpad-lite init script", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Install etherpad-lite init script", "notify": ["Reload service manager"], "register": "etherpad__register_sysvinit", "when": "ansible_service_mgr != 'systemd'"}, "module_options": {"src": "etc/init.d/etherpad-lite.j2", "dest": "/etc/init.d/etherpad-lite", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install etherpad-lite systemd unit", "module": "ansible.builtin.template", "index": 19, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Install etherpad-lite systemd unit", "notify": ["Reload service manager"], "register": "etherpad__register_systemd", "when": "ansible_service_mgr == 'systemd'"}, "module_options": {"src": "etc/systemd/system/etherpad-lite.service.j2", "dest": "/etc/systemd/system/etherpad-lite.service", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd daemons", "module": "ansible.builtin.meta", "index": 20, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Reload systemd daemons"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that etherpad-lite is started", "module": "ansible.builtin.service", "index": 21, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Ensure that etherpad-lite is started", "when": "(etherpad__register_sysvinit is changed or etherpad__register_systemd is changed)"}, "module_options": {"name": "etherpad-lite", "state": "started", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Wait for the API key file generation", "module": "ansible.builtin.wait_for", "index": 22, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Wait for the API key file generation"}, "module_options": {"path": "{{ etherpad_api_key_file }}", "timeout": 30}, "fqcn": "ansible.builtin.wait_for", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Wait for Etherpad application port to be reachable", "module": "ansible.builtin.wait_for", "index": 23, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Wait for Etherpad application port to be reachable"}, "module_options": {"port": "{{ etherpad_port }}", "timeout": 30}, "fqcn": "ansible.builtin.wait_for", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the generated API key", "module": "ansible.builtin.command", "index": 24, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Get the generated API key", "register": "etherpad_api_key", "changed_when": false, "check_mode": false, "tags": ["role::etherpad:api", "role::etherpad:api:call"]}, "module_options": "cat {{ etherpad_api_key_file }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make API calls", "module": "ansible.builtin.uri", "index": 25, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Make API calls", "register": "etherpad_api_calls_exec", "with_items": "{{ etherpad_api_calls }}", "no_log": "{{ debops__no_log | d(True) }}", "tags": ["role::etherpad:api", "role::etherpad:api:call"]}, "module_options": {"url": "http://localhost:{{ etherpad_port }}/api/{{ etherpad_api_version }}/{{ item.method }}?apikey={{ etherpad_api_key.stdout }}{% if item.args|d() %}{% for key, value in item.args.items() %}{{ \"&\" + key + \"=\" + value }}{% endfor %}{% endif %}"}, "fqcn": "ansible.builtin.uri", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Display API call responses for debugging", "module": "ansible.builtin.debug", "index": 26, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Display API call responses for debugging", "when": "etherpad_api_calls_exec|d() and etherpad_api_calls_debug", "tags": ["role::etherpad:api", "role::etherpad:api:call"]}, "module_options": "var=etherpad_api_calls_exec", "fqcn": "ansible.builtin.debug", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 27, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Etherpad local facts", "module": "ansible.builtin.template", "index": 28, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Save Etherpad local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/etherpad.fact.j2", "dest": "/etc/ansible/facts.d/etherpad.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 29, "defined_in": "testdata/scm_repo/roles/etherpad/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/etherpad"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "locales", "defined_in": "testdata/scm_repo/roles/locales", "task_yamls": ["testdata/scm_repo/roles/locales/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/locales/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/locales"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install locale packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/locales/tasks/main.yml", "options": {"name": "Install locale packages", "register": "locales__register_packages", "until": "locales__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (locales__base_packages + locales__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/locales"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that specified locales exist", "module": "locale_gen", "index": 2, "defined_in": "testdata/scm_repo/roles/locales/tasks/main.yml", "options": {"name": "Ensure that specified locales exist", "with_flattened": ["{{ locales__default_list }}", "{{ locales__list }}", "{{ locales__group_list }}", "{{ locales__host_list }}", "{{ locales__dependent_list }}"]}, "module_options": {"name": "{{ item.name | d(item) }}", "state": "{{ item.state | d(\"present\") }}"}, "fqcn": "community.general.locale_gen", "used_in": ["testdata/scm_repo/roles/locales"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Set default system locale", "module": "ansible.builtin.debconf", "index": 3, "defined_in": "testdata/scm_repo/roles/locales/tasks/main.yml", "options": {"name": "Set default system locale", "register": "locales__register_system_lang", "when": "ansible_pkg_mgr == 'apt' and locales__system_lang|d()"}, "module_options": {"name": "locales", "question": "locales/default_environment_locale", "vtype": "string", "value": "{{ locales__system_lang }}"}, "fqcn": "ansible.builtin.debconf", "used_in": ["testdata/scm_repo/roles/locales"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update /etc/default/locale", "module": "ansible.builtin.command", "index": 4, "defined_in": "testdata/scm_repo/roles/locales/tasks/main.yml", "options": {"name": "Update /etc/default/locale", "when": "ansible_pkg_mgr == 'apt' and locales__register_system_lang is changed"}, "module_options": "update-locale LANG={{ locales__system_lang }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/locales"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/locales/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/locales"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save locale local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/locales/tasks/main.yml", "options": {"name": "Save locale local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/locales.fact.j2", "dest": "/etc/ansible/facts.d/locales.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/locales"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/locales/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/locales"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "core", "defined_in": "testdata/scm_repo/roles/core", "task_yamls": ["testdata/scm_repo/roles/core/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/core/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/core"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that APT cache is valid", "module": "ansible.builtin.apt", "index": 1, "defined_in": "testdata/scm_repo/roles/core/tasks/main.yml", "options": {"name": "Ensure that APT cache is valid", "register": "core__register_apt_update", "until": "core__register_apt_update is succeeded", "when": "ansible_pkg_mgr == 'apt'", "tags": ["meta::provision"]}, "module_options": {"update_cache": true, "cache_valid_time": "{{ \"86400\" if ansible_local|d() else omit }}"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/core"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required core packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/core/tasks/main.yml", "options": {"name": "Install required core packages", "notify": ["Refresh host facts"], "register": "core__register_packages", "until": "core__register_packages is succeeded", "tags": ["meta::provision"]}, "module_options": {"name": "{{ q(\"flattened\", (core__base_packages + core__packages + core__group_packages + core__host_packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/core"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-gather facts on package installation", "module": "ansible.builtin.meta", "index": 3, "defined_in": "testdata/scm_repo/roles/core/tasks/main.yml", "options": {"name": "Re-gather facts on package installation"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/core"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check IP address of current Ansible Controller", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "testdata/scm_repo/roles/core/tasks/main.yml", "options": {"name": "Check IP address of current Ansible Controller", "when": "core__fact_ansible_controller is undefined and ansible_connection != \"local\"", "tags": ["role::core", "role::ferm", "role::ferm:config", "role::tcpwrappers"], "become": false}, "module_options": {"ansible_controller": "{{ core__active_controller }}", "core__fact_ansible_controller": "{{ core__active_controller }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/core"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/core/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists", "tags": ["meta::facts"]}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/core"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/core/tasks/main.yml", "options": {"name": "Save local facts", "with_items": ["core", "tags"], "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/{{ item }}.fact.j2", "dest": "/etc/ansible/facts.d/{{ item }}.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/core"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather local facts if they changed", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/core/tasks/main.yml", "options": {"name": "Gather local facts if they changed"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/core"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "gitlab", "defined_in": "testdata/scm_repo/roles/gitlab", "task_yamls": ["testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "testdata/scm_repo/roles/gitlab/tasks/main_env.yml", "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "testdata/scm_repo/roles/gitlab/tasks/start_gitlab_ce.yml", "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml", "testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml", "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "testdata/scm_repo/roles/gitlab/tasks/main.yml", "testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Check if bare repository is cloned", "module": "ansible.builtin.stat", "index": 0, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "options": {"name": "Check if bare repository is cloned", "register": "gitlab_register_pages_cloned"}, "module_options": {"path": "{{ gitlab_pages_dest }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save current checkout hash for update", "module": "ansible.builtin.command", "index": 1, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "options": {"name": "Save current checkout hash for update", "args": {"chdir": "{{ gitlab_pages_dest }}", "warn": false}, "register": "gitlab_register_pages_current_head", "changed_when": false, "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_register_pages_cloned.stat|d() and gitlab_register_pages_cloned.stat.exists"}, "module_options": "git rev-parse HEAD", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Change current HEAD to master in bare repository for update", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "options": {"name": "Change current HEAD to master in bare repository for update", "args": {"chdir": "{{ gitlab_pages_dest }}", "warn": false}, "changed_when": false, "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_register_pages_cloned.stat|d() and gitlab_register_pages_cloned.stat.exists"}, "module_options": "git symbolic-ref HEAD refs/heads/master", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone gitlab-pages source code", "module": "ansible.builtin.git", "index": 3, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "options": {"name": "Clone gitlab-pages source code", "become": true, "become_user": "{{ gitlab_user }}"}, "module_options": {"repo": "{{ gitlab_pages_repo }}", "dest": "{{ gitlab_pages_dest }}", "version": "master", "bare": true, "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restore HEAD to previous checkout", "module": "ansible.builtin.copy", "index": 4, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "options": {"name": "Restore HEAD to previous checkout", "changed_when": false, "when": "gitlab_register_pages_cloned.stat|d() and gitlab_register_pages_cloned.stat.exists"}, "module_options": {"content": "{{ gitlab_register_pages_current_head.stdout }}", "dest": "{{ gitlab_pages_dest + \"/HEAD\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if gitlab-pages is checked out", "module": "ansible.builtin.stat", "index": 5, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "options": {"name": "Check if gitlab-pages is checked out", "register": "gitlab_register_pages_directory"}, "module_options": {"path": "{{ gitlab_pages_checkout }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create gitlab-pages checkout directory", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "options": {"name": "Create gitlab-pages checkout directory"}, "module_options": {"path": "{{ gitlab_pages_checkout }}", "state": "directory", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare gitlab-pages worktree", "module": "ansible.builtin.copy", "index": 7, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "options": {"name": "Prepare gitlab-pages worktree"}, "module_options": {"content": "gitdir: {{ gitlab_pages_dest }}", "dest": "{{ gitlab_pages_checkout + \"/.git\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get currently checked out git tag", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "options": {"name": "Get currently checked out git tag", "environment": {"GIT_WORK_TREE": "{{ gitlab_pages_checkout }}"}, "args": {"chdir": "{{ gitlab_pages_dest }}", "warn": false}, "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_pages_target_tag", "changed_when": "gitlab_register_pages_target_tag.stdout != gitlab__fact_version.pages"}, "module_options": "git describe --tags", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Checkout gitlab-pages", "module": "ansible.builtin.command", "index": 9, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "options": {"name": "Checkout gitlab-pages", "environment": {"GIT_WORK_TREE": "{{ gitlab_pages_checkout }}"}, "args": {"chdir": "{{ gitlab_pages_dest }}", "warn": false}, "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_pages_checkout", "when": "(gitlab__fact_version.pages|d() != gitlab_register_pages_target_tag.stdout|d()) or (gitlab_register_pages_cloned.stat|d() and not gitlab_register_pages_cloned.stat.exists)"}, "module_options": "git checkout -f {{ gitlab__fact_version.pages }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup gitlab-pages", "module": "make", "index": 10, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "options": {"name": "Setup gitlab-pages", "environment": {"GOPATH": "{{ gitlab_app_root_path }}/go"}, "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_register_pages_checkout is changed"}, "module_options": {"chdir": "{{ gitlab_pages_checkout }}"}, "fqcn": "community.general.make", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Setup GitLab Pages default variables", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml", "options": {"name": "Setup GitLab Pages default variables", "when": "gitlab_version is version_compare(\"12.8\", operator=\"ge\", strict=True)", "notify": ["Restart gitlab", "Restart gitlab.slice"]}, "module_options": {"src": "etc/default/gitlab-pages.j2", "dest": "/etc/default/gitlab-pages", "owner": "root", "group": "{{ gitlab_group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage other GitLab CE directories", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Manage other GitLab CE directories", "with_items": ["{{ gitlab_ce_git_checkout + \"/tmp\" }}", "{{ gitlab_ce_git_checkout + \"/log\" }}", "{{ gitlab_ce_git_checkout + \"/tmp/pids\" }}", "{{ gitlab_ce_git_checkout + \"/tmp/sockets\" }}", "{{ gitlab_ce_git_checkout + \"/public/uploads\" }}"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage secure GitLab directories", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Manage secure GitLab directories", "with_items": ["{{ gitlab_backup_path }}", "{{ gitlab_repositories_path }}", "{{ gitlab_satellites_path }}", "{{ gitlab_shared_path }}", "{{ gitlab_lfs_path }}", "{{ gitlab_artifacts_path }}", "{{ gitlab_pages_path }}"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure GitLab CE database", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Configure GitLab CE database", "notify": ["Restart gitlab", "Restart gitlab.slice"]}, "module_options": {"src": "var/local/git/gitlab/config/database.{{ gitlab__database }}.yml.j2", "dest": "{{ gitlab_ce_git_checkout + \"/config/database.yml\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup GitLab CE main configuration", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Setup GitLab CE main configuration", "notify": ["Restart gitlab", "Restart gitlab.slice"]}, "module_options": {"src": "var/local/git/gitlab/config/gitlab.yml.j2", "dest": "{{ gitlab_ce_git_checkout + \"/config/gitlab.yml\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure custom redis server", "module": "ansible.builtin.lineinfile", "index": 4, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Configure custom redis server", "notify": ["Restart gitlab", "Restart gitlab.slice"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"dest": "{{ gitlab_ce_git_checkout + \"/config/resque.yml\" }}", "regexp": "^production:", "line": "production: {{ gitlab_redis_resque }}", "state": "present", "create": true, "backup": false, "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0640"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup GitLab CE unicorn configuration", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Setup GitLab CE unicorn configuration", "notify": ["Restart gitlab", "Restart gitlab.slice"]}, "module_options": {"src": "var/local/git/gitlab/config/unicorn.rb.j2", "dest": "{{ gitlab_ce_git_checkout + \"/config/unicorn.rb\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup GitLab CE rack_attack configuration", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Setup GitLab CE rack_attack configuration", "notify": ["Restart gitlab", "Restart gitlab.slice"]}, "module_options": {"src": "var/local/git/gitlab/config/initializers/rack_attack.rb.j2", "dest": "{{ gitlab_ce_git_checkout + \"/config/initializers/rack_attack.rb\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup GitLab CE default variables", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Setup GitLab CE default variables", "notify": ["Restart gitlab", "Restart gitlab.slice"]}, "module_options": {"src": "etc/default/gitlab.j2", "dest": "/etc/default/gitlab", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab SysVinit script", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Install GitLab SysVinit script", "notify": ["Reload service manager"], "when": "(gitlab_use_systemd is defined and not gitlab_use_systemd)"}, "module_options": "cp -f {{ gitlab_ce_git_checkout + \"/lib/support/init.d/gitlab\" }} /etc/init.d/gitlab", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab systemd service files", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Install GitLab systemd service files", "with_items": ["gitlab.slice", "gitlab-mailroom.service", "gitlab-sidekiq.service", "gitlab-unicorn.service", "gitlab-workhorse.service", "{{ \"gitlab-gitaly.service\" if (gitlab_version is version_compare(\"9.0\", operator=\"gt\", strict=True)) else [] }}"], "notify": ["Reload service manager"], "when": "(gitlab_use_systemd is defined and gitlab_use_systemd)"}, "module_options": {"src": "etc/systemd/system/{{ item }}.j2", "dest": "/etc/systemd/system/{{ item }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install GitLab Pages systemd service file", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Install GitLab Pages systemd service file", "notify": ["Reload service manager"], "when": "(gitlab_enable_pages and (gitlab_use_systemd is defined and gitlab_use_systemd))"}, "module_options": {"src": "etc/systemd/system/gitlab-pages.service.j2", "dest": "/etc/systemd/system/gitlab-pages.service", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd daemons", "module": "ansible.builtin.meta", "index": 11, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Reload systemd daemons"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable GitLab SysVinit service", "module": "ansible.builtin.service", "index": 12, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Enable GitLab SysVinit service", "when": "(ansible_service_mgr != 'systemd' and not gitlab_use_systemd|bool)"}, "module_options": {"name": "gitlab", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable GitLab SysVinit service (systemd)", "module": "ansible.builtin.systemd", "index": 13, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Enable GitLab SysVinit service (systemd)", "when": "(ansible_service_mgr == 'systemd' and not gitlab_use_systemd|bool)"}, "module_options": {"name": "gitlab", "enabled": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable GitLab systemd services", "module": "ansible.builtin.service", "index": 14, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Enable GitLab systemd services", "with_items": ["gitlab.slice", "gitlab-mailroom.service", "gitlab-sidekiq.service", "gitlab-unicorn.service", "gitlab-workhorse.service", "{{ \"gitlab-gitaly.service\" if (gitlab_version is version_compare(\"9.0\", operator=\"gt\", strict=True)) else [] }}"], "when": "(gitlab_use_systemd|bool)"}, "module_options": {"name": "{{ item }}", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable GitLab Pages systemd service", "module": "ansible.builtin.service", "index": 15, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Enable GitLab Pages systemd service", "when": "(gitlab_enable_pages and gitlab_use_systemd|bool)"}, "module_options": {"name": "gitlab-pages.service", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "NPM install", "module": "ansible.builtin.command", "index": 16, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "NPM install", "args": {"chdir": "{{ gitlab_ce_git_checkout }}"}, "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_version is version_compare(\"8.17\", operator=\"lt\", strict=True) and gitlab_register_ce_checkout is changed"}, "module_options": "npm install --production", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Yarn install", "module": "ansible.builtin.command", "index": 17, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Yarn install", "args": {"chdir": "{{ gitlab_ce_git_checkout }}"}, "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_version is version_compare(\"8.17\", operator=\"ge\", strict=True) and gitlab_register_ce_checkout is changed"}, "module_options": "yarn install --production", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ruby gems", "module": "ansible.builtin.shell", "index": 18, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Update Ruby gems", "args": {"executable": "bash", "chdir": "{{ gitlab_ce_git_checkout }}"}, "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_register_ce_checkout is changed"}, "module_options": "set -o nounset -o pipefail -o errexit && bundle install --deployment --without {{ gitlab_ce_bundle_install_without[gitlab__database] }} --retry 9999 >> /tmp/gitlab-bundle-install.log 2>&1 && rm -f /tmp/gitlab-bundle-install.log", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize GitLab database (PostgreSQL)", "module": "ansible.builtin.command", "index": 19, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Initialize GitLab database (PostgreSQL)", "environment": {"RAILS_ENV": "production", "GITLAB_ROOT_EMAIL": "{{ gitlab_admin_email }}"}, "args": {"chdir": "{{ gitlab_ce_git_checkout }}"}, "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_bundle_setup_postgresql", "when": "((ansible_local is undefined or (ansible_local is defined and (ansible_local.gitlab is undefined or (ansible_local.gitlab is defined and (ansible_local.gitlab.installed is undefined or (ansible_local.gitlab.installed is defined and not ansible_local.gitlab.installed)))))) and gitlab_register_ce_checkout is changed and gitlab__database == 'postgresql')"}, "module_options": "{{ \"bundle exec rake \" + (\"db:schema:load setup_postgresql\" if (gitlab_version is version(\"12.10\", \"<\")) else \"db:structure:load\") + \" db:seed_fu\" }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Migrate GitLab database", "module": "ansible.builtin.command", "index": 20, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Migrate GitLab database", "args": {"chdir": "{{ gitlab_ce_git_checkout }}"}, "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_bundle_migrate", "notify": ["Restart gitlab", "Restart gitlab.slice"], "when": "(ansible_local|d() and ansible_local.gitlab|d() and (ansible_local.gitlab.installed|d() | bool) and gitlab_register_ce_checkout is changed)"}, "module_options": "bundle exec rake db:migrate RAILS_ENV=production", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clean GitLab assets", "module": "ansible.builtin.command", "index": 21, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Clean GitLab assets", "args": {"chdir": "{{ gitlab_ce_git_checkout }}"}, "become": true, "become_user": "{{ gitlab_user }}", "when": "(ansible_local|d() and ansible_local.gitlab|d() and (ansible_local.gitlab.installed|d() | bool) and gitlab_register_bundle_migrate is changed)"}, "module_options": "bundle exec rake {{ gitlab_assets_clean }} RAILS_ENV=production", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Precompile GitLab assets", "module": "ansible.builtin.command", "index": 22, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Precompile GitLab assets", "args": {"chdir": "{{ gitlab_ce_git_checkout }}"}, "become": true, "become_user": "{{ gitlab_user }}", "notify": ["Restart gitlab", "Restart gitlab.slice"], "when": "gitlab_register_bundle_setup_postgresql is changed or gitlab_register_bundle_migrate is changed"}, "module_options": "bundle exec rake {{ gitlab_assets_compile }} RAILS_ENV=production NODE_ENV=production NODE_OPTIONS='--max_old_space_size=4096'", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clear GitLab cache", "module": "ansible.builtin.command", "index": 23, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Clear GitLab cache", "args": {"chdir": "{{ gitlab_ce_git_checkout }}"}, "become": true, "become_user": "{{ gitlab_user }}", "when": "(ansible_local|d() and ansible_local.gitlab|d() and (ansible_local.gitlab.installed|d() | bool) and gitlab_register_bundle_migrate is changed)"}, "module_options": "bundle exec rake cache:clear RAILS_ENV=production", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure periodical GitLab backups", "module": "ansible.builtin.cron", "index": 24, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml", "options": {"name": "Configure periodical GitLab backups"}, "module_options": {"name": "Create GitLab backup", "special_time": "{{ gitlab_backup_frequency }}", "disabled": "{{ False if (gitlab_backup_enabled|bool) else True }}", "state": "present", "user": "{{ gitlab_user }}", "job": "cd {{ gitlab_ce_git_checkout }} \\ ; PATH=/usr/local/bin:/usr/bin:/bin bundle exec rake gitlab:backup:create RAILS_ENV=production CRON=1 {{ \"SKIP=\" + ([ gitlab_backup_exclude ] if (gitlab_backup_exclude is string) else gitlab_backup_exclude) | join(\",\") if gitlab_backup_exclude | length > 0 else \"\" }}", "cron_file": "gitlab-backup"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that a SQL database is available", "module": "ansible.builtin.assert", "index": 0, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main_env.yml", "options": {"name": "Ensure that a SQL database is available", "tags": ["role::gitlab:env", "role::gitlab:assert"]}, "module_options": {"that": ["gitlab__database == \"postgresql\""], "quiet": true}, "fqcn": "ansible.builtin.assert", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that required Golang version is available", "module": "ansible.builtin.assert", "index": 1, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main_env.yml", "options": {"name": "Ensure that required Golang version is available", "when": "ansible_local.gitlab.installed|d()|bool and gitlab_version is version('12.2', '>')", "tags": ["role::gitlab:env", "role::gitlab:assert"]}, "module_options": {"that": ["ansible_local.golang.installed|bool", "ansible_local.golang.version is version(\"1.14\", \">=\")"], "quiet": true, "fail_msg": "GitLab v12.10+ requires Golang v1.14+ runtime environment. Make sure that the host is upgraded before applying the playbook. On older OS releases, ensure that the Go packages from backports are installed before the GitLab playbook is applied.\n"}, "fqcn": "ansible.builtin.assert", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if bare repository is cloned", "module": "ansible.builtin.stat", "index": 0, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Check if bare repository is cloned", "register": "gitlab_register_gitaly_cloned"}, "module_options": {"path": "{{ gitlab__gitaly_dest }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save current checkout hash for update", "module": "ansible.builtin.command", "index": 1, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Save current checkout hash for update", "args": {"chdir": "{{ gitlab__gitaly_dest }}", "warn": false}, "register": "gitlab_register_gitaly_current_head", "changed_when": false, "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_register_gitaly_cloned.stat.exists"}, "module_options": "git rev-parse HEAD", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Change current HEAD to master in bare repository for update", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Change current HEAD to master in bare repository for update", "args": {"chdir": "{{ gitlab__gitaly_dest }}", "warn": false}, "changed_when": false, "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_register_gitaly_cloned.stat.exists"}, "module_options": "git symbolic-ref HEAD refs/heads/master", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone gitaly source code", "module": "ansible.builtin.git", "index": 3, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Clone gitaly source code", "become": true, "become_user": "{{ gitlab_user }}"}, "module_options": {"repo": "{{ gitlab__gitaly_repo }}", "dest": "{{ gitlab__gitaly_dest }}", "version": "master", "bare": true, "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restore HEAD to previous checkout", "module": "ansible.builtin.copy", "index": 4, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Restore HEAD to previous checkout", "changed_when": false, "when": "gitlab_register_gitaly_cloned.stat.exists"}, "module_options": {"content": "{{ gitlab_register_gitaly_current_head.stdout }}", "dest": "{{ gitlab__gitaly_dest + \"/HEAD\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create gitaly checkout directory", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Create gitaly checkout directory"}, "module_options": {"path": "{{ gitlab__gitaly_checkout }}", "state": "directory", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare gitaly worktree", "module": "ansible.builtin.copy", "index": 6, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Prepare gitaly worktree"}, "module_options": {"content": "gitdir: {{ gitlab__gitaly_dest }}", "dest": "{{ gitlab__gitaly_checkout + \"/.git\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get currently checked out git tag", "module": "ansible.builtin.command", "index": 7, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Get currently checked out git tag", "environment": {"GIT_WORK_TREE": "{{ gitlab__gitaly_checkout }}"}, "args": {"chdir": "{{ gitlab__gitaly_dest }}", "warn": false}, "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_gitaly_target_tag", "changed_when": "gitlab_register_gitaly_target_tag.stdout != gitlab__fact_version.gitaly"}, "module_options": "git describe --tags", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Checkout gitaly", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Checkout gitaly", "environment": {"GIT_WORK_TREE": "{{ gitlab__gitaly_checkout }}"}, "args": {"chdir": "{{ gitlab__gitaly_dest }}", "warn": false}, "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_gitlab__gitaly_checkout", "when": "(gitlab__fact_version.gitaly != gitlab_register_gitaly_target_tag.stdout) or not gitlab_register_gitaly_cloned.stat.exists"}, "module_options": "git checkout -f {{ gitlab__fact_version.gitaly }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop gitaly service for an upgrade", "module": "ansible.builtin.service", "index": 9, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Stop gitaly service for an upgrade", "when": "(ansible_local|d() and ansible_local.gitlab|d() and (ansible_local.gitlab.installed|d() | bool) and ansible_service_mgr == 'systemd' and gitlab_register_gitlab__gitaly_checkout is changed)"}, "module_options": {"name": "gitlab-gitaly.service", "state": "stopped"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup gitaly", "module": "make", "index": 10, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Setup gitaly", "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_register_gitlab__gitaly_checkout is changed"}, "module_options": {"chdir": "{{ gitlab__gitaly_checkout }}"}, "fqcn": "community.general.make", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Start gitaly service after an upgrade", "module": "ansible.builtin.service", "index": 11, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Start gitaly service after an upgrade", "when": "(ansible_local|d() and ansible_local.gitlab|d() and (ansible_local.gitlab.installed|d() | bool) and ansible_service_mgr == 'systemd' and gitlab_register_gitlab__gitaly_checkout is changed)"}, "module_options": {"name": "gitlab-gitaly.service", "state": "started"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Gitaly", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml", "options": {"name": "Configure Gitaly", "notify": "Restart gitaly"}, "module_options": {"src": "var/local/git/gitaly/config.toml.j2", "dest": "{{ gitlab__gitaly_checkout + \"/config.toml\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start GitLab instance (SysVinit)", "module": "ansible.builtin.service", "index": 0, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/start_gitlab_ce.yml", "options": {"name": "Start GitLab instance (SysVinit)", "notify": ["Deactivate GitLab deploy.html page"], "when": "((ansible_local is undefined or (ansible_local is defined and (ansible_local.gitlab is undefined or (ansible_local.gitlab is defined and (ansible_local.gitlab.installed is undefined or (ansible_local.gitlab.installed is defined and not ansible_local.gitlab.installed)))))) and (gitlab_use_systemd is defined and not gitlab_use_systemd))"}, "module_options": {"name": "gitlab", "state": "started"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start GitLab instance (systemd)", "module": "ansible.builtin.service", "index": 1, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/start_gitlab_ce.yml", "options": {"name": "Start GitLab instance (systemd)", "notify": ["Deactivate GitLab deploy.html page"], "when": "((ansible_local is undefined or (ansible_local is defined and (ansible_local.gitlab is undefined or (ansible_local.gitlab is defined and (ansible_local.gitlab.installed is undefined or (ansible_local.gitlab.installed is defined and not ansible_local.gitlab.installed)))))) and (gitlab_use_systemd is defined and gitlab_use_systemd))"}, "module_options": {"name": "gitlab.slice", "state": "started"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if bare repository is cloned", "module": "ansible.builtin.stat", "index": 0, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml", "options": {"name": "Check if bare repository is cloned", "register": "gitlab_register_gitlab_workhorse_cloned"}, "module_options": {"path": "{{ gitlab_workhorse_dest }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save current checkout hash for update", "module": "ansible.builtin.command", "index": 1, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml", "options": {"name": "Save current checkout hash for update", "args": {"chdir": "{{ gitlab_workhorse_dest }}", "warn": false}, "register": "gitlab_register_gitlab_workhorse_current_head", "changed_when": false, "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_register_gitlab_workhorse_cloned.stat.exists"}, "module_options": "git rev-parse HEAD", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Change current HEAD to master in bare repository for update", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml", "options": {"name": "Change current HEAD to master in bare repository for update", "args": {"chdir": "{{ gitlab_workhorse_dest }}", "warn": false}, "changed_when": false, "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_register_gitlab_workhorse_cloned.stat.exists"}, "module_options": "git symbolic-ref HEAD refs/heads/master", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone gitlab-workhorse source code", "module": "ansible.builtin.git", "index": 3, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml", "options": {"name": "Clone gitlab-workhorse source code", "become": true, "become_user": "{{ gitlab_user }}"}, "module_options": {"repo": "{{ gitlab_workhorse_repo }}", "dest": "{{ gitlab_workhorse_dest }}", "version": "master", "bare": true, "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restore HEAD to previous checkout", "module": "ansible.builtin.copy", "index": 4, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml", "options": {"name": "Restore HEAD to previous checkout", "changed_when": false, "when": "gitlab_register_gitlab_workhorse_cloned.stat.exists"}, "module_options": {"content": "{{ gitlab_register_gitlab_workhorse_current_head.stdout }}", "dest": "{{ gitlab_workhorse_dest + \"/HEAD\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if gitlab-workhorse is checked out", "module": "ansible.builtin.stat", "index": 5, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml", "options": {"name": "Check if gitlab-workhorse is checked out", "register": "gitlab_register_gitlab_workhorse_directory"}, "module_options": {"path": "{{ gitlab_workhorse_checkout }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create gitlab-workhorse checkout directory", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml", "options": {"name": "Create gitlab-workhorse checkout directory"}, "module_options": {"path": "{{ gitlab_workhorse_checkout }}", "state": "directory", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare gitlab-workhorse worktree", "module": "ansible.builtin.copy", "index": 7, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml", "options": {"name": "Prepare gitlab-workhorse worktree"}, "module_options": {"content": "gitdir: {{ gitlab_workhorse_dest }}", "dest": "{{ gitlab_workhorse_checkout + \"/.git\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get currently checked out git tag", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml", "options": {"name": "Get currently checked out git tag", "environment": {"GIT_WORK_TREE": "{{ gitlab_workhorse_checkout }}"}, "args": {"chdir": "{{ gitlab_workhorse_dest }}", "warn": false}, "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_gitlab_workhorse_target_tag", "changed_when": "gitlab_register_gitlab_workhorse_target_tag.stdout != gitlab__fact_version.workhorse"}, "module_options": "git describe --tags", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Checkout gitlab-workhorse", "module": "ansible.builtin.command", "index": 9, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml", "options": {"name": "Checkout gitlab-workhorse", "environment": {"GIT_WORK_TREE": "{{ gitlab_workhorse_checkout }}"}, "args": {"chdir": "{{ gitlab_workhorse_dest }}", "warn": false}, "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_gitlab_workhorse_checkout", "when": "(gitlab__fact_version.workhorse != gitlab_register_gitlab_workhorse_target_tag.stdout) or not gitlab_register_gitlab_workhorse_cloned.stat.exists"}, "module_options": "git checkout -f {{ gitlab__fact_version.workhorse }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup gitlab-workhorse", "module": "make", "index": 10, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml", "options": {"name": "Setup gitlab-workhorse", "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_register_gitlab_workhorse_checkout is changed"}, "module_options": {"chdir": "{{ gitlab_workhorse_checkout }}"}, "fqcn": "community.general.make", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create GitLab source directory", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml", "options": {"name": "Create GitLab source directory"}, "module_options": {"path": "{{ gitlab_src_path }}", "state": "directory", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone GitLab CE source code", "module": "ansible.builtin.git", "index": 1, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml", "options": {"name": "Clone GitLab CE source code", "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_ce_source"}, "module_options": {"repo": "{{ gitlab_ce_git_repo }}", "dest": "{{ gitlab_ce_git_dest }}", "version": "master", "bare": true, "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if GitLab CE is checked out", "module": "ansible.builtin.stat", "index": 2, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml", "options": {"name": "Check if GitLab CE is checked out", "register": "gitlab_register_ce_directory"}, "module_options": {"path": "{{ gitlab_ce_git_checkout }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create GitLab CE checkout directory", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml", "options": {"name": "Create GitLab CE checkout directory"}, "module_options": {"path": "{{ gitlab_ce_git_checkout }}", "state": "directory", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare GitLab CE worktree", "module": "ansible.builtin.copy", "index": 4, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml", "options": {"name": "Prepare GitLab CE worktree"}, "module_options": {"content": "gitdir: {{ gitlab_ce_git_dest }}", "dest": "{{ gitlab_ce_git_checkout + \"/.git\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get commit hash of target checkout", "module": "ansible.builtin.command", "index": 5, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml", "options": {"name": "Get commit hash of target checkout", "environment": {"GIT_WORK_TREE": "{{ gitlab_ce_git_checkout }}"}, "args": {"chdir": "{{ gitlab_ce_git_dest }}", "warn": false}, "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_ce_target_branch", "changed_when": "gitlab_register_ce_target_branch.stdout != gitlab_register_ce_source.before"}, "module_options": "git rev-parse {{ gitlab__release }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare GitLab installation for an upgrade", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml", "options": {"name": "Prepare GitLab installation for an upgrade", "when": "(ansible_local|d() and ansible_local.gitlab|d() and (ansible_local.gitlab.installed|d() | bool) and ((gitlab_register_ce_target_branch.stdout != gitlab_register_ce_source.before) or (ansible_local.gitlab.version is defined and ansible_local.gitlab.version != gitlab_version)))"}, "module_options": "gitlab_ce_pre_upgrade.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Checkout GitLab CE", "module": "ansible.builtin.command", "index": 7, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml", "options": {"name": "Checkout GitLab CE", "environment": {"GIT_WORK_TREE": "{{ gitlab_ce_git_checkout }}"}, "args": {"chdir": "{{ gitlab_ce_git_dest }}", "warn": false}, "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_ce_checkout", "when": "(gitlab_register_ce_source.before is undefined or (gitlab_register_ce_source.before is defined and gitlab_register_ce_target_branch.stdout is defined and gitlab_register_ce_source.before != gitlab_register_ce_target_branch.stdout))"}, "module_options": "git checkout -f {{ gitlab__release }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if bare repository is cloned", "module": "ansible.builtin.stat", "index": 0, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Check if bare repository is cloned", "register": "gitlab_register_shell_cloned"}, "module_options": {"path": "{{ gitlab_shell_git_dest }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save current checkout hash for update", "module": "ansible.builtin.command", "index": 1, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Save current checkout hash for update", "args": {"chdir": "{{ gitlab_shell_git_dest }}", "warn": false}, "register": "gitlab_register_shell_current_head", "changed_when": false, "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_register_shell_cloned.stat.exists"}, "module_options": "git rev-parse HEAD", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Change current HEAD to master in bare repository for update", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Change current HEAD to master in bare repository for update", "args": {"chdir": "{{ gitlab_shell_git_dest }}", "warn": false}, "changed_when": false, "become": true, "become_user": "{{ gitlab_user }}", "when": "gitlab_register_shell_cloned.stat.exists"}, "module_options": "git symbolic-ref HEAD refs/heads/master", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create GitLab source directory", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Create GitLab source directory"}, "module_options": {"path": "{{ gitlab_src_path }}", "state": "directory", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone gitlab-shell source code", "module": "ansible.builtin.git", "index": 4, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Clone gitlab-shell source code", "become": true, "become_user": "{{ gitlab_user }}"}, "module_options": {"repo": "{{ gitlab_shell_git_repo }}", "dest": "{{ gitlab_shell_git_dest }}", "version": "master", "bare": true, "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restore HEAD to previous checkout", "module": "ansible.builtin.copy", "index": 5, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Restore HEAD to previous checkout", "changed_when": false, "when": "gitlab_register_shell_cloned.stat.exists"}, "module_options": {"content": "{{ gitlab_register_shell_current_head.stdout }}", "dest": "{{ gitlab_shell_git_dest + \"/HEAD\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create gitlab-shell checkout directory", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Create gitlab-shell checkout directory"}, "module_options": {"path": "{{ gitlab_shell_git_checkout }}", "state": "directory", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare gitlab-shell worktree", "module": "ansible.builtin.copy", "index": 7, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Prepare gitlab-shell worktree"}, "module_options": {"content": "gitdir: {{ gitlab_shell_git_dest }}", "dest": "{{ gitlab_shell_git_checkout + \"/.git\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get currently checked out git tag", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Get currently checked out git tag", "environment": {"GIT_WORK_TREE": "{{ gitlab_shell_git_checkout }}"}, "args": {"chdir": "{{ gitlab_shell_git_dest }}", "warn": false}, "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_shell_target_tag", "changed_when": "gitlab_register_shell_target_tag.stdout != gitlab__fact_version.shell"}, "module_options": "git describe --tags", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Checkout gitlab-shell", "module": "ansible.builtin.command", "index": 9, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Checkout gitlab-shell", "environment": {"GIT_WORK_TREE": "{{ gitlab_shell_git_checkout }}"}, "args": {"chdir": "{{ gitlab_shell_git_dest }}", "warn": false}, "become": true, "become_user": "{{ gitlab_user }}", "register": "gitlab_register_shell_checkout", "when": "((gitlab__fact_version.shell != gitlab_register_shell_target_tag.stdout) or not gitlab_register_shell_cloned.stat.exists | bool)"}, "module_options": "git checkout --force {{ gitlab__fact_version.shell }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure gitlab-shell", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Configure gitlab-shell"}, "module_options": {"src": "var/local/git/gitlab-shell/config.yml.j2", "dest": "{{ gitlab_shell_git_checkout + \"/config.yml\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create GitLab data root directories", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Create GitLab data root directories", "with_items": ["{{ gitlab_repositories_path }}", "{{ gitlab_satellites_path }}"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup gitlab-shell", "module": "ansible.builtin.shell", "index": 12, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml", "options": {"name": "Setup gitlab-shell", "args": {"chdir": "{{ gitlab_shell_git_checkout }}"}, "when": "gitlab_register_shell_checkout is changed"}, "module_options": "./bin/install ; make compile", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Install required packages", "register": "gitlab__register_packages", "until": "gitlab__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (gitlab__base_packages + (gitlab__release_packages[gitlab__distribution_release] | d([])) + (gitlab__database_packages[gitlab__distribution_release][gitlab__database] | d([])))) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create GitLab system group", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Create GitLab system group"}, "module_options": {"name": "{{ gitlab_group }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create GitLab user", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Create GitLab user"}, "module_options": {"name": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "home": "{{ gitlab_home }}", "shell": "{{ gitlab__shell }}", "comment": "GitLab", "groups": "{{ gitlab_user_append_groups | join(\",\") | default(omit) }}", "append": true, "system": true, "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create GitLab application directory", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Create GitLab application directory"}, "module_options": {"path": "{{ gitlab_app_root_path }}", "state": "directory", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow access to GitLab application directory by the webserver", "module": "ansible.posix.acl", "index": 6, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Allow access to GitLab application directory by the webserver", "when": "gitlab_support_filesystem_acl|bool"}, "module_options": {"name": "{{ gitlab_app_root_path }}", "entity": "www-data", "etype": "group", "permissions": "x", "state": "present"}, "fqcn": "ansible.posix.acl", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Allow GitLab user to the ~/.ssh directory", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Allow GitLab user to the ~/.ssh directory"}, "module_options": {"path": "{{ gitlab_home + \"/.ssh\" }}", "state": "directory", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure ~/.gitconfig", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Configure ~/.gitconfig"}, "module_options": {"src": "var/local/git/gitconfig.j2", "dest": "{{ gitlab_home + \"/.gitconfig\" }}", "owner": "{{ gitlab_user }}", "group": "{{ gitlab_group }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download GitLab CE sources", "module": "ansible.builtin.include_tasks", "index": 9, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Download GitLab CE sources"}, "module_options": "download_gitlab_ce.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check GitLab version numbers", "module": "ansible.builtin.script", "index": 10, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Check GitLab version numbers", "register": "gitlab__register_version", "changed_when": false, "check_mode": false}, "module_options": "script/gitlab-version{{ \"2\" if (ansible_python_version is version_compare(\"3.5\", \"<\")) else \"3\" }} {{ gitlab_ce_git_checkout }}", "fqcn": "ansible.builtin.script", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set facts about GitLab version numbers", "module": "ansible.builtin.set_fact", "index": 11, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Set facts about GitLab version numbers"}, "module_options": {"gitlab__fact_version": {"gitaly": "{{ (gitlab__register_version.stdout | from_json)[\"gitaly_server_version\"]    | d(\"\") }}", "pages": "{{ (gitlab__register_version.stdout | from_json)[\"gitlab_pages_version\"]     | d(\"\") }}", "shell": "{{ (gitlab__register_version.stdout | from_json)[\"gitlab_shell_version\"]     | d(\"\") }}", "workhorse": "{{ (gitlab__register_version.stdout | from_json)[\"gitlab_workhorse_version\"] | d(\"\") }}", "ce": "{{ (gitlab__register_version.stdout | from_json)[\"version\"]                  | d(\"\") }}"}}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure gitlab-shell", "module": "ansible.builtin.include_tasks", "index": 12, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Configure gitlab-shell"}, "module_options": "configure_gitlab-shell.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure GitLab Pages", "module": "ansible.builtin.include_tasks", "index": 13, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Configure GitLab Pages", "when": "gitlab_enable_pages | bool"}, "module_options": "configure_gitlab-pages.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure GitLab WorkHorse", "module": "ansible.builtin.include_tasks", "index": 14, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Configure GitLab WorkHorse"}, "module_options": "configure_gitlab-workhorse.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure GitLab CE", "module": "ansible.builtin.include_tasks", "index": 15, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Configure GitLab CE"}, "module_options": "configure_gitlab_ce.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Gitaly", "module": "ansible.builtin.include_tasks", "index": 16, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Configure Gitaly", "when": "gitlab_version is version_compare(\"9.0\", operator=\"gt\", strict=True)"}, "module_options": "configure_gitaly.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start GitLab CE", "module": "ansible.builtin.include_tasks", "index": 17, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Start GitLab CE"}, "module_options": "start_gitlab_ce.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 18, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save information about GitLab CE in Ansible Facts", "module": "ansible.builtin.template", "index": 19, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/main.yml", "options": {"name": "Save information about GitLab CE in Ansible Facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/gitlab.fact.j2", "dest": "/etc/ansible/facts.d/gitlab.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Display deploy.html page", "module": "ansible.builtin.command", "index": 0, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml", "options": {"name": "Display deploy.html page", "args": {"creates": "{{ gitlab_ce_git_checkout + \"/public/index.html\" }}"}}, "module_options": "cp {{ gitlab_ce_git_checkout + \"/public/deploy.html\" }} {{ gitlab_ce_git_checkout + \"/public/index.html\" }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop Sidekiq before upgrade (sysvinit)", "module": "ansible.builtin.command", "index": 1, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml", "options": {"name": "Stop Sidekiq before upgrade (sysvinit)", "args": {"chdir": "{{ gitlab_ce_git_checkout }}"}, "become": true, "become_user": "{{ gitlab_user }}", "when": "not gitlab_use_systemd | bool"}, "module_options": "bundle exec rake sidekiq:stop RAILS_ENV=production", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop Sidekiq before upgrade (systemd)", "module": "ansible.builtin.service", "index": 2, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml", "options": {"name": "Stop Sidekiq before upgrade (systemd)", "when": "gitlab_use_systemd | bool"}, "module_options": {"name": "gitlab-sidekiq.service", "state": "stopped"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create backup of GitLab instance", "module": "ansible.builtin.command", "index": 3, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml", "options": {"name": "Create backup of GitLab instance", "args": {"chdir": "{{ gitlab_ce_git_checkout }}"}, "register": "gitlab__register_backup", "become": true, "become_user": "{{ gitlab_user }}", "changed_when": "gitlab__register_backup.stdout|d()"}, "module_options": "bundle exec rake gitlab:backup:create RAILS_ENV=production\n{{ \"SKIP=\" + ([ gitlab_backup_exclude ]\n        if (gitlab_backup_exclude is string) else gitlab_backup_exclude) | join(\",\")\n          if gitlab_backup_exclude | length > 0 else \"\" }}\n", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop GitLab before upgrade (sysvinit)", "module": "ansible.builtin.service", "index": 4, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml", "options": {"name": "Stop GitLab before upgrade (sysvinit)", "when": "not gitlab_use_systemd | bool"}, "module_options": {"name": "gitlab", "state": "stopped"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop GitLab before upgrade (systemd)", "module": "ansible.builtin.service", "index": 5, "defined_in": "testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml", "options": {"name": "Stop GitLab before upgrade (systemd)", "when": "gitlab_use_systemd | bool"}, "module_options": {"name": "gitlab.slice", "state": "stopped"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/gitlab"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "postldap", "defined_in": "testdata/scm_repo/roles/postldap", "task_yamls": ["testdata/scm_repo/roles/postldap/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/postldap/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/postldap/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/postldap/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure required POSIX group exist", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/postldap/tasks/main.yml", "options": {"name": "Make sure required POSIX group exist", "tags": ["role::postldap:user", "role::postldap:group"]}, "module_options": {"name": "{{ postldap__vmail_posix_group | d(postldap__vmail_posix_user) }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/postldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure required POSIX system account exist", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/postldap/tasks/main.yml", "options": {"name": "Make sure required POSIX system account exist", "tags": ["role::postldap:user"]}, "module_options": {"name": "{{ postldap__vmail_posix_user }}", "state": "present", "comment": "Postfix Virtual Mail user", "group": "{{ postldap__vmail_posix_group | d(postldap__vmail_posix_user) }}", "home": "{{ postldap__mailbox_base }}", "create_home": true, "system": true, "shell": "/usr/sbin/nologin", "skeleton": null}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/postldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure vmail home directory ({{ postldap__mailbox_base }}) exists with restrictive permissions", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/postldap/tasks/main.yml", "options": {"name": "Make sure vmail home directory ({{ postldap__mailbox_base }}) exists with restrictive permissions", "tags": ["role::postldap:user"]}, "module_options": {"dest": "{{ postldap__mailbox_base }}", "state": "directory", "owner": "{{ postldap__vmail_posix_user }}", "group": "{{ postldap__vmail_posix_group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/postldap/tasks/main.yml", "options": {"name": "Make sure Ansible local facts directory exists"}, "module_options": {"dest": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure PostLDAP local facts", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/postldap/tasks/main.yml", "options": {"name": "Configure PostLDAP local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/postldap.fact.j2", "dest": "/etc/ansible/facts.d/postldap.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 8, "defined_in": "testdata/scm_repo/roles/postldap/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/postldap"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "dokuwiki", "defined_in": "testdata/scm_repo/roles/dokuwiki", "task_yamls": ["testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "testdata/scm_repo/roles/dokuwiki/tasks/dokuwiki/pre_main.yml", "testdata/scm_repo/roles/dokuwiki/tasks/dokuwiki/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Pre hooks", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Pre hooks"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"dokuwiki/pre_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install requested packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Install requested packages", "register": "dokuwiki__register_packages", "until": "dokuwiki__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (dokuwiki__base_packages + dokuwiki__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create DokuWiki group", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Create DokuWiki group"}, "module_options": {"name": "{{ dokuwiki__group }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create DokuWiki user", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Create DokuWiki user"}, "module_options": {"name": "{{ dokuwiki__user }}", "group": "{{ dokuwiki__group }}", "home": "{{ dokuwiki__home }}", "shell": "/bin/false", "comment": "DokuWiki", "createhome": false, "system": true, "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create DokuWiki source directory", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Create DokuWiki source directory"}, "module_options": {"path": "{{ dokuwiki__src }}", "state": "directory", "owner": "{{ dokuwiki__user }}", "group": "{{ dokuwiki__group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone DokuWiki source from deploy server", "module": "ansible.builtin.git", "index": 6, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Clone DokuWiki source from deploy server", "become": true, "become_user": "{{ dokuwiki__user }}", "register": "dokuwiki__register_source", "until": "dokuwiki__register_source is succeeded"}, "module_options": {"repo": "{{ dokuwiki__git_repo }}", "dest": "{{ dokuwiki__git_dest }}", "version": "master", "bare": true, "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create DokuWiki checkout directory", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Create DokuWiki checkout directory", "with_items": ["{{ dokuwiki__www }}", "{{ dokuwiki__git_checkout }}"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "{{ dokuwiki__user }}", "group": "{{ dokuwiki__webserver_user }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare DokuWiki worktree", "module": "ansible.builtin.copy", "index": 8, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Prepare DokuWiki worktree"}, "module_options": {"content": "gitdir: {{ dokuwiki__git_dest }}", "dest": "{{ dokuwiki__git_checkout + \"/.git\" }}", "owner": "{{ dokuwiki__user }}", "group": "{{ dokuwiki__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get commit hash of target checkout", "module": "ansible.builtin.command", "index": 9, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Get commit hash of target checkout", "environment": {"GIT_WORK_TREE": "{{ dokuwiki__git_checkout }}"}, "args": {"chdir": "{{ dokuwiki__git_dest }}", "warn": false}, "become": true, "become_user": "{{ dokuwiki__user }}", "register": "dokuwiki__register_target_branch", "changed_when": "dokuwiki__register_target_branch.stdout != dokuwiki__register_source.before"}, "module_options": "git rev-parse {{ dokuwiki__git_version }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Checkout DokuWiki", "module": "ansible.builtin.command", "index": 10, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Checkout DokuWiki", "environment": {"GIT_WORK_TREE": "{{ dokuwiki__git_checkout }}"}, "args": {"chdir": "{{ dokuwiki__git_dest }}", "warn": false}, "become": true, "become_user": "{{ dokuwiki__user }}", "register": "dokuwiki__register_checkout", "when": "(dokuwiki__register_source.before is undefined or (dokuwiki__register_source.before is defined and dokuwiki__register_target_branch.stdout is defined and dokuwiki__register_source.before != dokuwiki__register_target_branch.stdout))"}, "module_options": "git checkout -f {{ dokuwiki__git_version }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove specified plugins if requested", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Remove specified plugins if requested", "with_flattened": ["{{ dokuwiki__default_plugins }}", "{{ dokuwiki__plugins }}"], "when": "(dokuwiki__plugins_enabled|bool and (item.dest|d() and item.dest) and (item.state|d() and item.state == 'absent'))"}, "module_options": {"path": "{{ dokuwiki__git_checkout + \"/lib/plugins/\" + item.dest }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install specified plugins from git repositories", "module": "ansible.builtin.git", "index": 12, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Install specified plugins from git repositories", "become": true, "become_user": "{{ dokuwiki__user }}", "with_flattened": ["{{ dokuwiki__default_plugins }}", "{{ dokuwiki__plugins }}"], "register": "dokuwiki__register_git_plugins", "until": "dokuwiki__register_git_plugins is succeeded", "when": "(dokuwiki__plugins_enabled|bool and (item.repo|d() and item.repo) and (item.dest|d() and item.dest) and (item.state is undefined or (item.state|d() and item.state != 'absent')))"}, "module_options": {"repo": "{{ item.repo }}", "dest": "{{ dokuwiki__git_checkout + \"/lib/plugins/\" + item.dest }}", "version": "{{ item.version | d(omit) }}", "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove specified templates if requested", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Remove specified templates if requested", "with_flattened": ["{{ dokuwiki__default_templates }}", "{{ dokuwiki__templates }}"], "when": "(dokuwiki__plugins_enabled|bool and (item.dest|d() and item.dest) and (item.state|d() and item.state == 'absent'))"}, "module_options": {"path": "{{ dokuwiki__git_checkout + \"/lib/tpl/\" + item.dest }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install specified templates from git repositories", "module": "ansible.builtin.git", "index": 14, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Install specified templates from git repositories", "become": true, "become_user": "{{ dokuwiki__user }}", "with_flattened": ["{{ dokuwiki__default_templates }}", "{{ dokuwiki__templates }}"], "register": "dokuwiki__register_git_templates", "until": "dokuwiki__register_git_templates is succeeded", "when": "(dokuwiki__plugins_enabled|bool and (item.repo|d() and item.repo) and (item.dest|d() and item.dest) and (item.state is undefined or (item.state|d() and item.state != 'absent')))"}, "module_options": {"repo": "{{ item.repo }}", "dest": "{{ dokuwiki__git_checkout + \"/lib/tpl/\" + item.dest }}", "version": "{{ item.version | d(omit) }}", "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate protected local configuration file", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Generate protected local configuration file", "no_log": "{{ debops__no_log | d(True) }}", "tags": ["role::dokuwiki:conf"]}, "module_options": {"src": "srv/www/dokuwiki/sites/public/conf/local.protected.php.j2", "dest": "{{ dokuwiki__git_checkout + \"/conf/local.protected.php\" }}", "owner": "{{ dokuwiki__user }}", "group": "{{ dokuwiki__group }}", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate protected plugin configuration file", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Generate protected plugin configuration file", "no_log": "{{ debops__no_log | d(True) }}", "tags": ["role::dokuwiki:conf"]}, "module_options": {"src": "srv/www/dokuwiki/sites/public/conf/plugins.protected.php.j2", "dest": "{{ dokuwiki__git_checkout + \"/conf/plugins.protected.php\" }}", "owner": "{{ dokuwiki__user }}", "group": "{{ dokuwiki__group }}", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate local MIME configuration file", "module": "ansible.builtin.template", "index": 17, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Generate local MIME configuration file", "tags": ["role::dokuwiki:conf", "role::dokuwiki:mime"]}, "module_options": {"src": "srv/www/dokuwiki/sites/public/conf/mime.local.conf.j2", "dest": "{{ dokuwiki__git_checkout + \"/conf/mime.local.conf\" }}", "owner": "{{ dokuwiki__user }}", "group": "{{ dokuwiki__group }}", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install maintenance scripts", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Install maintenance scripts", "with_items": ["etc/cron.daily/dokuwiki-cleanup", "etc/cron.weekly/dokuwiki-wikipedia-blacklist"]}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create farm base directory", "module": "ansible.builtin.file", "index": 19, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Create farm base directory", "when": "dokuwiki__farm|bool"}, "module_options": {"path": "{{ dokuwiki__farm_path }}", "state": "directory", "owner": "{{ dokuwiki__user }}", "group": "{{ dokuwiki__webserver_user }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create farm animal directories", "module": "ansible.builtin.copy", "index": 20, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Create farm animal directories", "with_items": "{{ dokuwiki__farm_animals }}", "when": "(dokuwiki__farm|bool and dokuwiki__farm_animals)"}, "module_options": {"src": "srv/www/dokuwiki/farm/animal/", "dest": "{{ dokuwiki__farm_path + \"/\" + item + \"/\" }}", "owner": "{{ dokuwiki__user }}", "group": "{{ dokuwiki__webserver_user }}", "mode": "0750", "force": false}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable DokuWiki farm if not enabled", "module": "ansible.builtin.file", "index": 21, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Disable DokuWiki farm if not enabled", "when": "(not dokuwiki__farm|bool or not dokuwiki__farm_animals)"}, "module_options": {"path": "{{ dokuwiki__git_checkout + \"/inc/preload.php\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure DokuWiki farm preload script", "module": "ansible.builtin.template", "index": 22, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Configure DokuWiki farm preload script", "when": "(dokuwiki__farm|bool and dokuwiki__farm_animals)"}, "module_options": {"src": "srv/www/dokuwiki/sites/public/inc/preload.php.j2", "dest": "{{ dokuwiki__git_checkout + \"/inc/preload.php\" }}", "owner": "{{ dokuwiki__user }}", "group": "{{ dokuwiki__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download initial anti-spam blacklist", "module": "ansible.builtin.command", "index": 23, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Download initial anti-spam blacklist", "args": {"creates": "{{ dokuwiki__git_checkout + \"/conf/wordblock.local.conf\" }}"}}, "module_options": "/etc/cron.weekly/dokuwiki-wikipedia-blacklist", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Delete extra files on remote host", "module": "ansible.builtin.file", "index": 24, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Delete extra files on remote host", "with_flattened": ["{{ dokuwiki__extra_files }}", "{{ dokuwiki__group_extra_files }}", "{{ dokuwiki__host_extra_files }}"], "when": "(item.dest|d() or item.path|d() or item.name|d()) and (item.state|d('present') == 'absent')", "tags": ["role::dokuwiki"]}, "module_options": {"path": "{{ item.dest | d(item.path | d(item.name)) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy extra files to remote host", "module": "ansible.builtin.copy", "index": 25, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Copy extra files to remote host", "with_flattened": ["{{ dokuwiki__extra_files }}", "{{ dokuwiki__group_extra_files }}", "{{ dokuwiki__host_extra_files }}"], "when": "(item.src|d() or item.content is defined) and (item.dest|d() or item.path|d() or item.name|d()) and (item.state|d('present') != 'absent')", "tags": ["role::dokuwiki"]}, "module_options": {"dest": "{{ item.dest     | d(item.path | d(item.name)) }}", "src": "{{ item.src      | d(omit) }}", "content": "{{ item.content  | d(omit) }}", "owner": "{{ item.owner    | d(omit) }}", "group": "{{ item.group    | d(omit) }}", "mode": "{{ item.mode     | d(omit) }}", "selevel": "{{ item.selevel  | d(omit) }}", "serole": "{{ item.serole   | d(omit) }}", "setype": "{{ item.setype   | d(omit) }}", "seuser": "{{ item.seuser   | d(omit) }}", "follow": "{{ item.follow   | d(omit) }}", "force": "{{ item.force    | d(omit) }}", "backup": "{{ item.backup   | d(omit) }}", "validate": "{{ item.validate | d(omit) }}", "remote_src": "{{ item.remote_src | d(omit) }}", "directory_mode": "{{ item.directory_mode | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Post hooks", "module": "ansible.builtin.include_tasks", "index": 26, "defined_in": "testdata/scm_repo/roles/dokuwiki/tasks/main.yml", "options": {"name": "Post hooks"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"dokuwiki/post_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/dokuwiki"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "apt_mark", "defined_in": "testdata/scm_repo/roles/apt_mark", "task_yamls": ["testdata/scm_repo/roles/apt_mark/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/apt_mark/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/apt_mark"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure APT autoremove options", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/apt_mark/tasks/main.yml", "options": {"name": "Configure APT autoremove options", "when": "apt_mark__enabled|bool"}, "module_options": {"src": "etc/apt/apt.conf.d/25autoremove-recommends.conf.j2", "dest": "/etc/apt/apt.conf.d/25autoremove-recommends.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt_mark"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check state of the APT packages", "module": "ansible.builtin.script", "index": 2, "defined_in": "testdata/scm_repo/roles/apt_mark/tasks/main.yml", "options": {"name": "Check state of the APT packages", "register": "apt_mark__register_state", "changed_when": false, "check_mode": false, "when": "apt_mark__enabled|bool"}, "module_options": "script/apt-mark-status{{ \"2\" if (ansible_python_version is version_compare(\"3.5\", \"<\")) else \"3\" }}", "fqcn": "ansible.builtin.script", "used_in": ["testdata/scm_repo/roles/apt_mark"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set facts about APT package state", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "testdata/scm_repo/roles/apt_mark/tasks/main.yml", "options": {"name": "Set facts about APT package state", "when": "apt_mark__enabled|bool"}, "module_options": {"apt_mark__fact_auto": "{{ (apt_mark__register_state.stdout|from_json)[\"auto\"] }}", "apt_mark__fact_hold": "{{ (apt_mark__register_state.stdout|from_json)[\"hold\"] }}", "apt_mark__fact_installed": "{{ (apt_mark__register_state.stdout|from_json)[\"installed\"] }}", "apt_mark__fact_manual": "{{ (apt_mark__register_state.stdout|from_json)[\"manual\"] }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/apt_mark"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set package state as installed automatically", "module": "ansible.builtin.command", "index": 4, "defined_in": "testdata/scm_repo/roles/apt_mark/tasks/main.yml", "options": {"name": "Set package state as installed automatically", "with_items": "{{ apt_mark__combined_packages | debops.debops.parse_kv_items }}", "when": "(apt_mark__enabled|bool and (item.packages|d([ item.name ]) | intersect(apt_mark__fact_installed)) | symmetric_difference(apt_mark__fact_manual) and (item.packages|d([ item.name ]) | intersect(apt_mark__fact_installed)) | difference(apt_mark__fact_auto) and item.state|d('manual') in [ 'auto', 'auto-hold', 'auto-unhold' ])"}, "module_options": "apt-mark auto {{ ((item.packages | d([ item.name ])) | intersect(apt_mark__fact_installed)) | join(' ') }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/apt_mark"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set package state as installed manually", "module": "ansible.builtin.command", "index": 5, "defined_in": "testdata/scm_repo/roles/apt_mark/tasks/main.yml", "options": {"name": "Set package state as installed manually", "with_items": "{{ apt_mark__combined_packages | debops.debops.parse_kv_items }}", "when": "(apt_mark__enabled|bool and (item.packages|d([ item.name ]) | intersect(apt_mark__fact_installed)) | symmetric_difference(apt_mark__fact_auto) and (item.packages|d([ item.name ]) | intersect(apt_mark__fact_installed)) | difference(apt_mark__fact_manual) and item.state|d('manual') in [ 'manual', 'manual-hold', 'manual-unhold' ])"}, "module_options": "apt-mark manual {{ ((item.packages | d([ item.name ])) | intersect(apt_mark__fact_installed)) | join(' ') }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/apt_mark"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Hold current package state", "module": "ansible.builtin.command", "index": 6, "defined_in": "testdata/scm_repo/roles/apt_mark/tasks/main.yml", "options": {"name": "Hold current package state", "with_items": "{{ apt_mark__combined_packages | debops.debops.parse_kv_items }}", "when": "(apt_mark__enabled|bool and (item.packages|d([ item.name ]) | intersect(apt_mark__fact_installed)) | difference(apt_mark__fact_hold) and item.state|d('manual') in [ 'hold', 'auto-hold', 'manual-hold' ])"}, "module_options": "apt-mark hold {{ ((item.packages | d([ item.name ])) | intersect(apt_mark__fact_installed)) | join(' ') }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/apt_mark"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Unhold current package state", "module": "ansible.builtin.command", "index": 7, "defined_in": "testdata/scm_repo/roles/apt_mark/tasks/main.yml", "options": {"name": "Unhold current package state", "with_items": "{{ apt_mark__combined_packages | debops.debops.parse_kv_items }}", "when": "(apt_mark__enabled|bool and (item.packages|d([ item.name ]) | intersect(apt_mark__fact_installed)) | intersect(apt_mark__fact_hold) and item.state|d('manual') in [ 'unhold', 'auto-unhold', 'manual-unhold' ])"}, "module_options": "apt-mark unhold {{ ((item.packages | d([ item.name ])) | intersect(apt_mark__fact_installed)) | join(' ') }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/apt_mark"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/apt_mark/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt_mark"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save apt-mark local facts", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/apt_mark/tasks/main.yml", "options": {"name": "Save apt-mark local facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/apt_mark.fact.j2", "dest": "/etc/ansible/facts.d/apt_mark.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt_mark"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "homeassistant", "defined_in": "testdata/scm_repo/roles/homeassistant", "task_yamls": ["testdata/scm_repo/roles/homeassistant/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Ensure specified packages are in there desired state", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/homeassistant/tasks/main.yml", "options": {"name": "Ensure specified packages are in there desired state", "when": "(homeassistant__deploy_state == \"present\")", "register": "homeassistant__register_packages", "until": "homeassistant__register_packages is succeeded", "tags": ["role::homeassistant:pkgs"]}, "module_options": {"name": "{{ q(\"flattened\", homeassistant__combined_packages) }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/homeassistant"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Home Assistant system group", "module": "ansible.builtin.group", "index": 1, "defined_in": "testdata/scm_repo/roles/homeassistant/tasks/main.yml", "options": {"name": "Create Home Assistant system group"}, "module_options": {"name": "{{ homeassistant__group }}", "state": "{{ \"present\" if (homeassistant__deploy_state == \"present\") else \"absent\" }}", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/homeassistant"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Home Assistant system user", "module": "ansible.builtin.user", "index": 2, "defined_in": "testdata/scm_repo/roles/homeassistant/tasks/main.yml", "options": {"name": "Create Home Assistant system user"}, "module_options": {"name": "{{ homeassistant__user }}", "group": "{{ homeassistant__group }}", "groups": "{{ homeassistant__groups | join(\",\") | default(omit) }}", "append": false, "home": "{{ homeassistant__home_path }}", "comment": "{{ homeassistant__gecos }}", "shell": "{{ homeassistant__shell }}", "state": "{{ \"present\" if (homeassistant__deploy_state == \"present\") else \"absent\" }}", "system": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/homeassistant"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone Home Assistant git repository", "module": "ansible.builtin.git", "index": 3, "defined_in": "testdata/scm_repo/roles/homeassistant/tasks/main.yml", "options": {"name": "Clone Home Assistant git repository", "become": true, "become_user": "{{ homeassistant__user }}", "register": "homeassistant__register_git", "when": "(homeassistant__deploy_state == \"present\")"}, "module_options": {"repo": "{{ homeassistant__git_repo }}", "dest": "{{ homeassistant__git_dest }}", "depth": "{{ homeassistant__git_depth }}", "version": "{{ homeassistant__git_version }}", "recursive": "{{ homeassistant__git_recursive|bool }}", "update": "{{ homeassistant__git_update|bool }}"}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/homeassistant"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install hass without virtualenv", "module": "ansible.builtin.pip", "index": 4, "defined_in": "testdata/scm_repo/roles/homeassistant/tasks/main.yml", "options": {"name": "Install hass without virtualenv", "become": true, "become_user": "{{ homeassistant__user }}", "when": "not homeassistant__virtualenv|bool and homeassistant__register_git is changed", "notify": ["Restart Home Assistant"]}, "module_options": {"name": ".", "chdir": "{{ homeassistant__git_dest }}", "executable": "pip3", "extra_args": "--user --upgrade"}, "fqcn": "ansible.builtin.pip", "used_in": ["testdata/scm_repo/roles/homeassistant"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install hass in virtualenv", "module": "ansible.builtin.pip", "index": 5, "defined_in": "testdata/scm_repo/roles/homeassistant/tasks/main.yml", "options": {"name": "Install hass in virtualenv", "become": true, "become_user": "{{ homeassistant__user }}", "when": "homeassistant__virtualenv|bool and homeassistant__register_git is changed", "notify": ["Restart Home Assistant"]}, "module_options": {"name": ".", "chdir": "{{ homeassistant__git_dest }}", "extra_args": "--upgrade", "virtualenv": "{{ homeassistant__virtualenv_path }}", "virtualenv_python": "python3"}, "fqcn": "ansible.builtin.pip", "used_in": ["testdata/scm_repo/roles/homeassistant"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Home Assistant config dir exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/homeassistant/tasks/main.yml", "options": {"name": "Ensure Home Assistant config dir exists", "become": true, "become_user": "{{ homeassistant__user }}", "when": "(homeassistant__deploy_state == \"present\")"}, "module_options": {"path": "{{ homeassistant__home_path }}/.homeassistant", "mode": "0750", "state": "directory"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/homeassistant"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Home Assistant www dir exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/homeassistant/tasks/main.yml", "options": {"name": "Ensure Home Assistant www dir exists", "when": "(homeassistant__deploy_state == \"present\")"}, "module_options": {"path": "{{ homeassistant__home_path }}/www", "owner": "{{ homeassistant__user }}", "group": "{{ homeassistant__webserver_user }}", "mode": "0750", "state": "directory"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/homeassistant"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Home Assistant www in config dir is a symlink", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/homeassistant/tasks/main.yml", "options": {"name": "Ensure Home Assistant www in config dir is a symlink", "become": true, "become_user": "{{ homeassistant__user }}", "when": "(homeassistant__deploy_state == \"present\")"}, "module_options": {"src": "{{ homeassistant__home_path }}/www", "dest": "{{ homeassistant__home_path }}/.homeassistant/www", "state": "link", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/homeassistant"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure systemd unit file", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/homeassistant/tasks/main.yml", "options": {"name": "Configure systemd unit file", "register": "homeassistant__register_systemd_unit_file", "when": "(homeassistant__deploy_state == \"present\")"}, "module_options": {"src": "etc/systemd/system/home-assistant.service.j2", "dest": "/etc/systemd/system/home-assistant.service", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/homeassistant"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set Home Assistant state using systemd", "module": "ansible.builtin.systemd", "index": 10, "defined_in": "testdata/scm_repo/roles/homeassistant/tasks/main.yml", "options": {"name": "Set Home Assistant state using systemd", "when": "(homeassistant__deploy_state == \"present\" and ansible_distribution_release not in [\"trusty\"])"}, "module_options": {"name": "home-assistant", "state": "{{ \"started\" if (homeassistant__deploy_state == \"present\") else \"stopped\" }}", "enabled": true, "masked": false, "daemon_reload": "{{ homeassistant__register_systemd_unit_file is changed }}"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/homeassistant"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "mariadb", "defined_in": "testdata/scm_repo/roles/mariadb", "task_yamls": ["testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "testdata/scm_repo/roles/mariadb/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Drop databases if requested", "module": "community.mysql.mysql_db", "index": 0, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Drop databases if requested", "with_flattened": "{{ mariadb__databases + mariadb__dependent_databases + mariadb_databases|d([]) }}", "delegate_to": "{{ mariadb__delegate_to }}", "when": "((item.database|d(False) or item.name|d(False)) and (item.state is defined and item.state == 'absent'))"}, "module_options": {"name": "{{ item.database | d(item.name) }}", "state": "absent"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create databases", "module": "mysql_db", "index": 1, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Create databases", "with_flattened": "{{ mariadb__databases + mariadb__dependent_databases + mariadb_databases|d([]) }}", "delegate_to": "{{ mariadb__delegate_to }}", "when": "((item.database|d(False) or item.name|d(False)) and (item.state is undefined or item.state != 'absent'))", "register": "mariadb__register_database_status"}, "module_options": {"name": "{{ item.database | d(item.name) }}", "state": "present", "encoding": "{{ item.encoding | d(omit) }}", "collation": "{{ item.collation | d(omit) }}"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Copy database source file to remote host", "module": "ansible.builtin.copy", "index": 2, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Copy database source file to remote host", "with_together": ["{{ mariadb__databases + lookup(\"flattened\", mariadb__dependent_databases, wantlist=True) + mariadb_databases|d([]) }}", "{{ mariadb__register_database_status.results }}"], "delegate_to": "{{ mariadb__delegate_to }}", "when": "((item.0.database|d(False) or item.0.name|d(False)) and (item.0.state is undefined or item.0.state != 'absent') and (item.0.source|d(False) and item.0.target|d(False)) and (item.0.name == item.1.db and item.1 is changed))"}, "module_options": {"src": "{{ item.0.source }}", "dest": "{{ item.0.target }}", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import source file contents into database", "module": "mysql_db", "index": 3, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Import source file contents into database", "with_together": ["{{ mariadb__databases + lookup(\"flattened\", mariadb__dependent_databases, wantlist=True) + mariadb_databases|d([]) }}", "{{ mariadb__register_database_status.results }}"], "delegate_to": "{{ mariadb__delegate_to }}", "when": "((item.0.database|d(False) or item.0.name|d(False)) and (item.0.state is undefined or item.0.state != 'absent') and item.0.target|d(False) and (item.0.name == item.1.db and item.1 is changed))"}, "module_options": {"name": "{{ item.0.database | d(item.0.name) }}", "target": "{{ item.0.target }}", "state": "import"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove source files", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Remove source files", "with_flattened": "{{ mariadb__databases + mariadb__dependent_databases + mariadb_databases|d([]) }}", "delegate_to": "{{ mariadb__delegate_to }}", "when": "((item.database|d(False) or item.name|d(False)) and (item.state is undefined or item.state != 'absent') and (item.source|d(False) and item.target|d(False)) and (item.target_delete is undefined or item.target_delete))"}, "module_options": {"dest": "{{ item.target }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Drop user accounts if requested", "module": "mysql_user", "index": 5, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Drop user accounts if requested", "with_flattened": "{{ mariadb__users + mariadb__dependent_users + mariadb_users|d([]) }}", "delegate_to": "{{ mariadb__delegate_to }}", "when": "((item.user|d(False) or item.name|d(False)) and (item.state is defined and item.state == \"absent\"))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.user | d(item.name) }}", "host": "{{ item.host | default(mariadb__client) }}", "state": "absent"}, "fqcn": "community.mysql.mysql_user", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create user accounts", "module": "mysql_user", "index": 6, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Create user accounts", "with_flattened": "{{ mariadb__users + mariadb__dependent_users + mariadb_users|d([]) }}", "delegate_to": "{{ mariadb__delegate_to }}", "register": "mariadb__register_create_users", "when": "((item.user|d(False) or item.name|d(False)) and (item.state is undefined or item.state != \"absent\"))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.user | d(item.name) }}", "host": "{{ item.host | default(mariadb__client) }}", "state": "present", "password": "{{ item.password | default(lookup(\"password\", secret + \"/mariadb/\" + mariadb__delegate_to + \"/credentials/\" + item.user | d(item.name) + \"/password \" + \"length=\" + mariadb__password_length)) }}"}, "fqcn": "community.mysql.mysql_user", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Grant default privileges to users", "module": "mysql_user", "index": 7, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Grant default privileges to users", "with_together": ["{{ mariadb__users + lookup(\"flattened\", mariadb__dependent_users, wantlist=True) + mariadb_users|d([]) }}", "{{ mariadb__register_create_users.results }}"], "delegate_to": "{{ mariadb__delegate_to }}", "when": "((item.0.user|d(False) or item.0.name|d(False)) and (item.0.state is undefined or item.0.state != \"absent\") and mariadb__default_privileges|d(False) and (item.0.priv_default is undefined or item.0.priv_default))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.0.user | d(item.0.name) }}", "host": "{{ item.0.host | default(mariadb__client) }}", "priv": "{{ (item.0.database | d(item.0.name)) + \".*:\" + mariadb__default_privileges_grant }}", "append_privs": true}, "fqcn": "community.mysql.mysql_user", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Grant auxiliary privileges to users", "module": "mysql_user", "index": 8, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Grant auxiliary privileges to users", "with_together": ["{{ mariadb__users + lookup(\"flattened\", mariadb__dependent_users, wantlist=True) + mariadb_users|d([]) }}", "{{ mariadb__register_create_users.results }}"], "delegate_to": "{{ mariadb__delegate_to }}", "when": "((item.0.user|d(False) or item.0.name|d(False)) and (item.0.state is undefined or item.0.state != \"absent\") and mariadb__default_privileges_aux|d(False) and (item.0.priv_aux is undefined or item.0.priv_aux))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.0.user | d(item.0.name) }}", "host": "{{ item.0.host | default(mariadb__client) }}", "priv": "{{ (item.0.database | d(item.0.name)) + \"\\_%.*:\" + mariadb__default_privileges_grant }}", "append_privs": true}, "fqcn": "community.mysql.mysql_user", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Grant custom privileges to users", "module": "mysql_user", "index": 9, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Grant custom privileges to users", "with_together": ["{{ mariadb__users + lookup(\"flattened\", mariadb__dependent_users, wantlist=True) + mariadb_users|d([]) }}", "{{ mariadb__register_create_users.results }}"], "delegate_to": "{{ mariadb__delegate_to }}", "when": "((item.0.user|d(False) or item.0.name|d(False)) and (item.0.state is undefined or item.0.state != \"absent\") and item.0.priv|d(False))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.0.user | d(item.0.name) }}", "host": "{{ item.0.host | default(mariadb__client) }}", "priv": "{{ item.0.priv if (item.0.priv is string) else (item.0.priv | join(\"/\")) }}", "append_privs": "{{ item.0.append_privs | default(True) }}"}, "fqcn": "community.mysql.mysql_user", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure required system groups exist", "module": "ansible.builtin.group", "index": 10, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Make sure required system groups exist", "with_flattened": "{{ mariadb__users + mariadb__dependent_users + mariadb_users|d([]) }}", "when": "((item.user|d(False) or item.name|d(False)) and (item.state is undefined or item.state != \"absent\") and item.owner|d(False) and item.home|d(False))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.group | d(item.owner) }}", "state": "present", "system": "{{ item.system | d(True) }}"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure required system accounts exist", "module": "ansible.builtin.user", "index": 11, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Make sure required system accounts exist", "with_flattened": "{{ mariadb__users + mariadb__dependent_users + mariadb_users|d([]) }}", "when": "((item.user|d(False) or item.name|d(False)) and (item.state is undefined or item.state != \"absent\") and item.owner|d(False) and item.home|d(False))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ item.owner }}", "group": "{{ item.group | d(item.owner) }}", "home": "{{ item.home }}", "state": "present", "system": "{{ item.system | d(True) }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove ~/.my.cnf from owner home if requested", "module": "ansible.builtin.file", "index": 12, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Remove ~/.my.cnf from owner home if requested", "with_flattened": "{{ mariadb__users + mariadb__dependent_users + mariadb_users|d([]) }}", "when": "((item.user|d(False) or item.name|d(False)) and (item.state is defined and item.state == \"absent\") and item.owner|d(False))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"dest": "{{ \"~\" + item.owner + \"/.my.cnf\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that directory for custom file path .my.cnf exists", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Ensure that directory for custom file path .my.cnf exists", "with_together": ["{{ mariadb__users + lookup(\"flattened\", mariadb__dependent_users, wantlist=True) + mariadb_users|d([]) }}", "{{ mariadb__register_create_users.results }}"], "when": "((item.0.user|d(False) or item.0.name|d(False)) and (item.0.state|d(\"present\") != \"absent\") and item.0.creds_path|d(False) and item.0.owner|d(False))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ item.0.creds_path | regex_replace(\"^(.*/).*$\", \"\\\\1\") }}", "state": "directory", "mode": "{{ item.0.mode | d(\"0755\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Write ~/.my.cnf in owner home directory", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml", "options": {"name": "Write ~/.my.cnf in owner home directory", "with_together": ["{{ mariadb__users + lookup(\"flattened\", mariadb__dependent_users, wantlist=True) + mariadb_users|d([]) }}", "{{ mariadb__register_create_users.results }}"], "when": "((item.0.user|d(False) or item.0.name|d(False)) and (item.0.state is undefined or item.0.state != \"absent\") and item.0.owner|d(False))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "home/my.cnf.j2", "dest": "{{ item.0.creds_path|d(\"~\" + item.0.owner + \"/.my.cnf\") }}", "owner": "{{ item.0.owner }}", "group": "{{ item.0.group | default(item.0.owner) }}", "mode": "{{ item.0.mode | default(\"0640\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if database server is installed", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Check if database server is installed", "environment": {"LC_MESSAGES": "C"}, "args": {"executable": "bash"}, "register": "mariadb__register_version", "changed_when": false, "failed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && dpkg-query -W -f='${Version}\\n' 'mariadb-server' 'mysql-server' 'percona-server-server*' | grep -v '^$'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if local database port is open", "module": "ansible.builtin.command", "index": 3, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Check if local database port is open", "register": "mariadb__register_tunnel", "when": "not mariadb__register_version.stdout", "failed_when": false, "changed_when": false}, "module_options": "nc -z localhost {{ mariadb__port }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Override delegation if tunnel is detected", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Override delegation if tunnel is detected", "when": "(not mariadb__register_version.stdout|d(False) and (mariadb__register_tunnel|d() and mariadb__register_tunnel.rc == 0))"}, "module_options": {"mariadb__delegate_to": "{{ mariadb__server|d(\"undefined\") }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Override configuration if local server is detected", "module": "ansible.builtin.set_fact", "index": 5, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Override configuration if local server is detected", "when": "(mariadb__register_version.stdout|d(False) or (mariadb__register_tunnel|d() and mariadb__register_tunnel.rc == 0))"}, "module_options": {"mariadb__server": "localhost", "mariadb__client": "localhost"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install database client packages", "module": "ansible.builtin.package", "index": 6, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Install database client packages", "register": "mariadb__register_packages", "until": "mariadb__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (mariadb__base_packages + mariadb__packages_map[mariadb__flavor] + mariadb__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if MariaDB config directory exists", "module": "ansible.builtin.stat", "index": 7, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Check if MariaDB config directory exists", "register": "mariadb__register_confd"}, "module_options": {"path": "/etc/mysql/mariadb.conf.d"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure database client defaults", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Configure database client defaults", "when": "mariadb__server|d(False)"}, "module_options": {"src": "etc/mysql/conf.d/client.cnf.j2", "dest": "{{ mariadb__client_cnf_file }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that local fact directory exists", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Make sure that local fact directory exists"}, "module_options": {"dest": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save MariaDB local facts", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Save MariaDB local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/mariadb.fact.j2", "dest": "/etc/ansible/facts.d/mariadb.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 11, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage database contents", "module": "ansible.builtin.include_tasks", "index": 12, "defined_in": "testdata/scm_repo/roles/mariadb/tasks/main.yml", "options": {"name": "Manage database contents", "when": "(mariadb__server|d(False) and mariadb__delegate_to)", "tags": ["role::mariadb:contents"]}, "module_options": "manage_contents.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/mariadb"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "dovecot", "defined_in": "testdata/scm_repo/roles/dovecot", "task_yamls": ["testdata/scm_repo/roles/dovecot/tasks/main_env.yml", "testdata/scm_repo/roles/dovecot/tasks/main.yml", "testdata/scm_repo/roles/dovecot/tasks/dovecot/pre_main.yml", "testdata/scm_repo/roles/dovecot/tasks/dovecot/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Remove ferm 'debops-legacy-input-rules' file", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main_env.yml", "options": {"name": "Remove ferm 'debops-legacy-input-rules' file"}, "module_options": {"path": "/etc/ferm/filter-input.d/dovecot.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Pre hooks", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Pre hooks"}, "module_options": "{{ lookup('debops.debops.task_src', 'dovecot/pre_main.yml') }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Dovecot packages", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Install Dovecot packages", "register": "dovecot__register_packages", "until": "dovecot__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", ([ \"dovecot-core\" ] + ([ \"dovecot-imapd\" ] if (\"imap\" in dovecot__features or \"imaps\" in dovecot__features) else []) + ([ \"dovecot-pop3d\" ] if (\"pop3\" in dovecot__features or \"pop3s\" in dovecot__features) else []) + ([ \"dovecot-lmtpd\" ] if \"lmtp\" in dovecot__features else []) + ([ \"dovecot-mysql\" ] if \"mysql\" in dovecot__user_accounts else []) + ([ \"dovecot-pgsql\" ] if \"pgsql\" in dovecot__user_accounts else []) + ([ \"dovecot-sqlite\" ] if \"sqlite\" in dovecot__user_accounts else []) + ([ \"dovecot-ldap\" ] if \"ldap\" in dovecot__user_accounts else []) + ([ \"dovecot-managesieved\" ] if \"sieve\" in dovecot__features else []))) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Dovecot local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Save Dovecot local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/dovecot.fact.j2", "dest": "/etc/ansible/facts.d/dovecot.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove old diversions", "module": "dpkg_divert", "index": 7, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Remove old diversions", "loop": ["10-auth.conf", "10-master.conf", "10-mail.conf", "10-ssl.conf", "15-lda.conf", "20-pop3.conf", "20-imap.conf", "20-lmtp.conf", "20-managesieve.conf", "90-sieve.conf", "90-sieve-extprograms.conf", "auth-deny.conf.ext", "auth-system.conf.ext", "auth-sql.conf.ext", "auth-ldap.conf.ext", "auth-passwdfile.conf.ext", "auth-checkpassword.conf.ext"]}, "module_options": {"path": "/etc/dovecot/conf.d/{{ item }}", "state": "absent", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Uninstall disabled Dovecot protocols", "module": "ansible.builtin.package", "index": 8, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Uninstall disabled Dovecot protocols", "notify": ["Restart dovecot"]}, "module_options": {"pkg": "{{ q(\"flattened\", (([ \"dovecot-imapd\" ] if (\"imap\" not in dovecot__features and \"imaps\" not in dovecot__features) else []) + ([ \"dovecot-pop3d\" ] if (\"pop3\" not in dovecot__features and \"pop3s\" not in dovecot__features) else []) + ([ \"dovecot-lmtpd\" ] if \"lmtp\" not in dovecot__features else []) + ([ \"dovecot-mysql\" ] if \"mysql\" not in dovecot__user_accounts else []) + ([ \"dovecot-pgsql\" ] if \"pgsql\" not in dovecot__user_accounts else []) + ([ \"dovecot-sqlite\" ] if \"sqlite\" not in dovecot__user_accounts else []) + ([ \"dovecot-ldap\" ] if (\"ldap\" not in dovecot__user_accounts) else []) + ([ \"dovecot-managesieved\" ] if \"sieve\" not in dovecot__features else []))) }}", "state": "absent"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove old local configuration", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Remove old local configuration", "notify": ["Restart dovecot"], "tags": ["role::dovecot:conf"]}, "module_options": {"path": "/etc/dovecot/local.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Dovecot sql configuration", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Generate Dovecot sql configuration", "notify": ["Restart dovecot"], "when": "dovecot__user_accounts | d([]) | intersect(['mysql', 'pgsql', 'sqlite'])", "tags": ["role::dovecot:conf", "role::dovecot:conf:sql"]}, "module_options": {"src": "{{ lookup('debops.debops.template_src', 'etc/dovecot/dovecot-sql.conf.ext.j2') }}", "dest": "/etc/dovecot/dovecot-sql.conf.ext", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Dovecot ldap configuration", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Generate Dovecot ldap configuration", "notify": ["Restart dovecot"], "loop": ["dovecot-ldap-userdb.conf", "dovecot-ldap-passdb.conf"], "when": "'ldap' in dovecot__user_accounts", "tags": ["role::dovecot:conf", "role::dovecot:conf:ldap"]}, "module_options": {"src": "{{ lookup('debops.debops.template_src', 'etc/dovecot/' + item + '.j2') }}", "dest": "/etc/dovecot/{{ item }}", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Dovecot deny user list", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Generate Dovecot deny user list"}, "module_options": {"src": "{{ lookup('debops.debops.template_src', 'etc/dovecot/dovecot.deny.j2') }}", "dest": "/etc/dovecot/dovecot.deny", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create private directory to store passwdfile", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Create private directory to store passwdfile", "when": "'passwdfile' in dovecot__user_accounts"}, "module_options": {"path": "{{ dovecot__passwdfile_path }}", "state": "directory", "owner": "root", "group": "dovecot", "mode": "0650"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure virtual mail user POSIX group exists", "module": "ansible.builtin.group", "index": 14, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Make sure virtual mail user POSIX group exists", "when": "dovecot__vmail_enabled | d(False)", "tags": ["role::dovecot:user", "role::dovecot:group"]}, "module_options": {"name": "{{ dovecot__vmail_posix_group | d(dovecot__vmail_posix_user) }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure virtual mail user POSIX system account exists", "module": "ansible.builtin.user", "index": 15, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Make sure virtual mail user POSIX system account exists", "when": "dovecot__vmail_enabled | d(False)", "tags": ["role::dovecot:user"]}, "module_options": {"name": "{{ dovecot__vmail_posix_user }}", "state": "present", "comment": "Postfix Virtual Mail user", "group": "{{ dovecot__vmail_posix_group | d(dovecot__vmail_posix_user) }}", "home": "{{ dovecot__vmail_base }}", "create_home": true, "system": true, "shell": "/usr/sbin/nologin", "skeleton": null}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure virtual mail user home directory ({{ dovecot__vmail_base }}) exists", "module": "ansible.builtin.file", "index": 16, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Make sure virtual mail user home directory ({{ dovecot__vmail_base }}) exists", "when": "dovecot__vmail_enabled | d(False)", "tags": ["role::dovecot:user"]}, "module_options": {"dest": "{{ dovecot__vmail_base }}", "state": "directory", "owner": "{{ dovecot__vmail_posix_user }}", "group": "{{ dovecot__vmail_posix_group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that PKI hook directory exists", "module": "ansible.builtin.file", "index": 17, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Make sure that PKI hook directory exists", "when": "dovecot__pki|bool"}, "module_options": {"path": "{{ dovecot__pki_hook_path }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage PKI dovecot hook", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Manage PKI dovecot hook", "when": "dovecot__pki|bool"}, "module_options": {"src": "etc/pki/hooks/dovecot.j2", "dest": "{{ dovecot__pki_hook_path + \"/\" + dovecot__pki_hook_name }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the PKI dovecot hook is absent", "module": "ansible.builtin.file", "index": 19, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Ensure the PKI dovecot hook is absent", "when": "not (dovecot__pki|bool)"}, "module_options": {"path": "{{ dovecot__pki_hook_path + \"/\" + dovecot__pki_hook_name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original Dovecot main configuration file", "module": "dpkg_divert", "index": 20, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Divert original Dovecot main configuration file", "notify": ["Restart dovecot"], "tags": ["role::dovecot:conf"]}, "module_options": {"path": "/etc/dovecot/dovecot.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate Dovecot main configuration file", "module": "ansible.builtin.template", "index": 21, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Generate Dovecot main configuration file", "notify": ["Restart dovecot"], "tags": ["role::dovecot:conf"]}, "module_options": {"src": "{{ lookup(\"template_src\", \"etc/dovecot/dovecot.conf.j2\") }}", "dest": "/etc/dovecot/dovecot.conf", "owner": "root", "group": "dovecot", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts and restart dovecot, if necessary", "module": "ansible.builtin.meta", "index": 22, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Update Ansible facts and restart dovecot, if necessary"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Post hooks", "module": "ansible.builtin.include_tasks", "index": 23, "defined_in": "testdata/scm_repo/roles/dovecot/tasks/main.yml", "options": {"name": "Post hooks"}, "module_options": "{{ lookup('debops.debops.task_src', 'dovecot/post_main.yml') }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/dovecot"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "telegraf", "defined_in": "testdata/scm_repo/roles/telegraf", "task_yamls": ["testdata/scm_repo/roles/telegraf/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/telegraf/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/telegraf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/telegraf/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/telegraf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/telegraf/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/telegraf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add Telegraf UNIX account to required groups", "module": "ansible.builtin.user", "index": 3, "defined_in": "testdata/scm_repo/roles/telegraf/tasks/main.yml", "options": {"name": "Add Telegraf UNIX account to required groups", "notify": ["Check telegraf and restart"]}, "module_options": {"name": "telegraf", "groups": "{{ telegraf__additional_groups | flatten | join(\",\") }}", "state": "present", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/telegraf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Telegraf instance leading file", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/telegraf/tasks/main.yml", "options": {"name": "Configure Telegraf instance leading file", "notify": ["Check telegraf and restart"]}, "module_options": {"src": "etc/telegraf/telegraf.conf.j2", "dest": "/etc/telegraf/telegraf.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/telegraf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove plugins configuration if requested", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/telegraf/tasks/main.yml", "options": {"name": "Remove plugins configuration if requested", "loop": "{{ telegraf__combined_plugins | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "when": "item.state|d('present') == 'absent' and item.config|d()", "notify": ["Check telegraf and restart"]}, "module_options": {"path": "/etc/telegraf/telegraf.d/{{ item.name }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/telegraf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Find plugins which are in filesystem", "module": "ansible.builtin.find", "index": 6, "defined_in": "testdata/scm_repo/roles/telegraf/tasks/main.yml", "options": {"name": "Find plugins which are in filesystem", "register": "telegraf__register_existing_plugins_filenames"}, "module_options": {"paths": "/etc/telegraf/telegraf.d", "patterns": "*.conf"}, "fqcn": "ansible.builtin.find", "used_in": ["testdata/scm_repo/roles/telegraf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Backup and disactivate plugins unexisting in desired configuration", "module": "ansible.builtin.command", "index": 7, "defined_in": "testdata/scm_repo/roles/telegraf/tasks/main.yml", "options": {"name": "Backup and disactivate plugins unexisting in desired configuration", "loop": "{{ telegraf__register_existing_plugins_filenames.files }}", "loop_control": {"label": "{{ {\"path\": item.path} }}"}, "when": "item.path | basename | splitext | first not in telegraf__combined_plugins | debops.debops.parse_kv_items | map(attribute=\"name\")", "notify": ["Check telegraf and restart"]}, "module_options": {"cmd": "mv -f '{{ item.path | quote }}' '{{ item.path | quote }}.inactive'", "removes": "{{ item.path }}"}, "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/telegraf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure plugins", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/telegraf/tasks/main.yml", "options": {"name": "Configure plugins", "loop": "{{ telegraf__combined_plugins | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "when": "(item.state|d('present') not in [ 'absent', 'ignore' ] and (item.config|d() or item.raw|d()))", "no_log": "{{ debops__no_log | d(True) }}", "notify": ["Check telegraf and restart"]}, "module_options": {"src": "etc/telegraf/telegraf.d/plugin.conf.j2", "dest": "/etc/telegraf/telegraf.d/{{ item.name }}.conf", "owner": "root", "group": "telegraf", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/telegraf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/telegraf/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/telegraf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Telegraf instance local facts", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/telegraf/tasks/main.yml", "options": {"name": "Save Telegraf instance local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/telegraf.fact.j2", "dest": "/etc/ansible/facts.d/telegraf.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/telegraf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 11, "defined_in": "testdata/scm_repo/roles/telegraf/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/telegraf"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "kibana", "defined_in": "testdata/scm_repo/roles/kibana", "task_yamls": ["testdata/scm_repo/roles/kibana/tasks/main_env.yml", "testdata/scm_repo/roles/kibana/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare debops.kibana environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main_env.yml", "options": {"name": "Prepare debops.kibana environment"}, "module_options": {"kibana__secret__directories": "{{ lookup(\"template\", \"lookup/kibana__secret__directories.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Kibana packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Install Kibana packages", "notify": ["Refresh host facts"], "register": "kibana__register_packages", "until": "kibana__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (kibana__base_packages + kibana__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add Kibana UNIX account to selected groups", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Add Kibana UNIX account to selected groups", "when": "kibana__additional_groups|d()"}, "module_options": {"name": "{{ kibana__user }}", "groups": "{{ kibana__additional_groups }}", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Kibana local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Save Kibana local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/kibana.fact.j2", "dest": "/etc/ansible/facts.d/kibana.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if the dependent config file exists", "module": "ansible.builtin.stat", "index": 8, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Check if the dependent config file exists", "register": "kibana__register_dependent_config_file", "become": false, "delegate_to": "localhost", "when": "(ansible_local.kibana.installed|d())", "tags": ["role::kibana:config"]}, "module_options": {"path": "{{ secret + \"/kibana/dependent_config/\" + inventory_hostname + \"/config.json\" }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Load the dependent configuration from Ansible Controller", "module": "ansible.builtin.slurp", "index": 9, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Load the dependent configuration from Ansible Controller", "register": "kibana__register_dependent_config", "become": false, "delegate_to": "localhost", "when": "(ansible_local.kibana.installed|d() and kibana__register_dependent_config_file.stat.exists|bool)", "tags": ["role::kibana:config"]}, "module_options": {"src": "{{ secret + \"/kibana/dependent_config/\" + inventory_hostname + \"/config.json\" }}"}, "fqcn": "ansible.builtin.slurp", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original configuration files", "module": "dpkg_divert", "index": 10, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Divert original configuration files", "notify": ["Start kibana"], "tags": ["role::kibana:config"]}, "module_options": {"path": "/etc/kibana/kibana.yml"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate Kibana configuration", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Generate Kibana configuration", "notify": ["Restart kibana"], "tags": ["role::kibana:config"]}, "module_options": {"src": "etc/kibana/kibana.yml.j2", "dest": "/etc/kibana/kibana.yml", "owner": "root", "group": "{{ kibana__group }}", "mode": "0660"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check state of installed Kibana plugins", "module": "ansible.builtin.shell", "index": 12, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Check state of installed Kibana plugins", "args": {"executable": "bash", "chdir": "/usr/share/kibana"}, "register": "kibana__register_plugins", "become": true, "become_user": "{{ kibana__user }}", "changed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && bin/kibana-plugin list | cut -d@ -f1", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Kibana plugins", "module": "ansible.builtin.command", "index": 13, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Install Kibana plugins", "args": {"chdir": "/usr/share/kibana"}, "notify": ["Restart kibana"], "become": true, "become_user": "{{ item.user | d(kibana__user) }}", "with_flattened": ["{{ kibana__combined_plugins }}"], "when": "(item.name|d() and item.state|d('present') != 'absent' and (item.name if ':' not in item.name else item.name.split(':')[1]) not in kibana__register_plugins.stdout_lines)"}, "module_options": "bin/kibana-plugin install {{ item.url | d(item.name) }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Kibana plugins", "module": "ansible.builtin.command", "index": 14, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Remove Kibana plugins", "args": {"chdir": "/usr/share/kibana"}, "notify": ["Restart kibana"], "become": true, "become_user": "{{ item.user | d(kibana__user) }}", "with_flattened": ["{{ kibana__combined_plugins }}"], "when": "(item.name|d() and item.state|d('present') == 'absent' and (item.name if ':' not in item.name else item.name.split(':')[1]) in kibana__register_plugins.stdout_lines)"}, "module_options": "bin/kibana-plugin remove {{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if the Kibana keystore exists", "module": "ansible.builtin.stat", "index": 15, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Check if the Kibana keystore exists", "register": "kibana__register_keystore"}, "module_options": {"path": "{{ kibana__keystore_path }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Kibana keystore if not present", "module": "ansible.builtin.command", "index": 16, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Create Kibana keystore if not present", "args": {"chdir": "/usr/share/kibana"}, "when": "not kibana__register_keystore.stat.exists"}, "module_options": "bin/kibana-keystore create", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the list of keystore contents", "module": "ansible.builtin.command", "index": 17, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Get the list of keystore contents", "args": {"chdir": "/usr/share/kibana"}, "register": "kibana__register_keys", "changed_when": false, "check_mode": "{{ False if ansible_local.kibana.installed|d() else omit }}"}, "module_options": "bin/kibana-keystore list", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove key from Kibana keystore when requested", "module": "ansible.builtin.command", "index": 18, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Remove key from Kibana keystore when requested", "args": {"chdir": "/usr/share/kibana"}, "loop": "{{ kibana__combined_keys | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "notify": ["Restart kibana"], "when": "(item.state|d('present') == 'absent' and item.name in kibana__register_keys.stdout_lines)", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "bin/kibana-keystore remove {{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set or update key in Kibana keystore", "module": "ansible.builtin.shell", "index": 19, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Set or update key in Kibana keystore", "environment": {"DEBOPS_KIBANA_KEY": "{{ item.value }}"}, "args": {"chdir": "/usr/share/kibana", "executable": "bash"}, "loop": "{{ kibana__combined_keys | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "notify": ["Restart kibana"], "when": "(item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and (item.name not in kibana__register_keys.stdout_lines or (item.force|d(False))|bool))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "set -o nounset -o pipefail -o errexit &&\n{% if item.force | d(False) %}\nprintf \"%s\" \"${DEBOPS_KIBANA_KEY}\" | bin/kibana-keystore add \"{{ item.name }}\" --stdin --force\n{% else %}\nprintf \"%s\" \"${DEBOPS_KIBANA_KEY}\" | bin/kibana-keystore add \"{{ item.name }}\" --stdin\n{% endif %}\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Kibana dependent configuration on Ansible Controller", "module": "ansible.builtin.template", "index": 20, "defined_in": "testdata/scm_repo/roles/kibana/tasks/main.yml", "options": {"name": "Save Kibana dependent configuration on Ansible Controller", "become": false, "delegate_to": "localhost", "tags": ["role::kibana:config"]}, "module_options": {"src": "secret/kibana/dependent_config/config.json.j2", "dest": "{{ secret + \"/kibana/dependent_config/\" + inventory_hostname + \"/config.json\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/kibana"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "nfs", "defined_in": "testdata/scm_repo/roles/nfs", "task_yamls": ["testdata/scm_repo/roles/nfs/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/nfs/tasks/main.yml", "options": {"name": "Install required packages", "register": "nfs__register_packages", "until": "nfs__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (nfs__base_packages + nfs__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/nfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NFS client", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/nfs/tasks/main.yml", "options": {"name": "Configure NFS client", "with_items": ["etc/default/nfs-common"], "register": "nfs__register_config"}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the NFS mount points exist", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/nfs/tasks/main.yml", "options": {"name": "Ensure that the NFS mount points exist", "with_flattened": ["{{ nfs__shares }}", "{{ nfs__group_shares }}", "{{ nfs__host_shares }}"], "when": "item.path|d() and item.src|d() and item.state|d('mounted') == 'present'"}, "module_options": {"path": "{{ item.path }}", "owner": "{{ item.owner | d(\"root\") }}", "group": "{{ item.group | d(\"root\") }}", "mode": "{{ item.mode  | d(\"0755\") }}", "state": "directory"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage NFS mount points", "module": "ansible.posix.mount", "index": 3, "defined_in": "testdata/scm_repo/roles/nfs/tasks/main.yml", "options": {"name": "Manage NFS mount points", "with_flattened": ["{{ nfs__shares }}", "{{ nfs__group_shares }}", "{{ nfs__host_shares }}"], "register": "nfs__register_devices", "when": "item.path|d() and item.src|d()"}, "module_options": {"name": "{{ item.path }}", "src": "{{ item.src }}", "fstype": "{{ item.fstype | d(nfs__default_mount_type) }}", "opts": "{{ lookup(\"template\", \"lookup/mount_options.j2\") | from_yaml }}", "state": "{{ item.state  | d(\"mounted\") }}", "passno": "{{ item.passno | d(omit) }}", "dump": "{{ item.dump   | d(omit) }}", "fstab": "{{ item.fstab  | d(omit) }}"}, "fqcn": "ansible.posix.mount", "used_in": ["testdata/scm_repo/roles/nfs"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Restart 'remote-fs.target' systemd unit", "module": "ansible.builtin.systemd", "index": 4, "defined_in": "testdata/scm_repo/roles/nfs/tasks/main.yml", "options": {"name": "Restart 'remote-fs.target' systemd unit", "loop": "{{ nfs__register_devices.results }}", "when": "(ansible_service_mgr == 'systemd' and item is changed and (lookup(\"template\", \"lookup/mount_options.j2\") is match(\".*x-systemd.automount.*\")))"}, "module_options": {"name": "remote-fs.target", "state": "restarted", "daemon_reload": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/nfs"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "apt_preferences", "defined_in": "testdata/scm_repo/roles/apt_preferences", "task_yamls": ["testdata/scm_repo/roles/apt_preferences/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Remove legacy APT preferences", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/apt_preferences/tasks/main.yml", "options": {"name": "Remove legacy APT preferences", "with_flattened": ["{{ apt_preferences_list|d([]) }}", "{{ apt_preferences_group_list|d([]) }}", "{{ apt_preferences_host_list|d([]) }}", "{{ apt_preferences_dependent_list|d([]) }}", "{{ apt_preferences__list }}", "{{ apt_preferences__group_list }}", "{{ apt_preferences__host_list }}", "{{ apt_preferences__dependent_list }}"], "when": "(\".\" in item.role|d(item.by_role|d(\"\")))"}, "module_options": {"dest": "/etc/apt/preferences.d/{{ item.filename | d((item.role | d(item.by_role | d(\"pin\"))) + \"_\" + ((item.package.split(\" \")[0] if item.package is string else item.package[0]) if item.package|d() else (item.packages.split(\" \")[0] if item.packages is string else item.packages[0])) + (item.suffix | d(\"\")) + \".pref\") | replace(\"*\",\"all\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt_preferences"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove APT preferences", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/apt_preferences/tasks/main.yml", "options": {"name": "Remove APT preferences", "with_flattened": ["{{ apt_preferences_list|d([]) }}", "{{ apt_preferences_group_list|d([]) }}", "{{ apt_preferences_host_list|d([]) }}", "{{ apt_preferences_dependent_list|d([]) }}", "{{ apt_preferences__list }}", "{{ apt_preferences__group_list }}", "{{ apt_preferences__host_list }}", "{{ apt_preferences__dependent_list }}"], "when": "( ( ((item.state|d() and item.state == 'absent') or item.delete|d() | bool) and (item.package|d() or item.packages|d()) and (item.version is undefined or (item.version is defined and not item.version)) ) or ( item.raw is undefined and item.pin is undefined and ( item.backports is undefined or ( item.backports is iterable and item.backports and ansible_distribution_release not in item.backports ) ) and ansible_distribution_release not in apt_preferences__next_release.keys() ) )"}, "module_options": {"dest": "/etc/apt/preferences.d/{{ item.filename | d((item.role | d(item.by_role | d(\"pin\"))) | replace(\".\", \"_\") + \"_\" + ((item.package.split(\" \")[0] if item.package is string else item.package[0]) if item.package|d() else (item.packages.split(\" \")[0] if item.packages is string else item.packages[0])) + (item.suffix | d(\"\")) + \".pref\") | replace(\"*\",\"all\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt_preferences"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create APT preferences", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/apt_preferences/tasks/main.yml", "options": {"name": "Create APT preferences", "with_flattened": ["{{ apt_preferences_list|d([]) }}", "{{ apt_preferences_group_list|d([]) }}", "{{ apt_preferences_host_list|d([]) }}", "{{ apt_preferences_dependent_list|d([]) }}", "{{ apt_preferences__list }}", "{{ apt_preferences__group_list }}", "{{ apt_preferences__host_list }}", "{{ apt_preferences__dependent_list }}"], "when": "( ( ((item.state|d('present')) != 'absent' and (not (item.delete|d() | bool))) and (item.package|d() or item.packages|d()) ) and ( item.raw|d() or item.version|d() or ( item.pin is undefined and ( item.backports is undefined or ( item.backports is iterable and item.backports and ansible_distribution_release in item.backports ) ) and ansible_distribution_release in apt_preferences__next_release.keys() ) or item.pin|d() ) )"}, "module_options": {"src": "etc/apt/preferences.d/pin.pref.j2", "dest": "/etc/apt/preferences.d/{{ item.filename | d((item.role | d(item.by_role | d(\"pin\"))) | replace(\".\", \"_\") + \"_\" + ((item.package.split(\" \")[0] if item.package is string else item.package[0]) if item.package|d() else (item.packages.split(\" \")[0] if item.packages is string else item.packages[0])) + (item.suffix | d(\"\")) + \".pref\") | replace(\"*\",\"all\") }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt_preferences"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml", "testdata/scm_repo/playbooks/service/ansible.yml", "testdata/scm_repo/playbooks/service/minio.yml", "testdata/scm_repo/playbooks/service/nodejs.yml", "testdata/scm_repo/playbooks/service/php.yml", "testdata/scm_repo/playbooks/service/redis_server.yml"]}, {"py/object": "struct4.Role", "name": "boxbackup", "defined_in": "testdata/scm_repo/roles/boxbackup", "task_yamls": ["testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml", "testdata/scm_repo/roles/boxbackup/tasks/configure_servers.yml", "testdata/scm_repo/roles/boxbackup/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Install Box Backup client package", "module": "ansible.builtin.apt", "index": 0, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml", "options": {"name": "Install Box Backup client package", "register": "boxbackup__register_client_packages", "until": "boxbackup__register_client_packages is succeeded"}, "module_options": "pkg=boxbackup-client state=present install_recommends=no", "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set backup softlimit size for client hosts", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml", "options": {"name": "Set backup softlimit size for client hosts", "when": "(boxbackup_softlimit is undefined or not boxbackup_softlimit)"}, "module_options": {"boxbackup_softlimit": "{{ (ansible_mounts|sum(attribute=\"size_total\")/1024/1024 + boxbackup_softlimit_padding)|int }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set backup hardlimit size for client hosts", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml", "options": {"name": "Set backup hardlimit size for client hosts", "when": "(boxbackup_hardlimit is undefined or not boxbackup_hardlimit)"}, "module_options": {"boxbackup_hardlimit": "{{ (boxbackup_softlimit|float * boxbackup_hardlimit_multiplier|float)|int }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create accounts for client hosts", "module": "ansible.builtin.command", "index": 3, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml", "options": {"name": "Create accounts for client hosts", "delegate_to": "{{ boxbackup_server }}"}, "module_options": "bbstoreaccounts create {{ boxbackup_account }} {{ boxbackup_discnum }} {{ boxbackup_softlimit }}M {{ boxbackup_hardlimit }}M creates={{ boxbackup_storage }}/backup/{{ boxbackup_account }}/info.rfw", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that boxbackup client directories exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml", "options": {"name": "Make sure that boxbackup client directories exists", "with_items": ["/etc/boxbackup", "/etc/boxbackup/bbackupd", "/etc/boxbackup/servers/{{ boxbackup_server }}"]}, "module_options": "path={{ item }} state=directory owner=root group=root mode=0700", "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if encryption key exists on Ansible Controller", "module": "ansible.builtin.stat", "index": 5, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml", "options": {"name": "Check if encryption key exists on Ansible Controller", "register": "boxbackup_register_enckeys", "delegate_to": "localhost", "become": false}, "module_options": {"path": "{{ secret + \"/storage/boxbackup/clients/\" + ansible_fqdn + \"/\" + boxbackup_account + \"-FileEncKeys.raw\" }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download BoxBackup encryption key from archive", "module": "ansible.builtin.copy", "index": 6, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml", "options": {"name": "Download BoxBackup encryption key from archive", "when": "boxbackup_register_enckeys.stat.exists", "notify": ["Restart boxbackup-client"]}, "module_options": {"src": "{{ secret + \"/storage/boxbackup/clients/\" + ansible_fqdn + \"/\" + boxbackup_account + \"-FileEncKeys.raw\" }}", "dest": "/etc/boxbackup/bbackupd/{{ boxbackup_account }}-FileEncKeys.raw", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create encryption key on client hosts", "module": "ansible.builtin.command", "index": 7, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml", "options": {"name": "Create encryption key on client hosts", "notify": ["Restart boxbackup-client"]}, "module_options": "openssl rand -out /etc/boxbackup/bbackupd/{{ boxbackup_account }}-FileEncKeys.raw {{ boxbackup_encrypt_bits }} creates=/etc/boxbackup/bbackupd/{{ boxbackup_account }}-FileEncKeys.raw", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Archive client encryption key", "module": "ansible.builtin.fetch", "index": 8, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml", "options": {"name": "Archive client encryption key"}, "module_options": "src=/etc/boxbackup/bbackupd/{{ boxbackup_account }}-FileEncKeys.raw flat=yes dest={{ secret }}/storage/boxbackup/clients/{{ ansible_fqdn }}/{{ boxbackup_account }}-FileEncKeys.raw", "fqcn": "ansible.builtin.fetch", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install notification script on client hosts", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml", "options": {"name": "Install notification script on client hosts"}, "module_options": "src=etc/boxbackup/bbackupd/NotifySysadmin.sh.j2 dest=/etc/boxbackup/bbackupd/NotifySysadmin.sh owner=root group=root mode=0700", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure client hosts", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml", "options": {"name": "Configure client hosts", "notify": ["Restart boxbackup-client"]}, "module_options": "src=etc/boxbackup/bbackupd.conf.j2 dest=/etc/boxbackup/bbackupd.conf owner=root group=root mode=0600", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Box Backup server packages", "module": "ansible.builtin.apt", "index": 0, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_servers.yml", "options": {"name": "Install Box Backup server packages", "register": "boxbackup__register_server_packages", "until": "boxbackup__register_server_packages is succeeded"}, "module_options": "pkg=boxbackup-server state=present install_recommends=no", "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that boxbackup server directories exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_servers.yml", "options": {"name": "Make sure that boxbackup server directories exists", "with_items": ["/etc/boxbackup", "/etc/boxbackup/bbstored", "{{ boxbackup_storage }}", "{{ boxbackup_storage }}/backup"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "bbstored", "group": "bbstored", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check block size of storage device", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_servers.yml", "options": {"name": "Check block size of storage device", "args": {"executable": "bash"}, "register": "boxbackup_storage_blocksize", "changed_when": false}, "module_options": "set -o nounset -o pipefail -o errexit && dumpe2fs -h $(df {{ boxbackup_storage }} | tail -n 1 | awk '{ print $1 }') | grep 'Block size' | awk '{ print $3 }'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure accounts.txt file exists", "module": "ansible.builtin.copy", "index": 3, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_servers.yml", "options": {"name": "Make sure accounts.txt file exists"}, "module_options": {"force": false, "dest": "/etc/boxbackup/bbstored/accounts.txt", "content": "", "owner": "bbstored", "group": "bbstored", "mode": "0600"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure boxbackup server", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/configure_servers.yml", "options": {"name": "Configure boxbackup server", "with_items": ["etc/boxbackup/raidfile.conf", "etc/boxbackup/bbstored.conf"], "notify": ["Restart boxbackup-server"]}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "bbstored", "group": "bbstored", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure server-side", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/main.yml", "options": {"name": "Configure server-side", "when": "boxbackup_server is defined and boxbackup_server == ansible_fqdn"}, "module_options": "configure_servers.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure client-side", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "testdata/scm_repo/roles/boxbackup/tasks/main.yml", "options": {"name": "Configure client-side", "when": "boxbackup_server is defined and boxbackup_server != ansible_fqdn"}, "module_options": "configure_clients.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/boxbackup"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "zabbix_agent", "defined_in": "testdata/scm_repo/roles/zabbix_agent", "task_yamls": ["testdata/scm_repo/roles/zabbix_agent/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/zabbix_agent/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/zabbix_agent"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/zabbix_agent/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/zabbix_agent"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/zabbix_agent/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/zabbix_agent"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Zabbix agent packages", "module": "ansible.builtin.apt", "index": 3, "defined_in": "testdata/scm_repo/roles/zabbix_agent/tasks/main.yml", "options": {"name": "Install Zabbix agent packages", "register": "zabbix_agent__register_packages", "until": "zabbix_agent__register_packages is succeeded"}, "module_options": {"name": "{{ (zabbix_agent__base_packages + zabbix_agent__packages) | flatten }}", "state": "present"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/zabbix_agent"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add Zabbix UNIX account to required groups", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/zabbix_agent/tasks/main.yml", "options": {"name": "Add Zabbix UNIX account to required groups", "notify": ["Check zabbix-agent and restart"]}, "module_options": {"name": "{{ zabbix_agent__user }}", "groups": "{{ zabbix_agent__additional_groups | flatten | join(\",\") }}", "state": "present", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/zabbix_agent"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Zabbix agent configuration file", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/zabbix_agent/tasks/main.yml", "options": {"name": "Generate Zabbix agent configuration file", "notify": ["Check zabbix-agent and restart"]}, "module_options": {"src": "etc/zabbix/zabbix_agentd.conf.j2", "dest": "/etc/zabbix/zabbix_agentd.conf", "owner": "root", "group": "{{ zabbix_agent__group }}", "mode": "0640", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/zabbix_agent"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install secret key", "module": "ansible.builtin.copy", "index": 6, "defined_in": "testdata/scm_repo/roles/zabbix_agent/tasks/main.yml", "options": {"name": "Install secret key", "no_log": "{{ debops__no_log | d(True) }}", "notify": ["Check zabbix-agent and restart"]}, "module_options": {"content": "{{ zabbix_agent__tls_psk_secret }}", "dest": "/etc/zabbix/secret.key", "owner": "root", "group": "{{ zabbix_agent__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/zabbix_agent"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure configuration folder exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/zabbix_agent/tasks/main.yml", "options": {"name": "Ensure configuration folder exists"}, "module_options": {"path": "/etc/zabbix/zabbix_agentd.conf.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/zabbix_agent"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure log folder exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/zabbix_agent/tasks/main.yml", "options": {"name": "Ensure log folder exists"}, "module_options": {"path": "/var/log/zabbix-agent", "state": "directory", "owner": "{{ zabbix_agent__user }}", "group": "{{ zabbix_agent__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/zabbix_agent"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local fact directory exists", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/zabbix_agent/tasks/main.yml", "options": {"name": "Make sure that Ansible local fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/zabbix_agent"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create local facts of Zabbix agent", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/zabbix_agent/tasks/main.yml", "options": {"name": "Create local facts of Zabbix agent", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/zabbix_agent.fact.j2", "dest": "/etc/ansible/facts.d/zabbix_agent.fact", "owner": "root", "group": "root", "mode": "0755", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/zabbix_agent"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 11, "defined_in": "testdata/scm_repo/roles/zabbix_agent/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/zabbix_agent"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "system_users", "defined_in": "testdata/scm_repo/roles/system_users", "task_yamls": ["testdata/scm_repo/roles/system_users/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather local Ansible user details", "module": "ansible.builtin.script", "index": 3, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Gather local Ansible user details", "register": "system_users__register_passwd", "delegate_to": "localhost", "become": false, "changed_when": false, "check_mode": false, "run_once": true, "when": "system_users__self_name == lookup('env', 'USER')"}, "module_options": "script/getent_passwd.py3 {{ system_users__self_name }}", "fqcn": "ansible.builtin.script", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remember local Ansible user details", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Remember local Ansible user details", "when": "system_users__self_name == lookup('env', 'USER')"}, "module_options": {"system_users__fact_self_comment": "{{ (system_users__register_passwd.stdout|from_json)[system_users__self_name][3] }}", "system_users__fact_self_shell": "{{ (system_users__register_passwd.stdout|from_json)[system_users__self_name][5] }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that required packages are installed", "module": "ansible.builtin.package", "index": 5, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Ensure that required packages are installed", "register": "system_users__register_packages", "until": "system_users__register_packages is succeeded", "when": "system_users__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", (system_users__base_packages + system_users__shell_packages + system_users__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create UNIX groups for system users", "module": "ansible.builtin.group", "index": 6, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Create UNIX groups for system users", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": (item.prefix | d(system_users__prefix)) + (item.group | d(item.name)), \"state\": item.state|d(\"present\")} }}"}, "when": "(system_users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and (item.private_group|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": {"name": "{{ (item.prefix | d(system_users__prefix)) + (item.group | d(item.name)) }}", "system": "{{ item.system | d(False if (item.user|d(True))|bool else True) }}", "gid": "{{ item.gid    | d(omit) }}", "state": "present", "local": "{{ True if (item.user|d(True))|bool else False }}"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather information about existing remote users", "module": "ansible.builtin.getent", "index": 7, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Gather information about existing remote users"}, "module_options": {"database": "passwd"}, "fqcn": "ansible.builtin.getent", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage UNIX accounts for system users", "module": "ansible.builtin.user", "index": 8, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Manage UNIX accounts for system users", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": (item.prefix | d(system_users__prefix)) + item.name, \"state\": item.state|d(\"present\"), \"gecos\": item.comment|d()} }}"}, "when": "(system_users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'ignore' ] and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": {"name": "{{ (item.prefix | d(system_users__prefix)) + item.name }}", "group": "{{ ((item.prefix | d(system_users__prefix)) + (item.group | d(item.name))) }}", "home": "{{ item.home | d(((getent_passwd[(item.prefix | d(system_users__prefix)) + item.name][4]) if (getent_passwd[(item.prefix | d(system_users__prefix)) + item.name]|d()) else (system_users__home_root + \"/\" + ((item.prefix | d(system_users__prefix)) + item.name))) if ((item.create_home|d(True))|bool) else omit) }}", "uid": "{{ item.uid                | d(omit) }}", "state": "{{ item.state              | d(\"present\") }}", "comment": "{{ item.comment            | d(omit) }}", "password": "{{ item.password           | d(\"*\") }}", "update_password": "{{ item.update_password    | d(\"on_create\") }}", "system": "{{ item.system             | d(omit) }}", "shell": "{{ item.shell              | d(system_users__default_shell if system_users__default_shell|d() else omit) }}", "create_home": "{{ item.create_home        | d(omit) }}", "move_home": "{{ item.move_home          | d(omit) }}", "skeleton": "{{ item.skeleton           | d(omit) }}", "expires": "{{ item.expires            | d(omit) }}", "remove": "{{ item.remove             | d(omit) }}", "force": "{{ item.force              | d(omit) }}", "non_unique": "{{ item.non_unique         | d(omit) }}", "generate_ssh_key": "{{ item.generate_ssh_key   | d(omit) }}", "ssh_key_bits": "{{ item.ssh_key_bits       | d(omit) }}", "ssh_key_comment": "{{ item.ssh_key_comment    | d(omit) }}", "ssh_key_file": "{{ item.ssh_key_file       | d(omit) }}", "ssh_key_passphrase": "{{ item.ssh_key_passphrase | d(omit) }}", "ssh_key_type": "{{ item.ssh_key_type       | d(omit) }}", "local": "{{ item.local              | d(True) }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather information about existing remote groups", "module": "ansible.builtin.getent", "index": 9, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Gather information about existing remote groups"}, "module_options": {"database": "group"}, "fqcn": "ansible.builtin.getent", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage additional UNIX groups for system users", "module": "ansible.builtin.user", "index": 10, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Manage additional UNIX groups for system users", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": (item.prefix | d(system_users__prefix)) + item.name, \"state\": item.state|d(\"present\"), \"gecos\": item.comment|d(), \"groups\": item.groups|d()} }}"}, "when": "(system_users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'ignore' ] and (item.groups|d() or (item.admin|d())|bool) and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": {"name": "{{ (item.prefix | d(system_users__prefix)) + item.name }}", "groups": "{{ (( (([ item.groups ] if (item.groups is string) else item.groups) if (item.groups is defined) else []) + (system_users__admin_groups if ((item.admin|d())|bool) else []) ) | intersect(getent_group.keys()) ) if (item.groups is defined or (item.admin|d())|bool) else omit }}", "append": "{{ item.append | d(True) }}", "state": "{{ item.state  | d(\"present\") }}", "create_home": "{{ item.create_home | d(omit) }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage system users home directories", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Manage system users home directories", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": (item.prefix | d(system_users__prefix)) + item.name, \"state\": item.state|d(\"present\"), \"home\": (item.home | d(((getent_passwd[(item.prefix | d(system_users__prefix)) + item.name][4]) if (getent_passwd[(item.prefix | d(system_users__prefix)) + item.name]|d()) else (system_users__home_root + \"/\" + ((item.prefix | d(system_users__prefix)) + item.name))) if ((item.create_home|d(True))|bool) else \"\"))} }}"}, "when": "(system_users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and (item.create_home|d(True))|bool and (item.home_owner|d() or item.home_group|d() or item.home_mode|d() or (item.local|d(True))|bool) and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": {"path": "{{ item.home | d(((getent_passwd[(item.prefix | d(system_users__prefix)) + item.name][4]) if (getent_passwd[(item.prefix | d(system_users__prefix)) + item.name]|d()) else (system_users__home_root + \"/\" + ((item.prefix | d(system_users__prefix)) + item.name))) if ((item.create_home|d(True))|bool) else omit) }}", "state": "directory", "owner": "{{ item.home_owner | d(omit) }}", "group": "{{ item.home_group | d(omit) }}", "mode": "{{ item.home_mode  | d(system_users__default_home_mode if (item.local|d(True))|bool else omit) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage system users home directory ACLs", "module": "ansible.posix.acl", "index": 12, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Manage system users home directory ACLs", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items | selectattr(\"home_acl\", \"defined\") | list | subelements(\"home_acl\") }}", "loop_control": {"label": "{{ {\"name\": (item.0.prefix | d(system_users__prefix)) + item.0.name, \"state\": item.0.state | d(\"present\"), \"home_acl\": item.1} }}"}, "when": "(system_users__enabled|bool and system_users__acl_enabled|bool and item.0.name|d() and item.0.name != 'root' and item.0.state|d('present') not in [ 'absent', 'ignore' ] and (item.0.create_home|d(True))|bool and item.0.home_acl|d() and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.0.no_log) | d(True if item.0.password|d() else False) }}", "tags": ["role::system_users:home_acl", "skip::system_users:home_acl", "skip::check"]}, "module_options": {"path": "{{ item.0.home | d(((getent_passwd[(item.0.prefix | d(system_users__prefix)) + item.0.name][4]) if (getent_passwd[(item.0.prefix | d(system_users__prefix)) + item.0.name]|d()) else (system_users__home_root + \"/\" + ((item.0.prefix | d(system_users__prefix)) + item.0.name))) if ((item.0.create_home|d(True))|bool) else omit) }}", "default": "{{ item.1.default     | d(omit) }}", "entity": "{{ item.1.entity      | d(omit) }}", "entry": "{{ item.1.entry       | d(omit) }}", "etype": "{{ item.1.etype       | d(omit) }}", "permissions": "{{ item.1.permissions | d(omit) }}", "follow": "{{ item.1.follow      | d(omit) }}", "recursive": "{{ item.1.recursive   | d(omit) }}", "state": "{{ item.1.state       | d(\"present\") }}"}, "fqcn": "ansible.posix.acl", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Allow specified system UNIX accounts to linger when not logged in", "module": "ansible.builtin.command", "index": 13, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Allow specified system UNIX accounts to linger when not logged in", "args": {"creates": "/var/lib/systemd/linger/{{ (item.prefix | d(system_users__prefix)) + item.name }}"}, "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": (item.prefix | d(system_users__prefix)) + item.name, \"state\": item.state | d(\"present\"), \"linger\": item.linger|d(False)} }}"}, "when": "(system_users__enabled|bool and ansible_service_mgr == 'systemd' and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and item.linger is defined and item.linger|bool and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": "loginctl enable-linger {{ (item.prefix | d(system_users__prefix)) + item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disallow specified UNIX accounts to linger when not logged in", "module": "ansible.builtin.command", "index": 14, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Disallow specified UNIX accounts to linger when not logged in", "args": {"removes": "/var/lib/systemd/linger/{{ (item.prefix | d(system_users__prefix)) + item.name }}"}, "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": (item.prefix | d(system_users__prefix)) + item.name, \"state\": item.state | d(\"present\"), \"linger\": item.linger|d(False)} }}"}, "when": "(system_users__enabled|bool and ansible_service_mgr == 'systemd' and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and item.linger is defined and not item.linger|bool and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": "loginctl disable-linger {{ (item.prefix | d(system_users__prefix)) + item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure SSH authorized keys for system users", "module": "ansible.posix.authorized_key", "index": 15, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Configure SSH authorized keys for system users", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": (item.prefix | d(system_users__prefix)) + item.name, \"state\": item.state | d(\"present\"), \"sshkeys\": item.sshkeys|d()} }}"}, "when": "(system_users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and (item.create_home|d(True))|bool and item.sshkeys|d() and item.sshkeys_state|d('present') != 'absent' and (item.user|d(True))|bool and not ansible_check_mode)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}", "tags": ["role::system_users:authorized_keys", "skip::system_users:authorized_keys", "skip::check"]}, "module_options": {"key": "{{ (item.sshkeys if item.sshkeys is string else '\n'.join(item.sshkeys)) | string }}", "state": "present", "user": "{{ (item.prefix | d(system_users__prefix)) + item.name }}", "exclusive": "{{ item.sshkeys_exclusive | d(omit) }}"}, "fqcn": "ansible.posix.authorized_key", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove SSH authorized keys from system user accounts if requested", "module": "ansible.builtin.file", "index": 16, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Remove SSH authorized keys from system user accounts if requested", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": (item.prefix | d(system_users__prefix)) + item.name, \"state\": item.state | d(\"present\"), \"sshkeys_state\": item.sshkeys_state|d(\"present\")} }}"}, "when": "(system_users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and (item.create_home|d(True))|bool and item.sshkeys|d() and item.sshkeys_state|d('present') == 'absent' and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": {"path": "~{{ (item.prefix | d(system_users__prefix)) + item.name }}/.ssh/authorized_keys", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure system user mail forwarding", "module": "ansible.builtin.lineinfile", "index": 17, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Configure system user mail forwarding", "become": true, "become_user": "{{ (item.prefix | d(system_users__prefix)) + item.name }}", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": (item.prefix | d(system_users__prefix)) + item.name, \"state\": item.state | d(\"present\"), \"forward\": item.forward|d()} }}"}, "when": "(system_users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and item.create_home|d(True) and item.forward|d() and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}", "tags": ["role::system_users:forward", "skip::system_users:forward", "skip::check"]}, "module_options": {"dest": "~/.forward", "regexp": "{{ '^' + (item.forward if item.forward is string else item.forward[0]) }}", "line": "{{ item.forward if item.forward is string else item.forward | join(\", \") }}", "state": "{{ item.forward_state | d(\"present\") }}", "create": true, "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage system users dotfiles", "module": "ansible.builtin.shell", "index": 18, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Manage system users dotfiles", "environment": {"LC_MESSAGES": "C"}, "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": (item.prefix | d(system_users__prefix)) + item.name, \"state\": item.state|d(\"present\"), \"dotfiles\": (item.dotfiles | d(item.dotfiles_enabled | d(system_users__dotfiles_enabled))), \"dotfiles_repo\": ((item.dotfiles_repo | d(system_users__dotfiles_repo)) if ((item.dotfiles|d(item.dotfiles_enabled|d(system_users__dotfiles_enabled)))|bool) else \"\")} }}"}, "become": true, "become_user": "{{ (item.prefix | d(system_users__prefix)) + item.name }}", "check_mode": false, "register": "system_users__register_dotfiles", "changed_when": "('Already up to date.' not in system_users__register_dotfiles.stdout_lines|regex_replace('-', ' '))", "when": "(system_users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and (item.create_home|d(True))|bool and (ansible_local|d() and ansible_local.yadm|d() and (ansible_local.yadm.installed|d())|bool) and (item.dotfiles | d(item.dotfiles_enabled | d(system_users__dotfiles_enabled))) | bool and (item.dotfiles_repo | d(system_users__dotfiles_repo)) and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}", "tags": ["role::system_users:dotfiles", "skip::system_users:dotfiles", "skip::check"]}, "module_options": "if ! yadm status > /dev/null ; then\n    yadm clone --bootstrap \"{{ item.dotfiles_repo | d(system_users__dotfiles_repo) }}\"\nelse\n    yadm pull\nfi\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage system user resource directories", "module": "ansible.builtin.file", "index": 19, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Manage system user resource directories", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items | selectattr(\"resources\", \"defined\") | list | subelements(\"resources\") }}", "loop_control": {"label": "{{ {\"name\": ((item.0.prefix | d(system_users__prefix)) + item.0.name), \"state\": item.0.state | d(\"present\"), \"resources\": item.1} }}"}, "when": "(system_users__enabled|bool and item.0.name|d() and item.0.name != 'root' and item.0.state|d('present') not in [ 'absent', 'ignore' ] and item.0.create_home|d(True) and item.0.resources|d() and (item.0.user|d(True))|bool and item.1.state|d('directory') in [ 'directory', 'link', 'touch' ] and item.1.content is undefined)", "no_log": "{{ debops__no_log | d(item.0.no_log) | d(True if item.0.password|d() else False) }}"}, "module_options": {"path": "{{ \"~\" + (item.0.prefix | d(system_users__prefix)) + item.0.name + \"/\" + (item.1.path | d(item.1.dest | d(item.1))) }}", "src": "{{ item.1.src     | d(omit) }}", "state": "{{ item.1.state   | d(\"directory\") }}", "owner": "{{ item.1.owner   | d((item.0.prefix | d(system_users__prefix)) + item.0.name) }}", "group": "{{ item.1.group   | d((item.0.prefix | d(system_users__prefix)) + (item.0.group | d(item.0.name))) }}", "mode": "{{ item.1.mode    | d(omit) }}", "force": "{{ item.1.force   | d(omit) }}", "recurse": "{{ item.1.recurse | d(omit) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage system user resource parent directories", "module": "ansible.builtin.file", "index": 20, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Manage system user resource parent directories", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items | selectattr(\"resources\", \"defined\") | list | subelements(\"resources\") }}", "loop_control": {"label": "{{ {\"name\": ((item.0.prefix | d(system_users__prefix)) + item.0.name), \"state\": item.0.state | d(\"present\"), \"resources\": item.1} }}"}, "when": "(system_users__enabled|bool and item.0.name|d() and item.0.name != 'root' and item.0.state|d('present') not in [ 'absent', 'ignore' ] and item.0.create_home|d(True) and item.0.resources|d() and (item.0.user|d(True))|bool and item.1.state|d('directory') in [ 'present', 'file' ])", "no_log": "{{ debops__no_log | d(item.0.no_log) | d(True if item.0.password|d() else False) }}"}, "module_options": {"path": "{{ (\"~\" + (item.0.prefix | d(system_users__prefix)) + item.0.name + \"/\" + (item.1.path | d(item.1.dest))) | dirname }}", "state": "directory", "owner": "{{ item.1.parent_owner   | d((item.0.prefix | d(system_users__prefix)) + item.0.name) }}", "group": "{{ item.1.parent_group   | d((item.0.prefix | d(system_users__prefix)) + (item.0.group | d(item.0.name))) }}", "mode": "{{ item.1.parent_mode    | d(omit) }}", "force": "{{ item.1.force          | d(omit) }}", "recurse": "{{ item.1.parent_recurse | d(omit) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage system user resource files", "module": "ansible.builtin.copy", "index": 21, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Manage system user resource files", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items | selectattr(\"resources\", \"defined\") | list | subelements(\"resources\") }}", "loop_control": {"label": "{{ {\"name\": ((item.0.prefix | d(system_users__prefix)) + item.0.name), \"state\": item.0.state | d(\"present\"), \"resources\": item.1} }}"}, "when": "(system_users__enabled|bool and item.0.name|d() and item.0.name != 'root' and item.0.state|d('present') not in [ 'absent', 'ignore' ] and item.0.create_home|d(True) and item.0.resources|d() and (item.0.user|d(True))|bool and item.1.state|d('directory') in [ 'present', 'file' ] and (item.1.dest|d() or item.1.path|d()) and (item.1.src|d() or item.1.content|d()))", "no_log": "{{ debops__no_log | d(item.0.no_log) | d(True if item.0.password|d() else False) }}"}, "module_options": {"dest": "{{ \"~\" + (item.0.prefix | d(system_users__prefix)) + item.0.name + \"/\" + (item.1.path | d(item.1.dest)) }}", "src": "{{ item.1.src     | d(omit) }}", "content": "{{ item.1.content | d(omit) }}", "owner": "{{ item.1.owner   | d((item.0.prefix | d(system_users__prefix)) + item.0.name) }}", "group": "{{ item.1.group   | d((item.0.prefix | d(system_users__prefix)) + (item.0.group | d(item.0.name))) }}", "mode": "{{ item.1.mode    | d(omit) }}", "force": "{{ item.1.force   | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove system user resources if requested", "module": "ansible.builtin.file", "index": 22, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Remove system user resources if requested", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items | selectattr(\"resources\", \"defined\") | list | subelements(\"resources\") }}", "loop_control": {"label": "{{ {\"name\": ((item.0.prefix | d(system_users__prefix)) + item.0.name), \"state\": item.0.state | d(\"present\"), \"resources\": item.1} }}"}, "when": "(system_users__enabled|bool and item.0.name|d() and item.0.name != 'root' and item.0.state|d('present') not in [ 'absent', 'ignore' ] and item.0.create_home|d(True) and item.0.resources|d() and (item.0.user|d(True))|bool and item.1.state|d('directory') == 'absent')", "no_log": "{{ debops__no_log | d(item.0.no_log) | d(True if item.0.password|d() else False) }}"}, "module_options": {"path": "{{ \"~\" + (item.0.prefix | d(system_users__prefix)) + item.0.name + \"/\" + (item.1.path | d(item.1.dest | d(item.1))) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove user groups if requested", "module": "ansible.builtin.group", "index": 23, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Remove user groups if requested", "loop": "{{ system_users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": (item.prefix | d(system_users__prefix)) + item.name, \"state\": item.state | d(\"present\")} }}"}, "when": "(system_users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') == 'absent' and (item.private_group|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": {"name": "{{ (item.prefix | d(system_users__prefix)) + (item.group | d(item.name)) }}", "state": "absent", "local": "{{ item.local | d(True if (item.user|d(True))|bool else False) }}"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 24, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save system users local facts", "module": "ansible.builtin.template", "index": 25, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Save system users local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/system_users.fact.j2", "dest": "/etc/ansible/facts.d/system_users.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 26, "defined_in": "testdata/scm_repo/roles/system_users/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/system_users"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/bootstrap.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "python", "defined_in": "testdata/scm_repo/roles/python", "task_yamls": ["testdata/scm_repo/roles/python/tasks/main_raw.yml", "testdata/scm_repo/roles/python/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Detect the OS release manually, no Ansible facts available", "module": "ansible.builtin.raw", "index": 0, "defined_in": "testdata/scm_repo/roles/python/tasks/main_raw.yml", "options": {"name": "Detect the OS release manually, no Ansible facts available", "register": "python__register_raw_release", "changed_when": false, "check_mode": false, "tags": ["meta::facts"]}, "module_options": "grep -E '^VERSION=' /etc/os-release | tr -d '(\")' | cut -d\" \" -f2", "fqcn": "ansible.builtin.raw", "used_in": ["testdata/scm_repo/roles/python"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update APT repositories, install core Python packages", "module": "ansible.builtin.raw", "index": 1, "defined_in": "testdata/scm_repo/roles/python/tasks/main_raw.yml", "options": {"name": "Update APT repositories, install core Python packages", "register": "python__register_raw", "when": "python__enabled|bool", "changed_when": "(not python__register_raw.stdout | regex_search('0 upgraded, 0 newly installed, 0 to remove and \\d+ not upgraded\\.') or python__register_raw.stdout | regex_search('.+ set to manually installed\\.'))", "tags": ["meta::facts"]}, "module_options": "if [ -z \"$(find /var/cache/apt/pkgcache.bin -mmin {{ python__raw_apt_cache_valid_time }})\" ]; then\n    apt-get -q update\nfi\nif [ \"{{ python__raw_purge_v2 | bool | lower }}\" = \"true\" ] && [ ! -f \"/etc/ansible/facts.d/python.fact\" ] ; then\n    LANG=C apt-get --purge -yq remove {{ python__raw_purge_packages2 | join(\" \") }}\nfi\nLANG=C apt-get --no-install-recommends -yq install {{ python__core_packages | join(\" \") }}\n", "fqcn": "ansible.builtin.raw", "used_in": ["testdata/scm_repo/roles/python"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reset connection to the host", "module": "ansible.builtin.meta", "index": 2, "defined_in": "testdata/scm_repo/roles/python/tasks/main_raw.yml", "options": {"name": "Reset connection to the host", "tags": ["meta::facts"]}, "module_options": "reset_connection", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/python"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/python/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/python"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local fact directory exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/python/tasks/main.yml", "options": {"name": "Make sure that Ansible local fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/python"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Python local facts", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/python/tasks/main.yml", "options": {"name": "Save Python local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/python.fact.j2", "dest": "/etc/ansible/facts.d/python.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/python"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 3, "defined_in": "testdata/scm_repo/roles/python/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/python"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install requested packages", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/python/tasks/main.yml", "options": {"name": "Install requested packages", "register": "python__register_packages", "until": "python__register_packages is succeeded", "when": "python__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", python__combined_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/python"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate pip configuration", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/python/tasks/main.yml", "options": {"name": "Generate pip configuration"}, "module_options": {"src": "etc/pip.conf.j2", "dest": "/etc/pip.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/python"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update the role status in local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/python/tasks/main.yml", "options": {"name": "Update the role status in local facts", "notify": ["Refresh host facts"], "when": "(python__enabled|bool and ansible_local|d() and ansible_local.python|d() and not ansible_local.python.configured|bool)"}, "module_options": {"src": "etc/ansible/facts.d/python.fact.j2", "dest": "/etc/ansible/facts.d/python.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/python"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/python/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/python"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/bootstrap.yml", "testdata/scm_repo/playbooks/common.yml", "testdata/scm_repo/playbooks/service/minio.yml", "testdata/scm_repo/playbooks/service/redis_server.yml"]}, {"py/object": "struct4.Role", "name": "reboot", "defined_in": "testdata/scm_repo/roles/reboot", "task_yamls": ["testdata/scm_repo/roles/reboot/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Check if reboot is required", "module": "ansible.builtin.stat", "index": 0, "defined_in": "testdata/scm_repo/roles/reboot/tasks/main.yml", "options": {"name": "Check if reboot is required", "register": "reboot__register_required"}, "module_options": {"path": "/var/run/reboot-required", "get_checksum": false}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/reboot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reboot DebOps hosts if needed or requested", "module": "ansible.builtin.reboot", "index": 1, "defined_in": "testdata/scm_repo/roles/reboot/tasks/main.yml", "options": {"name": "Reboot DebOps hosts if needed or requested", "when": "reboot__register_required.stat.exists|bool or reboot__force|bool"}, "module_options": {"boot_time_command": "{{ reboot__boot_time_command }}", "search_paths": "{{ (reboot__default_search_paths + reboot__search_paths) | flatten }}", "reboot_timeout": "{{ reboot__timeout }}"}, "fqcn": "ansible.builtin.reboot", "used_in": ["testdata/scm_repo/roles/reboot"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/reboot.yml"]}, {"py/object": "struct4.Role", "name": "hashicorp", "defined_in": "testdata/scm_repo/roles/hashicorp", "task_yamls": ["testdata/scm_repo/roles/hashicorp/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Install required packages", "register": "hashicorp__register_packages", "until": "hashicorp__register_packages is succeeded", "when": "(hashicorp__applications or hashicorp__dependent_applications)"}, "module_options": {"name": "{{ q(\"flattened\", (hashicorp__base_packages + hashicorp__packages + hashicorp__dependent_packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create HashiCorp group", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Create HashiCorp group", "when": "(hashicorp__applications or hashicorp__dependent_applications)", "tags": ["role::hashicorp:download", "role::hashicorp:verify"]}, "module_options": {"name": "{{ hashicorp__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create HashiCorp user", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Create HashiCorp user", "when": "(hashicorp__applications or hashicorp__dependent_applications)", "tags": ["role::hashicorp:download", "role::hashicorp:verify"]}, "module_options": {"name": "{{ hashicorp__user }}", "group": "{{ hashicorp__group }}", "home": "{{ hashicorp__home }}", "comment": "{{ hashicorp__comment }}", "shell": "{{ hashicorp__shell }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create source directories", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Create source directories", "with_items": "{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}", "when": "(hashicorp__applications or hashicorp__dependent_applications)", "tags": ["role::hashicorp:download", "role::hashicorp:verify"]}, "module_options": {"path": "{{ hashicorp__src + \"/\" + item + \"/\" + hashicorp__combined_version_map[item] }}", "state": "directory", "owner": "{{ hashicorp__user }}", "group": "{{ hashicorp__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create library directories", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Create library directories", "with_items": "{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}", "when": "(hashicorp__applications or hashicorp__dependent_applications)", "tags": ["role::hashicorp:unpack", "role::hashicorp:install"]}, "module_options": {"path": "{{ hashicorp__lib + \"/\" + item + \"/\" + hashicorp__combined_version_map[item] }}", "state": "directory", "owner": "{{ hashicorp__user }}", "group": "{{ hashicorp__group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Consul Web UI library directory", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Create Consul Web UI library directory", "with_items": "{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}", "when": "(hashicorp__consul_webui|bool and item == 'consul')"}, "module_options": {"path": "{{ hashicorp__lib + \"/\" + item + \"/\" + hashicorp__combined_version_map[item] + \"/web_ui\" }}", "state": "directory", "owner": "{{ hashicorp__user }}", "group": "{{ hashicorp__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Consul Web UI directory", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Create Consul Web UI directory", "when": "(hashicorp__consul_webui|bool and ('consul' in (hashicorp__applications + hashicorp__dependent_applications | unique)))"}, "module_options": {"path": "{{ hashicorp__consul_webui_path }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download requested application files", "module": "ansible.builtin.get_url", "index": 9, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Download requested application files", "with_nested": ["{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}", ["{{ hashicorp__tar_suffix }}", "{{ hashicorp__hash_suffix }}", "{{ hashicorp__sig_suffix }}"]], "when": "(ansible_local.hashicorp is not defined or (ansible_local.hashicorp|d() and ansible_local.hashicorp.applications|d() and (ansible_local.hashicorp.applications[item.0] is not defined or (ansible_local.hashicorp.applications[item.0] != hashicorp__combined_version_map[item.0]))))", "tags": ["role::hashicorp:download", "role::hashicorp:verify"]}, "module_options": {"url": "{{ hashicorp__base_url + item.0 + \"/\" + hashicorp__combined_version_map[item.0] + \"/\" + item.0 + \"_\" + hashicorp__combined_version_map[item.0] + \"_\" + item.1 }}", "dest": "{{ hashicorp__src + \"/\" + item.0 + \"/\" + hashicorp__combined_version_map[item.0] + \"/\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.get_url", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download Consul Web UI", "module": "ansible.builtin.get_url", "index": 10, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Download Consul Web UI", "with_nested": [["consul"], ["{{ hashicorp__consul_webui_suffix }}"]], "when": "(hashicorp__consul_webui|bool and ('consul' in (hashicorp__applications + hashicorp__dependent_applications) | unique) and (ansible_local.hashicorp is not defined or (ansible_local.hashicorp|d() and ansible_local.hashicorp.applications|d() and (ansible_local.hashicorp.applications['consul'] is not defined or (ansible_local.hashicorp.applications['consul'] != hashicorp__combined_version_map['consul'])) or not ansible_local.hashicorp.consul_webui | bool)))", "tags": ["role::hashicorp:download", "role::hashicorp:verify"]}, "module_options": {"url": "{{ hashicorp__base_url + item.0 + \"/\" + hashicorp__combined_version_map[item.0] + \"/\" + item.0 + \"_\" + hashicorp__combined_version_map[item.0] + \"_\" + item.1 }}", "dest": "{{ hashicorp__src + \"/\" + item.0 + \"/\" + hashicorp__combined_version_map[item.0] + \"/\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.get_url", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Verify signatures with HashiCorp GPG key", "module": "ansible.builtin.command", "index": 11, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Verify signatures with HashiCorp GPG key", "args": {"chdir": "{{ hashicorp__src + \"/\" + item + \"/\" + hashicorp__combined_version_map[item] }}"}, "with_items": "{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}", "register": "hashicorp__register_signature", "changed_when": false, "failed_when": "hashicorp__register_signature.rc != 0", "tags": ["role::hashicorp:verify"]}, "module_options": "gpg --verify {{ item + '_' + hashicorp__combined_version_map[item] + '_' + hashicorp__sig_suffix }} {{ item + '_' + hashicorp__combined_version_map[item] + '_' + hashicorp__hash_suffix }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check file signatures", "module": "ansible.builtin.shell", "index": 12, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Check file signatures", "args": {"chdir": "{{ hashicorp__src + \"/\" + item + \"/\" + hashicorp__combined_version_map[item] }}", "executable": "bash"}, "with_items": "{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}", "register": "hashicorp__register_hash", "changed_when": false, "failed_when": "hashicorp__register_hash.rc != 0", "tags": ["role::hashicorp:verify"]}, "module_options": "grep --file <(find . -type f -printf \"%f$\\n\") {{ item + '_' + hashicorp__combined_version_map[item] + '_' + hashicorp__hash_suffix }} | sha256sum --check --status", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack the file archives", "module": "ansible.builtin.unarchive", "index": 13, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Unpack the file archives", "with_items": "{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}", "register": "hashicorp__register_unpack", "tags": ["role::hashicorp:unpack", "role::hashicorp:install"]}, "module_options": {"remote_src": true, "src": "{{ hashicorp__src + \"/\" + item + \"/\" + hashicorp__combined_version_map[item] + \"/\" + item + \"_\" + hashicorp__combined_version_map[item] + \"_\" + hashicorp__tar_suffix }}", "dest": "{{ hashicorp__lib + \"/\" + item + \"/\" + hashicorp__combined_version_map[item] }}", "mode": "u=rwX,g=rwX,o=rX", "creates": "{{ hashicorp__lib + \"/\" + item + \"/\" + hashicorp__combined_version_map[item] + \"/\" + ((hashicorp__combined_binary_map[item] if hashicorp__combined_binary_map[item] is string else hashicorp__combined_binary_map[item]|first) if hashicorp__combined_binary_map[item]|d() else item) }}"}, "fqcn": "ansible.builtin.unarchive", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack the Consul Web UI", "module": "ansible.builtin.unarchive", "index": 14, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Unpack the Consul Web UI", "with_items": "{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}", "register": "hashicorp__register_unpack_webui", "when": "hashicorp__consul_webui|bool and item == 'consul'", "tags": ["role::hashicorp:unpack", "role::hashicorp:install"]}, "module_options": {"copy": false, "src": "{{ hashicorp__src + \"/\" + item + \"/\" + hashicorp__combined_version_map[item] + \"/\" + item + \"_\" + hashicorp__combined_version_map[item] + \"_\" + hashicorp__consul_webui_suffix }}", "dest": "{{ hashicorp__lib + \"/\" + item + \"/\" + hashicorp__combined_version_map[item] + \"/web_ui\" + \"/\" }}", "mode": "u=rwX,g=rwX,o=rX", "creates": "{{ hashicorp__lib + \"/\" + item + \"/\" + hashicorp__combined_version_map[item] + \"/web_ui/index.html\" }}"}, "fqcn": "ansible.builtin.unarchive", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install HashiCorp applications", "module": "ansible.builtin.shell", "index": 15, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Install HashiCorp applications", "args": {"chdir": "{{ hashicorp__lib + \"/\" + item.0 + \"/\" + hashicorp__combined_version_map[item.0] }}"}, "with_together": ["{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}", "{{ hashicorp__register_unpack.results }}"], "when": "(item.1 is changed or (ansible_local|d() and (ansible_local.hashicorp is not defined or (ansible_local.hashicorp|d() and ansible_local.hashicorp.applications|d() and (ansible_local.hashicorp.applications[item.0] is not defined or (ansible_local.hashicorp.applications[item.0] != hashicorp__combined_version_map[item.0]))))))", "tags": ["role::hashicorp:install"]}, "module_options": "install --mode 755 --owner root --group root --target-directory {{ hashicorp__bin }} {{ ((hashicorp__combined_binary_map[item.0] if hashicorp__combined_binary_map[item.0] is string else hashicorp__combined_binary_map[item.0] | join(' ')) if hashicorp__combined_binary_map[item.0]|d() else item.0) }} {% if item.0 == 'terraform' %} ; find . -maxdepth 1 -type f -name 'terraform-*' -exec install -m 755 -o root -g root -t {{ hashicorp__bin }} {} + {% endif %}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Synchronize Consul Web UI public directory", "module": "ansible.builtin.shell", "index": 16, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Synchronize Consul Web UI public directory", "args": {"warn": false}, "with_items": "{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}", "when": "(hashicorp__consul_webui|bool and item == 'consul' and hashicorp__register_unpack_webui is changed)"}, "module_options": "rsync --delete --recursive --prune-empty-dirs {{ hashicorp__lib + \"/\" + item + \"/\" + hashicorp__combined_version_map[item] + \"/web_ui/\" }} {{ hashicorp__consul_webui_path }} && chown -R root:root {{ hashicorp__consul_webui_path }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 17, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists", "when": "(hashicorp__applications or hashicorp__dependent_applications)"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save HashiCorp local facts", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Save HashiCorp local facts", "notify": ["Refresh host facts"], "when": "(hashicorp__applications or hashicorp__dependent_applications)", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/hashicorp.fact.j2", "dest": "/etc/ansible/facts.d/hashicorp.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 19, "defined_in": "testdata/scm_repo/roles/hashicorp/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/hashicorp"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "atd", "defined_in": "testdata/scm_repo/roles/atd", "task_yamls": ["testdata/scm_repo/roles/atd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/atd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/atd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install atd", "module": "ansible.builtin.apt", "index": 1, "defined_in": "testdata/scm_repo/roles/atd/tasks/main.yml", "options": {"name": "Install atd", "register": "atd__register_packages", "until": "atd__register_packages is succeeded"}, "module_options": {"name": "at", "state": "{{ \"present\" if atd_enabled|bool else \"absent\" }}", "purge": true, "install_recommends": false}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/atd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate consistent atd variables", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "testdata/scm_repo/roles/atd/tasks/main.yml", "options": {"name": "Generate consistent atd variables", "when": "atd_enabled|bool", "tags": ["meta::facts"]}, "module_options": {"atd_fact_batch_interval": "{{ atd_batch_interval }}", "atd_fact_batch_load": "{{ atd_batch_load }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/atd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure atd and batch", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/atd/tasks/main.yml", "options": {"name": "Configure atd and batch", "notify": ["Restart atd"], "when": "atd_enabled|bool"}, "module_options": {"src": "etc/default/atd.j2", "dest": "/etc/default/atd", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/atd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom atd.service unit", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/atd/tasks/main.yml", "options": {"name": "Install custom atd.service unit", "when": "atd_enabled|bool", "notify": ["Reload systemd units", "Restart atd"]}, "module_options": {"src": "etc/systemd/system/atd.service.j2", "dest": "/etc/systemd/system/atd.service", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/atd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure /etc/at.allow", "module": "ansible.builtin.lineinfile", "index": 5, "defined_in": "testdata/scm_repo/roles/atd/tasks/main.yml", "options": {"name": "Configure /etc/at.allow", "with_flattened": ["{{ atd_default_allow }}", "{{ atd_allow }}", "{{ atd_group_allow }}", "{{ atd_host_allow }}"], "when": "(atd_enabled|bool and (atd_default_allow|d() or atd_allow|d() or atd_group_allow|d() or atd_host_allow|d()) and item|d())", "tags": ["role::atd:users"]}, "module_options": {"dest": "/etc/at.allow", "regexp": "^{{ item }}$", "line": "{{ item }}", "state": "present", "create": true, "owner": "root", "group": "daemon", "mode": "0640"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/atd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove /etc/at.allow if list is empty", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/atd/tasks/main.yml", "options": {"name": "Remove /etc/at.allow if list is empty", "when": "(atd_enabled|bool and (not atd_default_allow|d() and not atd_allow|d() and not atd_group_allow|d() and not atd_host_allow|d()))", "tags": ["role::atd:users"]}, "module_options": {"path": "/etc/at.allow", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/atd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure /etc/at.deny", "module": "ansible.builtin.lineinfile", "index": 7, "defined_in": "testdata/scm_repo/roles/atd/tasks/main.yml", "options": {"name": "Configure /etc/at.deny", "with_flattened": ["{{ atd_default_deny }}", "{{ atd_deny }}"], "when": "(atd_enabled|bool and (atd_default_deny|d() or atd_deny|d()) and item|d())", "tags": ["role::atd:users"]}, "module_options": {"dest": "/etc/at.deny", "regexp": "^{{ item }}$", "line": "{{ item }}", "state": "present", "create": true, "owner": "root", "group": "daemon", "mode": "0640"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/atd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/atd/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/atd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save atd facts", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/atd/tasks/main.yml", "options": {"name": "Save atd facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/atd.fact.j2", "dest": "/etc/ansible/facts.d/atd.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/atd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather Ansible facts if needed", "module": "ansible.builtin.meta", "index": 10, "defined_in": "testdata/scm_repo/roles/atd/tasks/main.yml", "options": {"name": "Gather Ansible facts if needed"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/atd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "auth", "defined_in": "testdata/scm_repo/roles/auth", "task_yamls": ["testdata/scm_repo/roles/auth/tasks/main.yml", "testdata/scm_repo/roles/auth/tasks/pam_pwhistory.yml", "testdata/scm_repo/roles/auth/tasks/auth/pre_main.yml", "testdata/scm_repo/roles/auth/tasks/auth/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/auth/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/auth"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/auth/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/auth"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps pre_tasks hook", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "testdata/scm_repo/roles/auth/tasks/main.yml", "options": {"name": "DebOps pre_tasks hook"}, "module_options": "{{ lookup('debops.debops.task_src', 'auth/pre_main.yml') }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/auth"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install auth-related packages", "module": "ansible.builtin.apt", "index": 3, "defined_in": "testdata/scm_repo/roles/auth/tasks/main.yml", "options": {"name": "Install auth-related packages", "register": "auth__register_packages", "until": "auth__register_packages is succeeded"}, "module_options": {"name": "{{ auth_packages | flatten }}", "state": "present", "install_recommends": "no"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/auth"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure pam_cracklib", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/auth/tasks/main.yml", "options": {"name": "Configure pam_cracklib", "notify": ["Update PAM common configuration"], "when": "auth_cracklib|bool"}, "module_options": {"src": "usr/share/pam-configs/cracklib.j2", "dest": "/usr/share/pam-configs/cracklib", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/auth"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure PAM password history module", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "testdata/scm_repo/roles/auth/tasks/main.yml", "options": {"name": "Configure PAM password history module", "when": "auth_pwhistory_remember is defined and auth_pwhistory_remember"}, "module_options": "pam_pwhistory.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/auth"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps post_tasks hook", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/auth/tasks/main.yml", "options": {"name": "DebOps post_tasks hook"}, "module_options": "{{ lookup('debops.debops.task_src', 'auth/post_main.yml') }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/auth"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if password history database exists", "module": "ansible.builtin.stat", "index": 0, "defined_in": "testdata/scm_repo/roles/auth/tasks/pam_pwhistory.yml", "options": {"name": "Check if password history database exists", "register": "auth_register_opasswd"}, "module_options": {"path": "/etc/security/opasswd"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/auth"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure password history database", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/auth/tasks/pam_pwhistory.yml", "options": {"name": "Configure password history database", "when": "auth_register_opasswd is defined and not auth_register_opasswd.stat.exists"}, "module_options": {"path": "/etc/security/opasswd", "state": "touch", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/auth"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure pam_pwhistory", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/auth/tasks/pam_pwhistory.yml", "options": {"name": "Configure pam_pwhistory", "notify": ["Update PAM common configuration"]}, "module_options": {"src": "usr/share/pam-configs/pwhistory.j2", "dest": "/usr/share/pam-configs/pwhistory", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/auth"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "golang", "defined_in": "testdata/scm_repo/roles/golang", "task_yamls": ["testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "testdata/scm_repo/roles/golang/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Check if {{ build.name }} APT packages are available", "module": "ansible.builtin.shell", "index": 0, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Check if {{ build.name }} APT packages are available", "args": {"executable": "/bin/bash"}, "register": "golang__register_build_apt_packages", "when": "build.apt_packages|d()", "changed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && apt-cache madison \\ {{ ([ build.apt_packages ] if build.apt_packages is string else build.apt_packages) | join(' ') }} \\ | awk '{print $1}' | sort | uniq", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install {{ build.name }} APT packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Install {{ build.name }} APT packages", "register": "golang__register_install_apt_packages", "until": "golang__register_install_apt_packages is succeeded", "when": "(not (build.upstream|d())|bool and (build.apt_packages is defined and (([ build.apt_packages ] if (build.apt_packages is string) else build.apt_packages) | intersect(golang__register_build_apt_packages.stdout_lines))))"}, "module_options": {"name": "{{ build.apt_packages }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the UNIX group for Go environment exists", "module": "ansible.builtin.group", "index": 2, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Ensure that the UNIX group for Go environment exists"}, "module_options": {"name": "{{ golang__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the UNIX account for Go environment exists", "module": "ansible.builtin.user", "index": 3, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Ensure that the UNIX account for Go environment exists"}, "module_options": {"name": "{{ golang__user }}", "group": "{{ golang__group }}", "home": "{{ golang__home }}", "comment": "{{ golang__comment }}", "shell": "{{ golang__shell }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install {{ build.name }} required APT packages", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Install {{ build.name }} required APT packages", "register": "golang__register_install_apt_required_packages", "until": "golang__register_install_apt_required_packages is succeeded", "when": "(build.url|d() and build.upstream_type|d('git') == 'url' and (((build.upstream|d())|bool or (build.apt_packages is undefined or (not (([ build.apt_packages ] if (build.apt_packages is string) else build.apt_packages) | intersect(golang__register_build_apt_packages.stdout_lines)))))))"}, "module_options": {"name": "{{ q(\"flattened\", (build.apt_required_packages|d([]))) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create the required directories for {{ build.name }} files", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Create the required directories for {{ build.name }} files", "loop": "{{ build.url }}", "loop_control": {"loop_var": "url_item"}}, "module_options": {"dest": "{{ (golang__gosrc + \"/\" + url_item.dest) | dirname }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download {{ build.name }} files", "module": "ansible.builtin.get_url", "index": 6, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Download {{ build.name }} files", "loop": "{{ build.url }}", "loop_control": {"loop_var": "url_item"}, "register": "golang__register_get_url", "until": "golang__register_get_url is succeeded"}, "module_options": {"url": "{{ url_item.src }}", "dest": "{{ golang__gosrc + \"/\" + url_item.dest }}", "checksum": "{{ url_item.checksum | d(omit) }}", "mode": "0644"}, "fqcn": "ansible.builtin.get_url", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Extract {{ build.name }} files from archive", "module": "ansible.builtin.unarchive", "index": 7, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Extract {{ build.name }} files from archive", "loop": "{{ build.url }}", "loop_control": {"loop_var": "url_item"}, "when": "(url_item.unarchive|d())|bool"}, "module_options": {"src": "{{ golang__gosrc + \"/\" + url_item.dest }}", "dest": "{{ golang__gosrc + \"/\" + (url_item.unarchive_dest | d(url_item.dest | dirname)) }}", "remote_src": true, "creates": "{{ golang__gosrc + \"/\" + url_item.unarchive_creates }}", "mode": "u=rwX,g=rwX,o=rX"}, "fqcn": "ansible.builtin.unarchive", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Verify {{ build.name }} files with GnuPG", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Verify {{ build.name }} files with GnuPG", "args": {"chdir": "{{ (golang__gosrc + \"/\" + url_item.dest) | dirname }}"}, "loop": "{{ build.url }}", "loop_control": {"loop_var": "url_item"}, "register": "golang__register_verify", "changed_when": false, "failed_when": "golang__register_verify.rc != 0", "when": "(url_item.gpg_verify|d())|bool"}, "module_options": "gpg --verify {{ golang__gosrc + \"/\" + url_item.dest }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install downloaded {{ build.name }} binaries", "module": "ansible.builtin.copy", "index": 9, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Install downloaded {{ build.name }} binaries", "register": "golang__register_download_install", "notify": "{{ binary_item.notify if binary_item.notify|d() else omit }}", "loop": "{{ build.url_binaries | d([]) }}", "loop_control": {"loop_var": "binary_item"}, "when": "(build.url_binaries|d() and build.upstream_type|d('git') == 'url' and ((build.upstream|d())|bool or (build.apt_packages is undefined or (not (([ build.apt_packages ] if (build.apt_packages is string) else build.apt_packages) | intersect(golang__register_build_apt_packages.stdout_lines))))))"}, "module_options": {"src": "{{ (\"\" if ((binary_item.src | d(binary_item)).startswith(\"/\")) else (golang__gosrc + \"/\")) + (binary_item.src | d(binary_item)) }}", "dest": "{{ ((binary_item.dest | dirname) if (binary_item.dest|d() and \"/\" in binary_item.dest) else \"/usr/local/bin\") + \"/\" + ((binary_item.dest | d(binary_item.src | d(binary_item))) | basename) }}", "remote_src": true, "mode": "{{ binary_item.mode | d(\"0755\") }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install {{ build.name }} APT dev packages", "module": "ansible.builtin.package", "index": 10, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Install {{ build.name }} APT dev packages", "register": "golang__register_install_apt_dev_packages", "until": "golang__register_install_apt_dev_packages is succeeded", "when": "(build.git|d() and build.upstream_type|d('git') == 'git' and (((build.upstream|d())|bool or (build.apt_packages is undefined or (not (([ build.apt_packages ] if (build.apt_packages is string) else build.apt_packages) | intersect(golang__register_build_apt_packages.stdout_lines)))))))"}, "module_options": {"name": "{{ q(\"flattened\", (golang__apt_dev_packages + (build.apt_dev_packages|d([])))) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone {{ build.name }} source code", "module": "ansible.builtin.git", "index": 11, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Clone {{ build.name }} source code", "loop": "{{ build.git }}", "loop_control": {"loop_var": "git_item"}, "register": "golang__register_build_source"}, "module_options": {"repo": "{{ git_item.repo }}", "dest": "{{ golang__gosrc + \"/\" + (git_item.dest | d(git_item.repo.split(\"://\")[1])) }}", "version": "{{ git_item.version | d(git_item.branch | d(omit)) }}", "depth": "{{ git_item.depth | d(golang__git_depth | d(omit)) }}", "verify_commit": "{{ True if build.gpg|d() else omit }}"}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Build {{ build.name }} binaries", "module": "ansible.builtin.shell", "index": 12, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Build {{ build.name }} binaries", "environment": {"GOPATH": "{{ golang__env_gopath }}", "GOCACHE": "{{ golang__env_gocache }}", "PATH": "{{ golang__env_path }}"}, "args": {"executable": "/bin/bash", "chdir": "{{ golang__gosrc + \"/\" + (git_item.dest | d(git_item.repo.split(\"://\")[1])) }}"}, "loop": "{{ build.git }}", "loop_control": {"loop_var": "git_item"}, "when": "git_item.build_script|d() and golang__register_build_source is changed", "register": "golang__register_build"}, "module_options": "set -o nounset -o pipefail -o errexit && {{ git_item.build_script }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install built {{ build.name }} binaries", "module": "ansible.builtin.copy", "index": 13, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Install built {{ build.name }} binaries", "register": "golang__register_build_install", "notify": "{{ binary_item.notify if binary_item.notify|d() else omit }}", "loop": "{{ build.git_binaries | d([]) }}", "loop_control": {"loop_var": "binary_item"}, "when": "(build.git_binaries|d() and build.upstream_type|d('git') == 'git' and ((build.upstream|d())|bool or (build.apt_packages is undefined or (not (([ build.apt_packages ] if (build.apt_packages is string) else build.apt_packages) | intersect(golang__register_build_apt_packages.stdout_lines))))))"}, "module_options": {"src": "{{ (\"\" if ((binary_item.src | d(binary_item)).startswith(\"/\")) else (golang__gosrc + \"/\")) + (binary_item.src | d(binary_item)) }}", "dest": "{{ ((binary_item.dest | dirname) if (binary_item.dest|d() and \"/\" in binary_item.dest) else \"/usr/local/bin\") + \"/\" + ((binary_item.dest | d(binary_item.src | d(binary_item))) | basename) }}", "remote_src": true, "mode": "{{ binary_item.mode | d(\"0755\") }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create the initial Go binaries database file", "module": "ansible.builtin.copy", "index": 14, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Create the initial Go binaries database file", "when": "build.url_binaries|d() or build.git_binaries|d()"}, "module_options": {"content": "# This is a database of the applications installed by the 'debops.golang'\n# Ansible role and used by the '/etc/ansible/facts.d/golang.fact' script\n# to provide paths to the correct binaries.\n", "dest": "{{ golang__bin_database }}", "mode": "0644", "force": false}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Register {{ build.name }} in database of the local Go binaries", "module": "ansible.builtin.lineinfile", "index": 15, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Register {{ build.name }} in database of the local Go binaries", "loop": "{{ build.url_binaries | d([]) + build.git_binaries | d([]) }}", "loop_control": {"loop_var": "binary_item"}, "register": "golang__register_build_database", "when": "build.url_binaries|d() or build.git_binaries|d()"}, "module_options": {"path": "{{ golang__bin_database }}", "regexp": "{{ '^' + (((binary_item.dest | d(binary_item.src | d(binary_item))) | basename) | regex_replace('-', '\\-') | regex_replace('\\.', '\\\\.')) + '$' }}", "line": "{{ (binary_item.dest | d(binary_item.src | d(binary_item))) | basename }}", "state": "present", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible local facts if they were modified", "module": "ansible.builtin.setup", "index": 16, "defined_in": "testdata/scm_repo/roles/golang/tasks/golang_build_install.yml", "options": {"name": "Update Ansible local facts if they were modified", "when": "(ansible_local|d() and ansible_local.golang|d() and (ansible_local.golang.configured|d())|bool and (golang__register_build_database is changed or golang__register_download_install is changed or golang__register_build_install is changed))"}, "module_options": null, "fqcn": "ansible.builtin.setup", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/golang/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Build and install Go packages", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "testdata/scm_repo/roles/golang/tasks/main.yml", "options": {"name": "Build and install Go packages", "loop_control": {"loop_var": "build"}, "loop": "{{ q(\"flattened\", golang__combined_packages) | debops.debops.parse_kv_items }}", "when": "build.name|d() and build.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": "golang_build_install.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/golang/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Go local facts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/golang/tasks/main.yml", "options": {"name": "Save Go local facts", "register": "golang__register_facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/golang.fact.j2", "dest": "/etc/ansible/facts.d/golang.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.setup", "index": 4, "defined_in": "testdata/scm_repo/roles/golang/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified", "when": "golang__register_facts is changed"}, "module_options": null, "fqcn": "ansible.builtin.setup", "used_in": ["testdata/scm_repo/roles/golang"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/service/minio.yml"]}, {"py/object": "struct4.Role", "name": "rabbitmq_server", "defined_in": "testdata/scm_repo/roles/rabbitmq_server", "task_yamls": ["testdata/scm_repo/roles/rabbitmq_server/tasks/main_env.yml", "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare debops.rabbitmq_server environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main_env.yml", "options": {"name": "Prepare debops.rabbitmq_server environment"}, "module_options": {"rabbitmq_server__secret__directories": "{{ lookup(\"template\", \"lookup/rabbitmq_server__secret__directories.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that required UNIX group exists", "module": "ansible.builtin.group", "index": 2, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Make sure that required UNIX group exists"}, "module_options": {"name": "{{ rabbitmq_server__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that required UNIX account exists", "module": "ansible.builtin.user", "index": 3, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Make sure that required UNIX account exists"}, "module_options": {"name": "{{ rabbitmq_server__user }}", "group": "{{ rabbitmq_server__group }}", "groups": "{{ rabbitmq_server__append_groups | join(\",\") }}", "home": "{{ rabbitmq_server__home }}", "comment": "RabbitMQ messaging server", "shell": "/bin/false", "state": "present", "system": true, "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize Erlang cookie on the Ansible Controller", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Initialize Erlang cookie on the Ansible Controller", "delegate_to": "localhost", "become": false, "run_once": true, "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"rabbitmq_server__fact_erlang_cookie": "{{ rabbitmq_server__erlang_cookie_password }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Erlang cookie", "module": "ansible.builtin.copy", "index": 5, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Configure Erlang cookie", "notify": ["Restart rabbitmq-server"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"content": "{{ rabbitmq_server__erlang_cookie_password }}", "dest": "{{ rabbitmq_server__erlang_cookie_path }}", "owner": "{{ rabbitmq_server__user }}", "group": "{{ rabbitmq_server__group }}", "mode": "0400"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that configuration directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Ensure that configuration directory exists"}, "module_options": {"path": "/etc/rabbitmq", "state": "directory", "owner": "{{ rabbitmq_server__user }}", "group": "{{ rabbitmq_server__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate RabbitMQ environment file", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Generate RabbitMQ environment file", "notify": ["Restart rabbitmq-server"], "tags": ["role::rabbitmq_server:config"]}, "module_options": {"src": "etc/rabbitmq/rabbitmq-env.conf.j2", "dest": "/etc/rabbitmq/rabbitmq-env.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install RabbitMQ packages", "module": "ansible.builtin.package", "index": 8, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Install RabbitMQ packages", "register": "rabbitmq_server__register_packages", "until": "rabbitmq_server__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (rabbitmq_server__base_packages + rabbitmq_server__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if the dependent config file exists", "module": "ansible.builtin.stat", "index": 9, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Check if the dependent config file exists", "register": "rabbitmq_server__register_dependent_config_file", "become": false, "delegate_to": "localhost", "when": "(ansible_local|d() and ansible_local.rabbitmq_server|d() and ansible_local.rabbitmq_server.installed is defined and ansible_local.rabbitmq_server.installed|bool)", "tags": ["role::rabbitmq_server:config"]}, "module_options": {"path": "{{ secret + \"/rabbitmq_server/dependent_config/\" + inventory_hostname + \"/config.json\" }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Load the dependent configuration from Ansible Controller", "module": "ansible.builtin.slurp", "index": 10, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Load the dependent configuration from Ansible Controller", "register": "rabbitmq_server__register_dependent_config", "become": false, "delegate_to": "localhost", "when": "(ansible_local|d() and ansible_local.rabbitmq_server|d() and ansible_local.rabbitmq_server.installed is defined and ansible_local.rabbitmq_server.installed|bool and rabbitmq_server__register_dependent_config_file.stat.exists|bool)", "tags": ["role::rabbitmq_server:config"]}, "module_options": {"src": "{{ secret + \"/rabbitmq_server/dependent_config/\" + inventory_hostname + \"/config.json\" }}"}, "fqcn": "ansible.builtin.slurp", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save RabbitMQ local facts", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Save RabbitMQ local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/rabbitmq_server.fact.j2", "dest": "/etc/ansible/facts.d/rabbitmq_server.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 13, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate RabbitMQ configuration", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Generate RabbitMQ configuration", "notify": ["Restart rabbitmq-server"], "tags": ["role::rabbitmq_server:config"]}, "module_options": {"src": "etc/rabbitmq/rabbitmq.config.j2", "dest": "/etc/rabbitmq/rabbitmq.config", "owner": "{{ rabbitmq_server__user }}", "group": "{{ rabbitmq_server__group }}", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage RabbitMQ plugins", "module": "community.rabbitmq.rabbitmq_plugin", "index": 15, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Manage RabbitMQ plugins", "with_flattened": ["{{ rabbitmq_server__combined_plugins }}"], "notify": ["Restart rabbitmq-server"], "tags": ["role::rabbitmq_server:config"]}, "module_options": {"names": "{{ item.name | d(item) }}", "state": "{{ \"enabled\" if item.state|d(\"present\") != \"absent\" else \"disabled\" }}", "prefix": "{{ item.prefix | d(omit) }}", "new_only": true}, "fqcn": "community.rabbitmq.rabbitmq_plugin", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage RabbitMQ virtual hosts", "module": "rabbitmq_vhost", "index": 16, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Manage RabbitMQ virtual hosts", "with_flattened": ["{{ rabbitmq_server__combined_vhosts }}"], "tags": ["role::rabbitmq_server:vhost", "role::rabbitmq_server:parameter", "role::rabbitmq_server:policy", "role::rabbitmq_server:user"]}, "module_options": {"name": "{{ item.name    | d(item) }}", "node": "{{ item.node    | d(omit) }}", "state": "{{ item.state   | d(\"present\") }}", "tracing": "{{ item.tracing | d(omit) }}"}, "fqcn": "community.rabbitmq.rabbitmq_vhost", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage RabbitMQ parameters", "module": "rabbitmq_parameter", "index": 17, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Manage RabbitMQ parameters", "with_flattened": ["{{ rabbitmq_server__combined_parameters }}"], "when": "(item.name|d() and item.component|d())", "tags": ["role::rabbitmq_server:parameter"]}, "module_options": {"component": "{{ item.component }}", "name": "{{ item.name }}", "node": "{{ item.node  | d(omit) }}", "state": "{{ item.state | d(\"present\") }}", "value": "{{ item.value | d(omit) }}", "vhost": "{{ item.vhost | d(omit) }}"}, "fqcn": "community.rabbitmq.rabbitmq_parameter", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage RabbitMQ policies", "module": "rabbitmq_policy", "index": 18, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Manage RabbitMQ policies", "with_flattened": ["{{ rabbitmq_server__combined_policies }}"], "when": "(item.name|d() and item.pattern|d() and item.tags|d())", "tags": ["role::rabbitmq_server:policy"]}, "module_options": {"name": "{{ item.name }}", "pattern": "{{ item.pattern }}", "tags": "{{ item.tags }}", "apply_to": "{{ item.apply_to | d(omit) }}", "node": "{{ item.node     | d(omit) }}", "priority": "{{ item.priority | d(omit) }}", "state": "{{ item.state    | d(\"present\") }}", "vhost": "{{ item.vhost    | d(omit) }}"}, "fqcn": "community.rabbitmq.rabbitmq_policy", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage RabbitMQ user accounts", "module": "rabbitmq_user", "index": 19, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Manage RabbitMQ user accounts", "with_flattened": ["{{ rabbitmq_server__combined_accounts }}"], "tags": ["role::rabbitmq_server:user"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"user": "{{ item.user           | d(item.name) | d(item) }}", "force": "{{ item.force          | d(omit) }}", "node": "{{ item.node           | d(omit) }}", "permissions": "{{ item.permissions    | d(omit) }}", "configure_priv": "{{ item.configure_priv | d(omit) }}", "read_priv": "{{ item.read_priv      | d(omit) }}", "write_priv": "{{ item.write_priv     | d(omit) }}", "state": "{{ item.state          | d(\"present\") }}", "vhost": "{{ item.vhost          | d(omit) }}", "password": "{{ item.password       | d(lookup(\"password\", secret + \"/rabbitmq_server/accounts/\" + (item.user | d(item.name | d(item))) + \"/password length=\" + rabbitmq_server__account_password_length)) }}", "tags": "{{ (((item.tags.split(\",\") | list) if (item.tags|d() and item.tags is string) else item.tags) | join(\",\")) if item.tags|d() else omit }}"}, "fqcn": "community.rabbitmq.rabbitmq_user", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Save RabbitMQ dependent configuration on Ansible Controller", "module": "ansible.builtin.template", "index": 20, "defined_in": "testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml", "options": {"name": "Save RabbitMQ dependent configuration on Ansible Controller", "become": false, "delegate_to": "localhost", "tags": ["role::rabbitmq_server:config"]}, "module_options": {"src": "secret/rabbitmq_server/dependent_config/inventory_hostname/config.json.j2", "dest": "{{ secret + \"/rabbitmq_server/dependent_config/\" + inventory_hostname + \"/config.json\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rabbitmq_server"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "sysctl", "defined_in": "testdata/scm_repo/roles/sysctl", "task_yamls": ["testdata/scm_repo/roles/sysctl/tasks/main.yml", "testdata/scm_repo/roles/sysctl/tasks/sysctl/pre_main.yml", "testdata/scm_repo/roles/sysctl/tasks/sysctl/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/sysctl/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sysctl"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/sysctl/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sysctl"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Pre hooks", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "testdata/scm_repo/roles/sysctl/tasks/main.yml", "options": {"name": "Pre hooks", "when": "sysctl__enabled|bool"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"sysctl/pre_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/sysctl"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/sysctl/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sysctl"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save sysctl local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/sysctl/tasks/main.yml", "options": {"name": "Save sysctl local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/sysctl.fact.j2", "dest": "/etc/ansible/facts.d/sysctl.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sysctl"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/sysctl/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/sysctl"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of custom sysctl configuration files", "module": "dpkg_divert", "index": 6, "defined_in": "testdata/scm_repo/roles/sysctl/tasks/main.yml", "options": {"name": "Add/remove diversion of custom sysctl configuration files", "loop": "{{ sysctl__combined_parameters | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ { \"name\": item.name, \"state\": item.state|d(\"present\") } }}"}, "when": "(sysctl__enabled|bool and item.name|d() and item.state|d('present') in [ 'present', 'absent' ] and item.divert|d(False)|bool)"}, "module_options": {"path": "/etc/sysctl.d/{{ item.filename | d(item.weight|string + \"-\" + item.name + \".conf\") }}", "state": "{{ item.state|d(\"present\") }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/sysctl"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove custom sysctl configuration files", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/sysctl/tasks/main.yml", "options": {"name": "Remove custom sysctl configuration files", "with_items": "{{ sysctl__combined_parameters | debops.debops.parse_kv_items }}", "register": "sysctl__register_config_removed", "when": "sysctl__enabled|bool and item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "/etc/sysctl.d/{{ item.filename | d(item.weight|string + \"-\" + item.name + \".conf\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sysctl"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate custom sysctl configuration files", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/sysctl/tasks/main.yml", "options": {"name": "Generate custom sysctl configuration files", "loop": "{{ sysctl__combined_parameters | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ item.name }}"}, "register": "sysctl__register_config_created", "when": "sysctl__enabled|bool and item.name|d() and item.options|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ]"}, "module_options": {"src": "etc/sysctl.d/parameters.conf.j2", "dest": "/etc/sysctl.d/{{ item.filename | d(item.weight|string + \"-\" + item.name + \".conf\") }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sysctl"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check sysctl command capabilities", "module": "ansible.builtin.shell", "index": 9, "defined_in": "testdata/scm_repo/roles/sysctl/tasks/main.yml", "options": {"name": "Check sysctl command capabilities", "args": {"executable": "bash"}, "register": "sysctl__register_system", "when": "(sysctl__enabled|bool and (sysctl__register_config_created is changed or sysctl__register_config_removed is changed))", "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && sysctl --help | grep -E '^\\s+\\-\\-system\\s+' || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/sysctl"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Apply kernel parameters if they were modified", "module": "ansible.builtin.shell", "index": 10, "defined_in": "testdata/scm_repo/roles/sysctl/tasks/main.yml", "options": {"name": "Apply kernel parameters if they were modified", "args": {"executable": "bash"}, "when": "(sysctl__enabled|bool and (sysctl__register_config_created is changed or sysctl__register_config_removed is changed))"}, "module_options": "set -o nounset -o pipefail -o errexit &&\n{% if (sysctl__register_system.stdout|d()) %}\nsysctl --system\n{% else %}\nsysctl -e -p $(find /etc/sysctl.d -mindepth 1 -maxdepth 1 -name '*.conf' -print0 | sort -z | xargs -r0)\n             /etc/sysctl.conf\n{% endif %}\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/sysctl"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Post hooks", "module": "ansible.builtin.include_tasks", "index": 11, "defined_in": "testdata/scm_repo/roles/sysctl/tasks/main.yml", "options": {"name": "Post hooks", "when": "sysctl__enabled|bool"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"sysctl/post_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/sysctl"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml", "testdata/scm_repo/playbooks/service/minio.yml", "testdata/scm_repo/playbooks/service/redis_server.yml"]}, {"py/object": "struct4.Role", "name": "metricbeat", "defined_in": "testdata/scm_repo/roles/metricbeat", "task_yamls": ["testdata/scm_repo/roles/metricbeat/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Metricbeat packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Install Metricbeat packages", "notify": ["Refresh host facts"], "register": "metricbeat__register_packages", "until": "metricbeat__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (metricbeat__base_packages + metricbeat__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Metricbeat local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Save Metricbeat local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/metricbeat.fact.j2", "dest": "/etc/ansible/facts.d/metricbeat.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the original Metricbeat configuration", "module": "dpkg_divert", "index": 7, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Divert the original Metricbeat configuration", "register": "metricbeat__register_config_divert", "when": "ansible_pkg_mgr == 'apt'"}, "module_options": {"path": "/etc/metricbeat/metricbeat.yml", "state": "present"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate main Metricbeat configuration", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Generate main Metricbeat configuration", "notify": ["Test metricbeat configuration and restart"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/metricbeat/metricbeat.yml.j2", "dest": "/etc/metricbeat/metricbeat.yml", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required configuration directories", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Create required configuration directories", "loop": "{{ metricbeat__combined_snippets | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "when": "item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and item.config|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ \"/etc/metricbeat/\" + (item.name | dirname) }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage snippet diversion and reversion", "module": "dpkg_divert", "index": 10, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Manage snippet diversion and reversion", "loop": "{{ metricbeat__combined_snippets | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "notify": ["Test metricbeat configuration and restart"], "when": "ansible_pkg_mgr == 'apt' and item.config|d() and (item.divert|d())", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ \"/etc/metricbeat/\" + (item.name | regex_replace(\".yml\",\"\") + \".yml\") }}", "state": "{{ \"absent\" if item.state|d(\"present\") == \"absent\" else \"present\" }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove snippet configuration if requested", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Remove snippet configuration if requested", "loop": "{{ metricbeat__combined_snippets | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state, \"config\": item.config} }}"}, "notify": ["Test metricbeat configuration and restart"], "when": "item.state|d('present') == 'absent' and item.config|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ \"/etc/metricbeat/\" + (item.name | regex_replace(\".yml\",\"\") + \".yml\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate snippet configuration", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Generate snippet configuration", "loop": "{{ metricbeat__combined_snippets | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state, \"config\": item.config} }}"}, "notify": ["Test metricbeat configuration and restart"], "when": "item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and item.config|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/metricbeat/snippets.d/snippet.yml.j2", "dest": "{{ \"/etc/metricbeat/\" + (item.name | regex_replace(\".yml\",\"\") + \".yml\") }}", "mode": "{{ item.mode | d(\"0600\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if the Metricbeat keystore exists", "module": "ansible.builtin.stat", "index": 13, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Check if the Metricbeat keystore exists", "register": "metricbeat__register_keystore"}, "module_options": {"path": "/var/lib/metricbeat/metricbeat.keystore"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Metricbeat keystore if not present", "module": "ansible.builtin.command", "index": 14, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Create Metricbeat keystore if not present", "when": "not metricbeat__register_keystore.stat.exists"}, "module_options": "metricbeat keystore create", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the list of keystore contents", "module": "ansible.builtin.command", "index": 15, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Get the list of keystore contents", "register": "metricbeat__register_keys", "changed_when": false, "check_mode": "{{ False if ansible_local.metricbeat.installed|d() else omit }}"}, "module_options": "metricbeat keystore list", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove key from Metricbeat keystore when requested", "module": "ansible.builtin.command", "index": 16, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Remove key from Metricbeat keystore when requested", "loop": "{{ metricbeat__combined_keys | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "notify": ["Test metricbeat configuration and restart"], "when": "(item.state|d('present') == 'absent' and item.name in metricbeat__register_keys.stdout_lines)", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "metricbeat keystore remove {{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set or update key in Metricbeat keystore", "module": "ansible.builtin.shell", "index": 17, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Set or update key in Metricbeat keystore", "environment": {"DEBOPS_METRICBEAT_KEY": "{{ item.value }}"}, "args": {"executable": "bash"}, "loop": "{{ metricbeat__combined_keys | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "notify": ["Test metricbeat configuration and restart"], "when": "(item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and (item.name not in metricbeat__register_keys.stdout_lines or (item.force|d(False))|bool))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "set -o nounset -o pipefail -o errexit &&\n{% if item.force | d(False) %}\nprintf \"%s\" \"${DEBOPS_METRICBEAT_KEY}\" | metricbeat keystore add \"{{ item.name }}\" --stdin --force\n{% else %}\nprintf \"%s\" \"${DEBOPS_METRICBEAT_KEY}\" | metricbeat keystore add \"{{ item.name }}\" --stdin\n{% endif %}\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable metricbeat service on installation", "module": "ansible.builtin.service", "index": 18, "defined_in": "testdata/scm_repo/roles/metricbeat/tasks/main.yml", "options": {"name": "Enable metricbeat service on installation", "when": "ansible_local.metricbeat.installed|d() and metricbeat__register_config_divert is changed"}, "module_options": {"name": "metricbeat", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/metricbeat"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "sshd", "defined_in": "testdata/scm_repo/roles/sshd", "task_yamls": ["testdata/scm_repo/roles/sshd/tasks/authorized_keys_lookup.yml", "testdata/scm_repo/roles/sshd/tasks/main_env.yml", "testdata/scm_repo/roles/sshd/tasks/main.yml", "testdata/scm_repo/roles/sshd/tasks/sshd/pre_main.yml", "testdata/scm_repo/roles/sshd/tasks/sshd/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Create OpenSSH LDAP bind password file", "module": "ansible.builtin.template", "index": 0, "defined_in": "testdata/scm_repo/roles/sshd/tasks/authorized_keys_lookup.yml", "options": {"name": "Create OpenSSH LDAP bind password file", "when": "\"ldap\" in sshd__authorized_keys_lookup_type|d([])", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/ssh/ldap_authorized_keys_bindpw.j2", "dest": "/etc/ssh/ldap_authorized_keys_bindpw", "owner": "{{ sshd__authorized_keys_lookup_user }}", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove OpenSSH LDAP bind password file", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/sshd/tasks/authorized_keys_lookup.yml", "options": {"name": "Remove OpenSSH LDAP bind password file", "when": "\"ldap\" not in sshd__authorized_keys_lookup_type|d([])"}, "module_options": {"path": "/etc/ssh/ldap_authorized_keys_bindpw", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create /etc/ssh/authorized_keys_lookup.d directory", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/sshd/tasks/authorized_keys_lookup.yml", "options": {"name": "Create /etc/ssh/authorized_keys_lookup.d directory"}, "module_options": {"path": "/etc/ssh/authorized_keys_lookup.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate authorized keys lookup scripts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/sshd/tasks/authorized_keys_lookup.yml", "options": {"name": "Generate authorized keys lookup scripts", "with_items": "{{ sshd__authorized_keys_lookup_type }}", "when": "sshd__authorized_keys_lookup_type|d()"}, "module_options": {"src": "{{ lookup(\"debops.debops.template_src\", \"etc/ssh/authorized_keys_lookup.d/\" + item + \".j2\") }}", "dest": "/etc/ssh/authorized_keys_lookup.d/{{ item }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate authorized keys lookup hook", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/sshd/tasks/authorized_keys_lookup.yml", "options": {"name": "Generate authorized keys lookup hook"}, "module_options": {"src": "etc/ssh/authorized_keys_lookup.j2", "dest": "/etc/ssh/authorized_keys_lookup", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather SSH host public keys", "module": "ansible.builtin.shell", "index": 0, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main_env.yml", "options": {"name": "Gather SSH host public keys", "args": {"executable": "/bin/bash"}, "register": "sshd__env_register_host_public_keys", "changed_when": false, "check_mode": false, "tags": ["meta::facts"]}, "module_options": "set -o nounset -o pipefail -o errexit && cat /etc/ssh/ssh_host_*_key.pub || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Pre hooks", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Pre hooks"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"sshd/pre_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local fact directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Make sure that Ansible local fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Ansible local fact script", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Save Ansible local fact script", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/sshd.fact.j2", "dest": "/etc/ansible/facts.d/sshd.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload Ansible local facts", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Reload Ansible local facts"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that OpenSSH configuration directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Make sure that OpenSSH configuration directory exists"}, "module_options": {"path": "/etc/ssh", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Block OpenSSH server from starting immediately when installed", "module": "ansible.builtin.copy", "index": 8, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Block OpenSSH server from starting immediately when installed", "when": "(ansible_local|d() and ansible_local.sshd|d() and not (ansible_local.sshd.installed|d())|bool)"}, "module_options": {"dest": "/etc/ssh/sshd_not_to_be_run", "content": "This file disables the ssh server.  It was created by debops.sshd.\nThis file will be removed when configuration is successfully completed.\n", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the '/run/sshd' directory exists on first install", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Ensure that the '/run/sshd' directory exists on first install", "when": "ansible_service_mgr != 'systemd'"}, "module_options": {"path": "/run/sshd", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure OpenSSH support is installed", "module": "ansible.builtin.apt", "index": 10, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Ensure OpenSSH support is installed", "register": "sshd__register_packages", "notify": ["Refresh host facts"], "until": "sshd__register_packages is succeeded"}, "module_options": {"name": "{{ (sshd__base_packages + sshd__recommended_packages + sshd__optional_packages + sshd__ldap_packages + sshd__packages) | flatten }}", "state": "{{ \"present\" if (ansible_local|d() and ansible_local.sshd|d()) else \"latest\" }}", "install_recommends": false}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload Ansible local facts", "module": "ansible.builtin.meta", "index": 11, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Reload Ansible local facts"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check OpenSSH server version", "module": "ansible.builtin.shell", "index": 12, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Check OpenSSH server version", "environment": {"LC_MESSAGES": "C"}, "args": {"executable": "bash"}, "register": "sshd__register_version", "changed_when": false, "check_mode": false, "tags": ["role::sshd:config"]}, "module_options": "set -o nounset -o pipefail -o errexit && dpkg-query -W -f=\"\\${Version}\\n\" \"openssh-server\" | sed -re \"s/^.*:([0-9]+\\.[0-9]+).*/\\1/\"", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that Ed25519 host key is present", "module": "ansible.builtin.command", "index": 13, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Ensure that Ed25519 host key is present", "args": {"chdir": "/etc/ssh", "creates": "/etc/ssh/ssh_host_ed25519_key"}, "when": "sshd__register_version.stdout|d() and sshd__register_version.stdout is version_compare('6.5', '>=')", "tags": ["role::sshd:config"]}, "module_options": "ssh-keygen -q -t ed25519 -N \"\" -f ssh_host_ed25519_key", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure authorized_keys lookup", "module": "ansible.builtin.include_tasks", "index": 14, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Configure authorized_keys lookup", "when": "sshd__register_version.stdout|d() and sshd__register_version.stdout is version_compare('6.2', '>=') and sshd__authorized_keys_lookup|bool", "tags": ["role::sshd:config"]}, "module_options": "authorized_keys_lookup.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of available host keys", "module": "ansible.builtin.shell", "index": 15, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Get list of available host keys", "register": "sshd__register_host_keys", "changed_when": false, "check_mode": false, "tags": ["role::sshd:config"]}, "module_options": "find /etc/ssh -maxdepth 1 -type f -name 'ssh_host_*_key.pub' -exec basename {} .pub \\;", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of available host certs", "module": "ansible.builtin.shell", "index": 16, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Get list of available host certs", "register": "sshd__register_host_certs", "changed_when": false, "check_mode": false, "when": "sshd__scan_for_host_certs|bool", "tags": ["role::sshd:config"]}, "module_options": "find /etc/ssh -maxdepth 1 -type f -name 'ssh_host_*_key-cert.pub' -exec basename {} .pub \\;", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup trusted user CA key file", "module": "ansible.builtin.template", "index": 17, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Setup trusted user CA key file", "when": "sshd__trusted_user_ca_keys | d() | length > 0  and sshd__trusted_user_ca_keys_file is defined", "tags": ["role::sshd:config"]}, "module_options": {"src": "{{ lookup(\"debops.debops.template_src\", \"etc/ssh/trusted_user_ca_file.pem.j2\") }}", "dest": "{{ sshd__trusted_user_ca_keys_file }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup /etc/ssh/sshd_config", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Setup /etc/ssh/sshd_config", "notify": ["Test sshd configuration and restart"], "tags": ["role::sshd:config"]}, "module_options": {"src": "{{ lookup(\"debops.debops.template_src\", \"etc/ssh/sshd_config.j2\") }}", "dest": "/etc/ssh/sshd_config", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure the system-wide known_hosts file exists", "module": "ansible.builtin.command", "index": 19, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Make sure the system-wide known_hosts file exists", "args": {"creates": "{{ sshd__known_hosts_file }}", "warn": false}, "tags": ["role::sshd:known_hosts"]}, "module_options": "touch {{ sshd__known_hosts_file }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of already scanned host fingerprints", "module": "ansible.builtin.shell", "index": 20, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Get list of already scanned host fingerprints", "args": {"executable": "bash"}, "with_flattened": ["{{ sshd__known_hosts }}", "{{ sshd__group_known_hosts }}", "{{ sshd__host_known_hosts }}"], "when": "item is defined and item", "register": "sshd__register_known_hosts", "changed_when": false, "failed_when": false, "check_mode": false, "tags": ["role::sshd:known_hosts"]}, "module_options": "set -o nounset -o pipefail -o errexit && ssh-keygen -f {{ sshd__known_hosts_file }} -F {{ item }} | grep -q '^# Host {{ item }} found'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Scan SSH fingerprints of specified hosts", "module": "ansible.builtin.shell", "index": 21, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Scan SSH fingerprints of specified hosts", "with_items": "{{ sshd__register_known_hosts.results|d([]) }}", "when": "item is defined and item.rc > 0", "tags": ["role::sshd:known_hosts"]}, "module_options": "{{ sshd__known_hosts_command }} {{ item.item }} >> {{ sshd__known_hosts_file }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if /etc/ssh/moduli contains weak DH parameters", "module": "ansible.builtin.shell", "index": 22, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Check if /etc/ssh/moduli contains weak DH parameters", "register": "sshd__register_moduli", "changed_when": "sshd__register_moduli.stdout", "check_mode": false}, "module_options": "awk '$5 < {{ (sshd__moduli_minimum|int -1) }}' /etc/ssh/moduli", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove DH parameters smaller than the requested size", "module": "ansible.builtin.shell", "index": 23, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Remove DH parameters smaller than the requested size", "notify": ["Test sshd configuration and restart"], "when": "sshd__register_moduli.stdout"}, "module_options": "awk '$5 >= {{ (sshd__moduli_minimum|int - 1) }}' /etc/ssh/moduli > /etc/ssh/moduli.new ; [ -r /etc/ssh/moduli.new -a -s /etc/ssh/moduli.new ] && mv /etc/ssh/moduli.new /etc/ssh/moduli || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove block on OpenSSH server startup", "module": "ansible.builtin.file", "index": 24, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Remove block on OpenSSH server startup", "notify": ["Test sshd configuration and restart"]}, "module_options": {"name": "/etc/ssh/sshd_not_to_be_run", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of /etc/pam.d/sshd", "module": "dpkg_divert", "index": 25, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Add/remove diversion of /etc/pam.d/sshd"}, "module_options": {"path": "/etc/pam.d/sshd", "state": "{{ \"present\" if sshd__pam_deploy_state|d(\"present\") != \"absent\" else \"absent\" }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate /etc/pam.d/sshd configuration", "module": "ansible.builtin.template", "index": 26, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Generate /etc/pam.d/sshd configuration", "when": "sshd__pam_deploy_state == 'present'"}, "module_options": {"src": "etc/pam.d/sshd.j2", "dest": "/etc/pam.d/sshd", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Post hooks", "module": "ansible.builtin.include_tasks", "index": 27, "defined_in": "testdata/scm_repo/roles/sshd/tasks/main.yml", "options": {"name": "Post hooks"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"sshd/post_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/sshd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "filebeat", "defined_in": "testdata/scm_repo/roles/filebeat", "task_yamls": ["testdata/scm_repo/roles/filebeat/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Filebeat packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Install Filebeat packages", "notify": ["Refresh host facts"], "register": "filebeat__register_packages", "until": "filebeat__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (filebeat__base_packages + filebeat__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Filebeat local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Save Filebeat local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/filebeat.fact.j2", "dest": "/etc/ansible/facts.d/filebeat.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the original Filebeat configuration", "module": "dpkg_divert", "index": 7, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Divert the original Filebeat configuration", "register": "filebeat__register_config_divert", "when": "ansible_pkg_mgr == 'apt'"}, "module_options": {"path": "/etc/filebeat/filebeat.yml", "state": "present"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate main Filebeat configuration", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Generate main Filebeat configuration", "notify": ["Test filebeat configuration and restart"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/filebeat/filebeat.yml.j2", "dest": "/etc/filebeat/filebeat.yml", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required configuration directories", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Create required configuration directories", "loop": "{{ filebeat__combined_snippets | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "when": "item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and item.config|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ \"/etc/filebeat/\" + (item.name | dirname) }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove snippet configuration if requested", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Remove snippet configuration if requested", "loop": "{{ filebeat__combined_snippets | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state, \"config\": item.config} }}"}, "notify": ["Test filebeat configuration and restart"], "when": "item.state|d('present') == 'absent' and item.config|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ \"/etc/filebeat/\" + (item.name | regex_replace(\".yml\",\"\") + \".yml\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate snippet configuration", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Generate snippet configuration", "loop": "{{ filebeat__combined_snippets | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state, \"config\": item.config} }}"}, "notify": ["Test filebeat configuration and restart"], "when": "item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and item.config|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/filebeat/snippets.d/snippet.yml.j2", "dest": "{{ \"/etc/filebeat/\" + (item.name | regex_replace(\".yml\",\"\") + \".yml\") }}", "mode": "{{ item.mode | d(\"0600\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if the Filebeat keystore exists", "module": "ansible.builtin.stat", "index": 12, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Check if the Filebeat keystore exists", "register": "filebeat__register_keystore"}, "module_options": {"path": "/var/lib/filebeat/filebeat.keystore"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Filebeat keystore if not present", "module": "ansible.builtin.command", "index": 13, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Create Filebeat keystore if not present", "when": "not filebeat__register_keystore.stat.exists"}, "module_options": "filebeat keystore create", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the list of keystore contents", "module": "ansible.builtin.command", "index": 14, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Get the list of keystore contents", "register": "filebeat__register_keys", "changed_when": false, "check_mode": false}, "module_options": "filebeat keystore list", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove key from Filebeat keystore when requested", "module": "ansible.builtin.command", "index": 15, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Remove key from Filebeat keystore when requested", "loop": "{{ filebeat__combined_keys | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "notify": ["Test filebeat configuration and restart"], "when": "(item.state|d('present') == 'absent' and item.name in filebeat__register_keys.stdout_lines)", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "filebeat keystore remove {{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set or update key in Filebeat keystore", "module": "ansible.builtin.shell", "index": 16, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Set or update key in Filebeat keystore", "environment": {"DEBOPS_FILEBEAT_KEY": "{{ item.value }}"}, "args": {"executable": "bash"}, "loop": "{{ filebeat__combined_keys | debops.debops.parse_kv_config }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "notify": ["Test filebeat configuration and restart"], "when": "(item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and (item.name not in filebeat__register_keys.stdout_lines or (item.force|d(False))|bool))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "set -o nounset -o pipefail -o errexit &&\n{% if item.force | d(False) %}\nprintf \"%s\" \"${DEBOPS_FILEBEAT_KEY}\" | filebeat keystore add \"{{ item.name }}\" --stdin --force\n{% else %}\nprintf \"%s\" \"${DEBOPS_FILEBEAT_KEY}\" | filebeat keystore add \"{{ item.name }}\" --stdin\n{% endif %}\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable filebeat service on installation", "module": "ansible.builtin.service", "index": 17, "defined_in": "testdata/scm_repo/roles/filebeat/tasks/main.yml", "options": {"name": "Enable filebeat service on installation", "when": "filebeat__register_config_divert is changed"}, "module_options": {"name": "filebeat", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/filebeat"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "etc_aliases", "defined_in": "testdata/scm_repo/roles/etc_aliases", "task_yamls": ["testdata/scm_repo/roles/etc_aliases/tasks/main_env.yml", "testdata/scm_repo/roles/etc_aliases/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare debops.etc_aliases environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/etc_aliases/tasks/main_env.yml", "options": {"name": "Prepare debops.etc_aliases environment"}, "module_options": {"etc_aliases__secret__directories": "{{ lookup(\"template\", \"lookup/etc_aliases__secret__directories.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/etc_aliases"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/etc_aliases/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/etc_aliases"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/etc_aliases/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/etc_aliases"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/etc_aliases/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/etc_aliases"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if the dependent recipients file exists", "module": "ansible.builtin.stat", "index": 3, "defined_in": "testdata/scm_repo/roles/etc_aliases/tasks/main.yml", "options": {"name": "Check if the dependent recipients file exists", "register": "etc_aliases__register_dependent_recipients_file", "become": false, "delegate_to": "localhost", "when": "(ansible_local|d() and ansible_local.etc_aliases|d() and ansible_local.etc_aliases.configured is defined and ansible_local.etc_aliases.configured|bool)"}, "module_options": {"path": "{{ secret + \"/etc_aliases/dependent_config/\" + inventory_hostname + \"/recipients.json\" }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/etc_aliases"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Load the dependent recipients from Ansible Controller", "module": "ansible.builtin.slurp", "index": 4, "defined_in": "testdata/scm_repo/roles/etc_aliases/tasks/main.yml", "options": {"name": "Load the dependent recipients from Ansible Controller", "register": "etc_aliases__register_dependent_recipients", "become": false, "delegate_to": "localhost", "when": "(ansible_local|d() and ansible_local.etc_aliases|d() and ansible_local.etc_aliases.configured is defined and ansible_local.etc_aliases.configured|bool and etc_aliases__register_dependent_recipients_file.stat.exists|bool)"}, "module_options": {"src": "{{ secret + \"/etc_aliases/dependent_config/\" + inventory_hostname + \"/recipients.json\" }}"}, "fqcn": "ansible.builtin.slurp", "used_in": ["testdata/scm_repo/roles/etc_aliases"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/etc_aliases/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etc_aliases"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save etc_aliases local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/etc_aliases/tasks/main.yml", "options": {"name": "Save etc_aliases local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/etc_aliases.fact.j2", "dest": "/etc/ansible/facts.d/etc_aliases.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etc_aliases"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/etc_aliases/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/etc_aliases"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate the /etc/aliases file", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/etc_aliases/tasks/main.yml", "options": {"name": "Generate the /etc/aliases file", "notify": ["Update /etc/aliases.db database"]}, "module_options": {"src": "etc/aliases.j2", "dest": "/etc/aliases", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etc_aliases"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save etc_aliases dependent recipients on Ansible Controller", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/etc_aliases/tasks/main.yml", "options": {"name": "Save etc_aliases dependent recipients on Ansible Controller", "become": false, "delegate_to": "localhost"}, "module_options": {"src": "secret/etc_aliases/dependent_config/inventory_hostname/recipients.json.j2", "dest": "{{ secret + \"/etc_aliases/dependent_config/\" + inventory_hostname + \"/recipients.json\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etc_aliases"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "reprepro", "defined_in": "testdata/scm_repo/roles/reprepro", "task_yamls": ["testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "testdata/scm_repo/roles/reprepro/tasks/main_env.yml", "testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml", "testdata/scm_repo/roles/reprepro/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Check if GnuPG directory exists", "module": "ansible.builtin.stat", "index": 0, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "options": {"name": "Check if GnuPG directory exists", "register": "reprepro__register_gpg"}, "module_options": {"path": "{{ reprepro__home + \"/.gnupg/gpg.conf\" }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if GnuPG snapshot exists on Ansible Controller", "module": "ansible.builtin.stat", "index": 1, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "options": {"name": "Check if GnuPG snapshot exists on Ansible Controller", "register": "reprepro__register_gpg_snapshot", "delegate_to": "localhost", "become": false}, "module_options": {"path": "{{ reprepro__gpg_snapshot_path + \"/\" + reprepro__gpg_snapshot_name }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restore GnuPG snapshots", "module": "ansible.builtin.unarchive", "index": 2, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "options": {"name": "Restore GnuPG snapshots", "when": "reprepro__register_gpg_snapshot.stat.exists and not reprepro__register_gpg.stat.exists"}, "module_options": {"src": "{{ reprepro__gpg_snapshot_path + \"/\" + reprepro__gpg_snapshot_name }}", "dest": "{{ reprepro__home }}", "mode": "u=rwX,g=,o="}, "fqcn": "ansible.builtin.unarchive", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that ~/.gnupg directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "options": {"name": "Ensure that ~/.gnupg directory exists"}, "module_options": {"path": "{{ reprepro__home + \"/.gnupg\" }}", "state": "directory", "owner": "{{ reprepro__user }}", "group": "{{ reprepro__group }}", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure reprepro GnuPG instance", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "options": {"name": "Configure reprepro GnuPG instance"}, "module_options": {"src": "home/reprepro/gnupg/gpg.conf.j2", "dest": "{{ reprepro__home + \"/.gnupg/gpg.conf\" }}", "owner": "{{ reprepro__user }}", "group": "{{ reprepro__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if private keys are present", "module": "ansible.builtin.find", "index": 5, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "options": {"name": "Check if private keys are present", "register": "reprepro__register_private_keys"}, "module_options": {"paths": "{{ reprepro__home + \"/.gnupg/private-keys-v1.d/\" }}"}, "fqcn": "ansible.builtin.find", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create repository key template", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "options": {"name": "Create repository key template", "when": "reprepro__register_private_keys.matched == 0"}, "module_options": {"src": "home/reprepro/gnupg-key-template.j2", "dest": "{{ reprepro__home + \"/.gnupg-key-template\" }}", "owner": "{{ reprepro__user }}", "group": "{{ reprepro__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate automatic signing key", "module": "ansible.builtin.command", "index": 7, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "options": {"name": "Generate automatic signing key", "args": {"chdir": "{{ reprepro__home }}"}, "register": "reprepro__register_keygen", "become": true, "become_user": "{{ reprepro__user }}", "when": "reprepro__register_private_keys.matched == 0"}, "module_options": "gpg --batch --gen-key .gnupg-key-template", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Archive ~/.gnupg directory", "module": "archive", "index": 8, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "options": {"name": "Archive ~/.gnupg directory", "register": "reprepro__register_gpg_archive"}, "module_options": {"path": "{{ reprepro__home + \"/.gnupg\" }}", "dest": "{{ reprepro__home + \"/\" + reprepro__gpg_snapshot_name }}", "owner": "{{ reprepro__user }}", "group": "{{ reprepro__group }}", "mode": "0600"}, "fqcn": "community.general.archive", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Upload ~/.gnupg archive to Ansible Controller", "module": "ansible.builtin.fetch", "index": 9, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "options": {"name": "Upload ~/.gnupg archive to Ansible Controller", "when": "reprepro__register_gpg_archive is changed"}, "module_options": {"src": "{{ reprepro__home + \"/\" + reprepro__gpg_snapshot_name }}", "dest": "{{ reprepro__gpg_snapshot_path + \"/\" + reprepro__gpg_snapshot_name }}", "flat": true}, "fqcn": "ansible.builtin.fetch", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove old automatic signing key", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "options": {"name": "Remove old automatic signing key", "when": "reprepro__register_keygen is changed"}, "module_options": {"path": "{{ reprepro__home + \"/\" + reprepro__gpg_public_filename }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Export automatic signing key", "module": "ansible.builtin.shell", "index": 11, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml", "options": {"name": "Export automatic signing key", "args": {"creates": "{{ reprepro__home + \"/\" + reprepro__gpg_public_filename }}"}, "become": true, "become_user": "{{ reprepro__user }}"}, "module_options": "gpg --armor --export \"{{ reprepro__gpg_email }}\" > \"{{ reprepro__home + \"/\" + reprepro__gpg_public_filename }}\"", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare reprepro environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main_env.yml", "options": {"name": "Prepare reprepro environment"}, "module_options": {"reprepro__env_nginx_servers": "{{ lookup(\"template\", \"lookup/reprepro__env_nginx_servers.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create reprepro spool directory", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml", "options": {"name": "Create reprepro spool directory", "when": "repo.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"path": "{{ reprepro__spool_root + \"/\" + repo.name }}", "state": "directory", "owner": "{{ reprepro__user }}", "group": "{{ reprepro__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create directory for reprepro uploads", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml", "options": {"name": "Create directory for reprepro uploads", "when": "repo.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"path": "{{ reprepro__spool_root + \"/\" + repo.name + \"/incoming\" }}", "state": "directory", "owner": "{{ reprepro__user }}", "group": "www-data", "mode": "0730"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create reprepro internal directories", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml", "options": {"name": "Create reprepro internal directories", "loop": ["conf/uploaders", "tmp"], "when": "repo.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"path": "{{ reprepro__data_root + \"/\" + repo.name + \"/\" + item }}", "state": "directory", "owner": "{{ reprepro__user }}", "group": "{{ reprepro__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create public reprepro repository", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml", "options": {"name": "Create public reprepro repository", "when": "repo.state|d('present') not in [ 'absent', 'ignore' ] and not repo.outdir|d()"}, "module_options": {"path": "{{ reprepro__public_root + \"/sites/\" + repo.name + \"/public\" }}", "state": "directory", "owner": "{{ reprepro__user }}", "group": "{{ reprepro__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy GPG public key to public space", "module": "ansible.builtin.copy", "index": 4, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml", "options": {"name": "Copy GPG public key to public space", "when": "repo.state|d('present') not in [ 'absent', 'ignore' ] and not repo.outdir|d()"}, "module_options": {"src": "{{ reprepro__home + \"/\" + reprepro__gpg_public_filename }}", "dest": "{{ reprepro__public_root + \"/sites/\" + repo.name + \"/public/\" + reprepro__gpg_public_filename }}", "remote_src": true, "owner": "{{ reprepro__user }}", "group": "{{ reprepro__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage reprepro configuration files", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml", "options": {"name": "Manage reprepro configuration files", "loop": ["distributions", "incoming", "options", "pulls", "updates"], "register": "reprepro__register_config", "when": "(repo.state|d('present') not in [ 'absent', 'ignore' ] and (item in repo.keys() or item in [ 'options' ]))"}, "module_options": {"src": "home/reprepro/repositories/instance/conf/{{ item }}.j2", "dest": "{{ reprepro__data_root + \"/\" + repo.name + \"/conf/\" + item }}", "owner": "{{ reprepro__user }}", "group": "{{ reprepro__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure uploaders configuration files", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml", "options": {"name": "Configure uploaders configuration files", "loop": "{{ repo.uploaders }}", "register": "reprepro__register_uploaders", "when": "repo.state|d('present') not in [ 'absent', 'ignore' ] and 'uploaders' in repo.keys()"}, "module_options": {"src": "home/reprepro/repositories/instance/conf/uploaders/template.j2", "dest": "{{ reprepro__data_root + \"/\" + repo.name + \"/conf/uploaders/\" + item.name }}", "owner": "{{ reprepro__user }}", "group": "{{ reprepro__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize reprepro repositories", "module": "ansible.builtin.command", "index": 7, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml", "options": {"name": "Initialize reprepro repositories", "args": {"chdir": "{{ reprepro__data_root + \"/\" + repo.name }}"}, "become": true, "become_user": "{{ reprepro__user }}", "when": "(repo.state|d('present') not in [ 'absent', 'ignore' ] and repo.distributions|d() and (reprepro__register_config is changed or reprepro__register_uploaders is changed))"}, "module_options": "reprepro export", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate symlinks", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml", "options": {"name": "Generate symlinks", "args": {"chdir": "{{ reprepro__data_root + \"/\" + repo.name }}"}, "become": true, "become_user": "{{ reprepro__user }}", "changed_when": false, "when": "(repo.state|d('present') not in [ 'absent', 'ignore' ] and repo.distributions|d())"}, "module_options": "reprepro --delete createsymlinks", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable incoming queue monitoring", "module": "ansible.builtin.systemd", "index": 9, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml", "options": {"name": "Enable incoming queue monitoring", "when": "repo.incoming|d()"}, "module_options": {"name": "{{ \"reprepro-incoming@\" + repo.name + \".path\" }}", "state": "{{ \"started\" if (repo.state|d(\"present\") not in [ \"absent\", \"ignore\" ]) else \"stopped\" }}", "enabled": "{{ True if (repo.state|d(\"present\") not in [ \"absent\", \"ignore\" ]) else False }}"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage reprepro scripts", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml", "options": {"name": "Manage reprepro scripts", "with_items": ["email-changes.sh"], "when": "repo.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"src": "home/reprepro/repositories/instance/conf/{{ item }}.j2", "dest": "{{ reprepro__data_root + \"/\" + repo.name + \"/conf/\" + item }}", "owner": "{{ reprepro__user }}", "group": "{{ reprepro__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install packages for Debian repository management", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Install packages for Debian repository management", "register": "reprepro__register_packages", "until": "reprepro__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (reprepro__base_packages + reprepro__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create UNIX system group for reprepro", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Create UNIX system group for reprepro"}, "module_options": {"name": "{{ reprepro__group }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create UNIX system account for reprepro", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Create UNIX system account for reprepro"}, "module_options": {"name": "{{ reprepro__user }}", "group": "{{ reprepro__group }}", "groups": "{{ reprepro__additional_groups }}", "append": true, "system": true, "shell": "/bin/bash", "home": "{{ reprepro__home }}", "comment": "{{ reprepro__comment }}", "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add admin SSH keys to reprepro UNIX account", "module": "ansible.posix.authorized_key", "index": 5, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Add admin SSH keys to reprepro UNIX account", "when": "reprepro__admin_sshkeys|d()"}, "module_options": {"key": "{{ (reprepro__admin_sshkeys if reprepro__admin_sshkeys is string else '\n'.join(q('flattened', reprepro__admin_sshkeys))) | string }}", "state": "present", "user": "{{ reprepro__user }}", "exclusive": false}, "fqcn": "ansible.posix.authorized_key", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate queue processing services", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Generate queue processing services", "loop": ["reprepro-incoming@.service", "reprepro-incoming@.path"], "notify": ["Reload systemd daemon"], "when": "ansible_service_mgr == 'systemd'"}, "module_options": {"src": "{{ \"etc/systemd/system/\" + item + \".j2\" }}", "dest": "{{ \"/etc/systemd/system/\" + item }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush handlers when needed", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Flush handlers when needed"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage the GnuPG environment for reprepro", "module": "import_tasks", "index": 8, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Manage the GnuPG environment for reprepro"}, "module_options": "configure_gnupg.yml", "fqcn": "ansible.builtin.import_tasks", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage reprepro instances", "module": "include_tasks", "index": 9, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Manage reprepro instances", "loop_control": {"loop_var": "repo", "label": "{{ {\"name\": repo.name, \"state\": repo.state|d(\"present\"), \"outdir\": (repo.outdir | d(reprepro__public_root + \"/sites/\" + repo.name + \"/public\"))} }}"}, "loop": "{{ q(\"flattened\", reprepro__combined_instances) | debops.debops.parse_kv_items( merge_keys=[\"distributions\", \"incoming\", \"pulls\", \"updates\"]) }}"}, "module_options": "configure_reprepro.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate reprepro Ansible local facts", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Generate reprepro Ansible local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/reprepro.fact.j2", "dest": "/etc/ansible/facts.d/reprepro.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Refresh host facts when needed", "module": "ansible.builtin.meta", "index": 12, "defined_in": "testdata/scm_repo/roles/reprepro/tasks/main.yml", "options": {"name": "Refresh host facts when needed"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/reprepro"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "ldap", "defined_in": "testdata/scm_repo/roles/ldap", "task_yamls": ["testdata/scm_repo/roles/ldap/tasks/ldap_tasks.yml", "testdata/scm_repo/roles/ldap/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "{{ item.name }}", "module": "ldap_entry", "index": 0, "defined_in": "testdata/scm_repo/roles/ldap/tasks/ldap_tasks.yml", "options": {"name": "{{ item.name }}", "become": "{{ ldap__admin_become }}", "become_user": "{{ ldap__admin_become_user if ldap__admin_become_user|d() else omit }}", "delegate_to": "{{ ldap__admin_delegate_to if ldap__admin_delegate_to|d() else omit }}", "run_once": "{{ item.run_once | d(False) }}", "when": "(item.objectClass|d() or item.entry_state|d()) and item.state not in [ 'init', 'ignore' ]", "tags": ["role::ldap:tasks", "skip::ldap:tasks"], "no_log": "{{ debops__no_log | d(item.no_log | d(True if (\"userPassword\" in (item.attributes|d({})).keys() or \"olcRootPW\"    in (item.attributes|d({})).keys()) else False)) }}"}, "module_options": {"dn": "{{ item.dn if (item.dn is string) else item.dn | join(\",\") }}", "objectClass": "{{ item.objectClass | d(omit) }}", "attributes": "{{ item.attributes | d(omit) }}", "state": "{{ item.entry_state | d(item.state) }}", "server_uri": "{{ ldap__admin_server_uri }}", "start_tls": "{{ ldap__start_tls }}", "bind_dn": "{{ ldap__admin_binddn }}", "bind_pw": "{{ ldap__fact_admin_bindpw }}"}, "fqcn": "community.general.ldap_entry", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "{{ item.name }}", "module": "ldap_attrs", "index": 1, "defined_in": "testdata/scm_repo/roles/ldap/tasks/ldap_tasks.yml", "options": {"name": "{{ item.name }}", "become": "{{ ldap__admin_become }}", "become_user": "{{ ldap__admin_become_user if ldap__admin_become_user|d() else omit }}", "delegate_to": "{{ ldap__admin_delegate_to if ldap__admin_delegate_to|d() else omit }}", "run_once": "{{ item.run_once | d(False) }}", "when": "not item.objectClass|d() and not item.entry_state|d() and item.state not in [ 'init', 'ignore' ]", "tags": ["role::ldap:tasks", "skip::ldap:tasks"], "no_log": "{{ debops__no_log | d(item.no_log | d(True if (\"userPassword\" in (item.attributes|d({})).keys() or \"olcRootPW\"    in (item.attributes|d({})).keys()) else False)) }}"}, "module_options": {"dn": "{{ item.dn if (item.dn is string) else item.dn | join(\",\") }}", "attributes": "{{ item.attributes | d({}) }}", "ordered": "{{ item.ordered | d(False) }}", "state": "{{ item.state }}", "server_uri": "{{ ldap__admin_server_uri }}", "start_tls": "{{ ldap__start_tls }}", "bind_dn": "{{ ldap__admin_binddn }}", "bind_pw": "{{ ldap__fact_admin_bindpw }}"}, "fqcn": "debops.debops.ldap_attrs", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/ldap/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/ldap/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/ldap/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Take note of the current LDAP configuration", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "testdata/scm_repo/roles/ldap/tasks/main.yml", "options": {"name": "Take note of the current LDAP configuration", "tags": ["role::ldap:tasks", "skip::ldap:tasks"]}, "module_options": {"ldap__fact_configured": "{{ ldap__configured }}", "ldap__fact_dependent_tasks": "{{ ldap__dependent_tasks }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install packages required for LDAP support", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/ldap/tasks/main.yml", "options": {"name": "Install packages required for LDAP support", "register": "ldap__register_packages", "until": "ldap__register_packages is succeeded", "when": "ldap__enabled|bool and not ldap__dependent_play|bool"}, "module_options": {"name": "{{ q(\"flattened\", ldap__base_packages + ldap__packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original LDAP client configuration", "module": "dpkg_divert", "index": 5, "defined_in": "testdata/scm_repo/roles/ldap/tasks/main.yml", "options": {"name": "Divert original LDAP client configuration", "when": "ldap__enabled|bool and not ldap__dependent_play|bool"}, "module_options": {"path": "/etc/ldap/ldap.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate system-wide LDAP configuration", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/ldap/tasks/main.yml", "options": {"name": "Generate system-wide LDAP configuration", "notify": ["Refresh host facts"], "when": "ldap__enabled|bool and not ldap__dependent_play|bool"}, "module_options": {"src": "etc/ldap/ldap.conf.j2", "dest": "/etc/ldap/ldap.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/ldap/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists", "when": "ldap__enabled|bool and not ldap__dependent_play|bool"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save LDAP client local facts", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/ldap/tasks/main.yml", "options": {"name": "Save LDAP client local facts", "notify": ["Refresh host facts"], "when": "ldap__enabled|bool and not ldap__dependent_play|bool", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/ldap.fact.j2", "dest": "/etc/ansible/facts.d/ldap.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 9, "defined_in": "testdata/scm_repo/roles/ldap/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if LDAP admin password is available", "module": "ansible.builtin.set_fact", "index": 10, "defined_in": "testdata/scm_repo/roles/ldap/tasks/main.yml", "options": {"name": "Check if LDAP admin password is available", "become": "{{ ldap__admin_become }}", "become_user": "{{ ldap__admin_become_user }}", "delegate_to": "{{ ldap__admin_delegate_to }}", "run_once": true, "tags": ["role::ldap:tasks", "skip::ldap:tasks"]}, "module_options": {"ldap__fact_admin_bindpw": "{{ ldap__admin_bindpw }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Perform LDAP tasks", "module": "include_tasks", "index": 11, "defined_in": "testdata/scm_repo/roles/ldap/tasks/main.yml", "options": {"name": "Perform LDAP tasks", "loop": "{{ q(\"flattened\", ldap__combined_tasks) | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"state\": item.state, \"dn\": item.dn, \"attributes\": item.attributes|d({})} }}"}, "when": "ldap__enabled|bool and ldap__admin_enabled|bool and item.name|d() and item.dn|d() and item.state|d('present') not in [ 'init', 'ignore' ]", "tags": ["role::ldap:tasks", "skip::ldap:tasks"], "no_log": "{{ debops__no_log | d(item.no_log | d(True if (\"userPassword\" in (item.attributes|d({})).keys() or \"olcRootPW\"    in (item.attributes|d({})).keys()) else False)) }}"}, "module_options": "ldap_tasks.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/ldap"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "phpmyadmin", "defined_in": "testdata/scm_repo/roles/phpmyadmin", "task_yamls": ["testdata/scm_repo/roles/phpmyadmin/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/phpmyadmin/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/phpmyadmin"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install dbconfig-common", "module": "ansible.builtin.apt", "index": 1, "defined_in": "testdata/scm_repo/roles/phpmyadmin/tasks/main.yml", "options": {"name": "Install dbconfig-common", "register": "phpmyadmin__register_dbconfig_packages", "until": "phpmyadmin__register_dbconfig_packages is succeeded"}, "module_options": "pkg=dbconfig-common state=present install_recommends=no", "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/phpmyadmin"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Pre-configure PHPMyAdmin database", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/phpmyadmin/tasks/main.yml", "options": {"name": "Pre-configure PHPMyAdmin database"}, "module_options": "src=etc/dbconfig-common/phpmyadmin.conf.j2 dest=/etc/dbconfig-common/phpmyadmin.conf owner=root group=root mode=0600", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/phpmyadmin"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install PHPMyAdmin packages", "module": "ansible.builtin.apt", "index": 3, "defined_in": "testdata/scm_repo/roles/phpmyadmin/tasks/main.yml", "options": {"name": "Install PHPMyAdmin packages", "register": "phpmyadmin__register_packages", "until": "phpmyadmin__register_packages is succeeded"}, "module_options": "pkg=phpmyadmin state=present install_recommends=no", "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/phpmyadmin"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create database for PHPMyAdmin", "module": "mysql_db", "index": 4, "defined_in": "testdata/scm_repo/roles/phpmyadmin/tasks/main.yml", "options": {"name": "Create database for PHPMyAdmin", "register": "phpmyadmin_database"}, "module_options": "name={{ phpmyadmin_control_database | default('phpmyadmin') }} state=present", "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/phpmyadmin"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import PHPMyAdmin schema", "module": "mysql_db", "index": 5, "defined_in": "testdata/scm_repo/roles/phpmyadmin/tasks/main.yml", "options": {"name": "Import PHPMyAdmin schema", "when": "phpmyadmin_database is defined and phpmyadmin_database is changed"}, "module_options": {"name": "{{ phpmyadmin_control_database | default(\"phpmyadmin\") }}", "state": "import", "target": "/usr/share/dbconfig-common/data/phpmyadmin/install/mysql"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/phpmyadmin"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create PHPMyAdmin control user", "module": "mysql_user", "index": 6, "defined_in": "testdata/scm_repo/roles/phpmyadmin/tasks/main.yml", "options": {"name": "Create PHPMyAdmin control user", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "name={{ phpmyadmin_control_user | default('phpmyadmin') }} state=present password={{ phpmyadmin_control_password }} priv='{{ phpmyadmin_control_database | default('phpmyadmin') }}.*:ALL'", "fqcn": "community.mysql.mysql_user", "used_in": ["testdata/scm_repo/roles/phpmyadmin"], "annotations": {"use-non-builtin-module": true}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "avahi", "defined_in": "testdata/scm_repo/roles/avahi", "task_yamls": ["testdata/scm_repo/roles/avahi/tasks/avahi_alias.yml", "testdata/scm_repo/roles/avahi/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Install avahi-alias script", "module": "ansible.builtin.copy", "index": 0, "defined_in": "testdata/scm_repo/roles/avahi/tasks/avahi_alias.yml", "options": {"name": "Install avahi-alias script", "register": "avahi__register_alias_script"}, "module_options": {"src": "usr/local/sbin/avahi-alias", "dest": "{{ avahi__alias_install_path }}/avahi-alias", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install avahi-alias.service", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/avahi/tasks/avahi_alias.yml", "options": {"name": "Install avahi-alias.service", "register": "avahi__register_alias_service"}, "module_options": {"src": "etc/systemd/system/avahi-alias.service.j2", "dest": "/etc/systemd/system/avahi-alias.service", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that the CNAME alias file exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/avahi/tasks/avahi_alias.yml", "options": {"name": "Make sure that the CNAME alias file exists", "when": "avahi__register_alias_script is changed"}, "module_options": {"path": "{{ avahi__alias_config_file }}", "state": "touch", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage list of CNAME entries", "module": "ansible.builtin.lineinfile", "index": 3, "defined_in": "testdata/scm_repo/roles/avahi/tasks/avahi_alias.yml", "options": {"name": "Manage list of CNAME entries", "with_dict": "{{ avahi__combined_services }}", "register": "avahi__register_aliases", "when": "item.value.cname|d()"}, "module_options": {"dest": "{{ avahi__alias_config_file }}", "regexp": "{{ \"^\" + (item.value.cname if item.value.cname.endswith(\".\" + avahi__domain) else (item.value.cname + \".\" + avahi__domain)) + \"$\" }}", "line": "{{ (item.value.cname if item.value.cname.endswith(\".\" + avahi__domain) else (item.value.cname + \".\" + avahi__domain)) }}", "state": "{{ \"present\" if item.value.cname_state|d(item.value.state | d(\"present\")) != \"absent\" else \"absent\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage avahi-alias.service", "module": "ansible.builtin.systemd", "index": 4, "defined_in": "testdata/scm_repo/roles/avahi/tasks/avahi_alias.yml", "options": {"name": "Manage avahi-alias.service", "when": "ansible_service_mgr == 'systemd'"}, "module_options": {"name": "avahi-alias.service", "enabled": "{{ True if avahi__register_alias_script is changed else omit }}", "daemon_reload": "{{ True if (avahi__register_alias_script is changed or avahi__register_alias_service is changed) else omit }}", "state": "{{ \"restarted\" if (avahi__register_alias_script is changed or avahi__register_alias_service is changed or avahi__register_aliases is changed) else omit }}"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Avahi config directory exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Make sure that Avahi config directory exists"}, "module_options": {"path": "/etc/avahi", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the avahi-daemon configuration", "module": "dpkg_divert", "index": 2, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Divert the avahi-daemon configuration", "loop": ["avahi-daemon.conf", "hosts"], "register": "avahi__register_divert", "notify": ["Restart avahi-daemon"]}, "module_options": {"path": "/etc/avahi/{{ item }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure avahi-daemon", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Configure avahi-daemon", "notify": ["Restart avahi-daemon"]}, "module_options": {"src": "etc/avahi/avahi-daemon.conf.j2", "dest": "/etc/avahi/avahi-daemon.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create a stub mDNS hosts configuration file", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Create a stub mDNS hosts configuration file", "when": "avahi__register_divert is changed"}, "module_options": {"state": "touch", "dest": "/etc/avahi/hosts", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create avahi-daemon systemd override directory", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Create avahi-daemon systemd override directory", "when": "ansible_service_mgr == 'systemd' and ansible_virtualization_type in [ 'lxc', 'docker' ] and ansible_virtualization_role == 'guest'"}, "module_options": {"path": "/etc/systemd/system/avahi-daemon.service.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install avahi-daemon exec override on LXC guests", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Install avahi-daemon exec override on LXC guests", "when": "ansible_service_mgr == 'systemd' and ansible_virtualization_type in [ 'lxc', 'docker' ] and ansible_virtualization_role == 'guest'"}, "module_options": {"src": "etc/systemd/system/avahi-daemon.service.d/exec-override.conf.j2", "dest": "/etc/systemd/system/avahi-daemon.service.d/exec-override.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 7, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Install required packages", "register": "avahi__register_packages", "until": "avahi__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (avahi__base_packages + avahi__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage advertisement of additional hosts over Avahi", "module": "ansible.builtin.lineinfile", "index": 8, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Manage advertisement of additional hosts over Avahi", "with_dict": "{{ avahi__hosts | combine(avahi__group_hosts) | combine(avahi__host_hosts) }}", "when": "item.key|d() and item.value|d()"}, "module_options": {"dest": "/etc/avahi/hosts", "regexp": "{{ \"^\" + item.key + \"\\s+\" }}", "line": "{{ item.key }} {{ (item.value if item.value.endswith(\".\" + avahi__domain) else (item.value + \".\" + avahi__domain)) }}", "state": "present", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Avahi CNAME aliases", "module": "ansible.builtin.include_tasks", "index": 9, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Configure Avahi CNAME aliases", "when": "avahi__alias_enabled|bool", "tags": ["role::avahi:alias"]}, "module_options": "avahi_alias.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Avahi services if requested", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Remove Avahi services if requested", "with_dict": "{{ avahi__combined_services }}", "when": "item.value.filename|d(item.key) and item.value.state|d('present') == 'absent'", "tags": ["role::avahi:alias", "role::avahi:services"]}, "module_options": {"path": "/etc/avahi/services/{{ item.value.filename | d(item.key) }}.service", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Avahi services", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Configure Avahi services", "with_dict": "{{ avahi__combined_services }}", "when": "(item.value.filename|d(item.key) and item.value.state|d('present') != 'absent' and (item.value.services|d() or item.value.type|d()))", "tags": ["role::avahi:alias", "role::avahi:services"]}, "module_options": {"src": "etc/avahi/services/avahi.service.j2", "dest": "/etc/avahi/services/{{ item.value.filename | d(item.key) }}.service", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the avahi-daemon service in in the desired state", "module": "ansible.builtin.service", "index": 12, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Ensure that the avahi-daemon service in in the desired state"}, "module_options": {"name": "avahi-daemon", "enabled": "{{ avahi__enabled|bool }}", "state": "{{ \"started\" if (avahi__enabled|bool) else \"stopped\" }}"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Avahi local facts", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Save Avahi local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/avahi.fact.j2", "dest": "/etc/ansible/facts.d/avahi.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 15, "defined_in": "testdata/scm_repo/roles/avahi/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/avahi"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "gitlab_runner", "defined_in": "testdata/scm_repo/roles/gitlab_runner", "task_yamls": ["testdata/scm_repo/roles/gitlab_runner/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required groups", "module": "ansible.builtin.group", "index": 1, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Create required groups", "with_flattened": ["{{ gitlab_runner__group }}", "{{ gitlab_runner__additional_groups }}"]}, "module_options": {"name": "{{ item.name if item.name|d() else item }}", "system": "{{ item.system|bool if item.system is defined else gitlab_runner__system | bool }}", "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create gitlab-runner user", "module": "ansible.builtin.user", "index": 2, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Create gitlab-runner user"}, "module_options": {"name": "{{ gitlab_runner__user }}", "group": "{{ gitlab_runner__group }}", "groups": "{{ gitlab_runner__additional_groups | map(attribute=\"name\") | list | join(\",\") }}", "append": true, "home": "{{ gitlab_runner__home }}", "system": "{{ gitlab_runner__system | bool }}", "comment": "{{ gitlab_runner__comment }}", "shell": "{{ gitlab_runner__shell }}", "state": "present", "generate_ssh_key": "{{ gitlab_runner__ssh_generate | bool }}", "ssh_key_bits": "{{ gitlab_runner__ssh_generate_bits }}", "skeleton": null}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove '~/.bash_logout' to avoid conflicts with the shell runner", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Remove '~/.bash_logout' to avoid conflicts with the shell runner"}, "module_options": {"state": "absent", "path": "{{ gitlab_runner__home }}/.bash_logout"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow Docker access for gitlab-runner user", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Allow Docker access for gitlab-runner user", "when": "(ansible_local|d() and ansible_local.docker_server|d() and (ansible_local.docker_server.installed|d()) | bool)"}, "module_options": {"name": "{{ gitlab_runner__user }}", "groups": "docker", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy custom files to GitLab Runner host", "module": "ansible.builtin.copy", "index": 5, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Copy custom files to GitLab Runner host", "with_flattened": ["{{ gitlab_runner__custom_files }}", "{{ gitlab_runner__group_custom_files }}", "{{ gitlab_runner__host_custom_files }}"], "when": "((item.src|d() or item.content|d()) and item.dest|d())"}, "module_options": {"src": "{{ item.src | d(omit) }}", "content": "{{ item.content | d(omit) }}", "dest": "{{ item.dest }}", "owner": "{{ item.owner | d(omit) }}", "group": "{{ item.group | d(omit) }}", "mode": "{{ item.mode | d(omit) }}", "directory_mode": "{{ item.directory_mode | d(omit) }}", "follow": "{{ item.follow | d(omit) }}", "force": "{{ item.force | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure APT can access HTTPS repositories", "module": "ansible.builtin.apt", "index": 6, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Make sure APT can access HTTPS repositories", "register": "gitlab_runner__register_apt_https", "until": "gitlab_runner__register_apt_https is succeeded"}, "module_options": {"name": ["apt-transport-https", "openssl", "ca-certificates"], "state": "present", "install_recommends": false, "update_cache": true, "cache_valid_time": "{{ ansible_local.core.cache_valid_time|d(\"86400\") }}"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install gitlab-runner packages", "module": "ansible.builtin.apt", "index": 7, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Install gitlab-runner packages", "register": "gitlab_runner__register_packages", "until": "gitlab_runner__register_packages is succeeded"}, "module_options": {"name": "{{ query('flattened', gitlab_runner__base_packages + gitlab_runner__packages) }}", "state": "present", "install_recommends": false}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if GitLab service is available", "module": "ansible.builtin.uri", "index": 8, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Check if GitLab service is available", "register": "gitlab_runner__register_api", "when": "gitlab_runner__api_url|d() and gitlab_runner__api_url", "failed_when": false, "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"url": "{{ gitlab_runner__api_url }}"}, "fqcn": "ansible.builtin.uri", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Register new GitLab Runners", "module": "ansible.builtin.uri", "index": 9, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Register new GitLab Runners", "register": "gitlab_runner__register_new_instances", "with_flattened": ["{{ gitlab_runner__default_instances }}", "{{ gitlab_runner__instances }}", "{{ gitlab_runner__group_instances }}", "{{ gitlab_runner__host_instances }}"], "when": "(gitlab_runner__register_api.status|d() and gitlab_runner__register_api.status == 200 and (item.token | d() or gitlab_runner__token) and item.name and (item.state is undefined or item.state != 'absent') and (ansible_local is undefined or (ansible_local|d() and (ansible_local.gitlab_runner is undefined or (ansible_local.gitlab_runner|d() and ansible_local.gitlab_runner.instances is defined and item.name not in ansible_local.gitlab_runner.instances)))))"}, "module_options": {"url": "{{ (item.api_url | d(gitlab_runner__api_url)) + \"api/v4/runners\" }}", "method": "POST", "body": "token={{ item.token | d(gitlab_runner__token) }}&description={{ item.name | urlencode }}&tag_list={{ ((item.tags|d([]) + (gitlab_runner__shell_tags if (item.executor == \"shell\") else []) + gitlab_runner__combined_tags) | unique | join(\",\")) | urlencode }}&run_untagged={{ item.run_untagged | d(gitlab_runner__run_untagged) }}", "status_code": "200,201"}, "fqcn": "ansible.builtin.uri", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate GitLab Runner configuration files", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Generate GitLab Runner configuration files", "with_items": ["config.toml", "ansible.json"]}, "module_options": {"src": "etc/gitlab-runner/{{ item }}.j2", "dest": "/etc/gitlab-runner/{{ item }}", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Delete GitLab Runners if requested", "module": "ansible.builtin.uri", "index": 11, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Delete GitLab Runners if requested", "with_together": ["{{ gitlab_runner__default_instances + gitlab_runner__instances + gitlab_runner__group_instances + gitlab_runner__host_instances }}", "{{ ansible_local.gitlab_runner.instance_tokens|d([]) }}"], "when": "(gitlab_runner__register_api.status|d() and gitlab_runner__register_api.status == 200 and gitlab_runner__api_token and item.0.name|d() and item.1.name|d() and item.0.name == item.1.name and (item.0.state|d() and item.0.state == 'absent'))", "failed_when": false, "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"url": "{{ (item.0.api_url | d(gitlab_runner__api_url)) + \"api/v4/runners/\" + item.1.id | string }}", "method": "DELETE", "headers": {"PRIVATE-TOKEN": "{{ gitlab_runner__api_token }}"}}, "fqcn": "ansible.builtin.uri", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the SSH key from the remote host", "module": "ansible.builtin.slurp", "index": 12, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Get the SSH key from the remote host", "register": "gitlab_runner__register_ssh_key", "when": "gitlab_runner__ssh_generate|bool"}, "module_options": {"src": "~{{ gitlab_runner__user }}/.ssh/id_rsa.pub"}, "fqcn": "ansible.builtin.slurp", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Distribute SSH key to other hosts", "module": "ansible.posix.authorized_key", "index": 13, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Distribute SSH key to other hosts", "delegate_to": "{{ item.host }}", "become": "{{ item.become | d(True) }}", "with_items": "{{ gitlab_runner__ssh_install_to }}", "when": "gitlab_runner__ssh_generate|bool and item.user|d() and item.host|d()"}, "module_options": {"key": "{{ gitlab_runner__register_ssh_key.content | b64decode | trim }}", "user": "{{ item.user }}", "state": "present", "key_options": "{{ item.options | d() }}"}, "fqcn": "ansible.posix.authorized_key", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure that the ~/.ssh directory exists", "module": "ansible.builtin.file", "index": 14, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Make sure that the ~/.ssh directory exists", "when": "gitlab_runner__ssh_known_hosts|d()"}, "module_options": {"path": "{{ gitlab_runner__home }}/.ssh", "state": "directory", "owner": "{{ gitlab_runner__user }}", "group": "{{ gitlab_runner__group }}", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure the ~/.ssh/known_hosts file exists", "module": "ansible.builtin.copy", "index": 15, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Make sure the ~/.ssh/known_hosts file exists", "when": "gitlab_runner__ssh_known_hosts|d()"}, "module_options": {"content": "", "dest": "{{ gitlab_runner__home }}/.ssh/known_hosts", "owner": "{{ gitlab_runner__user }}", "group": "{{ gitlab_runner__group }}", "mode": "0644", "force": false}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of already scanned host fingerprints", "module": "ansible.builtin.shell", "index": 16, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Get list of already scanned host fingerprints", "args": {"executable": "bash"}, "with_items": "{{ gitlab_runner__ssh_known_hosts }}", "when": "gitlab_runner__ssh_known_hosts|d()", "register": "gitlab_runner__register_known_hosts", "changed_when": false, "failed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && ssh-keygen -f {{ gitlab_runner__home }}/.ssh/known_hosts -F {{ item }} | grep -q '^# Host {{ item }} found'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Scan SSH fingerprints of specified hosts", "module": "ansible.builtin.shell", "index": 17, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Scan SSH fingerprints of specified hosts", "with_items": "{{ gitlab_runner__register_known_hosts.results }}", "when": "gitlab_runner__ssh_known_hosts and item is defined and item.rc > 0", "failed_when": false}, "module_options": "ssh-keyscan -H -T 10 {{ item.item }} >> {{ gitlab_runner__home + \"/.ssh/known_hosts\" }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Vagrant libvirt access", "module": "ansible.builtin.user", "index": 18, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Configure Vagrant libvirt access", "when": "gitlab_runner__vagrant_libvirt|bool"}, "module_options": {"name": "{{ gitlab_runner__user }}", "append": true, "groups": "{{ ([ (ansible_local.libvirtd.unix_sock_group if (ansible_local.libvirtd.unix_sock_group|d()) else \"libvirt\") ] + ([ \"kvm\" ] if (ansible_local|d() and ansible_local.libvirtd|d() and (ansible_local.libvirtd.hw_virt|d())|bool) else [])) | join(\",\") }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Vagrant libvirt sudo access", "module": "ansible.builtin.template", "index": 19, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Configure Vagrant libvirt sudo access", "when": "(ansible_local|d() and ansible_local.sudo|d() and (ansible_local.sudo.installed|d())|bool and gitlab_runner__vagrant_libvirt|bool)"}, "module_options": {"src": "etc/sudoers.d/gitlab-runner-vagrant-libvirt.j2", "dest": "/etc/sudoers.d/gitlab-runner-vagrant-libvirt", "owner": "root", "group": "root", "mode": "0440"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Find 'vagrant-libvirt' source code", "module": "ansible.builtin.command", "index": 20, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Find 'vagrant-libvirt' source code", "register": "gitlab_runner__register_libvirt_source", "when": "gitlab_runner__vagrant_libvirt_patch|bool", "changed_when": false, "check_mode": false, "tags": ["role::gitlab_runner:patch"]}, "module_options": "find /usr/share/rubygems-integration/all/gems -maxdepth 1 -type d -name 'vagrant-libvirt-*'", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Patch 'vagrant-libvirt' source code", "module": "ansible.posix.patch", "index": 21, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Patch 'vagrant-libvirt' source code", "with_items": "{{ gitlab_runner__register_libvirt_source.stdout_lines }}", "when": "gitlab_runner__vagrant_libvirt_patch|bool", "tags": ["role::gitlab_runner:patch"]}, "module_options": {"src": "{{ \"patches/package_domain-keep-ssh-host-keys-\" + (item | basename | replace(\"vagrant-libvirt-\",\"\")) + \".patch\" }}", "basedir": "{{ item }}", "state": "{{ gitlab_runner__vagrant_libvirt_patch_state }}"}, "fqcn": "ansible.posix.patch", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure Vagrant LXC sudo access", "module": "ansible.builtin.template", "index": 22, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Configure Vagrant LXC sudo access", "when": "(ansible_local|d() and ansible_local.sudo|d() and (ansible_local.sudo.installed|d())|bool and gitlab_runner__vagrant_lxc|bool)"}, "module_options": {"src": "etc/sudoers.d/gitlab-runner-vagrant-lxc.j2", "dest": "/etc/sudoers.d/gitlab-runner-vagrant-lxc", "owner": "root", "group": "root", "mode": "0440"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible fact directory exists", "module": "ansible.builtin.file", "index": 23, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Make sure that Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save GitLab Runner local facts", "module": "ansible.builtin.template", "index": 24, "defined_in": "testdata/scm_repo/roles/gitlab_runner/tasks/main.yml", "options": {"name": "Save GitLab Runner local facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/gitlab_runner.fact.j2", "dest": "/etc/ansible/facts.d/gitlab_runner.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitlab_runner"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "roundcube", "defined_in": "testdata/scm_repo/roles/roundcube", "task_yamls": ["testdata/scm_repo/roles/roundcube/tasks/configure_mysql.yml", "testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml", "testdata/scm_repo/roles/roundcube/tasks/configure_postgresql.yml", "testdata/scm_repo/roles/roundcube/tasks/main.yml", "testdata/scm_repo/roles/roundcube/tasks/configure_skins.yml", "testdata/scm_repo/roles/roundcube/tasks/roundcube/pre_main.yml", "testdata/scm_repo/roles/roundcube/tasks/roundcube/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Create Roundcube MySQL/MariaDB database", "module": "mysql_db", "index": 0, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/configure_mysql.yml", "options": {"name": "Create Roundcube MySQL/MariaDB database", "delegate_to": "{{ ansible_local.mariadb.delegate_to }}", "register": "roundcube__register_database_status"}, "module_options": {"name": "{{ roundcube__database_map[roundcube__database].dbname }}", "state": "present"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import initial database schema", "module": "mysql_db", "index": 1, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/configure_mysql.yml", "options": {"name": "Import initial database schema", "when": "(roundcube__register_database_status|d() is defined and roundcube__register_database_status is changed)", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ roundcube__database_map[roundcube__database].dbname }}", "state": "import", "target": "{{ roundcube__database_schema }}", "login_user": "{{ roundcube__database_map[roundcube__database].dbuser }}", "login_password": "{{ roundcube__database_map[roundcube__database].dbpass }}", "login_host": "{{ ansible_local.mariadb.server }}"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create Roundcube group", "module": "ansible.builtin.group", "index": 0, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml", "options": {"name": "Create Roundcube group"}, "module_options": {"name": "{{ roundcube__group }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Roundcube user", "module": "ansible.builtin.user", "index": 1, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml", "options": {"name": "Create Roundcube user"}, "module_options": {"name": "{{ roundcube__user }}", "group": "{{ roundcube__group }}", "home": "{{ roundcube__home }}", "shell": "{{ roundcube__shell }}", "comment": "{{ roundcube__comment }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required Roundcube directories", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml", "options": {"name": "Create required Roundcube directories", "loop": [{"path": "{{ roundcube__src }}"}, {"path": "{{ roundcube__git_dir  | dirname }}", "mode": "0750"}, {"path": "{{ roundcube__git_dest | dirname }}"}]}, "module_options": {"path": "{{ item.path }}", "state": "directory", "owner": "{{ roundcube__user }}", "group": "{{ roundcube__group }}", "mode": "{{ item.mode | d(\"0755\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone Roundcube source from upstream repository", "module": "ansible.builtin.git", "index": 3, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml", "options": {"name": "Clone Roundcube source from upstream repository", "become": true, "become_user": "{{ roundcube__user }}", "register": "roundcube__register_git", "notify": ["Refresh host facts"]}, "module_options": {"repo": "{{ roundcube__git_repo }}", "dest": "{{ roundcube__git_dest }}", "version": "{{ roundcube__git_version }}", "separate_git_dir": "{{ roundcube__git_dir }}", "verify_commit": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Read PHP composer data from upstream", "module": "ansible.builtin.slurp", "index": 4, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml", "options": {"name": "Read PHP composer data from upstream", "register": "roundcube__register_composer_dist", "when": "roundcube__register_git is changed"}, "module_options": {"src": "{{ roundcube__git_dest + \"/composer.json-dist\" }}"}, "fqcn": "ansible.builtin.slurp", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Read currently deployed PHP composer data", "module": "ansible.builtin.slurp", "index": 5, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml", "options": {"name": "Read currently deployed PHP composer data", "register": "roundcube__register_composer_installed", "when": "(ansible_local|d() and ansible_local.roundcube|d() and (ansible_local.roundcube.installed|d())|bool and roundcube__register_git is changed)"}, "module_options": {"src": "{{ roundcube__git_dest + \"/composer.json\" }}"}, "fqcn": "ansible.builtin.slurp", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update PHP composer data", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml", "options": {"name": "Update PHP composer data", "when": "roundcube__register_git is changed"}, "module_options": {"src": "srv/www/sites/roundcube/public/composer.json.j2", "dest": "{{ roundcube__git_dest + \"/composer.json\" }}", "owner": "{{ roundcube__user }}", "group": "{{ roundcube__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install or upgrade PHP packages via Composer", "module": "composer", "index": 7, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml", "options": {"name": "Install or upgrade PHP packages via Composer", "become": true, "become_user": "{{ roundcube__user }}", "register": "roundcube__register_composer", "until": "roundcube__register_composer is succeeded", "when": "roundcube__register_git is changed"}, "module_options": {"command": "{{ \"upgrade\" if (ansible_local|d() and ansible_local.roundcube|d() and (ansible_local.roundcube.installed|d())|bool) else \"install\" }}", "working_dir": "{{ roundcube__git_dest }}", "no_dev": true}, "fqcn": "community.general.composer", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Install Roundcube plugins via Composer", "module": "composer", "index": 8, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml", "options": {"name": "Install Roundcube plugins via Composer", "loop": "{{ roundcube__combined_plugins | debops.debops.parse_kv_items | selectattr(\"state\", \"match\", \"^(enabled|present)$\") | selectattr(\"package\", \"defined\") | map(attribute=\"package\") | list }}", "become": true, "become_user": "{{ roundcube__user }}", "register": "roundcube__register_composer_plugins", "until": "roundcube__register_composer_plugins is succeeded", "tags": ["skip::roundcube:plugins"]}, "module_options": {"command": "require", "arguments": "{{ item }}", "working_dir": "{{ roundcube__git_dest }}", "no_dev": true}, "fqcn": "community.general.composer", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Install Javascript packages", "module": "ansible.builtin.command", "index": 9, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml", "options": {"name": "Install Javascript packages", "args": {"chdir": "{{ roundcube__git_dest }}"}, "become": true, "become_user": "{{ roundcube__user }}", "changed_when": false}, "module_options": "bin/install-jsdeps.sh", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable cleandb.sh Cron job", "module": "ansible.builtin.cron", "index": 10, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml", "options": {"name": "Enable cleandb.sh Cron job"}, "module_options": {"name": "Roundcube daily database housekeeping", "user": "{{ roundcube__user }}", "job": "{{ roundcube__git_dest }}/bin/cleandb.sh > /dev/null", "cron_file": "roundcube", "hour": "22", "minute": "0"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Roundcube PostgreSQL database", "module": "postgresql_db", "index": 0, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/configure_postgresql.yml", "options": {"name": "Create Roundcube PostgreSQL database", "delegate_to": "{{ ansible_local.postgresql.delegate_to }}", "register": "roundcube__register_postgresql_status"}, "module_options": {"name": "{{ roundcube__database_map[roundcube__database].dbname }}", "owner": "{{ roundcube__database_map[roundcube__database].dbuser }}", "state": "present"}, "fqcn": "community.postgresql.postgresql_db", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import initial database schema", "module": "postgresql_db", "index": 1, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/configure_postgresql.yml", "options": {"name": "Import initial database schema", "when": "(roundcube__register_postgresql_status|d() is defined and roundcube__register_postgresql_status is changed)", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ roundcube__database_map[roundcube__database].dbname }}", "state": "restore", "target": "{{ roundcube__database_schema }}", "login_user": "{{ roundcube__database_map[roundcube__database].dbuser }}", "login_password": "{{ roundcube__database_map[roundcube__database].dbpass }}", "login_host": "{{ roundcube__database_map[roundcube__database].dbhost }}"}, "fqcn": "community.postgresql.postgresql_db", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Pre hooks", "module": "include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Pre hooks"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"roundcube/pre_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get version of current Roundcube installation", "module": "ansible.builtin.command", "index": 4, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Get version of current Roundcube installation", "args": {"warn": false}, "changed_when": false, "failed_when": false, "register": "roundcube__register_version", "tags": ["role::roundcube:database"]}, "module_options": "sed -n \"s/^define('RCMAIL_VERSION', '\\(.*\\)');/\\1/p\" \\ {{ roundcube__git_dest }}/program/include/iniset.php", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install pre-requisite packages for Roundcube", "module": "ansible.builtin.package", "index": 5, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Install pre-requisite packages for Roundcube", "register": "roundcube__register_packages", "until": "roundcube__register_packages is succeeded", "tags": ["role::roundcube:pkg"]}, "module_options": {"name": "{{ q(\"flattened\", (roundcube__base_packages + roundcube__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"tags": ["role::roundcube:deployment"]}, "module_options": "deploy_roundcube.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save RoundCube local facts", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Save RoundCube local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/roundcube.fact.j2", "dest": "/etc/ansible/facts.d/roundcube.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 9, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 10, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"tags": ["role::roundcube:skins", "role::roundcube:themes"]}, "module_options": "configure_skins.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure database directory exists", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Make sure database directory exists", "when": "roundcube__database_map[roundcube__database].dbtype == 'sqlite'", "tags": ["role::roundcube:database"]}, "module_options": {"path": "{{ roundcube__git_dest }}/{{ roundcube__database_map[roundcube__database].dbname | dirname }}", "state": "directory", "owner": "{{ roundcube__user }}", "group": "{{ roundcube__group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 12, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"when": "roundcube__database_map[roundcube__database].dbtype == 'mysql'", "tags": ["role::roundcube:database"]}, "module_options": "configure_mysql.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 13, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"when": "roundcube__database_map[roundcube__database].dbtype == 'postgresql'", "tags": ["role::roundcube:database"]}, "module_options": "configure_postgresql.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Roundcube configuration", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Generate Roundcube configuration", "tags": ["role::roundcube:config"]}, "module_options": {"src": "srv/www/sites/roundcube/public/config/config.inc.php.j2", "dest": "{{ roundcube__git_dest + \"/config/config.inc.php\" }}", "owner": "root", "group": "{{ roundcube__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Roundcube plugin configuration", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Generate Roundcube plugin configuration", "loop": "{{ roundcube__combined_plugins | debops.debops.parse_kv_items | selectattr(\"state\", \"match\", \"^(enabled|present)$\") | selectattr(\"options\", \"defined\") | list }}", "loop_control": {"label": "{{ item.name }}"}, "tags": ["role::roundcube:config"]}, "module_options": {"src": "srv/www/sites/roundcube/public/plugins/config.inc.php.j2", "dest": "{{ roundcube__git_dest + \"/plugins/\" + item.name + \"/config.inc.php\" }}", "owner": "root", "group": "{{ roundcube__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update database schema", "module": "ansible.builtin.command", "index": 16, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Update database schema", "args": {"chdir": "{{ roundcube__git_dest }}"}, "become": true, "become_user": "{{ roundcube__user }}", "register": "roundcube__register_updatedb", "changed_when": "roundcube__register_updatedb.stdout|d()", "when": "(roundcube__register_version.stdout|d() and (ansible_local.roundcube.version|d(\"0.0.0\")) is version_compare(roundcube__register_version.stdout, '>'))", "tags": ["role::roundcube:database"]}, "module_options": "php bin/updatedb.sh --package=roundcube --dir={{ roundcube__git_dest }}/SQL", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Post hooks", "module": "include_tasks", "index": 17, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/main.yml", "options": {"name": "Post hooks"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"roundcube/post_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set 'elastic' skin CSS files", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/configure_skins.yml", "options": {"name": "Set 'elastic' skin CSS files"}, "module_options": {"roundcube__fact_skin_elastic_css_files": [{"src": "styles/styles.less", "dest": "styles/styles.css"}, {"src": "styles/print.less", "dest": "styles/print.css"}, {"src": "styles/embed.less", "dest": "styles/embed.css"}]}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate CSS files for the 'elastic' skin", "module": "ansible.builtin.command", "index": 1, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/configure_skins.yml", "options": {"name": "Generate CSS files for the 'elastic' skin", "args": {"chdir": "{{ roundcube__git_dest }}/skins/{{ roundcube__skin_folder }}", "creates": "{{ item.dest }}"}, "loop": "{{ roundcube__fact_skin_elastic_css_files }}"}, "module_options": "lessc --compress {{ item.src }} {{ item.dest }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Adjust permissions of CSS files", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/roundcube/tasks/configure_skins.yml", "options": {"name": "Adjust permissions of CSS files", "loop": "{{ roundcube__fact_skin_elastic_css_files }}"}, "module_options": {"path": "{{ roundcube__git_dest }}/skins/{{ roundcube__skin_folder }}/{{ item.dest }}", "owner": "{{ roundcube__user }}", "group": "{{ roundcube__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/roundcube"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "phpipam", "defined_in": "testdata/scm_repo/roles/phpipam", "task_yamls": ["testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml", "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "testdata/scm_repo/roles/phpipam/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Install required packages for phpipam-scripts", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml", "options": {"name": "Install required packages for phpipam-scripts", "register": "phpipam__register_packages", "until": "phpipam__register_packages is succeeded"}, "module_options": {"name": "python-mysqldb", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone phpipam-scripts", "module": "ansible.builtin.git", "index": 1, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml", "options": {"name": "Clone phpipam-scripts", "register": "phpipam__register_scripts_src"}, "module_options": {"repo": "{{ phpipam__scripts_git_repo }}", "dest": "{{ phpipam__scripts_git_dest }}", "version": "{{ phpipam__scripts_git_version }}", "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install phpipam-scripts", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml", "options": {"name": "Install phpipam-scripts", "args": {"chdir": "{{ phpipam__scripts_git_dest }}"}, "when": "phpipam__register_scripts_src is defined and phpipam__register_scripts_src is changed"}, "module_options": "make install", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure phpipam-scripts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml", "options": {"name": "Configure phpipam-scripts"}, "module_options": {"src": "etc/dhcp/phpipam.conf.j2", "dest": "/etc/dhcp/phpipam.conf", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure phpipam-scripts-wrapper", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml", "options": {"name": "Configure phpipam-scripts-wrapper", "register": "phpipam__register_hosts_wrapper"}, "module_options": {"src": "usr/local/sbin/phpipam-hosts-wrapper.j2", "dest": "/usr/local/sbin/phpipam-hosts-wrapper", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create wrapper script entry in cron", "module": "ansible.builtin.cron", "index": 5, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml", "options": {"name": "Create wrapper script entry in cron"}, "module_options": {"name": "Regenerate DHCP hosts files", "cron_file": "phpipam-scripts", "minute": "{{ phpipam__scripts_cron_period }}", "job": "/usr/local/sbin/phpipam-hosts-wrapper", "user": "root", "state": "present"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create phpIPAM group", "module": "ansible.builtin.group", "index": 0, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Create phpIPAM group"}, "module_options": {"name": "{{ phpipam__group }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create phpIPAM user", "module": "ansible.builtin.user", "index": 1, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Create phpIPAM user"}, "module_options": {"name": "{{ phpipam__user }}", "group": "{{ phpipam__group }}", "home": "{{ phpipam__home }}", "shell": "/usr/sbin/nologin", "comment": "phpIPAM", "system": true, "state": "present", "createhome": false}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create phpIPAM source directory", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Create phpIPAM source directory"}, "module_options": {"path": "{{ phpipam__src }}", "state": "directory", "owner": "{{ phpipam__user }}", "group": "{{ phpipam__group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone phpIPAM source from deploy server", "module": "ansible.builtin.git", "index": 3, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Clone phpIPAM source from deploy server", "become": true, "become_user": "{{ phpipam__user }}", "register": "phpipam__register_source", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"repo": "{{ phpipam__git_repo }}", "dest": "{{ phpipam__git_dest }}", "version": "master", "bare": true, "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create phpIPAM checkout directory", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Create phpIPAM checkout directory", "with_items": ["{{ phpipam__www }}", "{{ phpipam__git_checkout }}"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "{{ phpipam__user }}", "group": "{{ phpipam__webserver_user }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare phpIPAM worktree", "module": "ansible.builtin.copy", "index": 5, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Prepare phpIPAM worktree"}, "module_options": {"content": "gitdir: {{ phpipam__git_dest }}", "dest": "{{ phpipam__git_checkout + \"/.git\" }}", "owner": "{{ phpipam__user }}", "group": "{{ phpipam__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get commit hash of target checkout", "module": "ansible.builtin.command", "index": 6, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Get commit hash of target checkout", "environment": {"GIT_WORK_TREE": "{{ phpipam__git_checkout }}"}, "args": {"chdir": "{{ phpipam__git_dest }}", "warn": false}, "become": true, "become_user": "{{ phpipam__user }}", "register": "phpipam__register_target_branch", "changed_when": "phpipam__register_target_branch.stdout != phpipam__register_source.before"}, "module_options": "git rev-parse {{ phpipam__git_version }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Checkout phpIPAM", "module": "ansible.builtin.command", "index": 7, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Checkout phpIPAM", "environment": {"GIT_WORK_TREE": "{{ phpipam__git_checkout }}"}, "args": {"chdir": "{{ phpipam__git_dest }}", "warn": false}, "become": true, "become_user": "{{ phpipam__user }}", "register": "phpipam__register_checkout", "when": "(phpipam__register_source.before is undefined or (phpipam__register_source.before is defined and phpipam__register_target_branch.stdout is defined and phpipam__register_source.before != phpipam__register_target_branch.stdout))"}, "module_options": "git checkout -f {{ phpipam__git_version }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if phpIPAM configuration exists", "module": "ansible.builtin.stat", "index": 8, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Check if phpIPAM configuration exists", "register": "phpipam__register_configuration"}, "module_options": {"path": "{{ phpipam__git_checkout + \"/config.php\" }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if MySQL server is installed", "module": "ansible.builtin.stat", "index": 9, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Check if MySQL server is installed", "register": "phpipam__register_mysql"}, "module_options": {"path": "/var/lib/mysql"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create phpIPAM database in local MySQL instance", "module": "mysql_db", "index": 10, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Create phpIPAM database in local MySQL instance", "when": "phpipam__database_host == 'localhost' and phpipam__register_mysql.stat.exists", "register": "phpipam__register_database_status"}, "module_options": {"name": "{{ phpipam__database_name }}", "state": "present"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import initial database schema", "module": "mysql_db", "index": 11, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Import initial database schema", "when": "(phpipam__database_host == 'localhost' and (phpipam__register_database_status is defined and phpipam__register_database_status is changed) and (phpipam__register_configuration is defined and not phpipam__register_configuration.stat.exists))"}, "module_options": {"name": "{{ phpipam__database_name }}", "state": "import", "target": "{{ phpipam__database_schema }}"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure phpIPAM", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Configure phpIPAM"}, "module_options": {"src": "srv/www/sites/config.php.j2", "dest": "{{ phpipam__git_checkout + \"/config.php\" }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create import directory", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/phpipam.yml", "options": {"name": "Create import directory"}, "module_options": {"path": "{{ phpipam__git_checkout + \"/site/admin/csvupload\" }}", "state": "directory", "owner": "{{ phpipam__user }}", "group": "{{ phpipam__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure phpIPAM", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/main.yml", "options": {"name": "Configure phpIPAM", "when": "phpipam__mode is defined and 'webui' in phpipam__mode"}, "module_options": "phpipam.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure phpIPAM scripts", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "testdata/scm_repo/roles/phpipam/tasks/main.yml", "options": {"name": "Configure phpIPAM scripts", "when": "phpipam__mode is defined and 'scripts' in phpipam__mode"}, "module_options": "phpipam-scripts.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/phpipam"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "elastic_co", "defined_in": "testdata/scm_repo/roles/elastic_co", "task_yamls": ["testdata/scm_repo/roles/elastic_co/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/elastic_co/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/elastic_co"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Elastic APT repository", "module": "ansible.builtin.apt_repository", "index": 1, "defined_in": "testdata/scm_repo/roles/elastic_co/tasks/main.yml", "options": {"name": "Configure Elastic APT repository", "with_items": "{{ elastic_co__repositories }}", "when": "item.enabled|d(True)"}, "module_options": {"update_cache": true, "repo": "{{ item.repo }}", "filename": "{{ item.filename | d(omit) }}", "state": "present"}, "fqcn": "ansible.builtin.apt_repository", "used_in": ["testdata/scm_repo/roles/elastic_co"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Elastic packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/elastic_co/tasks/main.yml", "options": {"name": "Install Elastic packages", "notify": ["Refresh host facts"], "register": "elastic_co__register_install", "until": "elastic_co__register_install is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (elastic_co__packages + elastic_co__group_packages + elastic_co__host_packages + elastic_co__dependent_packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/elastic_co"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/elastic_co/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/elastic_co"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Elastic local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/elastic_co/tasks/main.yml", "options": {"name": "Save Elastic local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/elastic_co.fact.j2", "dest": "/etc/ansible/facts.d/elastic_co.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/elastic_co"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/elastic_co/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/elastic_co"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "x2go_server", "defined_in": "testdata/scm_repo/roles/x2go_server", "task_yamls": ["testdata/scm_repo/roles/x2go_server/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Ensure specified packages are in there desired state", "module": "ansible.builtin.apt", "index": 0, "defined_in": "testdata/scm_repo/roles/x2go_server/tasks/main.yml", "options": {"name": "Ensure specified packages are in there desired state", "register": "x2go_server__register_packages", "until": "x2go_server__register_packages is succeeded", "when": "(not ansible_check_mode)"}, "module_options": {"name": "{{ q(\"flattened\", x2go_server__base_packages) }}", "state": "{{ \"latest\" if (x2go_server__deploy_state == \"present\") else \"absent\" }}", "install_recommends": false, "purge": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/x2go_server"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "foodsoft", "defined_in": "testdata/scm_repo/roles/foodsoft", "task_yamls": ["testdata/scm_repo/roles/foodsoft/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure specified packages are in there desired state", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Ensure specified packages are in there desired state", "register": "foodsoft__register_packages", "until": "foodsoft__register_packages is succeeded", "tags": ["role::foodsoft:pkgs"]}, "module_options": {"name": "{{ q(\"flattened\", foodsoft__base_packages) }}", "state": "{{ \"present\" if (foodsoft__deploy_state == \"present\") else \"absent\" }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Foodsoft system group", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Create Foodsoft system group"}, "module_options": {"name": "{{ foodsoft__group }}", "state": "{{ \"present\" if (foodsoft__deploy_state == \"present\") else \"absent\" }}", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Foodsoft system user", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Create Foodsoft system user"}, "module_options": {"name": "{{ foodsoft__user }}", "group": "{{ foodsoft__group }}", "home": "{{ foodsoft__home_path }}", "comment": "{{ foodsoft__gecos }}", "shell": "{{ foodsoft__shell }}", "state": "{{ \"present\" if (foodsoft__deploy_state == \"present\") else \"absent\" }}", "system": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone Foodsoft git repository", "module": "ansible.builtin.git", "index": 5, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Clone Foodsoft git repository", "become": true, "become_user": "{{ foodsoft__user }}", "register": "foodsoft__register_git", "when": "(foodsoft__deploy_state == \"present\")"}, "module_options": {"repo": "{{ foodsoft__git_repo }}", "dest": "{{ foodsoft__git_dest }}", "version": "{{ foodsoft__git_version }}", "update": "{{ foodsoft__git_update|bool }}"}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Foodsoft directory permissions", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Update Foodsoft directory permissions", "with_items": ["{{ foodsoft__home_path }}", "{{ foodsoft__git_dest }}"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "{{ foodsoft__user }}", "group": "{{ foodsoft__webserver_user }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Foodsoft dependencies via bundler", "module": "bundler", "index": 7, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Install Foodsoft dependencies via bundler", "register": "foodsoft__register_bundler", "until": "foodsoft__register_bundler is succeeded", "tags": ["role::foodsoft:gems"], "when": "foodsoft__bundler_exclude_groups|d()"}, "module_options": {"chdir": "{{ foodsoft__git_dest }}", "exclude_groups": "{{ foodsoft__bundler_exclude_groups }}", "extra_args": "--without development --deployment"}, "fqcn": "community.general.bundler", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure Foodsoft", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Configure Foodsoft", "tags": ["role::foodsoft:config"], "with_items": ["database.yml", "app_config.yml"]}, "module_options": {"src": "srv/www/foodsoft/app/config/{{ item }}.j2", "dest": "{{ foodsoft__git_dest }}/config/{{ item }}", "owner": "{{ foodsoft__user }}", "group": "{{ foodsoft__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate secret token", "module": "ansible.builtin.command", "index": 9, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Generate secret token", "args": {"chdir": "{{ foodsoft__git_dest }}", "creates": "{{ foodsoft__git_dest }}/config/initializers/secret_token.rb"}, "register": "foodsoft__register_secret_token", "tags": ["role::foodsoft:gen_token"]}, "module_options": "bundle exec rake secret", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check secret token", "module": "ansible.builtin.assert", "index": 10, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Check secret token", "when": "foodsoft__register_secret_token is changed", "tags": ["role::foodsoft:gen_token"]}, "module_options": {"that": ["foodsoft__register_secret_token.stdout|length > 120", "foodsoft__register_secret_token.stdout|length < 500"]}, "fqcn": "ansible.builtin.assert", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure secret token for Foodsoft", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Configure secret token for Foodsoft", "tags": ["role::foodsoft:gen_token"], "when": "foodsoft__register_secret_token is changed"}, "module_options": {"src": "srv/www/foodsoft/app/config/initializers/secret_token.rb.j2", "dest": "{{ foodsoft__git_dest }}/config/initializers/secret_token.rb", "owner": "{{ foodsoft__user }}", "group": "{{ foodsoft__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create database schema and load defaults", "module": "ansible.builtin.command", "index": 12, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Create database schema and load defaults", "args": {"chdir": "{{ foodsoft__git_dest }}"}, "when": "(not (ansible_local.foodsoft[foodsoft__database + \"_initialized\"]|bool if (ansible_local|d() and ansible_local.foodsoft|d() and ansible_local.foodsoft[foodsoft__database + \"_initialized\"]|d()) else False))"}, "module_options": "bundle exec rake db:setup", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory is present", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory is present", "when": "(foodsoft__deploy_state == \"present\")"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Foodsoft local facts", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Save Foodsoft local facts", "notify": ["Refresh host facts"], "when": "(foodsoft__deploy_state == \"present\")", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/foodsoft.fact.j2", "dest": "/etc/ansible/facts.d/foodsoft.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather facts if they were modified", "module": "ansible.builtin.meta", "index": 15, "defined_in": "testdata/scm_repo/roles/foodsoft/tasks/main.yml", "options": {"name": "Gather facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/foodsoft"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "authorized_keys", "defined_in": "testdata/scm_repo/roles/authorized_keys", "task_yamls": ["testdata/scm_repo/roles/authorized_keys/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/authorized_keys/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/authorized_keys"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/authorized_keys/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/authorized_keys"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/authorized_keys/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/authorized_keys"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that SSH identity datastore exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/authorized_keys/tasks/main.yml", "options": {"name": "Ensure that SSH identity datastore exists", "when": "authorized_keys__enabled|bool"}, "module_options": {"path": "{{ authorized_keys__path }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/authorized_keys"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the required groups exist", "module": "ansible.builtin.group", "index": 4, "defined_in": "testdata/scm_repo/roles/authorized_keys/tasks/main.yml", "options": {"name": "Ensure the required groups exist", "loop": "{{ lookup(\"template\", \"lookup/authorized_keys__identities.j2\") | from_yaml }}", "loop_control": {"label": "{{ {\"identity\": item.identity, \"group\": item.group} }}"}, "when": "authorized_keys__enabled|bool and item.group|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and item.file_state|d('present') not in [ 'absent', 'ignore', 'init' ]"}, "module_options": {"name": "{{ item.group }}", "gid": "{{ item.gid | d(omit) }}", "system": "{{ item.system | bool }}", "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/authorized_keys"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of all groups", "module": "ansible.builtin.getent", "index": 5, "defined_in": "testdata/scm_repo/roles/authorized_keys/tasks/main.yml", "options": {"name": "Get list of all groups", "when": "authorized_keys__enabled|bool"}, "module_options": {"database": "group", "split": ":"}, "fqcn": "ansible.builtin.getent", "used_in": ["testdata/scm_repo/roles/authorized_keys"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of all users", "module": "ansible.builtin.getent", "index": 6, "defined_in": "testdata/scm_repo/roles/authorized_keys/tasks/main.yml", "options": {"name": "Get list of all users", "when": "authorized_keys__enabled|bool"}, "module_options": {"database": "passwd", "split": ":"}, "fqcn": "ansible.builtin.getent", "used_in": ["testdata/scm_repo/roles/authorized_keys"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure authorized keys for users", "module": "ansible.posix.authorized_key", "index": 7, "defined_in": "testdata/scm_repo/roles/authorized_keys/tasks/main.yml", "options": {"name": "Configure authorized keys for users", "loop": "{{ lookup(\"template\", \"lookup/authorized_keys__identities.j2\") | from_yaml }}", "loop_control": {"label": "{{ {\"identity\": item.identity, \"state\": (item.state|d(\"present\") if (item.user in getent_passwd.keys() and (item.home|d())|bool) else (\"no user\" if (item.user not in getent_passwd.keys() and (item.home|d())|bool) else item.state|d(\"present\"))), \"user\": item.user, \"path\": item.path|d(\"~\" + item.user + \"/.ssh/authorized_keys\")} }}"}, "when": "(authorized_keys__enabled|bool and item.file_state|d('present') != 'absent' and ((item.home|d())|bool and item.user in getent_passwd.keys()) or not (item.home|d())|bool)"}, "module_options": {"key": "{{ item.key }}", "user": "{{ item.user if (item.home|d())|bool else \"root\" }}", "manage_dir": "{{ item.manage_dir }}", "state": "{{ item.state       | d(\"present\") }}", "key_options": "{{ item.key_options | d(omit) }}", "comment": "{{ item.comment     | d(omit) }}", "path": "{{ item.path        | d(omit) }}", "exclusive": "{{ item.exclusive   | d(omit) }}"}, "fqcn": "ansible.posix.authorized_key", "used_in": ["testdata/scm_repo/roles/authorized_keys"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Enforce state of authorized_keys user files", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/authorized_keys/tasks/main.yml", "options": {"name": "Enforce state of authorized_keys user files", "loop": "{{ lookup(\"template\", \"lookup/authorized_keys__identities.j2\") | from_yaml }}", "loop_control": {"label": "{{ {\"identity\": item.identity, \"state\": item.file_state|d(\"present\"), \"group\": (item.group if (item.group|d() and item.group in (getent_group|d({})).keys()) else (getent_passwd[item.owner|d(\"root\")][2]|d({}) if (item.owner|d(\"root\") in getent_passwd|d({})) else \"root\")), \"path\": item.path} }}"}, "when": "authorized_keys__enabled|bool and item.path|d() and not item.manage_dir|bool and item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and not ansible_check_mode"}, "module_options": {"path": "{{ item.path }}", "owner": "{{ item.owner if (item.owner|d() and item.owner in getent_passwd.keys()) else \"root\" }}", "group": "{{ (item.group if (item.group|d() and item.group in (getent_group|d({})).keys()) else (getent_passwd[item.owner][2]|d({}) if (item.owner in getent_passwd|d({})) else omit)) }}", "mode": "{{ item.mode }}", "state": "{{ \"absent\" if (item.file_state|d(\"present\") == \"absent\") else omit }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/authorized_keys"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/authorized_keys/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/authorized_keys"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save authorized_keys local facts", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/authorized_keys/tasks/main.yml", "options": {"name": "Save authorized_keys local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/authorized_keys.fact.j2", "dest": "/etc/ansible/facts.d/authorized_keys.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/authorized_keys"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 11, "defined_in": "testdata/scm_repo/roles/authorized_keys/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/authorized_keys"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "fail2ban", "defined_in": "testdata/scm_repo/roles/fail2ban", "task_yamls": ["testdata/scm_repo/roles/fail2ban/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.apt", "index": 2, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Install required packages", "register": "fail2ban__register_packages", "until": "fail2ban__register_packages is succeeded"}, "module_options": {"name": ["fail2ban", "whois"], "state": "present", "install_recommends": false}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original fail2ban configuration", "module": "dpkg_divert", "index": 3, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Divert original fail2ban configuration"}, "module_options": {"path": "/etc/fail2ban/jail.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Copy upstream jail configuration", "module": "ansible.builtin.copy", "index": 4, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Copy upstream jail configuration", "notify": ["Restart fail2ban"]}, "module_options": {"src": "/etc/fail2ban/jail.conf.dpkg-divert", "dest": "/etc/fail2ban/jail.conf", "remote_src": true, "force": false, "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable default upstream jail", "module": "ansible.builtin.lineinfile", "index": 5, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Disable default upstream jail", "notify": ["Reload fail2ban jails"]}, "module_options": {"dest": "/etc/fail2ban/jail.conf", "regexp": "^(enabled  = )true", "line": "\\1false", "backrefs": true, "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom fail2ban rule files", "module": "ansible.builtin.copy", "index": 6, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Install custom fail2ban rule files", "notify": ["Reload fail2ban jails"]}, "module_options": {"src": "etc/fail2ban/", "dest": "/etc/fail2ban/", "owner": "root", "group": "root", "mode": "u=rwX,g=rX,o=rX"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom fail2ban iptables action files", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Install custom fail2ban iptables action files", "with_items": ["iptables-xt_recent-echo-reject", "iptables-xt_recent-echo"]}, "module_options": {"src": "etc/fail2ban/action.d/{{ item }}.local.j2", "dest": "/etc/fail2ban/action.d/{{ item }}.local", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure custom fail2ban actions", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Configure custom fail2ban actions", "with_items": "{{ fail2ban_actions }}", "notify": ["Restart fail2ban"], "when": "((item.name is defined and item.name) and (item.ban is defined and item.ban) and (item.state | d('present') not in ['absent']))"}, "module_options": {"src": "{{ lookup(\"debops.debops.template_src\", \"etc/fail2ban/action.d/action.local.j2\") }}", "dest": "/etc/fail2ban/action.d/{{ item.filename | d(item.name) }}.local", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove custom fail2ban actions if requested", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Remove custom fail2ban actions if requested", "with_items": "{{ fail2ban_actions }}", "notify": ["Restart fail2ban"], "when": "((item.name is defined and item.name) and (item.state | d('present') in ['absent']))"}, "module_options": {"path": "/etc/fail2ban/action.d/{{ item.filename | d(item.name) }}.local", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure custom fail2ban filters", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Configure custom fail2ban filters", "with_items": "{{ fail2ban_filters }}", "notify": ["Restart fail2ban"], "when": "((item.name is defined and item.name) and (item.failregex is defined and item.failregex) and (item.state | d('present') not in ['absent']))"}, "module_options": {"src": "{{ lookup(\"debops.debops.template_src\", \"etc/fail2ban/filter.d/filter.local.j2\") }}", "dest": "/etc/fail2ban/filter.d/{{ item.filename | d(item.name) }}.local", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove custom fail2ban filters if requested", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Remove custom fail2ban filters if requested", "with_items": "{{ fail2ban_filters }}", "notify": ["Restart fail2ban"], "when": "((item.name is defined and item.name) and (item.state | d('present') in ['absent']))"}, "module_options": {"path": "/etc/fail2ban/filter.d/{{ item.filename | d(item.name) }}.local", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure fail2ban", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Configure fail2ban", "notify": ["Restart fail2ban"]}, "module_options": {"src": "{{ lookup(\"debops.debops.template_src\", \"etc/fail2ban/fail2ban.local.j2\") }}", "dest": "/etc/fail2ban/fail2ban.local", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create jail.local.d directory", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Create jail.local.d directory"}, "module_options": {"path": "/etc/fail2ban/jail.local.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure jail default variables", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Configure jail default variables"}, "module_options": {"src": "{{ lookup(\"debops.debops.template_src\", \"etc/fail2ban/jail.local.d/default.local.j2\") }}", "dest": "/etc/fail2ban/jail.local.d/00_default.local", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove fail2ban jails if requested", "module": "ansible.builtin.file", "index": 15, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Remove fail2ban jails if requested", "with_flattened": ["{{ fail2ban_jails }}", "{{ fail2ban_group_jails }}", "{{ fail2ban_host_jails }}", "{{ fail2ban_dependent_jails }}"], "when": "((item.name is defined and item.name) and (item.delete is defined and item.delete))"}, "module_options": {"path": "/etc/fail2ban/jail.local.d/{{ item.filename | default(item.name) }}.local", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure fail2ban jails", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Configure fail2ban jails", "with_flattened": ["{{ fail2ban_jails }}", "{{ fail2ban_group_jails }}", "{{ fail2ban_host_jails }}", "{{ fail2ban_dependent_jails }}"], "when": "((item.name is defined and item.name) and (item.delete is undefined or not item.delete))"}, "module_options": {"src": "{{ lookup(\"debops.debops.template_src\", \"etc/fail2ban/jail.local.d/jail.local.j2\") }}", "dest": "/etc/fail2ban/jail.local.d/{{ item.filename | default(item.name) }}.local", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Assemble /etc/fail2ban/jail.local", "module": "ansible.builtin.assemble", "index": 17, "defined_in": "testdata/scm_repo/roles/fail2ban/tasks/main.yml", "options": {"name": "Assemble /etc/fail2ban/jail.local", "notify": ["Reload fail2ban jails"]}, "module_options": {"src": "/etc/fail2ban/jail.local.d", "dest": "/etc/fail2ban/jail.local", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.assemble", "used_in": ["testdata/scm_repo/roles/fail2ban"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "tzdata", "defined_in": "testdata/scm_repo/roles/tzdata", "task_yamls": ["testdata/scm_repo/roles/tzdata/tasks/legacy.yml", "testdata/scm_repo/roles/tzdata/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Configure tzdata area in debconf", "module": "ansible.builtin.debconf", "index": 0, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/legacy.yml", "options": {"name": "Configure tzdata area in debconf", "register": "tzdata__register_debconf_set_area", "notify": ["Refresh host facts"], "when": "tzdata__enabled|bool"}, "module_options": {"name": "tzdata", "question": "tzdata/Areas", "vtype": "select", "value": "{{ tzdata__timezone.split(\"/\")[0] }}"}, "fqcn": "ansible.builtin.debconf", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure tzdata zone in debconf", "module": "ansible.builtin.debconf", "index": 1, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/legacy.yml", "options": {"name": "Configure tzdata zone in debconf", "register": "tzdata__register_debconf_set_zone", "notify": ["Refresh host facts"], "when": "tzdata__enabled|bool"}, "module_options": {"name": "tzdata", "question": "tzdata/Zones/{{ tzdata__timezone.split(\"/\")[0] }}", "vtype": "select", "value": "{{ tzdata__timezone.split(\"/\")[1] }}"}, "fqcn": "ansible.builtin.debconf", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure timezone in /etc/timezone", "module": "ansible.builtin.copy", "index": 2, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/legacy.yml", "options": {"name": "Configure timezone in /etc/timezone", "register": "tzdata__register_etc_timezone", "notify": ["Refresh host facts"], "when": "tzdata__enabled|bool"}, "module_options": {"content": "{{ tzdata__timezone }}", "dest": "/etc/timezone", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if /etc/localtime is a symlink", "module": "ansible.builtin.stat", "index": 3, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/legacy.yml", "options": {"name": "Check if /etc/localtime is a symlink", "register": "tzdata__register_etc_localtime", "when": "tzdata__enabled|bool"}, "module_options": {"path": "/etc/localtime"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink correct timezone as /etc/localtime", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/legacy.yml", "options": {"name": "Symlink correct timezone as /etc/localtime", "notify": ["Refresh host facts"], "when": "(tzdata__enabled|bool and tzdata__register_etc_timezone is changed and tzdata__register_etc_localtime.stat.islnk|bool)"}, "module_options": {"path": "/etc/localtime", "src": "/usr/share/zoneinfo/{{ tzdata__timezone }}", "state": "link", "mode": "0644"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reconfigure tzdata", "module": "ansible.builtin.command", "index": 5, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/legacy.yml", "options": {"name": "Reconfigure tzdata", "when": "(tzdata__enabled|bool and (tzdata__register_debconf_set_area is changed or tzdata__register_debconf_set_zone is changed or tzdata__register_etc_timezone is changed))"}, "module_options": "dpkg-reconfigure --frontend noninteractive tzdata", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/main.yml", "options": {"name": "Install required packages", "register": "tzdata__register_packages", "until": "tzdata__register_packages is succeeded", "when": "tzdata__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", tzdata__base_packages + tzdata__packages) }}", "state": "{{ \"present\" if ((ansible_local.tzdata.configured|d())|bool) else \"latest\" }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists", "when": "tzdata__enabled|bool and not ansible_local|d()"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save tzdata local facts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/main.yml", "options": {"name": "Save tzdata local facts", "notify": ["Refresh host facts"], "when": "tzdata__enabled|bool", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/tzdata.fact.j2", "dest": "/etc/ansible/facts.d/tzdata.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 4, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure the time zone", "module": "community.general.timezone", "index": 5, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/main.yml", "options": {"name": "Configure the time zone", "register": "tzdata__register_timezone", "notify": ["Refresh host facts"], "when": "(tzdata__enabled|bool and ansible_service_mgr == \"systemd\" and (ansible_local.tzdata.timezone|d('Etc/UTC')) != tzdata__timezone)"}, "module_options": {"name": "{{ tzdata__timezone }}"}, "fqcn": "community.general.timezone", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Execute legacy timezone tasks", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/main.yml", "options": {"name": "Execute legacy timezone tasks", "when": "(tzdata__enabled|bool and ansible_service_mgr != \"systemd\" and (ansible_local.tzdata.timezone|d('Etc/UTC')) != tzdata__timezone)"}, "module_options": "legacy.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if time zone was modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/main.yml", "options": {"name": "Update Ansible facts if time zone was modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of currently running systemd services", "module": "ansible.builtin.shell", "index": 8, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/main.yml", "options": {"name": "Get list of currently running systemd services", "args": {"executable": "bash"}, "register": "tzdata__register_services", "when": "(tzdata__enabled|bool and ansible_service_mgr == 'systemd' and tzdata__register_timezone is changed)"}, "module_options": "set -o nounset -o pipefail -o errexit && systemctl list-units --state active | awk 'match($1, /\\./) {print $1}'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Request restart of services affected by time zone modification", "module": "ansible.builtin.systemd", "index": 9, "defined_in": "testdata/scm_repo/roles/tzdata/tasks/main.yml", "options": {"name": "Request restart of services affected by time zone modification", "loop": "{{ q(\"flattened\", (tzdata__restart_default_services + tzdata__restart_services)) }}", "when": "(tzdata__enabled|bool and ansible_service_mgr == 'systemd' and tzdata__register_timezone is changed and item in tzdata__register_services.stdout_lines)"}, "module_options": {"name": "{{ item }}", "state": "restarted", "no_block": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/tzdata"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "resources", "defined_in": "testdata/scm_repo/roles/resources", "task_yamls": ["testdata/scm_repo/roles/resources/tasks/shell_commands.yml", "testdata/scm_repo/roles/resources/tasks/main.yml", "testdata/scm_repo/roles/resources/tasks/resources/pre_main.yml", "testdata/scm_repo/roles/resources/tasks/resources/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "{{ item.name }}", "module": "ansible.builtin.shell", "index": 0, "defined_in": "testdata/scm_repo/roles/resources/tasks/shell_commands.yml", "options": {"name": "{{ item.name }}", "args": {"chdir": "{{ item.chdir      | d(omit) }}", "creates": "{{ item.creates    | d(omit) }}", "removes": "{{ item.removes    | d(omit) }}", "executable": "{{ item.executable | d(\"bash\") }}"}, "when": "item.name|d() and item.state not in [ 'absent', 'ignore' ]", "no_log": "{{ debops__no_log | d(item.no_log) | d(False) }}", "tags": ["role::resources:commands"]}, "module_options": "{{ item.script | d(item.shell | d(item.command)) }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Pre hooks", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Pre hooks"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"resources/pre_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that template directories exist", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Ensure that template directories exist", "with_filetree": "{{ (resources__host_templates + resources__group_templates + resources__templates) | flatten }}", "when": "item.state == 'directory'"}, "module_options": {"path": "/{{ item.path }}", "mode": "{{ item.mode }}", "state": "directory"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate custom templates", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Generate custom templates", "with_filetree": "{{ (resources__host_templates + resources__group_templates + resources__templates) | flatten }}", "when": "item.state == 'file'"}, "module_options": {"src": "{{ item.src }}", "dest": "/{{ item.path }}", "mode": "{{ item.mode }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Recreate custom symlinks", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Recreate custom symlinks", "with_filetree": "{{ (resources__host_templates + resources__group_templates + resources__templates) | flatten }}", "when": "item.state == 'link'"}, "module_options": {"src": "{{ item.src }}", "dest": "/{{ item.path }}", "mode": "{{ item.mode }}", "state": "link", "force": true}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage paths on remote hosts", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Manage paths on remote hosts", "with_flattened": ["{{ resources__paths }}", "{{ resources__group_paths }}", "{{ resources__host_paths }}"], "when": "(resources__enabled|bool and ((item.path|d() or item.dest|d() or item.name|d()) or item))", "tags": ["role::resources:paths"]}, "module_options": {"path": "{{ (item.path   | d(item.dest | d(item.name))) | d(item) }}", "state": "{{ item.state   | d(\"directory\") }}", "owner": "{{ item.owner   | d(omit) }}", "group": "{{ item.group   | d(omit) }}", "mode": "{{ item.mode    | d(omit) }}", "selevel": "{{ item.selevel | d(omit) }}", "serole": "{{ item.serole  | d(omit) }}", "setype": "{{ item.setype  | d(omit) }}", "seuser": "{{ item.seuser  | d(omit) }}", "follow": "{{ item.follow  | d(omit) }}", "force": "{{ item.force   | d(omit) }}", "src": "{{ item.src     | d(omit) }}", "recurse": "{{ item.recurse | d(omit) }}", "attributes": "{{ item.attributes               | d(omit) }}", "access_time": "{{ item.access_time              | d(omit) }}", "access_time_format": "{{ item.access_time_format       | d(resources__time_format) }}", "modification_time": "{{ item.modification_time        | d(omit) }}", "modification_time_format": "{{ item.modification_time_format | d(resources__time_format) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that parent directories exist", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Ensure that parent directories exist", "when": "(resources__enabled|bool and (item.parent_dirs_create|d(resources__parent_dirs_create) | bool) and item.state|d(\"present\") != 'absent')", "with_flattened": ["{{ resources__urls }}", "{{ resources__group_urls }}", "{{ resources__host_urls }}", "{{ resources__archives }}", "{{ resources__group_archives }}", "{{ resources__host_archives }}", "{{ resources__files }}", "{{ resources__group_files }}", "{{ resources__host_files }}"], "tags": ["role::resources:urls", "role::resources:archives", "role::resources:files"]}, "module_options": {"path": "{{ (item.dest | d(item.name | d(item.path))) | dirname }}", "state": "directory", "recurse": "{{ item.parent_dirs_recurse | d(resources__parent_dirs_recurse) }}", "owner": "{{ item.parent_dirs_owner   | d(resources__parent_dirs_owner) }}", "group": "{{ item.parent_dirs_group   | d(resources__parent_dirs_group) }}", "mode": "{{ item.parent_dirs_mode    | d(resources__parent_dirs_mode) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage git repositories", "module": "ansible.builtin.git", "index": 8, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Manage git repositories", "become": true, "become_user": "{{ item.owner            | d(\"root\") }}", "with_flattened": ["{{ resources__repositories }}", "{{ resources__group_repositories }}", "{{ resources__host_repositories }}"], "when": "(resources__enabled|bool and (item.repo|d() or item.url|d() or item.src|d()) and (item.dest|d() or item.name|d() or item.path|d()))", "tags": ["role::resources:repositories"]}, "module_options": {"repo": "{{ item.repo             | d(item.url | d(item.src)) }}", "dest": "{{ item.dest             | d(item.name | d(item.path)) }}", "accept_hostkey": "{{ item.accept_hostkey   | d(omit) }}", "bare": "{{ item.bare             | d(omit) }}", "clone": "{{ item.clone            | d(omit) }}", "depth": "{{ item.depth            | d(omit) }}", "executable": "{{ item.executable       | d(omit) }}", "force": "{{ item.force            | d(omit) }}", "key_file": "{{ item.key_file         | d(omit) }}", "recursive": "{{ item.recursive        | d(omit) }}", "reference": "{{ item.reference        | d(omit) }}", "refspec": "{{ item.refspec          | d(omit) }}", "remote": "{{ item.remote           | d(omit) }}", "ssh_opts": "{{ item.ssh_opts         | d(omit) }}", "track_submodules": "{{ item.track_submodules | d(omit) }}", "umask": "{{ item.umask            | d(omit) }}", "update": "{{ item[\"_update\"]       | d(omit) }}", "verify_commit": "{{ item.verify_commit    | d(omit) }}", "version": "{{ item.version          | d(omit) }}"}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download online resources to remote hosts", "module": "ansible.builtin.get_url", "index": 9, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Download online resources to remote hosts", "with_flattened": ["{{ resources__urls }}", "{{ resources__group_urls }}", "{{ resources__host_urls }}"], "when": "(resources__enabled|bool and (item.url|d() or item.src|d()) and (item.dest|d() or item.name|d() or item.path|d()))", "no_log": "{{ debops__no_log | d(True if item.url_password|d() else omit) }}", "tags": ["role::resources:urls"]}, "module_options": {"url": "{{ item.url              | d(item.src) }}", "dest": "{{ item.dest             | d(item.name | d(item.path)) }}", "owner": "{{ item.owner            | d(omit) }}", "group": "{{ item.group            | d(omit) }}", "mode": "{{ item.mode             | d(omit) }}", "checksum": "{{ item.checksum         | d(omit) }}", "force": "{{ item.force            | d(omit) }}", "force_basic_auth": "{{ item.force_basic_auth | d(omit) }}", "headers": "{{ item.headers          | d(omit) }}", "sha256sum": "{{ item.sha256sum        | d(omit) }}", "timeout": "{{ item.timeout          | d(omit) }}", "url_password": "{{ item.url_password     | d(omit) }}", "url_username": "{{ item.url_username     | d(omit) }}", "use_proxy": "{{ item.use_proxy        | d(omit) }}", "validate_certs": "{{ item.validate_certs   | d(omit) }}"}, "fqcn": "ansible.builtin.get_url", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack archives to remote hosts", "module": "ansible.builtin.unarchive", "index": 10, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Unpack archives to remote hosts", "with_flattened": ["{{ resources__archives }}", "{{ resources__group_archives }}", "{{ resources__host_archives }}"], "when": "(resources__enabled|bool and item.src|d() and (item.dest|d() or item.name|d() or item.path|d()))", "tags": ["role::resources:archives"]}, "module_options": {"src": "{{ item.src }}", "dest": "{{ item.dest       | d(item.name | d(item.path)) }}", "owner": "{{ item.owner      | d(omit) }}", "group": "{{ item.group      | d(omit) }}", "mode": "{{ item.mode       | d(omit) }}", "selevel": "{{ item.selevel    | d(omit) }}", "serole": "{{ item.serole     | d(omit) }}", "setype": "{{ item.setype     | d(omit) }}", "seuser": "{{ item.seuser     | d(omit) }}", "creates": "{{ item.creates    | d(omit) }}", "exclude": "{{ item.exclude    | d(omit) }}", "keep_newer": "{{ item.keep_newer | d(omit) }}", "extra_opts": "{{ item.extra_opts | d(omit) }}", "attributes": "{{ item.attributes | d(omit) }}", "list_files": "{{ item.list_files | d(omit) }}", "remote_src": "{{ item.remote_src | d(omit) }}", "unsafe_writes": "{{ item.unsafe_writes | d(omit) }}", "validate_certs": "{{ item.validate_certs | d(omit) }}"}, "fqcn": "ansible.builtin.unarchive", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Delete files on remote hosts", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Delete files on remote hosts", "with_flattened": ["{{ resources__files }}", "{{ resources__group_files }}", "{{ resources__host_files }}"], "when": "(resources__enabled|bool and (item.dest|d() or item.path|d() or item.name|d()) and (item.state|d('present') == 'absent'))", "tags": ["role::resources:files"]}, "module_options": {"path": "{{ item.dest | d(item.path | d(item.name)) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy files to remote hosts", "module": "ansible.builtin.copy", "index": 12, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Copy files to remote hosts", "with_flattened": ["{{ resources__files }}", "{{ resources__group_files }}", "{{ resources__host_files }}"], "when": "(resources__enabled|bool and (item.src|d() or item.content is defined) and (item.dest|d() or item.path|d() or item.name|d()) and (item.state|d('present') != 'absent'))", "tags": ["role::resources:files"]}, "module_options": {"dest": "{{ item.dest     | d(item.path | d(item.name)) }}", "src": "{{ item.src      | d(omit) }}", "content": "{{ item.content  | d(omit) }}", "owner": "{{ item.owner    | d(omit) }}", "group": "{{ item.group    | d(omit) }}", "mode": "{{ item.mode     | d(omit) }}", "selevel": "{{ item.selevel  | d(omit) }}", "serole": "{{ item.serole   | d(omit) }}", "setype": "{{ item.setype   | d(omit) }}", "seuser": "{{ item.seuser   | d(omit) }}", "follow": "{{ item.follow   | d(omit) }}", "force": "{{ item.force    | d(omit) }}", "backup": "{{ item.backup   | d(omit) }}", "validate": "{{ item.validate | d(omit) }}", "remote_src": "{{ item.remote_src | d(omit) }}", "directory_mode": "{{ item.directory_mode | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set ACLs on remote hosts", "module": "ansible.posix.acl", "index": 13, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Set ACLs on remote hosts", "loop": "{{ (lookup(\"flattened\", resources__paths + resources__group_paths + resources__host_paths + resources__repositories + resources__group_repositories + resources__host_repositories + resources__urls + resources__group_urls + resources__host_urls + resources__archives + resources__group_archives + resources__host_archives + resources__files + resources__group_files + resources__host_files, wantlist=True)) | selectattr(\"acl\", \"defined\") | list | subelements(\"acl\") }}", "loop_control": {"label": "{{ {\"name\": (item.0.name | d(item.0.dest) | d(item.0.path)), \"acl\": item.1} }}"}, "when": "item.0.state|d('present') != 'absent'", "tags": ["role::resources:acl"]}, "module_options": {"path": "{{ item.1.path        | d(item.0.name) | d(item.0.dest) | d(item.0.path) }}", "default": "{{ item.1.default     | d(omit) }}", "entity": "{{ item.1.entity      | d(omit) }}", "entry": "{{ item.1.entry       | d(omit) }}", "etype": "{{ item.1.etype       | d(omit) }}", "permissions": "{{ item.1.permissions | d(omit) }}", "follow": "{{ item.1.follow      | d(omit) }}", "recursive": "{{ item.1.recursive   | d(omit) }}", "state": "{{ item.1.state       | d(\"present\") }}"}, "fqcn": "ansible.posix.acl", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage delayed paths on remote hosts", "module": "ansible.builtin.file", "index": 14, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Manage delayed paths on remote hosts", "with_flattened": ["{{ resources__delayed_paths }}", "{{ resources__group_delayed_paths }}", "{{ resources__host_delayed_paths }}"], "when": "(resources__enabled|bool and ((item.path|d() or item.dest|d() or item.name|d()) or item))", "tags": ["role::resources:paths"]}, "module_options": {"path": "{{ (item.path   | d(item.dest | d(item.name))) | d(item) }}", "state": "{{ item.state   | d(\"directory\") }}", "owner": "{{ item.owner   | d(omit) }}", "group": "{{ item.group   | d(omit) }}", "mode": "{{ item.mode    | d(omit) }}", "selevel": "{{ item.selevel | d(omit) }}", "serole": "{{ item.serole  | d(omit) }}", "setype": "{{ item.setype  | d(omit) }}", "seuser": "{{ item.seuser  | d(omit) }}", "follow": "{{ item.follow  | d(omit) }}", "force": "{{ item.force   | d(omit) }}", "src": "{{ item.src     | d(omit) }}", "recurse": "{{ item.recurse | d(omit) }}", "attributes": "{{ item.attributes               | d(omit) }}", "access_time": "{{ item.access_time              | d(omit) }}", "access_time_format": "{{ item.access_time_format       | d(resources__time_format) }}", "modification_time": "{{ item.modification_time        | d(omit) }}", "modification_time_format": "{{ item.modification_time_format | d(resources__time_format) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set custom file capabilities", "module": "capabilities", "index": 15, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Set custom file capabilities", "with_flattened": ["{{ resources__combined_file_capabilities }}"], "when": "resources__enabled|bool", "tags": ["role::resources:capabilities"]}, "module_options": {"path": "{{ item.path  | d(item.name) }}", "capability": "{{ item.capability }}", "state": "{{ item.state | d(\"present\") }}"}, "fqcn": "community.general.capabilities", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Execute shell commands", "module": "include_tasks", "index": 16, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Execute shell commands", "loop": "{{ q(\"flattened\", resources__combined_commands) | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name} }}"}, "when": "resources__enabled|bool and item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ]", "no_log": "{{ debops__no_log | d(item.no_log) | d(False) }}", "tags": ["role::resources:commands"]}, "module_options": "shell_commands.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Post hooks", "module": "ansible.builtin.include_tasks", "index": 17, "defined_in": "testdata/scm_repo/roles/resources/tasks/main.yml", "options": {"name": "Post hooks"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"resources/post_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/resources"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "sysfs", "defined_in": "testdata/scm_repo/roles/sysfs", "task_yamls": ["testdata/scm_repo/roles/sysfs/tasks/main_env.yml", "testdata/scm_repo/roles/sysfs/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare sysfs environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main_env.yml", "options": {"name": "Prepare sysfs environment", "when": "sysfs__enabled|bool"}, "module_options": {"sysfs__secret__directories": "{{ lookup(\"template\", \"lookup/sysfs__secret__directories.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main.yml", "options": {"name": "Install required packages", "register": "sysfs__register_packages", "until": "sysfs__register_packages is succeeded", "when": "sysfs__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", (sysfs__base_packages + sysfs__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if the dependent configuration exists", "module": "ansible.builtin.stat", "index": 4, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main.yml", "options": {"name": "Check if the dependent configuration exists", "register": "sysfs__register_dependent_attributes_file", "become": false, "delegate_to": "localhost", "when": "(sysfs__enabled|bool and ansible_local|d() and ansible_local.sysfs|d() and (ansible_local.sysfs.configured|d())|bool)"}, "module_options": {"path": "{{ secret + \"/sysfs/dependent_config/\" + inventory_hostname + \"/attributes.json\" }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Load the dependent configuration from Ansible Controller", "module": "ansible.builtin.slurp", "index": 5, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main.yml", "options": {"name": "Load the dependent configuration from Ansible Controller", "register": "sysfs__register_dependent_attributes", "become": false, "delegate_to": "localhost", "when": "(sysfs__enabled|bool and ansible_local|d() and ansible_local.sysfs|d() and (ansible_local.sysfs.configured|d())|bool and sysfs__register_dependent_attributes_file.stat.exists|bool)"}, "module_options": {"src": "{{ secret + \"/sysfs/dependent_config/\" + inventory_hostname + \"/attributes.json\" }}"}, "fqcn": "ansible.builtin.slurp", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove sysfs configuration files if requested", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main.yml", "options": {"name": "Remove sysfs configuration files if requested", "with_items": "{{ sysfs__combined_attributes | debops.debops.parse_kv_items }}", "notify": ["Restart sysfsutils"], "when": "(sysfs__enabled|bool and item.name|d() and item.state|d('present') == 'absent')"}, "module_options": {"path": "/etc/sysfs.d/{{ item.filename | d(item.name | replace(\"/\",\"_\")) }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate sysfs configuration files", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main.yml", "options": {"name": "Generate sysfs configuration files", "with_items": "{{ sysfs__combined_attributes | debops.debops.parse_kv_items }}", "notify": ["Restart sysfsutils"], "when": "(sysfs__enabled|bool and item.name|d() and item.state|d('present') not in [ 'defined', 'absent' ])"}, "module_options": {"src": "etc/sysfs.d/attribute.conf.j2", "dest": "/etc/sysfs.d/{{ item.filename | d(item.name | replace(\"/\",\"_\")) }}.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save sysfs local facts", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main.yml", "options": {"name": "Save sysfs local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/sysfs.fact.j2", "dest": "/etc/ansible/facts.d/sysfs.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 10, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save dependent configuration on Ansible Controller", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/sysfs/tasks/main.yml", "options": {"name": "Save dependent configuration on Ansible Controller", "become": false, "delegate_to": "localhost", "when": "sysfs__enabled|bool"}, "module_options": {"src": "secret/sysfs/dependent_config/inventory_hostname/attributes.json.j2", "dest": "{{ secret + \"/sysfs/dependent_config/\" + inventory_hostname + \"/attributes.json\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sysfs"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/service/minio.yml", "testdata/scm_repo/playbooks/service/redis_server.yml"]}, {"py/object": "struct4.Role", "name": "prosody", "defined_in": "testdata/scm_repo/roles/prosody", "task_yamls": ["testdata/scm_repo/roles/prosody/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/prosody/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/prosody"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/prosody/tasks/main.yml", "options": {"name": "Install required packages", "register": "prosody__register_packages", "until": "prosody__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (prosody__base_packages + prosody__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/prosody"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Prosody configuration", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/prosody/tasks/main.yml", "options": {"name": "Generate Prosody configuration", "notify": ["Restart prosody"]}, "module_options": {"src": "etc/prosody/prosody.cfg.lua.j2", "dest": "/etc/prosody/prosody.cfg.lua", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/prosody"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable Services", "module": "ansible.builtin.service", "index": 3, "defined_in": "testdata/scm_repo/roles/prosody/tasks/main.yml", "options": {"name": "Enable Services", "with_items": ["prosody"]}, "module_options": {"name": "{{ item }}", "enabled": "yes", "state": "started"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/prosody"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that PKI hook directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/prosody/tasks/main.yml", "options": {"name": "Make sure that PKI hook directory exists", "when": "(prosody__pki|bool and prosody__deploy_state in [ 'present' ])"}, "module_options": {"path": "{{ prosody__pki_hook_path }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/prosody"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage PKI prosody hook", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/prosody/tasks/main.yml", "options": {"name": "Manage PKI prosody hook", "when": "(prosody__pki|bool and prosody__deploy_state in [ 'present' ])"}, "module_options": {"src": "etc/pki/hooks/prosody.j2", "dest": "{{ prosody__pki_hook_path + \"/\" + prosody__pki_hook_name }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/prosody"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the PKI prosody hook is absent", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/prosody/tasks/main.yml", "options": {"name": "Ensure the PKI prosody hook is absent", "when": "(prosody__deploy_state in [ 'absent' ])"}, "module_options": {"path": "{{ prosody__pki_hook_path + \"/\" + prosody__pki_hook_name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/prosody"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "logrotate", "defined_in": "testdata/scm_repo/roles/logrotate", "task_yamls": ["testdata/scm_repo/roles/logrotate/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/logrotate/tasks/main.yml", "options": {"name": "Install required packages", "register": "logrotate__register_packages", "until": "logrotate__register_packages is succeeded", "when": "logrotate__enabled|bool"}, "module_options": {"name": "{{ (logrotate__base_packages + logrotate__packages) | flatten }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/logrotate"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Determine current cron log rotation", "module": "ansible.builtin.shell", "index": 1, "defined_in": "testdata/scm_repo/roles/logrotate/tasks/main.yml", "options": {"name": "Determine current cron log rotation", "args": {"executable": "bash"}, "register": "logrotate__register_cron_diversion", "changed_when": false, "when": "logrotate__enabled|bool"}, "module_options": "set -o nounset -o pipefail -o errexit &&\ndpkg-divert --list /etc/cron.daily/logrotate | awk '{ print $NF }'\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/logrotate"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove previous cron log rotation", "module": "dpkg_divert", "index": 2, "defined_in": "testdata/scm_repo/roles/logrotate/tasks/main.yml", "options": {"name": "Remove previous cron log rotation", "when": "(logrotate__enabled|bool and logrotate__register_cron_diversion.stdout|d() and logrotate__register_cron_diversion.stdout|d() != ('/etc/cron.' + logrotate__cron_period + '/logrotate'))"}, "module_options": {"path": "/etc/cron.daily/logrotate", "divert": "{{ logrotate__register_cron_diversion.stdout }}", "state": "absent", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/logrotate"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure {{ logrotate__cron_period }} cron log rotation", "module": "dpkg_divert", "index": 3, "defined_in": "testdata/scm_repo/roles/logrotate/tasks/main.yml", "options": {"name": "Configure {{ logrotate__cron_period }} cron log rotation", "when": "(logrotate__enabled|bool and logrotate__cron_period in [ 'hourly', 'weekly', 'monthly' ])"}, "module_options": {"path": "/etc/cron.daily/logrotate", "divert": "/etc/cron.{{ logrotate__cron_period }}/logrotate"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/logrotate"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of the logrotate config file", "module": "dpkg_divert", "index": 4, "defined_in": "testdata/scm_repo/roles/logrotate/tasks/main.yml", "options": {"name": "Add/remove diversion of the logrotate config file"}, "module_options": {"path": "/etc/logrotate.conf", "state": "{{ \"present\" if logrotate__enabled|bool else \"absent\" }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/logrotate"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate logrotate main configuration file", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/logrotate/tasks/main.yml", "options": {"name": "Generate logrotate main configuration file", "when": "logrotate__enabled|bool"}, "module_options": {"src": "etc/logrotate.conf.j2", "dest": "/etc/logrotate.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/logrotate"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of the custom log rotation configuration", "module": "dpkg_divert", "index": 6, "defined_in": "testdata/scm_repo/roles/logrotate/tasks/main.yml", "options": {"name": "Add/remove diversion of the custom log rotation configuration", "loop": "{{ logrotate__combined_config | flatten }}", "when": "item.filename|d() and item.divert|d(False)|bool"}, "module_options": {"path": "/etc/logrotate.d/{{ item.filename }}", "state": "{{ \"present\" if (logrotate__enabled|bool and item.state|d(\"present\") != \"absent\") else \"absent\" }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/logrotate"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate custom log rotation configuration", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/logrotate/tasks/main.yml", "options": {"name": "Generate custom log rotation configuration", "loop": "{{ logrotate__combined_config | flatten }}", "when": "(logrotate__enabled|bool and item.filename|d() and item.state|d('present') != 'absent')"}, "module_options": {"src": "etc/logrotate.d/config.j2", "dest": "/etc/logrotate.d/{{ item.filename }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/logrotate"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove custom log rotation configuration", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/logrotate/tasks/main.yml", "options": {"name": "Remove custom log rotation configuration", "loop": "{{ logrotate__combined_config | flatten }}", "when": "(item.filename|d() and not item.divert|d(False)|bool and (not logrotate__enabled|bool or item.state|d('present') == 'absent'))"}, "module_options": {"path": "/etc/logrotate.d/{{ item.filename }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/logrotate"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml", "testdata/scm_repo/playbooks/service/php.yml"]}, {"py/object": "struct4.Role", "name": "pdns", "defined_in": "testdata/scm_repo/roles/pdns", "task_yamls": ["testdata/scm_repo/roles/pdns/tasks/init_postgresql.yml", "testdata/scm_repo/roles/pdns/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Create PostgreSQL database", "module": "postgresql_db", "index": 0, "defined_in": "testdata/scm_repo/roles/pdns/tasks/init_postgresql.yml", "options": {"name": "Create PostgreSQL database", "delegate_to": "{{ pdns__postgresql_delegate_to }}", "register": "pdns__register_postgresql_status"}, "module_options": {"name": "{{ pdns__postgresql_database }}", "owner": "{{ pdns__postgresql_role }}", "state": "present"}, "fqcn": "community.postgresql.postgresql_db", "used_in": ["testdata/scm_repo/roles/pdns"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import initial database schema", "module": "postgresql_db", "index": 1, "defined_in": "testdata/scm_repo/roles/pdns/tasks/init_postgresql.yml", "options": {"name": "Import initial database schema", "when": "pdns__register_postgresql_status is changed"}, "module_options": {"login_user": "{{ pdns__postgresql_role }}", "login_password": "{{ pdns__postgresql_password }}", "name": "{{ pdns__postgresql_database }}", "target": "{{ pdns__postgresql_schema }}", "state": "restore"}, "fqcn": "community.postgresql.postgresql_db", "used_in": ["testdata/scm_repo/roles/pdns"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/pdns/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/pdns"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/pdns/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/pdns"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/pdns/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/pdns"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure PowerDNS support is installed", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/pdns/tasks/main.yml", "options": {"name": "Ensure PowerDNS support is installed", "register": "pdns__register_packages", "until": "pdns__register_packages is succeeded"}, "module_options": {"name": "{{ (pdns__base_packages + pdns__packages) | flatten }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/pdns"], "annotations": {}}, {"py/object": "struct4.Task", "name": "", "module": "include_tasks", "index": 4, "defined_in": "testdata/scm_repo/roles/pdns/tasks/main.yml", "options": {"when": "('gpgsql' in pdns__backends)"}, "module_options": "init_postgresql.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/pdns"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original configuration", "module": "dpkg_divert", "index": 5, "defined_in": "testdata/scm_repo/roles/pdns/tasks/main.yml", "options": {"name": "Divert original configuration"}, "module_options": {"path": "/etc/powerdns/pdns.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/pdns"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/pdns/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/pdns"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save local facts", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/pdns/tasks/main.yml", "options": {"name": "Save local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/pdns.fact.j2", "dest": "/etc/ansible/facts.d/pdns.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/pdns"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 8, "defined_in": "testdata/scm_repo/roles/pdns/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/pdns"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure local PowerDNS changes", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/pdns/tasks/main.yml", "options": {"name": "Configure local PowerDNS changes", "notify": ["Restart pdns"]}, "module_options": {"src": "etc/powerdns/pdns.conf.j2", "dest": "/etc/powerdns/pdns.conf", "owner": "root", "group": "pdns", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/pdns"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "rsyslog", "defined_in": "testdata/scm_repo/roles/rsyslog", "task_yamls": ["testdata/scm_repo/roles/rsyslog/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage rsyslog APT packages", "module": "ansible.builtin.apt", "index": 2, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Manage rsyslog APT packages", "register": "rsyslog__register_packages", "until": "rsyslog__register_packages is succeeded", "when": "rsyslog__enabled|bool and ansible_pkg_mgr == 'apt'"}, "module_options": {"name": "{{ (rsyslog__base_packages + (rsyslog__tls_packages if (rsyslog__pki|bool) else []) + rsyslog__packages) | flatten }}", "state": "{{ rsyslog__deploy_state }}", "purge": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists", "when": "rsyslog__enabled|bool and rsyslog__deploy_state != 'absent'"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save rsyslog local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Save rsyslog local facts", "notify": ["Refresh host facts"], "when": "rsyslog__enabled|bool and rsyslog__deploy_state != 'absent'", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/rsyslog.fact.j2", "dest": "/etc/ansible/facts.d/rsyslog.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required system group", "module": "ansible.builtin.group", "index": 6, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Create required system group", "when": "rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and rsyslog__unprivileged|bool and rsyslog__group != 'root'"}, "module_options": {"name": "{{ rsyslog__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required system user", "module": "ansible.builtin.user", "index": 7, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Create required system user", "when": "rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and rsyslog__unprivileged|bool and rsyslog__user != 'root'"}, "module_options": {"name": "{{ rsyslog__user }}", "group": "{{ rsyslog__group }}", "groups": "{{ rsyslog__append_groups | join(\",\") | default(omit) }}", "append": true, "home": "{{ rsyslog__home }}", "shell": "/bin/false", "state": "present", "createhome": false, "system": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Fix directory permissions if needed", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Fix directory permissions if needed", "register": "rsyslog__register_unprivileged_files", "when": "rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and rsyslog__unprivileged|bool and rsyslog__user != 'root'"}, "module_options": {"path": "/var/spool/rsyslog", "owner": "{{ rsyslog__user }}", "group": "{{ rsyslog__file_group }}", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update directory and file permissions", "module": "ansible.builtin.shell", "index": 9, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Update directory and file permissions", "register": "rsyslog__register_file_permissions", "when": "rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and rsyslog__unprivileged|bool", "changed_when": "rsyslog__register_file_permissions.stdout|d()", "notify": ["Check and restart rsyslogd"]}, "module_options": "[ ! -d {{ rsyslog__home }} ] \\\n  || ( [ \"$(stat -c '%G' {{ rsyslog__home }})\" = \"{{ rsyslog__group }}\" ] \\\n         || chown -v root:{{ rsyslog__group }} {{ rsyslog__home }} ; \\\n       [ \"$(stat -c '%a' {{ rsyslog__home }})\" = \"775\" ] \\\n         || chmod -v 775 {{ rsyslog__home }} )\nfor i in {{ rsyslog__default_logfiles | join(\" \") }} ; do\n  [ ! -f ${i} ] || \\\n    ( [ \"$(stat -c '%U' ${i})\" = \"{{ rsyslog__file_owner }}\" ] \\\n    || chown -v {{ rsyslog__file_owner }}:{{ rsyslog__file_group }} ${i} )\ndone\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create systemd-tmpfiles override", "module": "ansible.builtin.copy", "index": 10, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Create systemd-tmpfiles override", "notify": ["Create temporary files"], "when": "rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and ansible_service_mgr == \"systemd\" and rsyslog__unprivileged|bool and ansible_distribution == \"Debian\""}, "module_options": {"dest": "/etc/tmpfiles.d/rsyslog-var-log.conf", "mode": "0755", "content": "z {{ rsyslog__home }} 0775 root {{ rsyslog__group }} -"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert main rsyslog configuration file", "module": "dpkg_divert", "index": 11, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Divert main rsyslog configuration file", "notify": ["Check and restart rsyslogd"], "when": "rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and ansible_pkg_mgr == 'apt'"}, "module_options": {"path": "/etc/rsyslog.conf", "state": "present"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate main rsyslog configuration", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Generate main rsyslog configuration", "notify": ["Check and restart rsyslogd"], "when": "rsyslog__enabled|bool and rsyslog__deploy_state != 'absent'"}, "module_options": {"src": "etc/rsyslog.conf.j2", "dest": "/etc/rsyslog.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage configuration file diversions", "module": "dpkg_divert", "index": 13, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Manage configuration file diversions", "loop": "{{ rsyslog__combined_rules | flatten | debops.debops.parse_kv_items | selectattr(\"divert\", \"defined\") | list | selectattr(\"divert\", \"equalto\", True) | list }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": (item.state|d(\"present\")) } }}"}, "notify": ["Check and restart rsyslogd"], "when": "rsyslog__enabled|bool and rsyslog__deploy_state != 'absent'"}, "module_options": {"path": "{{ \"/etc/rsyslog.d/\" + (item.divert_to | d(item.name)) }}", "state": "{{ \"present\" if (item.state|d(\"present\") not in [ \"absent\", \"ignore\", \"init\" ]) else \"absent\" }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate rsyslog configuration rules", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Generate rsyslog configuration rules", "loop": "{{ rsyslog__combined_rules | flatten | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": (item.state|d(\"present\")) } }}"}, "when": "(rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and (item.options|d() or item.raw|d()))", "notify": ["Check and restart rsyslogd"]}, "module_options": {"src": "etc/rsyslog.d/template.conf.j2", "dest": "{{ \"/etc/rsyslog.d/\" + item.name }}", "owner": "{{ item.owner | d(\"root\") }}", "group": "{{ item.group | d(\"root\") }}", "mode": "{{ item.mode  | d(\"0644\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove custom config files when requested", "module": "ansible.builtin.file", "index": 15, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Remove custom config files when requested", "loop": "{{ rsyslog__combined_rules | flatten | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": (item.state|d(\"present\")) } }}"}, "when": "(rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and (item.divert is undefined or not item.divert|bool) and item.state|d('present') == 'absent')", "notify": ["Check and restart rsyslogd"]}, "module_options": {"path": "{{ \"/etc/rsyslog.d/\" + item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare cleanup during package removal", "module": "ansible.builtin.import_role", "index": 16, "defined_in": "testdata/scm_repo/roles/rsyslog/tasks/main.yml", "options": {"name": "Prepare cleanup during package removal", "vars": {"dpkg_cleanup__dependent_packages": ["{{ rsyslog__dpkg_cleanup__dependent_packages }}"]}, "when": "rsyslog__enabled|bool and rsyslog__deploy_state != 'absent'", "tags": ["role::dpkg_cleanup", "skip::dpkg_cleanup", "role::rsyslog:dpkg_cleanup"]}, "module_options": {"name": "dpkg_cleanup"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/rsyslog"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "fuse", "defined_in": "testdata/scm_repo/roles/fuse", "task_yamls": ["testdata/scm_repo/roles/fuse/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/fuse/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/fuse"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/fuse/tasks/main.yml", "options": {"name": "Install required packages", "register": "fuse__register_packages", "until": "fuse__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", fuse_base_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/fuse"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original /etc/fuse.conf", "module": "dpkg_divert", "index": 2, "defined_in": "testdata/scm_repo/roles/fuse/tasks/main.yml", "options": {"name": "Divert original /etc/fuse.conf"}, "module_options": {"path": "/etc/fuse.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/fuse"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Setup udev rule for fuse to change file permissions", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/fuse/tasks/main.yml", "options": {"name": "Setup udev rule for fuse to change file permissions"}, "module_options": {"src": "etc/fuse.conf.j2", "dest": "/etc/fuse.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/fuse"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure fuse system group is present", "module": "ansible.builtin.group", "index": 4, "defined_in": "testdata/scm_repo/roles/fuse/tasks/main.yml", "options": {"name": "Ensure fuse system group is present"}, "module_options": {"name": "{{ fuse_group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/fuse"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add fuse_users to fuse_group", "module": "ansible.builtin.user", "index": 5, "defined_in": "testdata/scm_repo/roles/fuse/tasks/main.yml", "options": {"name": "Add fuse_users to fuse_group", "loop": "{{ [fuse_users, fuse_users_host_group, fuse_users_host] | flatten }}"}, "module_options": {"name": "{{ item }}", "groups": "{{ fuse_group }}", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/fuse"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup udev rule for fuse to change file permissions", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/fuse/tasks/main.yml", "options": {"name": "Setup udev rule for fuse to change file permissions", "when": "fuse_restrict_access | bool"}, "module_options": {"src": "etc/udev/rules.d/fuse.rules.j2", "dest": "/etc/udev/rules.d/99-fuse.rules", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/fuse"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure FUSE permissions are applied immediately", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/fuse/tasks/main.yml", "options": {"name": "Ensure FUSE permissions are applied immediately", "when": "fuse_restrict_access | bool"}, "module_options": {"path": "/dev/fuse", "owner": "root", "group": "{{ fuse_group }}", "mode": "{{ fuse_permissions }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/fuse"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove udev rule for fuse", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/fuse/tasks/main.yml", "options": {"name": "Remove udev rule for fuse", "when": "not (fuse_restrict_access | bool)"}, "module_options": {"path": "/etc/udev/rules.d/99-fuse.rules", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/fuse"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "debops_fact", "defined_in": "testdata/scm_repo/roles/debops_fact", "task_yamls": ["testdata/scm_repo/roles/debops_fact/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/debops_fact/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/debops_fact"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the private fact group exists", "module": "ansible.builtin.group", "index": 1, "defined_in": "testdata/scm_repo/roles/debops_fact/tasks/main.yml", "options": {"name": "Ensure that the private fact group exists", "when": "debops_fact__enabled|bool"}, "module_options": {"name": "{{ debops_fact__private_group }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/debops_fact"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/debops_fact/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists", "when": "debops_fact__enabled|bool"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/debops_fact"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install local fact script", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/debops_fact/tasks/main.yml", "options": {"name": "Install local fact script", "notify": ["Refresh host facts"], "when": "debops_fact__enabled|bool"}, "module_options": {"src": "etc/ansible/facts.d/debops_fact.fact.j2", "dest": "/etc/ansible/facts.d/debops_fact.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/debops_fact"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize public DebOps fact file", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/debops_fact/tasks/main.yml", "options": {"name": "Initialize public DebOps fact file", "when": "debops_fact__enabled|bool"}, "module_options": {"src": "etc/ansible/debops_fact.ini.j2", "dest": "{{ debops_fact__public_path }}", "owner": "root", "group": "root", "mode": "0644", "force": false}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/debops_fact"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize private DebOps fact file", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/debops_fact/tasks/main.yml", "options": {"name": "Initialize private DebOps fact file", "when": "debops_fact__enabled|bool"}, "module_options": {"src": "etc/ansible/debops_fact_priv.ini.j2", "dest": "{{ debops_fact__private_path }}", "owner": "root", "group": "{{ debops_fact__private_group }}", "mode": "{{ debops_fact__private_mode }}", "force": false}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/debops_fact"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/debops_fact/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/debops_fact"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "snmpd", "defined_in": "testdata/scm_repo/roles/snmpd", "task_yamls": ["testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml", "testdata/scm_repo/roles/snmpd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Stop snmpd before admin account initialization", "module": "ansible.builtin.service", "index": 0, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml", "options": {"name": "Stop snmpd before admin account initialization"}, "module_options": {"name": "snmpd", "state": "stopped"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare admin account", "module": "ansible.builtin.lineinfile", "index": 1, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml", "options": {"name": "Prepare admin account", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"dest": "/var/lib/snmp/snmpd.conf", "regexp": "^createUser {{ snmpd_fact_account_admin_username }}", "line": "createUser {{ snmpd_fact_account_admin_username }} SHA \"{{ snmpd_fact_account_admin_password }}\" AES", "state": "present", "mode": "0600"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start snmpd to initialize admin account", "module": "ansible.builtin.service", "index": 2, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml", "options": {"name": "Start snmpd to initialize admin account"}, "module_options": {"name": "snmpd", "state": "started"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create read-only agent account", "module": "ansible.builtin.command", "index": 3, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml", "options": {"name": "Create read-only agent account", "changed_when": false, "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "snmpusm -u {{ snmpd_fact_account_admin_username }} -l authPriv -a SHA -x AES -A \"{{ snmpd_fact_account_admin_password }}\" -X \"{{ snmpd_fact_account_admin_password }}\" localhost create {{ snmpd_fact_account_agent_username }} {{ snmpd_fact_account_admin_username }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Change agent account password", "module": "ansible.builtin.command", "index": 4, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml", "options": {"name": "Change agent account password", "changed_when": false, "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "snmpusm -u {{ snmpd_fact_account_admin_username }} -l authPriv -a SHA -x AES -A \"{{ snmpd_fact_account_admin_password }}\" -X \"{{ snmpd_fact_account_admin_password }}\" localhost passwd \"{{ snmpd_fact_account_admin_password }}\" \"{{ snmpd_fact_account_agent_password }}\" {{ snmpd_fact_account_agent_username }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create read-only local account", "module": "ansible.builtin.command", "index": 5, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml", "options": {"name": "Create read-only local account", "changed_when": false, "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "snmpusm -u {{ snmpd_fact_account_admin_username }} -l authPriv -a SHA -x AES -A \"{{ snmpd_fact_account_admin_password }}\" -X \"{{ snmpd_fact_account_admin_password }}\" localhost create {{ snmpd_account_local_username }} {{ snmpd_fact_account_admin_username }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Change local account password", "module": "ansible.builtin.command", "index": 6, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml", "options": {"name": "Change local account password", "changed_when": false, "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "snmpusm -u {{ snmpd_fact_account_admin_username }} -l authPriv -a SHA -x AES -A \"{{ snmpd_fact_account_admin_password }}\" -X \"{{ snmpd_fact_account_admin_password }}\" localhost passwd \"{{ snmpd_fact_account_admin_password }}\" \"{{ snmpd_account_local_password }}\" {{ snmpd_account_local_username }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove admin account from snmpd.conf", "module": "ansible.builtin.lineinfile", "index": 7, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml", "options": {"name": "Remove admin account from snmpd.conf", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"dest": "/etc/snmp/snmpd.conf", "regexp": "^rwuser\\s+{{ snmpd_fact_account_admin_username }}\\s+priv", "state": "absent"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if snmpd is installed", "module": "ansible.builtin.command", "index": 3, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Check if snmpd is installed", "environment": {"LC_MESSAGES": "C"}, "register": "snmpd_register_version", "changed_when": false, "failed_when": false, "check_mode": false}, "module_options": "dpkg-query -W -f='${Version}\\n' snmpd", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Install required packages", "register": "snmpd__register_packages", "until": "snmpd__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", ([ \"snmp\", \"snmpd\" ] + ([ \"snmp-mibs-downloader\" ] if snmpd_download_mibs else []) + ([ \"lm-sensors\" ] if (ansible_virtualization_role is undefined or ansible_virtualization_role not in [ \"guest\" ]) else [] ) + snmpd_packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom snmpd.service unit file", "module": "ansible.builtin.copy", "index": 5, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Install custom snmpd.service unit file", "notify": ["Restart snmpd"]}, "module_options": {"src": "etc/systemd/system/snmpd.service", "dest": "/etc/systemd/system/snmpd.service", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd daemon and enable snmpd.service", "module": "ansible.builtin.systemd", "index": 6, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Reload systemd daemon and enable snmpd.service", "when": "((ansible_service_mgr == \"systemd\") and not ansible_local.snmpd|d())"}, "module_options": {"daemon_reload": true, "name": "snmpd.service", "enabled": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow 'snmp' user access to /proc if needed", "module": "ansible.builtin.user", "index": 7, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Allow 'snmp' user access to /proc if needed", "when": "snmpd_proc_hidepid | bool", "notify": ["Restart snmpd"]}, "module_options": {"name": "{{ snmpd_user }}", "groups": "{{ snmpd_proc_hidepid_group }}", "append": true, "create_home": false}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable MIBs support", "module": "ansible.builtin.lineinfile", "index": 8, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Enable MIBs support", "notify": ["Restart snmpd"], "when": "snmpd_download_mibs|d() and snmpd_download_mibs"}, "module_options": {"dest": "/etc/snmp/snmp.conf", "state": "present", "regexp": "mibs\\s:", "line": "#mibs :", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert default configuration file", "module": "dpkg_divert", "index": 9, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Divert default configuration file", "notify": ["Restart snmpd"]}, "module_options": {"path": "/etc/snmp/snmpd.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Initialize local account", "module": "ansible.builtin.set_fact", "index": 10, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Initialize local account", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"snmpd_account_local_username": "{{ ansible_local.snmpd.username if (ansible_local|d() and ansible_local.snmpd|d() and ansible_local.snmpd.username) else lookup(\"pipe\", \"openssl rand -hex \" + (((snmpd_account_username_length | int) / 2) | int) | string) }}", "snmpd_account_local_password": "{{ ansible_local.snmpd.password|d(lookup(\"pipe\", \"openssl rand -base64 \" + snmpd_account_password_length)) }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure snmpd daemon variables", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Configure snmpd daemon variables", "notify": ["Restart snmpd"]}, "module_options": {"src": "etc/default/snmpd.j2", "dest": "/etc/default/snmpd", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure local SNMP credentials", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Configure local SNMP credentials"}, "module_options": {"src": "etc/snmp/snmp.local.conf.j2", "dest": "/etc/snmp/snmp.local.conf", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create snmpd extension script directory", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Create snmpd extension script directory"}, "module_options": {"path": "{{ snmpd_extension_scripts }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install snmpd extension scripts", "module": "ansible.builtin.copy", "index": 14, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Install snmpd extension scripts"}, "module_options": {"src": "usr/local/lib/snmpd/", "dest": "{{ snmpd_extension_scripts + \"/\" }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize admin and agent accounts", "module": "ansible.builtin.set_fact", "index": 15, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Initialize admin and agent accounts", "no_log": "{{ debops__no_log | d(True) }}", "when": "snmpd_account|d() and snmpd_account"}, "module_options": {"snmpd_fact_account_admin_username": "{{ snmpd_account_admin_username }}", "snmpd_fact_account_admin_password": "{{ snmpd_account_admin_password }}", "snmpd_fact_account_agent_username": "{{ snmpd_account_agent_username }}", "snmpd_fact_account_agent_password": "{{ snmpd_account_agent_password }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure snmpd service", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Configure snmpd service", "notify": ["Restart snmpd"]}, "module_options": {"src": "{{ lookup(\"debops.debops.template_src\", \"etc/snmp/snmpd.conf.j2\") }}", "dest": "/etc/snmp/snmpd.conf", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure SNMPv3 credentials", "module": "ansible.builtin.include_tasks", "index": 17, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Configure SNMPv3 credentials", "when": "((snmpd_register_version|d() and not snmpd_register_version.stdout) and (snmpd_account|d() and snmpd_account))"}, "module_options": "configure_snmpv3_credentials.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save local SNMPv3 password for retrieval via Ansible facts", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Save local SNMPv3 password for retrieval via Ansible facts", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/snmp/ansible-local-password.json.j2", "dest": "/etc/snmp/ansible-local-password.json", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local fact directory exists", "module": "ansible.builtin.file", "index": 19, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Make sure that Ansible local fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save snmpd local facts", "module": "ansible.builtin.template", "index": 20, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Save snmpd local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/snmpd.fact.j2", "dest": "/etc/ansible/facts.d/snmpd.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 21, "defined_in": "testdata/scm_repo/roles/snmpd/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/snmpd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "owncloud", "defined_in": "testdata/scm_repo/roles/owncloud", "task_yamls": ["testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "testdata/scm_repo/roles/owncloud/tasks/copy.yml", "testdata/scm_repo/roles/owncloud/tasks/main_env.yml", "testdata/scm_repo/roles/owncloud/tasks/ldap.yml", "testdata/scm_repo/roles/owncloud/tasks/system_package_management.yml", "testdata/scm_repo/roles/owncloud/tasks/theme.yml", "testdata/scm_repo/roles/owncloud/tasks/run_occ_app_set.yml", "testdata/scm_repo/roles/owncloud/tasks/run_occ.yml", "testdata/scm_repo/roles/owncloud/tasks/tarball.yml", "testdata/scm_repo/roles/owncloud/tasks/deploy_state_absent.yml", "testdata/scm_repo/roles/owncloud/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Enable required Apache modules", "module": "apache2_module", "index": 0, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Enable required Apache modules", "when": "owncloud__webserver == \"apache\"", "with_flattened": "{{ owncloud__apache_modules }}"}, "module_options": {"name": "php5", "state": "present"}, "fqcn": "debops.debops.apache2_module", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Ensure restrictive permissions are set for the data directory", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Ensure restrictive permissions are set for the data directory"}, "module_options": {"path": "{{ owncloud__data_path }}", "state": "directory", "owner": "{{ owncloud__app_user }}", "group": "{{ owncloud__app_group }}", "mode": "0770"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install ownCloud config file", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Install ownCloud config file"}, "module_options": {"src": "srv/www/sites/config/debops.config.php.j2", "dest": "{{ owncloud__deploy_path }}/config/debops.config.php", "owner": "{{ owncloud__app_user }}", "group": "{{ owncloud__app_group }}", "mode": "0640", "validate": "php -f %s"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install ownCloud mail config file", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Install ownCloud mail config file", "when": "((owncloud__mail_conf_map.keys() | length) >= 1)", "tags": ["role::owncloud:mail"]}, "module_options": {"src": "srv/www/sites/config/mail.config.php.j2", "dest": "{{ owncloud__deploy_path }}/config/mail.config.php", "owner": "{{ owncloud__app_user }}", "group": "{{ owncloud__app_group }}", "mode": "0640", "validate": "php -f %s"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the ownCloud mail config file is absent", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Ensure the ownCloud mail config file is absent", "when": "((owncloud__mail_conf_map.keys() | length) == 0)"}, "module_options": {"path": "{{ owncloud__deploy_path }}/config/mail.config.php", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure deprecated configuration files are absent", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Ensure deprecated configuration files are absent", "with_flattened": ["{{ owncloud__deploy_path }}/config/custom.config.php"]}, "module_options": {"path": "{{ item }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove legacy files", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Remove legacy files", "tags": ["role::owncloud:occ"]}, "module_options": {"state": "absent", "path": "{{ ansible_local.php.etc_base|d(\"/etc/php\") + \"/cli/conf.d/enable_apc.ini\" }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup shortcut for the occ command", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Setup shortcut for the occ command", "tags": ["role::owncloud:occ"]}, "module_options": {"src": "usr/local/bin/occ.j2", "dest": "{{ owncloud__occ_bin_file_path }}", "owner": "root", "group": "{{ owncloud__app_group }}", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get ownCloud setup status", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Get ownCloud setup status", "register": "owncloud__register_occ_check", "changed_when": false}, "module_options": "{{ owncloud__occ_bin_file_path | quote }} check", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Determine if ownCloud autosetup should be done", "module": "ansible.builtin.set_fact", "index": 9, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Determine if ownCloud autosetup should be done"}, "module_options": {"owncloud__do_autosetup": "{{ (owncloud__autosetup and owncloud__admin_username|d() and (owncloud__register_occ_check is not skipped) and \"is not installed\" in owncloud__register_occ_check.stdout) }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Automatically finish setup via the occ tool", "module": "ansible.builtin.command", "index": 10, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Automatically finish setup via the occ tool", "register": "owncloud__register_occ_install", "when": "owncloud__do_autosetup|bool"}, "module_options": "{{ owncloud__occ_bin_file_path | quote }} maintenance:install\n'--data-dir={{ owncloud__data_path }}'\n'--database={{ owncloud__database_map[owncloud__database].dbtype }}'\n'--database-name={{ owncloud__database_map[owncloud__database].dbname }}'\n'--database-host={{ owncloud__database_map[owncloud__database].dbhost }}'\n'--database-user={{ owncloud__database_map[owncloud__database].dbuser }}'\n'--database-pass={{ owncloud__database_map[owncloud__database].dbpass }}'\n{% if owncloud__admin_username %}\n'--admin-user={{ owncloud__admin_username }}'\n'--admin-pass={{ owncloud__admin_password }}'\n{% endif %}\n", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get current ownCloud configuration via occ config:list", "module": "ansible.builtin.include_tasks", "index": 11, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Get current ownCloud configuration via occ config:list", "loop_control": {"loop_var": "owncloud__occ_item"}, "tags": ["role::owncloud:occ_config"], "when": "(owncloud__apps_config_combined is mapping and owncloud__apps_config_combined.keys() | length)", "with_flattened": [{"command": "config:list", "get_output": true}]}, "module_options": "run_occ.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Capture occ output in variable", "module": "ansible.builtin.set_fact", "index": 12, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Capture occ output in variable", "when": "(owncloud__do_autosetup|bool and owncloud__apps_config_combined is mapping and owncloud__apps_config_combined.keys() | length and (not ansible_check_mode))", "tags": ["role::owncloud:occ_config"]}, "module_options": {"owncloud__occ_config_current": "{{ owncloud__occ_run_output }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set ownCloud apps configuration for each app", "module": "ansible.builtin.include_tasks", "index": 13, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Set ownCloud apps configuration for each app", "loop_control": {"loop_var": "owncloud__apps_item"}, "with_dict": "{{ owncloud__apps_config_combined|d({}) }}", "when": "(owncloud__do_autosetup|d()|bool and not ansible_check_mode)", "tags": ["role::owncloud:occ_config"]}, "module_options": "run_occ_app_set.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Run occ commands as specified in the inventory", "module": "ansible.builtin.include_tasks", "index": 14, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Run occ commands as specified in the inventory", "loop_control": {"loop_var": "owncloud__occ_item"}, "tags": ["role::owncloud:occ"], "with_flattened": ["{{ owncloud__role_occ_cmd_list }}", "{{ owncloud__occ_cmd_list }}", "{{ owncloud__group_occ_cmd_list }}", "{{ owncloud__host_occ_cmd_list }}", "{{ owncloud__dependent_occ_cmd_list }}"]}, "module_options": "run_occ.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup cron service (nextcloud)", "module": "ansible.builtin.cron", "index": 15, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Setup cron service (nextcloud)", "when": "owncloud__variant == \"nextcloud\""}, "module_options": {"name": "ownCloud Background Jobs", "minute": "{{ owncloud__cron_minute }}", "user": "{{ owncloud__app_user }}", "job": "test -x /usr/bin/php && test -e {{ (owncloud__deploy_path + \"/cron.php\") | quote }} && /usr/bin/php -f {{ (owncloud__deploy_path + \"/cron.php\") | quote }}", "cron_file": "owncloud"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup cron service (owncloud)", "module": "ansible.builtin.cron", "index": 16, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Setup cron service (owncloud)", "when": "owncloud__variant == \"owncloud\""}, "module_options": {"name": "ownCloud Background Jobs", "minute": "{{ owncloud__cron_minute }}", "user": "{{ owncloud__app_user }}", "job": "test -x /usr/bin/php && test -e {{ (owncloud__deploy_path + \"/occ\") | quote }} && /usr/bin/php {{ (owncloud__deploy_path + \"/occ\") | quote }} system:cron", "cron_file": "owncloud"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable the package manager hook script for ownCloud", "module": "ansible.builtin.template", "index": 17, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Enable the package manager hook script for ownCloud", "tags": ["role::owncloud:auto_upgrade"], "when": "(owncloud__auto_database_upgrade_enabled | bool)"}, "module_options": {"src": "etc/apt/apt.conf.d/dpkg-hook.j2", "dest": "/etc/apt/apt.conf.d/80owncloud-dpkg-hook", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable the package manager hook script for ownCloud", "module": "ansible.builtin.file", "index": 18, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Disable the package manager hook script for ownCloud", "when": "not (owncloud__auto_database_upgrade_enabled | bool)"}, "module_options": {"path": "/etc/apt/apt.conf.d/80owncloud-dpkg-hook", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check ownCloud core integrity", "module": "ansible.builtin.command", "index": 19, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml", "options": {"name": "Check ownCloud core integrity", "register": "owncloud__register_occ_integrity_check_core", "failed_when": "(owncloud__register_occ_integrity_check_core.rc != 0 or owncloud__register_occ_integrity_check_core.stdout_lines|length != 0)", "changed_when": false, "when": "owncloud__do_autosetup|bool"}, "module_options": "{{ owncloud__occ_bin_file_path | quote }} integrity:check-core", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that parent directories exist", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/copy.yml", "options": {"name": "Ensure that parent directories exist", "when": "((item.parent_dirs_create|d(True)| bool) and item.dest|d() and item.state|d(\"present\") != 'absent')", "with_flattened": ["{{ owncloud__user_files }}", "{{ owncloud__user_files_group }}", "{{ owncloud__user_files_host }}"]}, "module_options": {"path": "{{ (owncloud__data_path + \"/\" + item.dest) | dirname }}", "state": "directory", "recurse": "{{ item.parent_dirs_recurse | d(True) }}", "owner": "{{ item.parent_dirs_owner   | d(owncloud__app_user) }}", "group": "{{ item.parent_dirs_group   | d(owncloud__app_group) }}", "mode": "{{ item.parent_dirs_mode    | d(\"0755\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy files to ownCloud user profiles", "module": "ansible.builtin.copy", "index": 1, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/copy.yml", "options": {"name": "Copy files to ownCloud user profiles", "register": "owncloud__register_create_user_files", "with_flattened": ["{{ owncloud__user_files }}", "{{ owncloud__user_files_group }}", "{{ owncloud__user_files_host }}"], "when": "((item.src|d() or item.content|d()) and item.dest|d() and (item.state|d('present') != 'absent'))"}, "module_options": {"dest": "{{ owncloud__data_path + \"/\" + item.dest }}", "src": "{{ item.src      | d(omit) }}", "content": "{{ item.content  | d(omit) }}", "owner": "{{ item.owner    | d(owncloud__app_user) }}", "group": "{{ item.group    | d(owncloud__app_group) }}", "mode": "{{ item.mode     | d(\"u=rwX,g=rX,o=rX\") }}", "selevel": "{{ item.selevel  | d(omit) }}", "serole": "{{ item.serole   | d(omit) }}", "setype": "{{ item.setype   | d(omit) }}", "seuser": "{{ item.seuser   | d(omit) }}", "follow": "{{ item.follow   | d(omit) }}", "force": "{{ item.force    | d(omit) }}", "backup": "{{ item.backup   | d(omit) }}", "validate": "{{ item.validate | d(omit) }}", "remote_src": "{{ item.remote_src | d(omit) }}", "directory_mode": "{{ item.directory_mode | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Delete files on remote hosts", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/copy.yml", "options": {"name": "Delete files on remote hosts", "register": "owncloud__register_delete_user_files", "with_flattened": ["{{ owncloud__user_files }}", "{{ owncloud__user_files_group }}", "{{ owncloud__user_files_host }}"], "when": "(item.dest|d() and (item.state|d('present') == 'absent'))"}, "module_options": {"path": "{{ owncloud__data_path + \"/\" + item.dest }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Run occ commands as specified in the inventory", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/copy.yml", "options": {"name": "Run occ commands as specified in the inventory", "loop_control": {"loop_var": "owncloud__files_scan_item"}, "when": "owncloud__files_scan_item is changed", "with_items": "{{ (owncloud__register_create_user_files.results|d([]) + owncloud__register_delete_user_files.results|d([])) if (owncloud__register_create_user_files is defined and owncloud__register_create_user_files is not skipped) else [] }}"}, "module_options": "run_occ.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the custom nginx client body temp directory does exist", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main_env.yml", "options": {"name": "Ensure the custom nginx client body temp directory does exist", "when": "(owncloud__webserver in [\"nginx\"] and owncloud__nginx_client_body_temp_path|d())"}, "module_options": {"path": "{{ owncloud__nginx_client_body_temp_path }}", "state": "directory", "owner": "{{ ansible_local.nginx.user|d(\"www-data\") }}", "group": "root", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the custom temp directories are setup", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main_env.yml", "options": {"name": "Ensure the custom temp directories are setup", "when": "item.path|d()", "with_items": [{"path": "{{ owncloud__temp_path }}"}, {"path": "{{ owncloud__php_temp_path }}"}]}, "module_options": {"path": "{{ item.path }}", "state": "directory", "owner": "{{ owncloud__app_user }}", "group": "{{ owncloud__app_group }}", "mode": "{{ item.mode|d(\"1750\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory is present", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main_env.yml", "options": {"name": "Make sure that Ansible local facts directory is present"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save ownCloud local facts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main_env.yml", "options": {"name": "Save ownCloud local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/owncloud.fact.j2", "dest": "/etc/ansible/facts.d/owncloud.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather facts if they were modified", "module": "ansible.builtin.meta", "index": 4, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main_env.yml", "options": {"name": "Gather facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check default ldap config exists", "module": "ansible.builtin.command", "index": 0, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/ldap.yml", "options": {"name": "Check default ldap config exists", "changed_when": false, "when": "(not ansible_check_mode)", "register": "owncloud__register_ldap_default_config_exits", "become": true, "become_user": "{{ owncloud__app_user }}", "failed_when": "(owncloud__register_ldap_default_config_exits.rc != 0 and 'Invalid configID' not in owncloud__register_ldap_default_config_exits.stdout)"}, "module_options": "php --file \"{{ owncloud__app_home }}/occ\" ldap:show-config \"{{ owncloud__ldap_config_id }}\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create empty LDAP configuration", "module": "ansible.builtin.shell", "index": 1, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/ldap.yml", "options": {"name": "Create empty LDAP configuration", "environment": {"LC_ALL": "C"}, "args": {"executable": "bash"}, "become": true, "become_user": "{{ owncloud__app_user }}", "register": "owncloud__register_ldap_config_id", "when": "((not ansible_check_mode) and 'Invalid configID' in owncloud__register_ldap_default_config_exits.stdout|d(\"\"))"}, "module_options": "set -o nounset -o pipefail -o errexit && php --file \"{{ owncloud__app_home }}/occ\" ldap:create-empty-config | awk '{print $NF}'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update ownCloud local facts", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/ldap.yml", "options": {"name": "Update ownCloud local facts", "notify": ["Refresh host facts"]}, "module_options": {"src": "etc/ansible/facts.d/owncloud.fact.j2", "dest": "/etc/ansible/facts.d/owncloud.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather facts if they were modified", "module": "ansible.builtin.meta", "index": 3, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/ldap.yml", "options": {"name": "Gather facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure LDAP parameters", "module": "ansible.builtin.command", "index": 4, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/ldap.yml", "options": {"name": "Configure LDAP parameters", "changed_when": false, "become": true, "become_user": "{{ owncloud__app_user }}", "loop": "{{ q(\"flattened\", owncloud__ldap_combined_config) | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"option\": item.name, \"value\": item.value} }}"}, "no_log": "{{ debops__no_log | d(True) if (item.name in [ \"ldapAgentPassword\" ]) else False }}", "when": "((not ansible_check_mode) and item.state|d('present') not in [ 'absent', 'ignore' ] and ('Invalid configID' in owncloud__register_ldap_default_config_exits.stdout|d(\"\") or owncloud_ldap_update_settings|bool))"}, "module_options": "php --file '{{ owncloud__app_home }}/occ' ldap:set-config '{{ owncloud__ldap_config_id }}' '{{ item.name }}' '{{ item.value }}'", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure ownCloud APT repository", "module": "ansible.builtin.template", "index": 0, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/system_package_management.yml", "options": {"name": "Configure ownCloud APT repository", "register": "owncloud__register_apt_repository", "when": "(owncloud__variant in [\"owncloud\"])"}, "module_options": {"src": "etc/apt/sources.list.d/debops_owncloud.list.j2", "dest": "/etc/apt/sources.list.d/debops_owncloud.list", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update APT repository cache", "module": "ansible.builtin.apt", "index": 1, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/system_package_management.yml", "options": {"name": "Update APT repository cache", "register": "owncloud__register_apt_cache", "until": "owncloud__register_apt_cache is succeeded", "when": "owncloud__register_apt_repository is changed"}, "module_options": {"update_cache": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure specified packages are in there desired state", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/system_package_management.yml", "options": {"name": "Ensure specified packages are in there desired state", "register": "owncloud__register_apt_install", "until": "owncloud__register_apt_install is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (owncloud__base_packages + owncloud__packages + owncloud__group_packages + owncloud__host_packages + owncloud__dependent_packages)) }}", "state": "{{ \"absent\" if (owncloud__deploy_state in [ \"absent\" ]) else ( \"latest\" if (ansible_local|d() and ansible_local.owncloud|d() and ( (ansible_local.owncloud.release|d(owncloud__release) != owncloud__release) or (ansible_local.owncloud.auto_security_updates_enabled|d()|bool) )) else \"present\") }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install the package manager hook script for ownCloud", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/system_package_management.yml", "options": {"name": "Install the package manager hook script for ownCloud", "tags": ["role::owncloud:auto_upgrade"], "when": "(owncloud__variant in [\"owncloud\"])"}, "module_options": {"src": "usr/local/lib/owncloud_dpkg_hook.j2", "dest": "{{ owncloud__dpkg_hook_script }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the ownCloud upgrade has completed", "module": "ansible.builtin.command", "index": 4, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/system_package_management.yml", "options": {"name": "Ensure that the ownCloud upgrade has completed", "when": "(owncloud__variant in [\"owncloud\"] and owncloud__register_apt_install is changed and (ansible_local.owncloud.auto_security_updates_enabled|d()|bool))"}, "module_options": "{{ owncloud__dpkg_hook_script }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Combine theme copy dictionaries", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/theme.yml", "options": {"name": "Combine theme copy dictionaries", "tags": ["role::owncloud:theme:copy"]}, "module_options": {"owncloud__theme_copy_files_combined": "{{ owncloud__theme_copy_files | combine(owncloud__theme_copy_files_host_group) | combine(owncloud__theme_copy_files_host      ) }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the theme directory is present", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/theme.yml", "options": {"name": "Ensure the theme directory is present", "when": "(owncloud__theme_directory_name|d())", "tags": ["role::owncloud:theme:common_settings"]}, "module_options": {"path": "{{ owncloud__deploy_path + \"/themes/\" + owncloud__theme_directory_name }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Apply common theming options using the defaults.php file", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/theme.yml", "options": {"name": "Apply common theming options using the defaults.php file", "when": "(owncloud__theme_directory_name|d())", "tags": ["role::owncloud:theme:common_settings"]}, "module_options": {"src": "srv/www/sites/themes/debops-template/defaults.php.j2", "dest": "{{ owncloud__deploy_path + \"/themes/\" + owncloud__theme_directory_name + \"/defaults.php\" }}", "owner": "root", "group": "{{ owncloud__app_group }}", "mode": "0640", "validate": "php -f %s"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that parent directories exist", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/theme.yml", "options": {"name": "Ensure that parent directories exist", "with_dict": "{{ owncloud__theme_copy_files_combined }}", "when": "(owncloud__theme_directory_name|d() and item.value.state|d(\"present\") == \"present\")", "tags": ["role::owncloud:theme:copy"]}, "module_options": {"path": "{{ (owncloud__deploy_path + \"/themes/\" + owncloud__theme_directory_name + \"/\" + item.key) | dirname }}", "state": "directory", "owner": "{{ item.value.base_directory_owner | d(omit) }}", "group": "{{ item.value.base_directory_group | d(omit) }}", "mode": "{{ item.value.base_directory_mode  | d(omit) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy additional theme files", "module": "ansible.builtin.copy", "index": 4, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/theme.yml", "options": {"name": "Copy additional theme files", "with_dict": "{{ owncloud__theme_copy_files_combined }}", "when": "(owncloud__theme_directory_name|d() and item.value.state|d(\"present\") == \"present\")", "tags": ["role::owncloud:theme:copy"]}, "module_options": {"dest": "{{ (owncloud__deploy_path + \"/themes/\" + owncloud__theme_directory_name + \"/\" + item.key) if (not item.key.startswith(\"/\")) else item.key }}", "backup": "{{ item.value.backup         | d(omit) }}", "content": "{{ item.value.content        | d(omit) }}", "directory_mode": "{{ item.value.directory_mode | d(omit) }}", "follow": "{{ item.value.follow         | d(omit) }}", "force": "{{ item.value.force          | d(omit) }}", "owner": "{{ item.value.owner          | d(omit) }}", "group": "{{ item.value.group          | d(omit) }}", "mode": "{{ item.value.mode           | d(omit) }}", "selevel": "{{ item.value.selevel        | d(omit) }}", "serole": "{{ item.value.serole         | d(omit) }}", "setype": "{{ item.value.setype         | d(omit) }}", "seuser": "{{ item.value.seuser         | d(omit) }}", "src": "{{ item.value.src            | d(omit) }}", "validate": "{{ item.value.validate       | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Activate custom theme", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/theme.yml", "options": {"name": "Activate custom theme", "when": "(owncloud__theme_active|d())", "tags": ["role::owncloud:theme:activate"]}, "module_options": {"src": "srv/www/sites/config/theme.config.php.j2", "dest": "{{ owncloud__deploy_path }}/config/theme.config.php", "owner": "root", "group": "{{ owncloud__app_group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Deactivate custom theme", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/theme.yml", "options": {"name": "Deactivate custom theme", "when": "(not owncloud__theme_active|d())", "tags": ["role::owncloud:theme:activate"]}, "module_options": {"path": "{{ owncloud__deploy_path }}/config/theme.config.php", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Delete additional theme files", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/theme.yml", "options": {"name": "Delete additional theme files", "when": "(owncloud__theme_directory_name|d() and item.value.state|d(\"present\") == \"absent\")", "with_dict": "{{ owncloud__theme_copy_files_combined }}", "tags": ["role::owncloud:theme:copy"]}, "module_options": {"path": "{{ owncloud__deploy_path + \"/themes/\" + owncloud__theme_directory_name + \"/\" + item.key }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Run occ commands for each app setting", "module": "ansible.builtin.include_tasks", "index": 0, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/run_occ_app_set.yml", "options": {"name": "Run occ commands for each app setting", "loop_control": {"loop_var": "owncloud__apps_setting_item"}, "when": "(\"apps\" in owncloud__occ_config_current and owncloud__apps_item.key in owncloud__occ_config_current.apps and owncloud__occ_config_current.apps[owncloud__apps_item.key][owncloud__apps_setting_item.key]|d(omit) != owncloud__apps_setting_item.value)", "with_dict": "{{ owncloud__apps_item.value }}"}, "module_options": "run_occ.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Construct occ command for ownCloud apps configuration", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/run_occ.yml", "options": {"name": "Construct occ command for ownCloud apps configuration", "when": "(owncloud__apps_setting_item is defined)", "tags": ["role::owncloud:occ"]}, "module_options": {"owncloud__occ_item": {"command": "config:app:set {{ owncloud__apps_item.key | quote }} {{ owncloud__apps_setting_item.key | quote }} --value={{ owncloud__apps_setting_item.value|string | quote }}"}}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Construct occ command for ownCloud files:scan configuration", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/run_occ.yml", "options": {"name": "Construct occ command for ownCloud files:scan configuration", "when": "(owncloud__files_scan_item is defined)", "tags": ["role::owncloud:occ"]}, "module_options": {"owncloud__occ_item": {"command": "files:scan --path {{ owncloud__files_scan_item.item.dest | quote }}"}}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Run given occ commands", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/run_occ.yml", "options": {"name": "Run given occ commands", "environment": "{{ owncloud__occ_item.env|d({}) }}", "tags": ["role::owncloud:occ"], "changed_when": false, "failed_when": "((owncloud__occ_run.rc != 0 and 'already exists' not in owncloud__occ_run.stdout and 'already installed' not in owncloud__occ_run.stdout) or ('An unhandled exception has been thrown:' in owncloud__occ_run.stdout))", "no_log": "{{ debops__no_log | d(True) }}", "register": "owncloud__occ_run", "become": true, "become_user": "{{ owncloud__app_user }}", "when": "(owncloud__do_autosetup|d()|bool and owncloud__occ_item|d() and owncloud__occ_item.command|d() and (owncloud__occ_item.when|d(True) | bool) and not ( ansible_local.owncloud.maintenance|d() | bool and ( owncloud__occ_item.command.startswith(\"dav\") or owncloud__occ_item.command.startswith(\"federation\") or owncloud__occ_item.command.startswith(\"files\") or owncloud__occ_item.command.startswith(\"trashbin\") or owncloud__occ_item.command.startswith(\"versions\") ) ) )"}, "module_options": "php --file \"{{ owncloud__app_home }}/occ\" {{ owncloud__occ_item.command }} {{ \"--output=json_pretty\" if (owncloud__occ_item.get_output|d() | bool) else \"\" }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Convert occ output into Ansible data structure", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/run_occ.yml", "options": {"name": "Convert occ output into Ansible data structure", "when": "(owncloud__do_autosetup|d()|bool and owncloud__occ_item|d() and (owncloud__occ_item.get_output|d() | bool) and (not ansible_check_mode))", "tags": ["role::owncloud:occ_config", "role::owncloud:occ"]}, "module_options": {"owncloud__occ_run_output": "{{ owncloud__occ_run.stdout_lines | map(\"regex_replace\", \"^[^{} ].*$\", \"\") | join(\"\") | from_json }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Nextcloud group", "module": "ansible.builtin.group", "index": 0, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/tarball.yml", "options": {"name": "Create Nextcloud group", "tags": ["role::nextcloud:download", "role::nextcloud:verify"]}, "module_options": {"name": "{{ owncloud__system_group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Nextcloud user", "module": "ansible.builtin.user", "index": 1, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/tarball.yml", "options": {"name": "Create Nextcloud user", "tags": ["role::nextcloud:download", "role::nextcloud:verify"]}, "module_options": {"name": "{{ owncloud__system_user }}", "group": "{{ owncloud__system_group }}", "home": "{{ owncloud__system_home }}", "comment": "{{ owncloud__comment }}", "shell": "{{ owncloud__shell }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create source directory", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/tarball.yml", "options": {"name": "Create source directory"}, "module_options": {"path": "{{ owncloud__src }}", "state": "directory", "owner": "{{ owncloud__system_user }}", "group": "{{ owncloud__system_group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create deployment directory", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/tarball.yml", "options": {"name": "Create deployment directory"}, "module_options": {"path": "{{ owncloud__deploy_path }}", "state": "directory", "owner": "{{ owncloud__app_user }}", "group": "{{ owncloud__app_group }}", "mode": "{{ owncloud__deploy_path_mode }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Query for the full version string of the current release", "module": "ansible.builtin.shell", "index": 4, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/tarball.yml", "options": {"name": "Query for the full version string of the current release", "args": {"warn": false, "executable": "sh"}, "register": "owncloud__register_full_version", "changed_when": false, "check_mode": false, "tags": ["role::nextcloud:verify"]}, "module_options": "curl -s -m 900 {{ (owncloud__variant_download_url_map[owncloud__variant] + \"/\") | quote }} | sed --silent 's/.*href=\"nextcloud-\\({{ owncloud__release | regex_escape() }}[^\"]\\+\\).zip.asc\".*/\\1/p' | sort --version-sort --reverse", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create source directories", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/tarball.yml", "options": {"name": "Create source directories", "tags": ["role::nextcloud:download", "role::nextcloud:verify"]}, "module_options": {"path": "{{ owncloud__src + \"/\" + owncloud__variant + \"/\" + owncloud__register_full_version.stdout_lines[0] }}", "state": "directory", "owner": "{{ owncloud__system_user }}", "group": "{{ owncloud__system_group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download application files needed for verification", "module": "ansible.builtin.get_url", "index": 6, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/tarball.yml", "options": {"name": "Download application files needed for verification", "with_items": ["zip.asc", "zip.sha512"], "register": "owncloud__register_download_assurance", "until": "owncloud__register_download_assurance is succeeded", "when": "not ansible_check_mode", "tags": ["role::nextcloud:download", "role::nextcloud:verify"]}, "module_options": {"url": "{{ owncloud__variant_download_url_map[owncloud__variant] + \"/\" + owncloud__variant + \"-\" + owncloud__register_full_version.stdout_lines[0] + \".\" + item }}", "dest": "{{ owncloud__src + \"/\" + owncloud__variant + \"/\" + owncloud__register_full_version.stdout_lines[0] }}", "mode": "0644"}, "fqcn": "ansible.builtin.get_url", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Read checksum from file", "module": "ansible.builtin.shell", "index": 7, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/tarball.yml", "options": {"name": "Read checksum from file", "args": {"executable": "sh"}, "changed_when": false, "register": "owncloud__register_checksum", "when": "not ansible_check_mode", "tags": ["role::nextcloud:download", "role::nextcloud:verify"]}, "module_options": "cat {{ owncloud__src + \"/\" + owncloud__variant + \"/\" + owncloud__register_full_version.stdout_lines[0] + \"/\" + owncloud__variant + \"-\" + owncloud__register_full_version.stdout_lines[0] + \".zip.sha512\" }} | grep '.zip$'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download application archive", "module": "ansible.builtin.get_url", "index": 8, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/tarball.yml", "options": {"name": "Download application archive", "register": "owncloud__register_download_application", "until": "owncloud__register_download_application is succeeded", "when": "owncloud__register_download_assurance is changed", "tags": ["role::nextcloud:download", "role::nextcloud:verify"]}, "module_options": {"url": "{{ owncloud__variant_download_url_map[owncloud__variant] + \"/\" + owncloud__variant + \"-\" + owncloud__register_full_version.stdout_lines[0] + \".zip\" }}", "dest": "{{ owncloud__src + \"/\" + owncloud__variant + \"/\" + owncloud__register_full_version.stdout_lines[0] }}", "checksum": "sha512:{{ (owncloud__register_checksum.stdout_lines[0]).split(\" \") | first }}", "mode": "0644"}, "fqcn": "ansible.builtin.get_url", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Verify OpenPGP signature", "module": "ansible.builtin.shell", "index": 9, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/tarball.yml", "options": {"name": "Verify OpenPGP signature", "environment": {"LC_MESSAGES": "C"}, "args": {"executable": "bash"}, "changed_when": false, "register": "owncloud__register_verify_authenticity", "failed_when": "(owncloud__register_verify_authenticity.rc != 0 or (owncloud__register_verify_authenticity.stdout|replace(\" \",\"\")) != (owncloud__upstream_key_fingerprint|replace(\" \",\"\")))", "tags": ["role::nextcloud:verify"]}, "module_options": "set -o nounset -o pipefail -o errexit\ngpg --verify {{ owncloud__src + \"/\" + owncloud__variant + \"/\"\n                + owncloud__register_full_version.stdout_lines[0] + \"/\"\n                + owncloud__variant + \"-\" + owncloud__register_full_version.stdout_lines[0]\n                + \".zip.asc\" }} \\\n             {{ owncloud__src + \"/\" + owncloud__variant + \"/\"\n                + owncloud__register_full_version.stdout_lines[0] + \"/\"\n                + owncloud__variant + \"-\" + owncloud__register_full_version.stdout_lines[0]\n                + \".zip\" }} 2>&1 \\\n  | sed --silent 's/^Primary key fingerprint: \\(.*\\)$/\\1/p;'\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack the application archive", "module": "ansible.builtin.unarchive", "index": 10, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/tarball.yml", "options": {"name": "Unpack the application archive"}, "module_options": {"remote_src": true, "src": "{{ owncloud__src + \"/\" + owncloud__variant + \"/\" + owncloud__register_full_version.stdout_lines[0] + \"/\" + owncloud__variant + \"-\" + owncloud__register_full_version.stdout_lines[0] + \".zip\" }}", "dest": "{{ owncloud__deploy_path + \"/..\" }}", "owner": "{{ owncloud__app_user }}", "group": "{{ owncloud__app_group }}", "mode": "u=rwX,g=rX,o=rX", "creates": "{{ owncloud__deploy_path + \"/index.php\" }}"}, "fqcn": "ansible.builtin.unarchive", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove shortcut for the occ command", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/deploy_state_absent.yml", "options": {"name": "Remove shortcut for the occ command", "tags": ["role::owncloud:occ"]}, "module_options": {"path": "{{ owncloud__occ_bin_file_path }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage system package installation", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main.yml", "options": {"name": "Manage system package installation", "tags": ["role::owncloud:pkg"]}, "module_options": "system_package_management.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage tarball installation", "module": "ansible.builtin.include_tasks", "index": 4, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main.yml", "options": {"name": "Manage tarball installation", "when": "(owncloud__variant in [\"nextcloud\"])", "tags": ["role::owncloud:tarball"]}, "module_options": "tarball.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup ownCloud configuration", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main.yml", "options": {"name": "Setup ownCloud configuration", "tags": ["role::owncloud:config"]}, "module_options": "setup_owncloud.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure LDAP integration", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main.yml", "options": {"name": "Configure LDAP integration", "when": "(owncloud__ldap_enabled | bool)", "tags": ["role::owncloud:ldap"]}, "module_options": "ldap.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage custom ownCloud theme", "module": "ansible.builtin.include_tasks", "index": 7, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main.yml", "options": {"name": "Manage custom ownCloud theme", "tags": ["role::owncloud:theme"]}, "module_options": "theme.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy file to user profiles", "module": "ansible.builtin.include_tasks", "index": 8, "defined_in": "testdata/scm_repo/roles/owncloud/tasks/main.yml", "options": {"name": "Copy file to user profiles", "tags": ["role::owncloud:copy"]}, "module_options": "copy.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/owncloud"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "rsnapshot", "defined_in": "testdata/scm_repo/roles/rsnapshot", "task_yamls": ["testdata/scm_repo/roles/rsnapshot/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required APT packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Install required APT packages", "register": "rsnapshot__register_packages", "until": "rsnapshot__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (rsnapshot__base_packages + rsnapshot__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom backup scripts", "module": "ansible.builtin.copy", "index": 3, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Install custom backup scripts"}, "module_options": {"src": "usr/local/sbin/", "dest": "{{ (ansible_local.fhs.sbin | d(\"/usr/local/sbin\")) + \"/\" }}", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required directories", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Create required directories", "loop": [{"path": "{{ rsnapshot__config_dir }}", "mode": "0755"}, {"path": "{{ rsnapshot__snapshot_root }}", "mode": "0700"}]}, "module_options": {"path": "{{ item.path }}", "mode": "{{ item.mode }}", "state": "directory"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure rsnapshot-scheduler", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Configure rsnapshot-scheduler"}, "module_options": {"src": "etc/rsnapshot-scheduler.conf.j2", "dest": "/etc/rsnapshot-scheduler.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure rsnapshot backup scripts in cron", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Configure rsnapshot backup scripts in cron", "loop": ["hourly", "daily", "weekly", "monthly"]}, "module_options": {"src": "etc/cron/rsnapshot-wrapper.j2", "dest": "/etc/cron.{{ item }}/rsnapshot-wrapper", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that rsnapshot SSH identities are present", "module": "ansible.builtin.user", "index": 7, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Ensure that rsnapshot SSH identities are present", "loop": "{{ q(\"flattened\", (rsnapshot__ssh_default_identities + rsnapshot__ssh_identities)) | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "notify": ["Refresh host facts"], "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"name": "root", "generate_ssh_key": true, "ssh_key_file": ".ssh/{{ item.name }}", "ssh_key_type": "{{ item.type    | d(rsnapshot__ssh_key_type) }}", "ssh_key_bits": "{{ item.bits    | d(rsnapshot__ssh_key_bits) }}", "ssh_key_comment": "{{ item.comment | d(rsnapshot__ssh_key_comment) }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure /root/.ssh/known_hosts file exists", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Make sure /root/.ssh/known_hosts file exists", "args": {"creates": "/root/.ssh/known_hosts", "warn": false}}, "module_options": "touch /root/.ssh/known_hosts", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save rsnapshot local facts", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Save rsnapshot local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/rsnapshot.fact.j2", "dest": "/etc/ansible/facts.d/rsnapshot.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 11, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather facts from configured hosts", "module": "ansible.builtin.setup", "index": 12, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Gather facts from configured hosts", "delegate_to": "{{ item.name }}", "delegate_facts": true, "loop": "{{ rsnapshot__combined_hosts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ] and not item.fqdn|d() and hostvars[item.name]|d() and hostvars[item.name]['ansible_fqdn'] is not defined and (not rsnapshot__limit|d() or (item.name in rsnapshot__limit)))"}, "module_options": {"gather_subset": "!all", "fact_path": "/dev/null"}, "fqcn": "ansible.builtin.setup", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages on hosts", "module": "ansible.builtin.package", "index": 13, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Install required packages on hosts", "register": "rsnapshot__register_host_packages", "until": "rsnapshot__register_host_packages is succeeded", "delegate_to": "{{ item.name }}", "loop": "{{ rsnapshot__combined_hosts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\"), \"packages\": q(\"flattened\", rsnapshot__host_packages)} }}"}, "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ] and (item.rsync|d(True))|bool and hostvars[item.name]|d() and (not rsnapshot__limit|d() or (item.name in rsnapshot__limit)))"}, "module_options": {"name": "{{ q(\"flattened\", rsnapshot__host_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install restricted rsync script used for backups", "module": "ansible.builtin.shell", "index": 14, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Install restricted rsync script used for backups", "environment": {"rrsync_source": "{{ item.rrsync_source | d(rsnapshot__rrsync_source) }}", "rrsync_binary": "{{ item.rrsync_binary | d(rsnapshot__rrsync_binary) }}"}, "args": {"executable": "bash", "creates": "{{ item.rrsync_binary | d(rsnapshot__rrsync_binary) }}"}, "delegate_to": "{{ item.name }}", "loop": "{{ rsnapshot__combined_hosts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\"), \"packages\": q(\"flattened\", rsnapshot__host_packages)} }}"}, "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ] and (item.rsync|d(True))|bool and hostvars[item.name]|d() and (not rsnapshot__limit|d() or (item.name in rsnapshot__limit)))"}, "module_options": "set -o nounset -o pipefail -o errorexit\nif [ -r \"${rrsync_source}.gz\" ] ; then\n    gzip -d -c \"${rrsync_source}.gz\" > \"${rrsync_binary}\"\nelif [ -r \"${rrsync_source}\" ] ; then\n    cp \"${rrsync_source}\" \"${rrsync_binary}\"\nfi\nchmod 0755 \"${rrsync_binary}\"\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Deploy root ssh public key on configured hosts", "module": "ansible.posix.authorized_key", "index": 15, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Deploy root ssh public key on configured hosts", "delegate_to": "{{ item.fqdn | d(item.name) }}", "loop": "{{ rsnapshot__combined_hosts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "register": "rsnapshot__register_ssh_keys", "when": "(item.name|d() and item.state|d('present') not in [ 'ignore' ] and not (item.local|d())|bool and (item.ssh_key|d(True))|bool and (not rsnapshot__limit|d() or (item.name in rsnapshot__limit)))"}, "module_options": {"user": "{{ item.ssh_user | d(\"root\") }}", "key": "{{ ansible_local.rsnapshot.ssh_identities[item.ssh_identity | d(rsnapshot__ssh_main_identity)] if (ansible_local.rsnapshot.ssh_identities|d() and ansible_local.rsnapshot.ssh_identities[item.ssh_identity | d(rsnapshot__ssh_main_identity)]|d()) else \"\" }}", "key_options": "{{ item.ssh_options | d(rsnapshot__ssh_options) }},command=\"{{ item.ssh_command | d(rsnapshot__ssh_command) }}\"", "state": "{{ item.state | d(\"present\") }}"}, "fqcn": "ansible.posix.authorized_key", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove old SSH host fingerprints if keys were modified", "module": "ansible.builtin.shell", "index": 16, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Remove old SSH host fingerprints if keys were modified", "environment": {"item_fqdn": "{{ item.item.fqdn | d(hostvars[item.item.name].ansible_fqdn if hostvars[item.item.name]|d() else item.item.name) }}"}, "args": {"executable": "bash"}, "loop": "{{ rsnapshot__register_ssh_keys.results }}", "loop_control": {"label": "{{ {\"name\": item.item.name, \"state\": item.item.state|d(\"present\")} }}"}, "when": "(item.item.name|d() and item.item.state|d('present') not in [ 'absent', 'ignore' ] and not (item.item.local|d())|bool and (item.item.ssh_scan|d(True))|bool and item is changed and (not rsnapshot__limit|d() or (item.item.name in rsnapshot__limit)))"}, "module_options": "set -o nounset -o pipefail -o errorexit\nif type dig > /dev/null ; then\n    host_names=(\n        \"${item_fqdn}\"\n        $(dig +short A \"${item_fqdn}\")\n        $(dig +short AAAA \"${item_fqdn}\")\n        $(dig +search +short \"${item_fqdn}\")\n    )\n    for address in ${host_names[@]} ; do\n        ssh-keygen -R ${address}\n    done\nelse\n    ssh-keygen -R \"${item_fqdn}\"\nfi\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of already scanned host fingerprints", "module": "ansible.builtin.shell", "index": 17, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Get list of already scanned host fingerprints", "args": {"executable": "bash"}, "loop": "{{ rsnapshot__combined_hosts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ] and not (item.local|d())|bool and (item.ssh_scan|d(True))|bool and (not rsnapshot__limit|d() or (item.name in rsnapshot__limit)))", "register": "rsnapshot__register_known_hosts", "changed_when": false, "failed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && ssh-keygen -f /root/.ssh/known_hosts -F {{ item.fqdn | d(hostvars[item.name].ansible_fqdn if hostvars[item.name]|d() else item.name) }} | grep -q '^# Host {{ item.fqdn | d(hostvars[item.name].ansible_fqdn if hostvars[item.name]|d() else item.name) }} found'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Scan SSH fingerprints of the configured hosts", "module": "ansible.builtin.shell", "index": 18, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Scan SSH fingerprints of the configured hosts", "loop": "{{ rsnapshot__register_known_hosts.results }}", "loop_control": {"label": "{{ {\"name\": item.item.name, \"state\": item.item.state|d(\"present\")} }}"}, "when": "(item.item.name|d() and item.item.state|d('present') not in [ 'absent', 'ignore' ] and not (item.item.local|d())|bool and (item.item.ssh_scan|d(True))|bool and item.rc|d() > 0 and (not rsnapshot__limit|d() or (item.item.name in rsnapshot__limit)))"}, "module_options": "ssh-keyscan -H -T 10 -p {{ item.item.ssh_port | d(\"22\") }} {{ item.item.fqdn | d(hostvars[item.item.name].ansible_fqdn if hostvars[item.item.name]|d() else item.item.name) }} >> /root/.ssh/known_hosts", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove host configuration directories if requested", "module": "ansible.builtin.file", "index": 19, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Remove host configuration directories if requested", "loop": "{{ rsnapshot__combined_hosts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "when": "(item.name|d() and item.state|d('present') == 'absent' and (not rsnapshot__limit|d() or (item.name in rsnapshot__limit)))"}, "module_options": {"path": "{{ rsnapshot__config_dir + \"/\" + item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create host configuration directories", "module": "ansible.builtin.file", "index": 20, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Create host configuration directories", "loop": "{{ rsnapshot__combined_hosts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ] and (not rsnapshot__limit|d() or (item.name in rsnapshot__limit)))"}, "module_options": {"path": "{{ rsnapshot__config_dir + \"/\" + item.name }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate host configuration files", "module": "ansible.builtin.template", "index": 21, "defined_in": "testdata/scm_repo/roles/rsnapshot/tasks/main.yml", "options": {"name": "Generate host configuration files", "loop": "{{ (rsnapshot__combined_hosts | debops.debops.parse_kv_items(defaults={ \"options\":  (rsnapshot__combined_configuration | debops.debops.parse_kv_config), \"excludes\": (rsnapshot__combined_excludes      | debops.debops.parse_kv_items), \"includes\": (rsnapshot__combined_includes      | debops.debops.parse_kv_items) }, merge_keys=[\"excludes\", \"includes\"]) ) | product([ \"include.txt\", \"exclude.txt\", \"rsnapshot.conf\" ]) | list }}", "loop_control": {"label": "{{ {\"name\": item.0.name, \"state\": item.0.state|d(\"present\"), \"file\": item.1} }}"}, "when": "(item.0.name|d() and item.0.state|d('present') not in [ 'absent', 'ignore' ] and (not rsnapshot__limit|d() or (item.0.name in rsnapshot__limit)))"}, "module_options": {"src": "etc/rsnapshot/hosts/{{ item.1 }}.j2", "dest": "{{ rsnapshot__config_dir + \"/\" + item.0.name + \"/\" + item.1 }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rsnapshot"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "smstools", "defined_in": "testdata/scm_repo/roles/smstools", "task_yamls": ["testdata/scm_repo/roles/smstools/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install SMS Tools packages", "module": "ansible.builtin.apt", "index": 1, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Install SMS Tools packages", "with_items": ["smstools", "xinetd", "libconfig-tiny-perl"], "register": "smstools__register_packages", "until": "smstools__register_packages is succeeded"}, "module_options": "name={{ item }} state=present install_recommends=no", "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check current smsd home directory", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Check current smsd home directory", "args": {"executable": "bash"}, "register": "smstools_register_home", "changed_when": false}, "module_options": "set -o nounset -o pipefail -o errexit && getent passwd smsd | grep \"/home/smsd\" || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop smsd for home directory change", "module": "ansible.builtin.service", "index": 3, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Stop smsd for home directory change", "when": "smstools_register_home is defined and smstools_register_home.stdout|d()"}, "module_options": "name=smstools state=stopped", "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Fix smsd home directory", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Fix smsd home directory", "when": "smstools_register_home is defined and smstools_register_home.stdout|d()"}, "module_options": "name=smsd home=/var/spool/sms", "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start smsd with new home directory", "module": "ansible.builtin.service", "index": 5, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Start smsd with new home directory", "when": "smstools_register_home is defined and smstools_register_home.stdout|d()"}, "module_options": "name=smstools state=started", "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure smsd", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Configure smsd", "notify": ["Restart smstools"]}, "module_options": "src=etc/smsd.conf.j2 dest=/etc/smsd.conf owner=root group=root mode=0644", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure /srv/users home directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Make sure /srv/users home directory exists"}, "module_options": "dest=/srv/users state=directory owner=root group=root mode=0751", "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create SMS service system group", "module": "ansible.builtin.group", "index": 8, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Create SMS service system group"}, "module_options": "name={{ smstools_service_group }} system=yes state=present", "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create SMS service system user", "module": "ansible.builtin.user", "index": 9, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Create SMS service system user"}, "module_options": "name={{ smstools_service_user }} group={{ smstools_service_group }} system=yes home={{ smstools_service_home }} state=present shell=/bin/false", "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create directory for SMS service scripts", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Create directory for SMS service scripts"}, "module_options": "dest=/usr/local/lib/smstools state=directory owner=root group=staff mode=0755", "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install smsd scripts", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Install smsd scripts", "with_items": ["usr/local/bin/sendsms", "usr/local/lib/smstools/sms-service", "usr/local/lib/smstools/sms-transport", "usr/local/lib/smstools/test-sms-on-reboot"]}, "module_options": "src={{ item }}.j2 dest=/{{ item }} owner=smsd group=sms mode=0750", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install root scripts", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Install root scripts", "with_items": ["usr/local/lib/smstools/fix-device-permissions"]}, "module_options": "src={{ item }}.j2 dest=/{{ item }} owner=root group=root mode=0750", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Postfix configuration files", "module": "ansible.builtin.template", "index": 13, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Install Postfix configuration files", "with_items": ["postfix_recipient_canonical_map", "postfix_transport", "postfix_relay_recipient_map", "postfix_virtual_alias_map"], "notify": ["Reload postfix"]}, "module_options": "src=usr/local/lib/smstools/{{ item }}.j2 dest=/usr/local/lib/smstools/{{ item }} owner=root group=root mode=0644", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure access to sendsms via sudo", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Configure access to sendsms via sudo", "when": "(ansible_local|d() and ansible_local.sudo|d() and (ansible_local.sudo.installed|d())|bool)"}, "module_options": "src=etc/sudoers.d/smstools.j2 dest=/etc/sudoers.d/smstools owner=root group=root mode=0440", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure xinetd SMS service", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Configure xinetd SMS service", "notify": ["Reload xinetd"]}, "module_options": "src=etc/xinetd.d/sms.j2 dest=/etc/xinetd.d/sms owner=root group=root mode=0644", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure mail to SMS transport", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Configure mail to SMS transport", "with_items": ["etc/sms-senders", "etc/sms-msgdel", "etc/sms-transport.conf"]}, "module_options": "src={{ item }}.j2 dest=/{{ item }} owner=root group=root mode=0644", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Fix device permissions on boot in OpenVZ containers", "module": "ansible.builtin.lineinfile", "index": 17, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Fix device permissions on boot in OpenVZ containers", "register": "smstools_register_fixpermissions", "when": "(ansible_virtualization_type is defined and ansible_virtualization_type == 'openvz') and (ansible_virtualization_role is defined and ansible_virtualization_role == 'guest')"}, "module_options": "dest=/etc/rc.local state=present insertbefore='^exit 0' regexp='^/usr/local/lib/smstools/fix-device-permissions' line='/usr/local/lib/smstools/fix-device-permissions' mode='0755'", "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Fix permissions manually if installed", "module": "ansible.builtin.command", "index": 18, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Fix permissions manually if installed", "when": "smstools_register_fixpermissions is defined and smstools_register_fixpermissions is changed"}, "module_options": "/usr/local/lib/smstools/fix-device-permissions", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure SMS gateway test on reboot", "module": "ansible.builtin.cron", "index": 19, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Configure SMS gateway test on reboot", "when": "(smstools_test_recipients is defined and smstools_test_recipients)"}, "module_options": "name=\"SMS gateway test on reboot\" user={{ smstools_service_user }} job=\"/usr/local/lib/smstools/test-sms-on-reboot\" special_time=reboot state=present", "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if rsyslog is installed", "module": "ansible.builtin.stat", "index": 20, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Check if rsyslog is installed", "register": "smstools_register_rsyslog"}, "module_options": "path=/etc/rsyslog.d", "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure syslog", "module": "ansible.builtin.template", "index": 21, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Configure syslog", "notify": ["Restart rsyslogd"], "when": "(smstools_register_rsyslog is defined and smstools_register_rsyslog) and smstools_register_rsyslog.stat.exists"}, "module_options": "src=etc/rsyslog.d/smstools.conf.j2 dest=/etc/rsyslog.d/smstools.conf owner=root group=root mode=0644", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure logrotate", "module": "ansible.builtin.template", "index": 22, "defined_in": "testdata/scm_repo/roles/smstools/tasks/main.yml", "options": {"name": "Configure logrotate", "when": "(smstools_register_rsyslog is defined and smstools_register_rsyslog) and smstools_register_rsyslog.stat.exists"}, "module_options": "src=etc/logrotate.d/sms.j2 dest=/etc/logrotate.d/sms owner=root group=root mode=0644", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/smstools"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "apparmor", "defined_in": "testdata/scm_repo/roles/apparmor", "task_yamls": ["testdata/scm_repo/roles/apparmor/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Combine variables", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Combine variables"}, "module_options": {"apparmor__profile_status": "{{ apparmor__global_profile_status               | d({}) | combine(apparmor__host_group_profile_status | d({})) | combine(apparmor__host_profile_status       | d({})) }}", "apparmor__local_config": "{{ apparmor__local_dependent_config            | d({}) | combine(apparmor__local_config_global     | d({})) | combine(apparmor__local_group_config      | d({})) | combine(apparmor__local_host_config       | d({})) }}", "apparmor__tunables": "{{ (apparmor__tunables_dependent | d([]) | list) + (apparmor__global_tunables    | d([]) | list) + (apparmor__group_tunables     | d([]) | list) + (apparmor__host_tunables      | d([]) | list) }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Install required packages", "register": "apparmor__register_packages", "until": "apparmor__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (apparmor__base_packages + apparmor__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup apparmor=1 security=apparmor as kernel parameter", "module": "ansible.builtin.lineinfile", "index": 2, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Setup apparmor=1 security=apparmor as kernel parameter", "when": "((apparmor__manage_grub|d() | bool) and (apparmor__enabled|d() | bool))", "with_items": [{"regexp": "^GRUB_CMDLINE_LINUX=", "line": "GRUB_CMDLINE_LINUX=\"$GRUB_CMDLINE_LINUX_ANSIBLE_APPARMOR {{ apparmor__additional_kernel_parameters }}\"", "insertbefore": ""}, {"regexp": "^GRUB_CMDLINE_LINUX_ANSIBLE_APPARMOR=", "line": "GRUB_CMDLINE_LINUX_ANSIBLE_APPARMOR=\"apparmor=1 security=apparmor\"", "insertbefore": "^GRUB_CMDLINE_LINUX="}], "notify": ["Update grub"]}, "module_options": {"dest": "/etc/default/grub", "regexp": "{{ item.regexp }}", "line": "{{ item.line }}", "insertbefore": "{{ item.insertbefore }}", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove apparmor=1 security=apparmor from kernel parameter list", "module": "ansible.builtin.lineinfile", "index": 3, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Remove apparmor=1 security=apparmor from kernel parameter list", "when": "(apparmor__manage_grub and not (apparmor__enabled|d() | bool))", "notify": ["Update grub"]}, "module_options": {"dest": "/etc/default/grub", "regexp": "^GRUB_CMDLINE_LINUX=\"(.*?)\\$GRUB_CMDLINE_LINUX_ANSIBLE_APPARMOR(.*)\"", "line": "GRUB_CMDLINE_LINUX=\"\\1 \\2\"", "backrefs": true, "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if the running kernel has been started with AppArmor enabled", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Check if the running kernel has been started with AppArmor enabled", "check_mode": false}, "module_options": {"apparmor__fact_apparmor_enabled_and_loaded": "{{ (apparmor__enabled|d() | bool) and (ansible_cmdline.apparmor|d(0)|string == \"1\") and (ansible_cmdline.security|d(\"none\") == \"apparmor\") }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush the handlers in case the next tasks fails", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Flush the handlers in case the next tasks fails"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Send mail to administrator if reboot is required to enable AppArmor", "module": "mail", "index": 6, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Send mail to administrator if reboot is required to enable AppArmor", "when": "(apparmor__fact_apparmor_enabled_and_loaded|bool and apparmor__mail_to|d())"}, "module_options": {"from": "root@{{ ansible_fqdn }}", "subject": "{{ apparmor__mail_subject }}", "to": "{{ apparmor__mail_to|d([]) | list | join(\",\") }}", "charset": "utf8", "body": "{{ apparmor__mail_body }}"}, "fqcn": "community.general.mail", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Put all profiles into enforcement mode", "module": "ansible.builtin.shell", "index": 7, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Put all profiles into enforcement mode", "args": {"executable": "bash"}, "register": "apparmor__register_enforce_all_profiles", "changed_when": "(apparmor__register_enforce_all_profiles.stdout|d())", "when": "(apparmor__enforce_all_profiles|d() | bool)"}, "module_options": "set -o nounset -o pipefail -o errexit &&\nfind /etc/apparmor.d -maxdepth 1 -type f | while read file\ndo\n  if grep --quiet \"flags\\s*=.*complain\" \"$file\"; then\n    aa-enforce \"$file\"\n  fi\ndone\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set profile status", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Set profile status", "register": "apparmor__register_profile_status", "changed_when": false, "failed_when": "apparmor__register_profile_status.rc != 0 and (\n  \"Warning: unable to find a suitable fs in /proc/mounts, is it mounted?\"\n  not in apparmor__register_profile_status.stderr and\n  apparmor__fact_apparmor_enabled_and_loaded|bool\n)\n", "with_dict": "{{ apparmor__profile_status }}"}, "module_options": "aa-{{ item.value }} \"{{ item.key }}\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure AppArmor service is started", "module": "ansible.builtin.service", "index": 9, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Ensure AppArmor service is started", "when": "apparmor__fact_apparmor_enabled_and_loaded|bool"}, "module_options": {"name": "apparmor", "state": "started", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure tunables directory exists", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Ensure tunables directory exists"}, "module_options": {"path": "/etc/apparmor.d/tunables/home.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure tunables", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Configure tunables", "register": "apparmor__register_tunables"}, "module_options": {"src": "etc/apparmor.d/tunables/home.d/debops.j2", "dest": "/etc/apparmor.d/tunables/home.d/debops", "mode": "0640", "owner": "root", "group": "root"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure additions or overrides of system profiles", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Configure additions or overrides of system profiles", "register": "apparmor__register_local_config", "with_dict": "{{ apparmor__local_config }}"}, "module_options": {"src": "etc/apparmor.d/local/local.j2", "dest": "/etc/apparmor.d/local/{{ item.key }}", "mode": "0640", "owner": "root", "group": "root"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload changed profiles", "module": "ansible.builtin.command", "index": 13, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Reload changed profiles", "when": "(item is changed and apparmor__register_tunables is not changed)", "with_items": "{{ apparmor__register_local_config.results }}"}, "module_options": "apparmor_parser --replace \"/etc/apparmor.d/{{ item.item.key }}\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload AppArmor all profiles", "module": "ansible.builtin.service", "index": 14, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Reload AppArmor all profiles", "when": "apparmor__fact_apparmor_enabled_and_loaded|bool and apparmor__register_tunables is changed"}, "module_options": {"name": "apparmor", "state": "reloaded"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Unload AppArmor profiles", "module": "ansible.builtin.command", "index": 15, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Unload AppArmor profiles", "args": {"warn": false}, "when": "(not (apparmor__enabled|d() | bool))"}, "module_options": "service apparmor teardown", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure AppArmor service is stopped", "module": "ansible.builtin.service", "index": 16, "defined_in": "testdata/scm_repo/roles/apparmor/tasks/main.yml", "options": {"name": "Ensure AppArmor service is stopped", "when": "(not (apparmor__enabled|d() | bool))"}, "module_options": {"name": "apparmor", "state": "stopped", "enabled": false}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/apparmor"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "opendkim", "defined_in": "testdata/scm_repo/roles/opendkim", "task_yamls": ["testdata/scm_repo/roles/opendkim/tasks/main_env.yml", "testdata/scm_repo/roles/opendkim/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare OpenDKIM environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main_env.yml", "options": {"name": "Prepare OpenDKIM environment"}, "module_options": {"opendkim__secret__directories": "{{ lookup(\"template\", \"lookup/opendkim__secret__directories.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install OpenDKIM support", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Install OpenDKIM support", "register": "opendkim__register_packages", "until": "opendkim__register_packages is succeeded", "when": "ansible_pkg_mgr == 'apt'"}, "module_options": {"name": "{{ q(\"flattened\", (opendkim__base_packages + opendkim__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original OpenDKIM configuration", "module": "dpkg_divert", "index": 4, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Divert original OpenDKIM configuration", "loop": ["/etc/opendkim.conf", "/etc/default/opendkim"], "when": "ansible_pkg_mgr == 'apt'"}, "module_options": {"path": "{{ item }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Make sure Ansible local facts directory exists"}, "module_options": {"dest": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure OpenDKIM local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Configure OpenDKIM local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/opendkim.fact.j2", "dest": "/etc/ansible/facts.d/opendkim.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate OpenDKIM configuration from /etc", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Generate OpenDKIM configuration from /etc", "notify": ["Check opendkim and reload"]}, "module_options": {"src": "etc/opendkim.conf.j2", "dest": "/etc/opendkim.conf", "owner": "root", "group": "{{ opendkim__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate OpenDKIM configuration from /etc/default", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Generate OpenDKIM configuration from /etc/default", "notify": ["Check opendkim and reload"]}, "module_options": {"src": "etc/default/opendkim.j2", "dest": "/etc/default/opendkim", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that opendkim.service.d directory exists", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Ensure that opendkim.service.d directory exists", "when": "(ansible_service_mgr == 'systemd' and ansible_distribution_release not in [ 'trusty', 'xenial', 'bionic' ])"}, "module_options": {"path": "/etc/systemd/system/opendkim.service.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Fix OpenDKIM issues with systemd", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Fix OpenDKIM issues with systemd", "notify": ["Reload service manager", "Check opendkim and restart"], "when": "(ansible_service_mgr == 'systemd' and ansible_distribution_release not in [ 'trusty', 'xenial', 'bionic' ])"}, "module_options": {"src": "etc/systemd/system/opendkim.service.d/pid-socket.conf.j2", "dest": "/etc/systemd/system/opendkim.service.d/pid-socket.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that DomainKey directory exists", "module": "ansible.builtin.file", "index": 12, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Ensure that DomainKey directory exists"}, "module_options": {"path": "{{ opendkim__dkimkeys_path }}", "state": "directory", "owner": "{{ opendkim__user }}", "group": "{{ opendkim__group }}", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install helper scripts on Ansible Controller", "module": "ansible.builtin.copy", "index": 13, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Install helper scripts on Ansible Controller", "become": false, "delegate_to": "localhost", "run_once": true}, "module_options": {"src": "secret/opendkim/lib/", "dest": "{{ secret + \"/opendkim/lib/\" }}", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate DomainKeys on Ansible Controller", "module": "community.crypto.openssl_privatekey", "index": 14, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Generate DomainKeys on Ansible Controller", "with_flattened": ["{{ opendkim__combined_keys }}"], "become": false, "delegate_to": "localhost", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"size": "{{ item.size  | d(opendkim__default_key_size) }}", "type": "{{ (item.type | d(\"rsa\")) | upper }}", "path": "{{ secret + \"/opendkim/domainkeys/\" + (item.domain | d(opendkim__domain)) + \"_\" + (item.selector | d(item.name | d(item))) + \".pem\" }}", "regenerate": "{{ item.regenerate | d(\"full_idempotence\" if ansible_version.full is version(\"2.10\", \">=\") else omit) }}"}, "fqcn": "community.crypto.openssl_privatekey", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove DomainKeys from hosts when requested", "module": "ansible.builtin.file", "index": 15, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Remove DomainKeys from hosts when requested", "with_flattened": ["{{ opendkim__combined_keys }}"], "when": "item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ opendkim__dkimkeys_path + \"/\" + (item.domain | d(opendkim__domain)) + \"_\" + (item.selector | d(item.name | d(item))) + \".pem\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download DomainKeys from Ansible Controller", "module": "ansible.builtin.copy", "index": 16, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Download DomainKeys from Ansible Controller", "with_flattened": ["{{ opendkim__combined_keys }}"], "when": "item.state|d('present') != 'absent'", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "{{ secret + \"/opendkim/domainkeys/\" + (item.domain | d(opendkim__domain)) + \"_\" + (item.selector | d(item.name | d(item))) + \".pem\" }}", "dest": "{{ opendkim__dkimkeys_path + \"/\" + (item.domain | d(opendkim__domain)) + \"_\" + (item.selector | d(item.name | d(item))) + \".pem\" }}", "owner": "root", "group": "{{ opendkim__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate key configuration files", "module": "ansible.builtin.template", "index": 17, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Generate key configuration files", "notify": ["Check opendkim and reload"], "with_items": ["KeyTable", "SigningTable", "TrustedHosts"]}, "module_options": {"src": "etc/dkimkeys/{{ item }}.j2", "dest": "{{ opendkim__dkimkeys_path + \"/\" + item }}", "owner": "root", "group": "{{ opendkim__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create OpenDKIM socket directory in Postfix chroot", "module": "ansible.builtin.file", "index": 18, "defined_in": "testdata/scm_repo/roles/opendkim/tasks/main.yml", "options": {"name": "Create OpenDKIM socket directory in Postfix chroot", "when": "opendkim__postfix_integration|bool", "notify": ["Check opendkim and restart"]}, "module_options": {"path": "/var/spool/postfix/opendkim", "state": "directory", "owner": "{{ opendkim__user }}", "group": "{{ opendkim__postfix_group }}", "mode": "02750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/opendkim"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "hwraid", "defined_in": "testdata/scm_repo/roles/hwraid", "task_yamls": ["testdata/scm_repo/roles/hwraid/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Select supported release for current distribution", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/hwraid/tasks/main.yml", "options": {"name": "Select supported release for current distribution", "when": "hwraid_release in hwraid_distribution_releases[hwraid_distribution]"}, "module_options": {"hwraid_register_release": "{{ hwraid_release }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/hwraid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Select latest release for current distribution if no match found", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "testdata/scm_repo/roles/hwraid/tasks/main.yml", "options": {"name": "Select latest release for current distribution if no match found", "when": "hwraid_register_release is undefined"}, "module_options": {"hwraid_register_release": "{{ hwraid_distribution_releases[hwraid_distribution][0] }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/hwraid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure HWRaid APT repository", "module": "ansible.builtin.apt_repository", "index": 2, "defined_in": "testdata/scm_repo/roles/hwraid/tasks/main.yml", "options": {"name": "Configure HWRaid APT repository", "when": "hwraid_register_release is defined and hwraid_register_release"}, "module_options": {"repo": "deb http://hwraid.le-vert.net/{{ hwraid_distribution | lower }} {{ hwraid_register_release | lower }} main", "state": "present", "update_cache": true}, "fqcn": "ansible.builtin.apt_repository", "used_in": ["testdata/scm_repo/roles/hwraid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of active kernel modules", "module": "ansible.builtin.shell", "index": 3, "defined_in": "testdata/scm_repo/roles/hwraid/tasks/main.yml", "options": {"name": "Get list of active kernel modules", "args": {"executable": "bash"}, "register": "hwraid_register_modules", "changed_when": false}, "module_options": "set -o nounset -o pipefail -o errexit && lsmod | awk '{print $1}'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/hwraid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install packages for recognized RAID devices", "module": "ansible.builtin.apt", "index": 4, "defined_in": "testdata/scm_repo/roles/hwraid/tasks/main.yml", "options": {"name": "Install packages for recognized RAID devices", "with_subelements": ["{{ hwraid_device_database }}", "packages"], "register": "hwraid__register_packages", "until": "hwraid__register_packages is succeeded", "when": "((hwraid_register_release is defined and hwraid_register_release) and item.0.module not in hwraid_blacklist and item.0.module in hwraid_register_modules.stdout_lines)"}, "module_options": {"name": "{{ item.1 }}", "state": "present", "install_recommends": false}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/hwraid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure service starts at boot", "module": "ansible.builtin.service", "index": 5, "defined_in": "testdata/scm_repo/roles/hwraid/tasks/main.yml", "options": {"name": "Make sure service starts at boot", "with_subelements": ["{{ hwraid_device_database }}", "daemons"], "when": "((hwraid_register_release is defined and hwraid_register_release) and item.0.module not in hwraid_blacklist and item.0.module in hwraid_register_modules.stdout_lines)"}, "module_options": {"name": "{{ item.1 }}", "state": "started", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/hwraid"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "etckeeper", "defined_in": "testdata/scm_repo/roles/etckeeper", "task_yamls": ["testdata/scm_repo/roles/etckeeper/tasks/other_vcs.yml", "testdata/scm_repo/roles/etckeeper/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Set user, email for the bzr repository", "module": "ansible.builtin.command", "index": 0, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/other_vcs.yml", "options": {"name": "Set user, email for the bzr repository", "when": "(etckeeper__vcs == 'bzr' and etckeeper__vcs_user|d() and etckeeper__vcs_email|d())"}, "module_options": "etckeeper vcs whoami '{{ etckeeper__vcs_user }} <{{ etckeeper__vcs_email }}>'", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set user, email for the darcs repository", "module": "ansible.builtin.command", "index": 1, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/other_vcs.yml", "options": {"name": "Set user, email for the darcs repository", "when": "(etckeeper__vcs == 'darcs' and etckeeper__vcs_user|d() and etckeeper__vcs_email|d())"}, "module_options": "etckeeper vcs setpref author '{{ etckeeper__vcs_user }} <{{ etckeeper__vcs_email }}>'", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set user, email for the hg repository", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/other_vcs.yml", "options": {"name": "Set user, email for the hg repository", "when": "(etckeeper__vcs == 'hg' and etckeeper__vcs_user|d() and etckeeper__vcs_email|d())"}, "module_options": "etckeeper vcs --config 'ui.username={{ etckeeper__vcs_user }} <{{ etckeeper__vcs_email }}>'", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save etckeeper local facts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Save etckeeper local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/etckeeper.fact.j2", "dest": "/etc/ansible/facts.d/etckeeper.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 4, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original configuration under /etc", "module": "dpkg_divert", "index": 5, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Divert original configuration under /etc", "when": "etckeeper__enabled|bool and ansible_pkg_mgr == 'apt'"}, "module_options": {"path": "/etc/etckeeper/etckeeper.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 6, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Install required packages", "register": "etckeeper__register_packages", "until": "etckeeper__register_packages is succeeded", "when": "etckeeper__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", (etckeeper__base_packages + etckeeper__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create etckeeper configuration", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Create etckeeper configuration", "register": "etckeeper__register_config", "notify": ["Commit changes in etckeeper"], "when": "etckeeper__enabled|bool"}, "module_options": {"src": "etc/etckeeper/etckeeper.conf.j2", "dest": "/etc/etckeeper/etckeeper.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize VCS in /etc", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Initialize VCS in /etc", "args": {"creates": "/etc/.etckeeper"}, "register": "etckeeper__register_init", "notify": ["Commit changes in etckeeper"], "when": "etckeeper__enabled|bool"}, "module_options": "etckeeper init", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage entries in /etc/.gitignore", "module": "ansible.builtin.blockinfile", "index": 9, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Manage entries in /etc/.gitignore", "register": "etckeeper__register_gitignore", "notify": ["Commit changes in etckeeper"], "when": "etckeeper__enabled|bool and etckeeper__vcs == 'git'"}, "module_options": {"path": "/etc/.gitignore", "block": "{% for item in etckeeper__combined_gitignore | debops.debops.parse_kv_items %}\n{%   if (item.name|d() and item.state|d('present') != 'absent') %}\n{%     if item.comment|d() %}\n\n{{ item.comment | regex_replace('\\n$', '') | comment(prefix='', postfix='') }}{%     endif %}\n{{ (item.ignore | d(item.name)) | regex_replace('\\n$','') }}\n{%     if item.comment|d() %}\n\n{%     endif %}\n{%   endif %}\n{% endfor %}\n", "insertbefore": "BOF", "marker": "{{ etckeeper__block_marker }}", "create": true, "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.blockinfile", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install /etc/.gitattributes configuration", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Install /etc/.gitattributes configuration", "register": "etckeeper__register_gitattributes", "when": "etckeeper__enabled|bool and etckeeper__vcs == 'git'"}, "module_options": {"src": "etc/gitattributes.j2", "dest": "/etc/.gitattributes", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set repository permissions", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Set repository permissions", "when": "etckeeper__enabled|bool and etckeeper__vcs == 'git'"}, "module_options": {"path": "/etc/.git", "state": "directory", "owner": "root", "group": "{{ etckeeper__repository_group|d(\"root\") }}", "mode": "{{ etckeeper__repository_permissions|d(\"0700\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set user, email for the git repository", "module": "ini_file", "index": 12, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Set user, email for the git repository", "with_dict": {"name": "{{ etckeeper__vcs_user }}", "email": "{{ etckeeper__vcs_email }}"}, "when": "etckeeper__enabled|bool and etckeeper__vcs == 'git' and etckeeper__vcs_user|d() and etckeeper__vcs_email|d()"}, "module_options": {"dest": "/etc/.git/config", "section": "user", "option": "{{ item.key }}", "value": "{{ item.value }}", "mode": "0644"}, "fqcn": "community.general.ini_file", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove e-mail notification hook script", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Remove e-mail notification hook script", "when": "etckeeper__enabled|bool and etckeeper__email_on_commit_state == 'absent'"}, "module_options": {"path": "/etc/etckeeper/commit.d/99email", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install e-mail notification hook script", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Install e-mail notification hook script", "notify": ["Commit changes in etckeeper"], "when": "etckeeper__enabled|bool and etckeeper__email_on_commit_state == 'present'"}, "module_options": {"src": "etc/etckeeper/commit.d/99email.j2", "dest": "/etc/etckeeper/commit.d/99email", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure other VCS software", "module": "include_tasks", "index": 15, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Configure other VCS software", "when": "etckeeper__enabled|bool and etckeeper__vcs != 'git' and etckeeper__vcs_user|d() and etckeeper__vcs_email|d()"}, "module_options": "other_vcs.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Unstage and remove ignored files from Git index", "module": "ansible.builtin.shell", "index": 16, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Unstage and remove ignored files from Git index", "args": {"executable": "bash"}, "register": "etckeeper__register_git_rm_cached_ignored_files", "when": ["etckeeper__enabled|bool", "etckeeper__vcs == \"git\"", "etckeeper__register_gitignore is changed"], "changed_when": "etckeeper__register_git_rm_cached_ignored_files.stdout"}, "module_options": "set -o nounset -o pipefail -o errexit && etckeeper vcs ls-files -i -c --exclude-standard -z | xargs -0 --no-run-if-empty etckeeper vcs rm --cached --", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Commit changes in configuration", "module": "ansible.builtin.command", "index": 17, "defined_in": "testdata/scm_repo/roles/etckeeper/tasks/main.yml", "options": {"name": "Commit changes in configuration", "when": "(etckeeper__enabled|bool and (etckeeper__register_init is changed or etckeeper__register_config is changed or etckeeper__register_gitignore is changed or etckeeper__register_gitattributes is changed))"}, "module_options": "etckeeper commit '{{ etckeeper__commit_message_update if etckeeper__installed|bool else etckeeper__commit_message_init }}'", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/etckeeper"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "tgt", "defined_in": "testdata/scm_repo/roles/tgt", "task_yamls": ["testdata/scm_repo/roles/tgt/tasks/main.yml", "testdata/scm_repo/roles/tgt/tasks/tgt/pre_main.yml", "testdata/scm_repo/roles/tgt/tasks/tgt/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/tgt/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/tgt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/tgt/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/tgt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/tgt/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/tgt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps pre_tasks hook", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/tgt/tasks/main.yml", "options": {"name": "DebOps pre_tasks hook"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"tgt/pre_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/tgt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/tgt/tasks/main.yml", "options": {"name": "Install required packages", "register": "tgt__register_packages", "until": "tgt__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", tgt_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/tgt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure tgt global options", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/tgt/tasks/main.yml", "options": {"name": "Configure tgt global options", "notify": ["Reload tgt"]}, "module_options": {"src": "etc/tgt/conf.d/00_tgt_options.conf.j2", "dest": "/etc/tgt/conf.d/00_tgt_options.conf", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tgt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove iSCSI targets if requested", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/tgt/tasks/main.yml", "options": {"name": "Remove iSCSI targets if requested", "with_items": "{{ tgt_targets }}", "notify": ["Reload tgt"], "when": "((item.name is defined and item.name) and (item.delete is defined and item.delete))"}, "module_options": {"path": "/etc/tgt/conf.d/{{ item.filename | default(item.name) }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tgt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure iSCSI targets", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/tgt/tasks/main.yml", "options": {"name": "Configure iSCSI targets", "with_items": "{{ tgt_targets }}", "notify": ["Reload tgt"], "when": "((item.name is defined and item.name) and (item.delete is undefined or not item.delete))"}, "module_options": {"src": "etc/tgt/conf.d/target.conf.j2", "dest": "/etc/tgt/conf.d/{{ item.filename | default(item.name) }}.conf", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tgt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/tgt/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tgt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save iSCSI Target facts", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/tgt/tasks/main.yml", "options": {"name": "Save iSCSI Target facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/tgt.fact.j2", "dest": "/etc/ansible/facts.d/tgt.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tgt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps post_tasks hook", "module": "ansible.builtin.include_tasks", "index": 10, "defined_in": "testdata/scm_repo/roles/tgt/tasks/main.yml", "options": {"name": "DebOps post_tasks hook"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"tgt/post_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/tgt"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "sssd", "defined_in": "testdata/scm_repo/roles/sssd", "task_yamls": ["testdata/scm_repo/roles/sssd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/sssd/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sssd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/sssd/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sssd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure pam-mkhomedir to create home directories", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/sssd/tasks/main.yml", "options": {"name": "Configure pam-mkhomedir to create home directories", "register": "sssd__register_mkhomedir"}, "module_options": {"src": "usr/share/pam-configs/mkhomedir.j2", "dest": "/usr/share/pam-configs/mkhomedir", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sssd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable mkhomedir PAM module", "module": "ansible.builtin.shell", "index": 3, "defined_in": "testdata/scm_repo/roles/sssd/tasks/main.yml", "options": {"name": "Enable mkhomedir PAM module", "when": "sssd__register_mkhomedir is changed"}, "module_options": "pam-auth-update --package --remove mkhomedir 2>/dev/null && pam-auth-update --package --enable mkhomedir 2>/dev/null", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/sssd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install packages for sssd support", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/sssd/tasks/main.yml", "options": {"name": "Install packages for sssd support", "register": "sssd__register_packages", "until": "sssd__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", sssd__base_packages + sssd__packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/sssd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate sssd configuration", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/sssd/tasks/main.yml", "options": {"name": "Generate sssd configuration", "register": "sssd__register_config", "when": "sssd__ldap_base_dn|d()"}, "module_options": {"src": "etc/sssd/sssd.conf.j2", "dest": "/etc/sssd/sssd.conf", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sssd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart sssd if its configuration was modified", "module": "ansible.builtin.service", "index": 6, "defined_in": "testdata/scm_repo/roles/sssd/tasks/main.yml", "options": {"name": "Restart sssd if its configuration was modified", "when": "sssd__register_config is changed"}, "module_options": {"name": "sssd", "state": "restarted"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/sssd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/sssd/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sssd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save sssd local facts", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/sssd/tasks/main.yml", "options": {"name": "Save sssd local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/sssd.fact.j2", "dest": "/etc/ansible/facts.d/sssd.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sssd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 9, "defined_in": "testdata/scm_repo/roles/sssd/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/sssd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-sss.yml"]}, {"py/object": "struct4.Role", "name": "librenms", "defined_in": "testdata/scm_repo/roles/librenms", "task_yamls": ["testdata/scm_repo/roles/librenms/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Install required packages", "register": "librenms__register_packages", "until": "librenms__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (([ \"php5-memcached\" ] if librenms__memcached|d() else []) + librenms__base_packages + librenms__monitoring_packages + librenms__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable non-free MIBs support", "module": "ansible.builtin.lineinfile", "index": 2, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Enable non-free MIBs support"}, "module_options": {"dest": "/etc/snmp/snmp.conf", "state": "present", "regexp": "mibs\\s:", "line": "#mibs :", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create LibreNMS group", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Create LibreNMS group"}, "module_options": {"name": "{{ librenms__group }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create LibreNMS user", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Create LibreNMS user"}, "module_options": {"name": "{{ librenms__user }}", "group": "{{ librenms__group }}", "home": "{{ librenms__home }}", "shell": "{{ librenms__shell }}", "comment": "LibreNMS", "system": true, "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone LibreNMS source from deploy server", "module": "ansible.builtin.git", "index": 5, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Clone LibreNMS source from deploy server", "become": true, "become_user": "{{ librenms__user }}", "register": "librenms__register_source", "no_log": "{{ debops__no_log | d(True) }}", "tags": ["role::librenms:source"]}, "module_options": {"repo": "{{ librenms__install_repo }}", "dest": "{{ librenms__install_path }}", "version": "{{ librenms__install_version }}", "update": false}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update LibreNMS home directory permissions", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Update LibreNMS home directory permissions"}, "module_options": {"path": "{{ librenms__home }}", "state": "directory", "owner": "{{ librenms__user }}", "group": "{{ librenms__webserver_user }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure log directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Make sure log directory exists", "tags": ["role::librenms:config"]}, "module_options": {"dest": "{{ librenms__log_dir }}", "state": "directory", "owner": "{{ librenms__user }}", "group": "{{ librenms__group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure data directories exist", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Make sure data directories exist", "with_items": ["{{ librenms__data_path }}", "{{ librenms__rrd_dir }}"], "tags": ["role::librenms:config"]}, "module_options": {"dest": "{{ item }}", "state": "directory", "owner": "{{ librenms__user }}", "group": "{{ librenms__group }}", "mode": "0775"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize SNMP credentials", "module": "ansible.builtin.set_fact", "index": 9, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Initialize SNMP credentials", "run_once": true, "no_log": "{{ debops__no_log | d(True) }}", "tags": ["role::librenms:config", "role::librenms:database", "role::librenms:snmp_conf"]}, "module_options": {"librenms__fact_snmp_v3_authlevel": "{{ librenms__snmp_credentials[0][\"authlevel\"] }}", "librenms__fact_snmp_v3_authalgo": "{{ librenms__snmp_credentials[0][\"authalgo\"] }}", "librenms__fact_snmp_v3_cryptoalgo": "{{ librenms__snmp_credentials[0][\"cryptoalgo\"] }}", "librenms__fact_snmp_v3_authname": "{{ librenms__snmp_credentials[0][\"authname\"] }}", "librenms__fact_snmp_v3_authpass": "{{ librenms__snmp_credentials[0][\"authpass\"] }}", "librenms__fact_snmp_v3_cryptopass": "{{ librenms__snmp_credentials[0][\"cryptopass\"] }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create LibreNMS database", "module": "mysql_db", "index": 10, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Create LibreNMS database", "delegate_to": "{{ ansible_local.mariadb.delegate_to }}", "register": "librenms__register_database_status", "tags": ["role::librenms:database"]}, "module_options": {"name": "{{ librenms__database_name }}", "state": "present"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure LibreNMS", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Configure LibreNMS", "tags": ["role::librenms:config", "role::librenms:database"]}, "module_options": {"src": "srv/www/sites/public/config.php.j2", "dest": "{{ librenms__install_path + \"/config.php\" }}", "owner": "{{ librenms__user }}", "group": "{{ librenms__group }}", "mode": "{{ librenms__config_mode }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install missing PHP packages via Composer", "module": "composer", "index": 12, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Install missing PHP packages via Composer", "register": "librenms__register_composer", "until": "librenms__register_composer is succeeded", "when": "(librenms__register_database_status|d() and librenms__register_database_status is changed)", "become": true, "become_user": "{{ librenms__user }}"}, "module_options": {"command": "install", "working_dir": "{{ librenms__install_path }}"}, "fqcn": "community.general.composer", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Initialize database", "module": "ansible.builtin.command", "index": 13, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Initialize database", "args": {"chdir": "{{ librenms__install_path }}"}, "become": true, "become_user": "{{ librenms__user }}", "when": "(librenms__register_database_status|d() and librenms__register_database_status is changed)", "tags": ["role::librenms:database"]}, "module_options": "./daily.sh", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of existing users from LibreNMS database", "module": "ansible.builtin.command", "index": 14, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Get list of existing users from LibreNMS database", "become": true, "become_user": "{{ librenms__user }}", "register": "librenms__register_users", "changed_when": false, "check_mode": false, "tags": ["role::librenms:config", "role::librenms:admins"]}, "module_options": "mysql -ssNe \"select username from users\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create admin accounts", "module": "ansible.builtin.command", "index": 15, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Create admin accounts", "args": {"chdir": "{{ librenms__install_path }}"}, "check_mode": false, "become": true, "become_user": "{{ librenms__user }}", "with_items": "{{ librenms__admin_accounts }}", "when": "(librenms__admin_accounts|d([]) and (item not in librenms__register_users.stdout_lines))", "no_log": "{{ debops__no_log | d(True) }}", "tags": ["role::librenms:config", "role::librenms:admins"]}, "module_options": "php adduser.php {{ item }} {{ lookup(\"password\", secret + \"/credentials/\" + inventory_hostname + \"/librenms/admin/\" + item + \"/password\") }} 10", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure cron tasks", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Configure cron tasks", "tags": ["role::librenms:config"]}, "module_options": {"src": "etc/cron.d/librenms.j2", "dest": "/etc/cron.d/librenms", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check list of current user accounts", "module": "ansible.builtin.shell", "index": 17, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Check list of current user accounts", "args": {"executable": "bash"}, "register": "librenms__register_passwd", "changed_when": false, "check_mode": false, "when": "librenms__home_snmp_conf|d() and librenms__home_snmp_conf", "tags": ["role::librenms:config", "role::librenms:snmp_conf"]}, "module_options": "set -o nounset -o pipefail -o errexit && getent passwd | cut -d: -f1", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create ~/.snmp directories", "module": "ansible.builtin.file", "index": 18, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Create ~/.snmp directories", "with_items": "{{ librenms__home_snmp_conf }}", "check_mode": false, "when": "((librenms__home_snmp_conf|d() and librenms__home_snmp_conf) and (librenms__register_passwd|d() and item in librenms__register_passwd.stdout_lines))", "tags": ["role::librenms:config", "role::librenms:snmp_conf"]}, "module_options": {"path": "{{ \"~\" + item + \"/.snmp\" }}", "state": "directory", "owner": "{{ item }}", "group": "{{ item }}", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate ~/.snmp/snmp.conf configuration", "module": "ansible.builtin.template", "index": 19, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Generate ~/.snmp/snmp.conf configuration", "with_items": "{{ librenms__home_snmp_conf }}", "when": "((librenms__home_snmp_conf|d() and librenms__home_snmp_conf) and (librenms__register_passwd|d() and item in librenms__register_passwd.stdout_lines))", "tags": ["role::librenms:config", "role::librenms:snmp_conf"]}, "module_options": {"src": "home/snmp/snmp.conf.j2", "dest": "{{ \"~\" + item + \"/.snmp/snmp.conf\" }}", "owner": "{{ item }}", "group": "{{ item }}", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of known devices from LibreNMS database", "module": "ansible.builtin.command", "index": 20, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Get list of known devices from LibreNMS database", "become": true, "become_user": "{{ librenms__user }}", "register": "librenms__register_devices", "changed_when": false, "tags": ["role::librenms:config", "role::librenms:devices"]}, "module_options": "mysql -ssNe \"select hostname from devices\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add specified hosts to LibreNMS", "module": "ansible.builtin.command", "index": 21, "defined_in": "testdata/scm_repo/roles/librenms/tasks/main.yml", "options": {"name": "Add specified hosts to LibreNMS", "args": {"chdir": "{{ librenms__install_path }}"}, "become": true, "become_user": "{{ librenms__user }}", "with_items": "{{ librenms__devices }}", "when": "(librenms__devices|d([]) and (item not in librenms__register_devices.stdout_lines))", "tags": ["role::librenms:config", "role::librenms:devices"]}, "module_options": "php addhost.php {{ item }} any v3", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/librenms"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "kodi", "defined_in": "testdata/scm_repo/roles/kodi", "task_yamls": ["testdata/scm_repo/roles/kodi/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Ensure specified packages are in there desired state", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/kodi/tasks/main.yml", "options": {"name": "Ensure specified packages are in there desired state", "register": "kodi__register_packages", "until": "kodi__register_packages is succeeded", "tags": ["role::kodi:pkgs"]}, "module_options": {"name": "{{ q(\"flattened\", kodi__base_packages) }}", "state": "{{ \"present\" if (kodi__deploy_state == \"present\") else \"absent\" }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/kodi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Kodi system group", "module": "ansible.builtin.group", "index": 1, "defined_in": "testdata/scm_repo/roles/kodi/tasks/main.yml", "options": {"name": "Create Kodi system group"}, "module_options": {"name": "{{ kodi__group }}", "state": "{{ \"present\" if (kodi__deploy_state == \"present\") else \"absent\" }}", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/kodi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Kodi system user", "module": "ansible.builtin.user", "index": 2, "defined_in": "testdata/scm_repo/roles/kodi/tasks/main.yml", "options": {"name": "Create Kodi system user"}, "module_options": {"name": "{{ kodi__user }}", "group": "{{ kodi__group }}", "groups": "{{ kodi__groups | join(\",\") | default(omit) }}", "append": false, "home": "{{ kodi__home_path }}", "comment": "{{ kodi__gecos }}", "shell": "{{ kodi__shell }}", "state": "{{ \"present\" if (kodi__deploy_state == \"present\") else \"absent\" }}", "system": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/kodi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create polkit configuration", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/kodi/tasks/main.yml", "options": {"name": "Create polkit configuration", "when": "kodi__polkit_action|d()"}, "module_options": {"src": "etc/polkit-1/localauthority/50-local.d/kodi-actions.pkla.j2", "dest": "/etc/polkit-1/localauthority/50-local.d/kodi-actions.pkla", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/kodi"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove polkit configuration", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/kodi/tasks/main.yml", "options": {"name": "Remove polkit configuration", "when": "not kodi__polkit_action|d()"}, "module_options": {"path": "/etc/polkit-1/localauthority/50-local.d/kodi-actions.pkla", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/kodi"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "mailman", "defined_in": "testdata/scm_repo/roles/mailman", "task_yamls": ["testdata/scm_repo/roles/mailman/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required APT packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Install required APT packages", "register": "mailman__register_packages", "until": "mailman__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", mailman__base_packages + mailman__packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create systemd configuration directories", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Create systemd configuration directories", "loop": ["mailman3.service.d", "mailman3-web.service.d"], "when": "ansible_service_mgr == 'systemd'"}, "module_options": {"path": "{{ \"/etc/systemd/system/\" + item }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure systemd services", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Configure systemd services", "loop": ["mailman3.service.d", "mailman3-web.service.d"], "notify": ["Reload service manager"], "when": "ansible_service_mgr == 'systemd'"}, "module_options": {"src": "{{ \"etc/systemd/system/\" + item + \"/dependencies.conf.j2\" }}", "dest": "{{ \"/etc/systemd/system/\" + item + \"/dependencies.conf\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Mailman local facts", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Save Mailman local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/mailman.fact.j2", "dest": "/etc/ansible/facts.d/mailman.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 8, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Mailman Core configuration", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Generate Mailman Core configuration", "loop": ["mailman.cfg", "mailman-hyperkitty.cfg"], "notify": ["Restart mailman3"]}, "module_options": {"src": "etc/mailman3/{{ item }}.j2", "dest": "/etc/mailman3/{{ item }}", "group": "{{ mailman__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Mailman Web configuration", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Generate Mailman Web configuration", "notify": ["Restart mailman3-web"]}, "module_options": {"src": "etc/mailman3/mailman-web.py.j2", "dest": "/etc/mailman3/mailman-web.py", "group": "www-data", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required template directories", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Create required template directories", "loop": "{{ mailman__combined_templates | debops.debops.parse_kv_items }}", "when": "item.state|d('present') != 'absent'"}, "module_options": {"path": "{{ \"/var/lib/mailman3/templates/\" + (item.name | dirname) }}", "state": "directory", "owner": "{{ mailman__user }}", "group": "{{ mailman__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove custom Mailman templates if requested", "module": "ansible.builtin.file", "index": 12, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Remove custom Mailman templates if requested", "loop": "{{ mailman__combined_templates | debops.debops.parse_kv_items }}", "when": "item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ \"/var/lib/mailman3/templates/\" + item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate custom Mailman templates", "module": "ansible.builtin.copy", "index": 13, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Generate custom Mailman templates", "loop": "{{ mailman__combined_templates | debops.debops.parse_kv_items }}", "when": "item.state|d('present') != 'absent'"}, "module_options": {"content": "{{ item.content | d(\"\") }}", "dest": "{{ \"/var/lib/mailman3/templates/\" + item.name }}", "owner": "{{ mailman__user }}", "group": "{{ mailman__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Postfix lookup tables exist", "module": "ansible.builtin.command", "index": 14, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Ensure Postfix lookup tables exist", "args": {"creates": "/var/lib/mailman3/data/postfix_domains"}, "register": "mailman__register_aliases", "become": true, "become_user": "{{ mailman__user }}"}, "module_options": "mailman aliases", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Django superuser account", "module": "django_manage", "index": 15, "defined_in": "testdata/scm_repo/roles/mailman/tasks/main.yml", "options": {"name": "Create Django superuser account", "when": "mailman__register_aliases is changed and not mailman__ldap_enabled|bool"}, "module_options": {"command": "createsuperuser --noinput --username={{ mailman__superuser_name }} --email={{ mailman__superuser_email }}", "app_path": "/usr/share/mailman3-web"}, "fqcn": "community.general.django_manage", "used_in": ["testdata/scm_repo/roles/mailman"], "annotations": {"use-non-builtin-module": true}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "java", "defined_in": "testdata/scm_repo/roles/java", "task_yamls": ["testdata/scm_repo/roles/java/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/java/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/java"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Java packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/java/tasks/main.yml", "options": {"name": "Install Java packages", "register": "java__register_packages", "until": "java__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (java__base_packages + java__jdk_packages + java__packages + java__group_packages + java__host_packages + java__dependent_packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/java"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Java alternatives", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/java/tasks/main.yml", "options": {"name": "Update Java alternatives", "when": "java__alternatives|d()"}, "module_options": "update-java-alternatives -s {{ java__alternatives }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/java"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/java/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/java"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Java local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/java/tasks/main.yml", "options": {"name": "Save Java local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/java.fact.j2", "dest": "/etc/ansible/facts.d/java.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/java"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/java/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/java"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert default Java security policy configuration file", "module": "dpkg_divert", "index": 6, "defined_in": "testdata/scm_repo/roles/java/tasks/main.yml", "options": {"name": "Divert default Java security policy configuration file"}, "module_options": {"path": "{{ java__security_policy_path }}", "state": "present"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/java"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate default Java security policy configuration", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/java/tasks/main.yml", "options": {"name": "Generate default Java security policy configuration"}, "module_options": {"src": "etc/java-x-openjdk/security/java.policy.j2", "dest": "{{ java__security_policy_path }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/java"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "preseed", "defined_in": "testdata/scm_repo/roles/preseed", "task_yamls": ["testdata/scm_repo/roles/preseed/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/preseed/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/preseed"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/preseed/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/preseed"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove configuration directories if requested", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/preseed/tasks/main.yml", "options": {"name": "Remove configuration directories if requested", "loop": "{{ preseed__combined_definitions | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state, \"flavor\": item.flavor, \"release\": item.release} }}"}, "when": "item.state|d('present') in [ 'absent' ]"}, "module_options": {"path": "{{ preseed__www + \"/\" + item.flavor + \"/d-i/\" + item.release }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/preseed"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create configuration directories", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/preseed/tasks/main.yml", "options": {"name": "Create configuration directories", "loop": "{{ preseed__combined_definitions | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state, \"flavor\": item.flavor, \"release\": item.release} }}"}, "when": "item.state|d('present') not in [ 'absent', 'ignore', 'init' ]"}, "module_options": {"path": "{{ preseed__www + \"/\" + item.flavor + \"/d-i/\" + item.release }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/preseed"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Preseed configuration files", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/preseed/tasks/main.yml", "options": {"name": "Generate Preseed configuration files", "loop": "{{ preseed__combined_definitions | debops.debops.parse_kv_items(defaults={ \"options\": preseed__combined_configuration | debops.debops.parse_kv_config }) }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state, \"flavor\": item.flavor, \"release\": item.release} }}"}, "when": "item.state|d('present') not in [ 'absent', 'ignore', 'init' ]"}, "module_options": {"src": "srv/www/sites/debian-preseed/public/preseed.cfg.j2", "dest": "{{ preseed__www + \"/\" + item.flavor + \"/d-i/\" + item.release + \"/preseed.cfg\" }}", "owner": "root", "group": "www-data", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/preseed"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate postinst scripts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/preseed/tasks/main.yml", "options": {"name": "Generate postinst scripts", "loop": "{{ preseed__combined_definitions | debops.debops.parse_kv_items(defaults={ \"options\": preseed__combined_configuration | debops.debops.parse_kv_config }) }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state, \"flavor\": item.flavor, \"release\": item.release} }}"}, "when": "item.state|d('present') not in [ 'absent', 'ignore', 'init' ]"}, "module_options": {"src": "srv/www/sites/debian-preseed/public/postinst.sh.j2", "dest": "{{ preseed__www + \"/\" + item.flavor + \"/d-i/\" + item.release + \"/postinst.sh\" }}", "owner": "root", "group": "www-data", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/preseed"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/preseed/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/preseed"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Preseed local facts", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/preseed/tasks/main.yml", "options": {"name": "Save Preseed local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/preseed.fact.j2", "dest": "/etc/ansible/facts.d/preseed.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/preseed"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 8, "defined_in": "testdata/scm_repo/roles/preseed/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/preseed"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "postscreen", "defined_in": "testdata/scm_repo/roles/postscreen", "task_yamls": ["testdata/scm_repo/roles/postscreen/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/postscreen/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postscreen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Postscreen configuration files", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/postscreen/tasks/main.yml", "options": {"name": "Generate Postscreen configuration files", "with_items": ["postscreen_access.cidr", "postscreen_dnsbl_reply_map.pcre"], "notify": ["Check postfix and reload"]}, "module_options": {"src": "etc/postfix/{{ item }}.j2", "dest": "/etc/postfix/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postscreen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/postscreen/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postscreen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Postscreen local facts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/postscreen/tasks/main.yml", "options": {"name": "Save Postscreen local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/postscreen.fact.j2", "dest": "/etc/ansible/facts.d/postscreen.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postscreen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 4, "defined_in": "testdata/scm_repo/roles/postscreen/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/postscreen"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "gunicorn", "defined_in": "testdata/scm_repo/roles/gunicorn", "task_yamls": ["testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "testdata/scm_repo/roles/gunicorn/tasks/older_releases.yml", "testdata/scm_repo/roles/gunicorn/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Ensure that configuration directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Ensure that configuration directory exists"}, "module_options": {"path": "/etc/gunicorn", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that required groups exist", "module": "ansible.builtin.group", "index": 1, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Ensure that required groups exist", "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "when": "item.name|d() and item.state|d('present') != 'absent' and item.group|d()"}, "module_options": {"name": "{{ item.group }}", "system": "{{ (item.system|d(True)) | bool }}", "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that required users exist", "module": "ansible.builtin.user", "index": 2, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Ensure that required users exist", "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "when": "item.name|d() and item.state|d('present') != 'absent' and item.user|d() and item.home|d()"}, "module_options": {"name": "{{ item.user }}", "group": "{{ item.group | d(omit) }}", "home": "{{ item.home }}", "system": "{{ (item.system|d(True)) | bool }}", "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create log directories", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Create log directories", "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "when": "item.name|d() and item.state|d('present') != 'absent'"}, "module_options": {"path": "/var/log/gunicorn/{{ item.name }}", "state": "directory", "owner": "{{ item.user | d(gunicorn__user) }}", "group": "{{ item.group | d(gunicorn__group) }}", "mode": "0775"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create logrotate configs", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Create logrotate configs", "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "when": "item.name|d() and item.state|d('present') != 'absent'"}, "module_options": {"src": "etc/logrotate.d/gunicorn.j2", "dest": "/etc/logrotate.d/gunicorn-{{ item.name }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if systemd instances for Green Unicorn are configured", "module": "ansible.builtin.stat", "index": 5, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Check if systemd instances for Green Unicorn are configured", "register": "gunicorn__register_systemd_templated"}, "module_options": {"path": "/etc/systemd/system/gunicorn@.service"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop and disable Green Unicorn instances if requested", "module": "ansible.builtin.systemd", "index": 6, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Stop and disable Green Unicorn instances if requested", "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "notify": ["Reload systemd daemon (gunicorn)"], "when": "ansible_service_mgr == 'systemd' and gunicorn__register_systemd_templated.stat|d() and gunicorn__register_systemd_templated.stat.exists|bool and item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"name": "gunicorn@{{ item.name }}.service", "state": "stopped", "enabled": false}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate systemd configuration files", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Generate systemd configuration files", "with_items": ["gunicorn.service", "gunicorn@.service"], "notify": ["Reload systemd daemon (gunicorn)"], "when": "ansible_service_mgr == 'systemd'"}, "module_options": {"src": "etc/systemd/system/{{ item }}.j2", "dest": "/etc/systemd/system/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove per-instance systemd configuration", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Remove per-instance systemd configuration", "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "notify": ["Reload systemd daemon (gunicorn)"], "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "/etc/systemd/system/gunicorn@{{ item.name }}.service.d", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create per-instance systemd directory", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Create per-instance systemd directory", "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') != 'absent'"}, "module_options": {"path": "/etc/systemd/system/gunicorn@{{ item.name }}.service.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate per-instance systemd configuration", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Generate per-instance systemd configuration", "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "notify": ["Reload systemd daemon (gunicorn)", "Start Green Unicorn instances"], "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') != 'absent'"}, "module_options": {"src": "etc/systemd/system/gunicorn@application.service.d/instance.conf.j2", "dest": "/etc/systemd/system/gunicorn@{{ item.name }}.service.d/instance.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Unicorn instance configuration", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Remove Unicorn instance configuration", "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "when": "item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "/etc/gunicorn/{{ item.name }}.conf.py", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Unicorn instance configuration", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Generate Unicorn instance configuration", "notify": ["Start Green Unicorn instances"], "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "when": "item.name|d() and item.state|d('present') != 'absent'"}, "module_options": {"src": "etc/gunicorn/application.conf.py.j2", "dest": "/etc/gunicorn/{{ item.name }}.conf.py", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd configuration", "module": "ansible.builtin.meta", "index": 13, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Reload systemd configuration"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable Unicorn instances in systemd", "module": "ansible.builtin.systemd", "index": 14, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml", "options": {"name": "Enable Unicorn instances in systemd", "notify": ["Start Green Unicorn instances"], "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') != 'absent'"}, "module_options": {"name": "gunicorn@{{ item.name }}.service", "enabled": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure /etc/gunicorn.d/ directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/older_releases.yml", "options": {"name": "Make sure /etc/gunicorn.d/ directory exists"}, "module_options": {"path": "/etc/gunicorn.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove gunicorn configuration", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/older_releases.yml", "options": {"name": "Remove gunicorn configuration", "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "notify": ["Restart gunicorn"], "when": "item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "/etc/gunicorn.d/{{ item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate gunicorn configuration", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/older_releases.yml", "options": {"name": "Generate gunicorn configuration", "with_flattened": ["{{ gunicorn__applications }}", "{{ gunicorn__dependent_applications }}"], "notify": ["Restart gunicorn"], "when": "item.name|d() and item.state|d('present') != 'absent'"}, "module_options": {"src": "etc/gunicorn.d/application.j2", "dest": "/etc/gunicorn.d/{{ item.name }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Green Unicorn on older OS releases", "module": "include_tasks", "index": 2, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/main.yml", "options": {"name": "Configure Green Unicorn on older OS releases", "when": "ansible_distribution_release in [ 'trusty', 'xenial' ]"}, "module_options": "older_releases.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Green Unicorn on newer OS releases", "module": "include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/main.yml", "options": {"name": "Configure Green Unicorn on newer OS releases", "when": "ansible_distribution_release not in [ 'trusty', 'xenial' ]"}, "module_options": "newer_releases.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save gunicorn local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/main.yml", "options": {"name": "Save gunicorn local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/gunicorn.fact.j2", "dest": "/etc/ansible/facts.d/gunicorn.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/gunicorn/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/gunicorn"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "libvirt", "defined_in": "testdata/scm_repo/roles/libvirt", "task_yamls": ["testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml", "testdata/scm_repo/roles/libvirt/tasks/manage_networks.yml", "testdata/scm_repo/roles/libvirt/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Stop storage pools if requested", "module": "virt_pool", "index": 0, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml", "options": {"name": "Stop storage pools if requested", "with_flattened": "{{ libvirt__pools }}", "become": false, "register": "libvirt__register_stop", "when": "((item.name|d()) and (item.state|d() in [ 'inactive', 'undefined', 'absent' ]))"}, "module_options": {"name": "{{ item.name }}", "uri": "{{ libvirt__connections[item.uri | d(libvirt__uri)] }}", "state": "inactive"}, "fqcn": "community.libvirt.virt_pool", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Delete storage pools if requested", "module": "virt_pool", "index": 1, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml", "options": {"name": "Delete storage pools if requested", "with_flattened": "{{ libvirt__register_stop.results }}", "become": false, "when": "(item is changed and item.item.name|d() and item.item.delete|d(False) and item.item.state|d() in [ 'undefined' ] and item.item.type in [ 'dir', 'nfs', 'logical' ])"}, "module_options": {"name": "{{ item.item.name }}", "uri": "{{ libvirt__connections[item.item.uri | d(libvirt__uri)] }}", "command": "delete", "mode": "{{ item.item.mode | d(omit) }}"}, "fqcn": "community.libvirt.virt_pool", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Undefine storage pools if requested", "module": "virt_pool", "index": 2, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml", "options": {"name": "Undefine storage pools if requested", "with_flattened": "{{ libvirt__pools }}", "become": false, "when": "((item.name|d()) and (item.state|d() in [ 'undefined', 'absent' ]))"}, "module_options": {"name": "{{ item.name }}", "uri": "{{ libvirt__connections[item.uri | d(libvirt__uri)] }}", "state": "absent"}, "fqcn": "community.libvirt.virt_pool", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Define storage pools", "module": "virt_pool", "index": 3, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml", "options": {"name": "Define storage pools", "with_flattened": "{{ libvirt__pools }}", "become": false, "register": "libvirt__register_define", "when": "((item.name|d()) and (item.state|d('active') not in [ 'undefined', 'absent' ]))"}, "module_options": {"name": "{{ item.name }}", "xml": "{{ lookup(\"template\", \"lookup/pool/\" + item.type + \".xml.j2\") }}", "uri": "{{ libvirt__connections[item.uri | d(libvirt__uri)] }}", "state": "present"}, "fqcn": "community.libvirt.virt_pool", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Build new storage pools", "module": "virt_pool", "index": 4, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml", "options": {"name": "Build new storage pools", "with_flattened": "{{ libvirt__register_define.results }}", "become": false, "when": "(item is changed and item.item.name|d() and (item.item.state|d('active') not in [ 'undefined', 'absent' ]) and (item.item.build|d(True)) and (item.item.type in [ 'dir', 'nfs' ] or (item.item.type == 'logical' and item.item.devices|d())))"}, "module_options": {"name": "{{ item.item.name }}", "uri": "{{ libvirt__connections[item.item.uri | d(libvirt__uri)] }}", "command": "build", "mode": "{{ item.item.mode | d(omit) }}"}, "fqcn": "community.libvirt.virt_pool", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Start storage pools if not started", "module": "virt_pool", "index": 5, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml", "options": {"name": "Start storage pools if not started", "with_flattened": "{{ libvirt__pools }}", "become": false, "when": "(item.name|d() and item.state|d('active') in [ 'active' ])"}, "module_options": {"name": "{{ item.name }}", "state": "active", "uri": "{{ libvirt__connections[item.uri | d(libvirt__uri)] }}"}, "fqcn": "community.libvirt.virt_pool", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Set autostart attribute on storage pools", "module": "virt_pool", "index": 6, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml", "options": {"name": "Set autostart attribute on storage pools", "with_flattened": "{{ libvirt__pools }}", "become": false, "when": "(item.name|d() and item.state|d('active') not in [ 'undefined', 'absent' ])"}, "module_options": {"name": "{{ item.name }}", "autostart": "{{ \"yes\" if (item.autostart|d(True)) else \"no\" }}", "uri": "{{ libvirt__connections[item.uri | d(libvirt__uri)] }}"}, "fqcn": "community.libvirt.virt_pool", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Stop networks if requested", "module": "community.libvirt.virt_net", "index": 0, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/manage_networks.yml", "options": {"name": "Stop networks if requested", "with_flattened": "{{ libvirt__networks }}", "become": false, "when": "(item.name|d() and (item.state|d() in [ 'inactive', 'undefined', 'absent' ]))"}, "module_options": {"name": "{{ item.name }}", "uri": "{{ libvirt__connections[item.uri | d(libvirt__uri)] }}", "state": "inactive"}, "fqcn": "community.libvirt.virt_net", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Undefine networks if requested", "module": "virt_net", "index": 1, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/manage_networks.yml", "options": {"name": "Undefine networks if requested", "with_flattened": "{{ libvirt__networks }}", "become": false, "when": "(item.name|d() and (item.state|d() in [ 'undefined', 'absent' ]))"}, "module_options": {"name": "{{ item.name }}", "uri": "{{ libvirt__connections[item.uri | d(libvirt__uri)] }}", "state": "absent"}, "fqcn": "community.libvirt.virt_net", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Define networks", "module": "virt_net", "index": 2, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/manage_networks.yml", "options": {"name": "Define networks", "with_flattened": "{{ libvirt__networks }}", "become": false, "when": "((item.name|d()) and (item.state|d(\"active\") not in [ 'undefined', 'absent' ]) and (item.interface_present is undefined or (item.interface_present in ansible_interfaces and not item.uri|d())))"}, "module_options": {"name": "{{ item.name }}", "xml": "{{ lookup(\"template\", \"lookup/network/\" + item.type + \".xml.j2\") }}", "uri": "{{ libvirt__connections[item.uri | d(libvirt__uri)] }}", "state": "present"}, "fqcn": "community.libvirt.virt_net", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Start networks if not started", "module": "virt_net", "index": 3, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/manage_networks.yml", "options": {"name": "Start networks if not started", "with_flattened": "{{ libvirt__networks }}", "become": false, "when": "((item.name|d()) and (item.state is undefined or item.state in [ 'active' ]) and (item.interface_present is undefined or (item.interface_present in ansible_interfaces and not item.uri|d())))"}, "module_options": {"name": "{{ item.name }}", "state": "active", "uri": "{{ libvirt__connections[item.uri | d(libvirt__uri)] }}"}, "fqcn": "community.libvirt.virt_net", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Set autostart attribute on networks", "module": "virt_net", "index": 4, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/manage_networks.yml", "options": {"name": "Set autostart attribute on networks", "with_flattened": "{{ libvirt__networks }}", "become": false, "when": "((item.name|d()) and (item.state is undefined or item.state not in [ 'undefined', 'absent' ]) and (item.interface_present is undefined or (item.interface_present in ansible_interfaces and not item.uri|d())))"}, "module_options": {"name": "{{ item.name }}", "autostart": "{{ \"yes\" if (item.autostart|d(True)) else \"no\" }}", "uri": "{{ libvirt__connections[item.uri | d(libvirt__uri)] }}"}, "fqcn": "community.libvirt.virt_net", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install libvirt support", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/main.yml", "options": {"name": "Install libvirt support", "register": "libvirt__register_packages", "until": "libvirt__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (libvirt__base_packages + (libvirt__packages_map[ansible_distribution_release] | d(libvirt__packages)))) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create configuration directory", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/main.yml", "options": {"name": "Create configuration directory", "become": false}, "module_options": {"path": "~/.config/libvirt", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate libvirt.conf configuration", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/main.yml", "options": {"name": "Generate libvirt.conf configuration", "become": false}, "module_options": {"src": "home/config/libvirt/libvirt.conf.j2", "dest": "~/.config/libvirt/libvirt.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of groups admin account belongs to", "module": "ansible.builtin.command", "index": 4, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/main.yml", "options": {"name": "Get list of groups admin account belongs to", "register": "libvirt__register_groups", "changed_when": false, "check_mode": false, "become": false, "tags": ["role::libvirt:networks", "role::libvirt:pools"]}, "module_options": "groups", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage libvirt networks", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/main.yml", "options": {"name": "Manage libvirt networks", "when": "libvirt__group_map[ansible_distribution] in libvirt__register_groups.stdout.split(\" \")", "tags": ["role::libvirt:networks"]}, "module_options": "manage_networks.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage libvirt pools", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/libvirt/tasks/main.yml", "options": {"name": "Manage libvirt pools", "when": "libvirt__group_map[ansible_distribution] in libvirt__register_groups.stdout.split(\" \")", "tags": ["role::libvirt:pools"]}, "module_options": "manage_pools.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/libvirt"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "php", "defined_in": "testdata/scm_repo/roles/php", "task_yamls": ["testdata/scm_repo/roles/php/tasks/packages_absent_for_version.yml", "testdata/scm_repo/roles/php/tasks/main_env.yml", "testdata/scm_repo/roles/php/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Ensure older PHP packages are absent on reset for given PHP version", "module": "ansible.builtin.apt", "index": 0, "defined_in": "testdata/scm_repo/roles/php/tasks/packages_absent_for_version.yml", "options": {"name": "Ensure older PHP packages are absent on reset for given PHP version", "with_flattened": ["{{ php__server_api_packages }}", "{{ php__base_packages }}", "{{ php__packages }}", "{{ php__group_packages }}", "{{ php__host_packages }}", "{{ php__dependent_packages }}"]}, "module_options": {"name": "{{ item is search(\"php.*-\")|ternary(item, php__version_absent + \"-\" + item) }}", "state": "absent"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/php/tasks/main_env.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reset PHP Ansible local facts", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/php/tasks/main_env.yml", "options": {"name": "Reset PHP Ansible local facts", "notify": ["Refresh host facts"], "when": "php__reset|bool", "tags": ["meta::facts"]}, "module_options": {"path": "/etc/ansible/facts.d/php.fact", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather facts on reset", "module": "ansible.builtin.meta", "index": 2, "defined_in": "testdata/scm_repo/roles/php/tasks/main_env.yml", "options": {"name": "Gather facts on reset"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Detect PHP version from available packages", "module": "ansible.builtin.shell", "index": 3, "defined_in": "testdata/scm_repo/roles/php/tasks/main_env.yml", "options": {"name": "Detect PHP version from available packages", "environment": {"LC_ALL": "C"}, "args": {"executable": "/bin/bash"}, "register": "php__register_version", "check_mode": false, "changed_when": false, "tags": ["role::php:pools", "role::php:config"]}, "module_options": "set -o nounset -o pipefail -o errexit && apt-cache madison {{ php__version_preference | join(' ') }} \\ | awk '{print $3}' \\ | sed -e 's/^.*://' -e 's/\\+.*$//' -e 's/\\d+\\.\\d+//' \\ | awk -F'.' '{print $1\".\"$2}' \\ | head -n 1", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Detect PHP long version from available packages", "module": "ansible.builtin.shell", "index": 4, "defined_in": "testdata/scm_repo/roles/php/tasks/main_env.yml", "options": {"name": "Detect PHP long version from available packages", "environment": {"LC_ALL": "C"}, "args": {"executable": "/bin/bash"}, "register": "php__register_long_version", "check_mode": false, "changed_when": false, "tags": ["role::php:pools", "role::php:config"]}, "module_options": "set -o nounset -o pipefail -o errexit && apt-cache madison {{ 'php' + php__register_version.stdout }} \\ | awk '{print $3}' | sed -e 's/^.*://' -e 's/\\+.*$//' -e 's/\\-.*$//' \\ | head -n 1", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set PHP version", "module": "ansible.builtin.set_fact", "index": 5, "defined_in": "testdata/scm_repo/roles/php/tasks/main_env.yml", "options": {"name": "Set PHP version", "tags": ["role::php:pools", "role::php:config"]}, "module_options": {"php__version": "{{ ansible_local.php.version|d(php__register_version.stdout) }}", "php__long_version": "{{ ansible_local.php.long_version if (ansible_local|d() and ansible_local.php|d() and ansible_local.php.long_version|d() != \"(none)\") else php__register_long_version.stdout }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set PHP base paths", "module": "ansible.builtin.set_fact", "index": 6, "defined_in": "testdata/scm_repo/roles/php/tasks/main_env.yml", "options": {"name": "Set PHP base paths", "tags": ["role::php:pools", "role::php:config"]}, "module_options": {"php__etc_base": "{{ (\"/etc/php/\" + php__version) if (php__version is version_compare(\"7.0\", \">=\") or php__sury|bool) else \"/etc/php5\" }}", "php__lib_base": "{{ (\"/usr/lib/php/\" + php__version) if (php__version is version_compare(\"7.0\", \">=\") or php__sury|bool) else \"/usr/lib/php5\" }}", "php__run_base": "{{ \"/run/php\" if (php__version is version_compare(\"7.0\", \">=\") or php__sury|bool) else \"/run\" }}", "php__logrotate_lib_base": "{{ \"/usr/lib/php\" if (php__version is version_compare(\"7.0\", \">=\") or php__sury|bool) else \"/usr/lib/php5\" }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get available PHP packages for selected version", "module": "ansible.builtin.script", "index": 1, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Get available PHP packages for selected version", "environment": {"LC_ALL": "C", "PHP_VERSION": "{{ php__version }}"}, "register": "php__register_filtered_packages", "changed_when": false, "check_mode": false}, "module_options": "script/php-filter-packages.sh {{ php__combined_packages }}", "fqcn": "ansible.builtin.script", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install PHP packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Install PHP packages", "register": "php__register_packages", "until": "php__register_packages is succeeded", "notify": ["Restart php-fpm"]}, "module_options": {"name": "{{ q(\"flattened\", php__register_filtered_packages.stdout.strip().splitlines()) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install PHP Composer from upstream", "module": "ansible.builtin.get_url", "index": 3, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Install PHP Composer from upstream", "when": "php__composer_upstream_enabled|bool"}, "module_options": {"url": "{{ php__composer_upstream_url }}", "dest": "{{ php__composer_upstream_dest }}", "checksum": "{{ php__composer_upstream_checksum }}", "mode": "0755"}, "fqcn": "ansible.builtin.get_url", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure older PHP packages are absent on reset", "module": "ansible.builtin.include_tasks", "index": 4, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Ensure older PHP packages are absent on reset", "loop_control": {"loop_var": "php__version_absent"}, "when": "(php__reset|bool)", "with_items": "{{ php__version_preference | difference([ \"php\" + php__version|d(\"\") ]) | list }}"}, "module_options": "packages_absent_for_version.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create directory for php*-fpm logs", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Create directory for php*-fpm logs", "when": "\"fpm\" in php__server_api_packages"}, "module_options": {"path": "/var/log/php{{ php__version }}-fpm", "state": "directory", "owner": "root", "group": "root", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that required directories exist", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Ensure that required directories exist", "with_items": ["{{ php__etc_base }}/ansible", "{{ php__etc_base }}/fpm/pool.d"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow webadmins to control PHP-FPM system service using sudo", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Allow webadmins to control PHP-FPM system service using sudo", "when": "(ansible_local|d() and ansible_local.sudo|d() and (ansible_local.sudo.installed|d())|bool)"}, "module_options": {"src": "etc/sudoers.d/php-fpm_webadmins.j2", "dest": "/etc/sudoers.d/php-fpm_webadmins", "owner": "root", "group": "root", "mode": "0440"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate php.ini configuration", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Generate php.ini configuration", "with_flattened": ["{{ php__default_configuration }}", "{{ php__configuration }}", "{{ php__group_configuration }}", "{{ php__host_configuration }}", "{{ php__dependent_configuration }}"], "when": "item.state|d('present') != 'absent'", "notify": ["Restart php-fpm"], "tags": ["role::php:config"]}, "module_options": {"src": "etc/php/ansible/php.ini.j2", "dest": "{{ php__etc_base + \"/\" + item.path | d(\"ansible/\") + (item.filename | d(\"00-ansible\")) + \".ini\" }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove php.ini configuration if requested", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Remove php.ini configuration if requested", "with_flattened": ["{{ php__default_configuration }}", "{{ php__configuration }}", "{{ php__group_configuration }}", "{{ php__host_configuration }}", "{{ php__dependent_configuration }}"], "when": "item.state|d() and item.state == 'absent'", "notify": ["Restart php-fpm"], "tags": ["role::php:config"]}, "module_options": {"path": "{{ php__etc_base + \"/\" + item.path | d(\"ansible/\") + (item.filename | d(\"00-ansible\")) + \".ini\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Synchronize Ansible and PHP SAPI configuration", "module": "ansible.builtin.script", "index": 10, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Synchronize Ansible and PHP SAPI configuration", "environment": {"LC_ALL": "C"}, "register": "php__register_synchronize_config", "changed_when": "php__register_synchronize_config.stdout is defined and php__register_synchronize_config.stdout|d()", "notify": ["Restart php-fpm"], "tags": ["role::php:config"]}, "module_options": "script/php-synchronize-config.sh {{ php__version }}", "fqcn": "ansible.builtin.script", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert default PHP-FPM configuration and pool", "module": "dpkg_divert", "index": 11, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Divert default PHP-FPM configuration and pool", "with_items": ["{{ php__etc_base + \"/fpm/php-fpm.conf\" }}", "{{ php__etc_base + \"/fpm/pool.d/www.conf\" }}"], "when": "\"fpm\" in php__server_api_packages", "notify": ["Restart php-fpm"], "tags": ["role::php:pools", "role::php:config"]}, "module_options": {"path": "{{ item }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate php-fpm global configuration", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Generate php-fpm global configuration", "when": "\"fpm\" in php__server_api_packages", "notify": ["Restart php-fpm"], "tags": ["role::php:pools", "role::php:config"]}, "module_options": {"src": "etc/php/fpm/php-fpm.conf.j2", "dest": "{{ php__etc_base }}/fpm/php-fpm.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate php-fpm pool configuration", "module": "ansible.builtin.template", "index": 13, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Generate php-fpm pool configuration", "with_flattened": ["{{ php__default_pools }}", "{{ php__pools }}", "{{ php__group_pools }}", "{{ php__host_pools }}", "{{ php__dependent_pools }}"], "when": "\"fpm\" in php__server_api_packages and item.state|d(\"present\") != \"absent\"", "notify": ["Restart php-fpm"], "tags": ["role::php:pools", "role::php:config"]}, "module_options": {"src": "etc/php/fpm/pool.d/pool.conf.j2", "dest": "{{ php__etc_base }}/fpm/pool.d/{{ item.name }}.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove php-fpm pool configuration if requested", "module": "ansible.builtin.file", "index": 14, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Remove php-fpm pool configuration if requested", "with_flattened": ["{{ php__default_pools }}", "{{ php__pools }}", "{{ php__group_pools }}", "{{ php__host_pools }}", "{{ php__dependent_pools }}"], "when": "\"fpm\" in php__server_api_packages and item.state|d() and item.state == \"absent\"", "notify": ["Restart php-fpm"], "tags": ["role::php:pools", "role::php:config"]}, "module_options": {"dest": "{{ php__etc_base }}/fpm/pool.d/{{ item.name }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure required system groups exist", "module": "ansible.builtin.group", "index": 15, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Make sure required system groups exist", "with_flattened": ["{{ php__default_pools }}", "{{ php__pools }}", "{{ php__group_pools }}", "{{ php__host_pools }}", "{{ php__dependent_pools }}"], "when": "\"fpm\" in php__server_api_packages and item.state|d(\"present\") != \"absent\" and item.owner|d() and item.home|d()"}, "module_options": {"name": "{{ item.group | d(item.owner) }}", "system": "{{ (item.system | d(True)) | bool }}", "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure required system accounts exist", "module": "ansible.builtin.user", "index": 16, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Make sure required system accounts exist", "with_flattened": ["{{ php__default_pools }}", "{{ php__pools }}", "{{ php__group_pools }}", "{{ php__host_pools }}", "{{ php__dependent_pools }}"], "when": "\"fpm\" in php__server_api_packages and item.state|d(\"present\") != \"absent\" and item.owner|d() and item.home|d()"}, "module_options": {"name": "{{ item.owner }}", "group": "{{ item.group | d(item.owner) }}", "home": "{{ item.home }}", "system": "{{ (item.system | d(True)) | bool }}", "createhome": "{{ item.createhome | d(omit) }}", "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory is present", "module": "ansible.builtin.file", "index": 17, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory is present"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save PHP-FPM local facts", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Save PHP-FPM local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/php.fact.j2", "dest": "/etc/ansible/facts.d/php.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather facts if they were modified", "module": "ansible.builtin.meta", "index": 19, "defined_in": "testdata/scm_repo/roles/php/tasks/main.yml", "options": {"name": "Gather facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/php"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/service/php.yml"]}, {"py/object": "struct4.Role", "name": "minio", "defined_in": "testdata/scm_repo/roles/minio", "task_yamls": ["testdata/scm_repo/roles/minio/tasks/main_env.yml", "testdata/scm_repo/roles/minio/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare minio environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/minio/tasks/main_env.yml", "options": {"name": "Prepare minio environment"}, "module_options": {"minio__env_upstream_url_release": "{{ ansible_local.minio.release_tag if (ansible_local.minio.release_tag|d() and ansible_local.minio.release_tag.startswith(\"RELEASE.\") and not minio__upstream_upgrade|bool) else (lookup(\"url\", (minio__upstream_url_mirror + minio__upstream_platform + \"/minio.sha256sum\")) | regex_search(\"minio\\.RELEASE\\..+$\") | regex_replace(\"^minio\\.\",\"\")) }}", "minio__env_etc_services_dependent_list": "{{ lookup(\"template\", \"lookup/minio__env_etc_services_dependent_list.j2\", convert_data=False) | from_yaml }}", "minio__env_ferm_dependent_rules": "{{ lookup(\"template\", \"lookup/minio__env_ferm_dependent_rules.j2\", convert_data=False) | from_yaml }}", "minio__env_nginx_dependent_upstreams": "{{ lookup(\"template\", \"lookup/minio__env_nginx_dependent_upstreams.j2\", convert_data=False) | from_yaml }}", "minio__env_nginx_dependent_servers": "{{ lookup(\"template\", \"lookup/minio__env_nginx_dependent_servers.j2\", convert_data=False) | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required UNIX system group", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Create required UNIX system group"}, "module_options": {"name": "{{ minio__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required UNIX system account", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Create required UNIX system account"}, "module_options": {"name": "{{ minio__user }}", "group": "{{ minio__group }}", "groups": "{{ minio__additional_groups }}", "append": true, "home": "{{ minio__home }}", "comment": "{{ minio__comment }}", "shell": "{{ minio__shell }}", "skeleton": "/dev/null", "state": "present", "system": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required application directories", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Create required application directories", "loop": [{"path": "{{ minio__config_dir }}", "mode": "0750"}, {"path": "{{ minio__volumes_dir }}", "mode": "0750"}, {"path": "{{ minio__tls_certs_dir }}", "mode": "0700"}]}, "module_options": {"path": "{{ item.path }}", "state": "directory", "owner": "{{ minio__user }}", "group": "{{ minio__group }}", "mode": "{{ item.mode }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create volume directories", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Create volume directories", "loop": "{{ minio__volumes + minio__group_volumes + minio__host_volumes }}", "when": "item.state|d('present') not in [ 'absent', 'ignore', 'init' ]"}, "module_options": {"path": "{{ (\"\" if ((item.path | d(item)).startswith(\"/\")) else (minio__volumes_dir + \"/\")) + (item.path | d(item)) }}", "state": "directory", "owner": "{{ minio__user }}", "group": "{{ minio__group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink TLS files to MinIO home directory", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Symlink TLS files to MinIO home directory", "loop": [{"path": "{{ minio__tls_certs_dir + \"/private.key\" }}", "src": "{{ minio__tls_private_key }}", "mode": "0640"}, {"path": "{{ minio__tls_certs_dir + \"/public.crt\" }}", "src": "{{ minio__tls_public_crt }}", "mode": "0644"}], "when": "minio__pki_enabled|bool"}, "module_options": {"path": "{{ item.path }}", "src": "{{ item.src }}", "mode": "{{ item.mode }}", "state": "link"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install systemd configuration files", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Install systemd configuration files", "loop": ["etc/systemd/system/minio.service", "etc/systemd/system/minio@.service"], "notify": ["Reload service manager"]}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd daemon if required", "module": "ansible.builtin.meta", "index": 9, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Reload systemd daemon if required"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop and disable MinIO instances if requested", "module": "ansible.builtin.systemd", "index": 10, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Stop and disable MinIO instances if requested", "loop": "{{ minio__combined_instances | debops.debops.parse_kv_items }}", "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') in [ 'absent' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "minio@{{ item.name }}.service", "state": "stopped", "enabled": false}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove MinIO instance configuration files if requested", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Remove MinIO instance configuration files if requested", "loop": "{{ minio__combined_instances | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') in [ 'absent' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ minio__config_dir + \"/\" + item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate MinIO instance configuration files", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Generate MinIO instance configuration files", "loop": "{{ minio__combined_instances | debops.debops.parse_kv_items }}", "register": "minio__register_instance_config", "when": "item.name|d() and item.port|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/minio/instance.j2", "dest": "{{ minio__config_dir + \"/\" + item.name }}", "owner": "{{ minio__user }}", "group": "{{ minio__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start and enable MinIO instances", "module": "ansible.builtin.systemd", "index": 13, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Start and enable MinIO instances", "loop": "{{ minio__combined_instances | debops.debops.parse_kv_items }}", "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.port|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "minio@{{ item.name }}.service", "state": "started", "enabled": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start and enable MinIO service", "module": "ansible.builtin.systemd", "index": 14, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Start and enable MinIO service", "when": "ansible_service_mgr == 'systemd'"}, "module_options": {"name": "minio.service", "state": "started", "enabled": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart MinIO instances if configuration was modified", "module": "ansible.builtin.systemd", "index": 15, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Restart MinIO instances if configuration was modified", "loop": "{{ minio__register_instance_config.results }}", "when": "item is changed"}, "module_options": {"name": "minio@{{ item.item.name }}.service", "state": "restarted"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install PKI hook script", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Install PKI hook script", "when": "ansible_service_mgr == 'systemd' and minio__pki_enabled|bool"}, "module_options": {"src": "etc/pki/hooks/minio.j2", "dest": "/etc/pki/hooks/minio", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 17, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save MinIO local facts", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Save MinIO local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/minio.fact.j2", "dest": "/etc/ansible/facts.d/minio.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 19, "defined_in": "testdata/scm_repo/roles/minio/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/minio"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/service/minio.yml"]}, {"py/object": "struct4.Role", "name": "wpcli", "defined_in": "testdata/scm_repo/roles/wpcli", "task_yamls": ["testdata/scm_repo/roles/wpcli/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/wpcli/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/wpcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required APT packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/wpcli/tasks/main.yml", "options": {"name": "Install required APT packages", "register": "wpcli__register_packages", "until": "wpcli__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (wpcli__base_packages + wpcli__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/wpcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create wp-cli source directory", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/wpcli/tasks/main.yml", "options": {"name": "Create wp-cli source directory"}, "module_options": {"path": "{{ wpcli__src }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/wpcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download wp-cli release files", "module": "ansible.builtin.get_url", "index": 3, "defined_in": "testdata/scm_repo/roles/wpcli/tasks/main.yml", "options": {"name": "Download wp-cli release files", "loop": "{{ wpcli__release_files }}", "register": "wpcli__register_release_files", "until": "wpcli__register_release_files is succeeded", "when": "item.version == wpcli__version"}, "module_options": {"url": "{{ item.url }}", "dest": "{{ item.dest }}", "checksum": "{{ item.checksum }}", "mode": "0644"}, "fqcn": "ansible.builtin.get_url", "used_in": ["testdata/scm_repo/roles/wpcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Verify and install wp-cli binary", "module": "ansible.builtin.shell", "index": 4, "defined_in": "testdata/scm_repo/roles/wpcli/tasks/main.yml", "options": {"name": "Verify and install wp-cli binary", "args": {"executable": "bash"}, "when": "wpcli__register_release_files is changed"}, "module_options": "set -o nounset -o pipefail -o errexit && gpg --batch --decrypt --output {{ wpcli__src + \"/wp-cli-\" + wpcli__version + \".phar\" }} \\ {{ wpcli__src + \"/wp-cli-\" + wpcli__version + \".phar.gpg\" }} && ( install --mode 755 --owner root --group root \\ {{ wpcli__src + \"/wp-cli-\" + wpcli__version + \".phar\" }} {{ wpcli__binary }} && install --mode 644 --owner root --group root \\ {{ wpcli__src + \"/wp-cli-\" + wpcli__version + \".completion.bash\" }} {{ wpcli__bash_completion }} ) || ( rm -f {{ wpcli__src + \"/wp-cli-\" + wpcli__version + \".phar\" }} && exit 2 )", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/wpcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install additional wp-cli scripts", "module": "ansible.builtin.copy", "index": 5, "defined_in": "testdata/scm_repo/roles/wpcli/tasks/main.yml", "options": {"name": "Install additional wp-cli scripts"}, "module_options": {"src": "usr/local/bin/", "dest": "/usr/local/bin/", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/wpcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage wp-config.php security via cron", "module": "ansible.builtin.cron", "index": 6, "defined_in": "testdata/scm_repo/roles/wpcli/tasks/main.yml", "options": {"name": "Manage wp-config.php security via cron"}, "module_options": {"name": "Secure wp-config.php files on the server", "user": "root", "cron_file": "wpcli-secure-wpconfig", "job": "{{ wpcli__secure_wpconfig_command }}", "special_time": "{{ wpcli__secure_wpconfig_interval }}", "state": "{{ \"present\" if wpcli__secure_wpconfig_enabled|bool else \"absent\" }}"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/wpcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/wpcli/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/wpcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save wpcli local facts", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/wpcli/tasks/main.yml", "options": {"name": "Save wpcli local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/wpcli.fact.j2", "dest": "/etc/ansible/facts.d/wpcli.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/wpcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 9, "defined_in": "testdata/scm_repo/roles/wpcli/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/wpcli"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "snapshot_snapper", "defined_in": "testdata/scm_repo/roles/snapshot_snapper", "task_yamls": ["testdata/scm_repo/roles/snapshot_snapper/tasks/configure_snapper_volume.yml", "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Configure snapper volume", "module": "ansible.builtin.lineinfile", "index": 0, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/configure_snapper_volume.yml", "options": {"name": "Configure snapper volume", "with_dict": "{{ (snapshot_snapper__templates_combined[snapshot_snapper__volume.template|d(\"default\")]|d({})) | combine(snapshot_snapper__volume.config|d({})) }}"}, "module_options": {"dest": "/etc/snapper/configs/{{ snapshot_snapper__volume.name }}", "regexp": "^{{ item.key }}=", "line": "{{ item.key }}=\"{{ item.value }}\"", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Combine snapper inventory variables", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Combine snapper inventory variables", "tags": ["role::snapshot_snapper:reinit"]}, "module_options": {"snapshot_snapper__templates_combined": "{{ snapshot_snapper__templates | combine(snapshot_snapper__host_group_templates, recursive=True ) | combine(snapshot_snapper__host_templates      , recursive=True ) }}", "snapshot_snapper__volumes_combined": "{{ (snapshot_snapper__volumes            | list) + (snapshot_snapper__host_group_volumes | list) + (snapshot_snapper__host_volumes       | list) }}", "snapshot_snapper__combined_packages": "{{ (snapshot_snapper__base_packages | list) + (snapshot_snapper__packages      | list) }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure specified packages are in there desired state", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Ensure specified packages are in there desired state", "register": "snapshot_snapper__register_packages", "until": "snapshot_snapper__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", snapshot_snapper__combined_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original configuration under /etc", "module": "dpkg_divert", "index": 3, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Divert original configuration under /etc", "register": "snapshot_snapper__updatedb_diverted_register", "when": "ansible_os_family in [ \"Debian\" ]", "loop": "{{ snapshot_snapper__divert_files | flatten }}"}, "module_options": {"path": "{{ item }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Copy diverted configuration file to original location", "module": "ansible.builtin.copy", "index": 4, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Copy diverted configuration file to original location", "when": "snapshot_snapper__updatedb_diverted_register is changed", "with_flattened": "{{ snapshot_snapper__divert_files }}"}, "module_options": {"src": "{{ item }}.dpkg-divert", "dest": "{{ item }}", "remote_src": true, "force": false, "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if snapshots are already excluded from updatedb", "module": "ansible.builtin.command", "index": 5, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Check if snapshots are already excluded from updatedb", "failed_when": false, "changed_when": false, "check_mode": false, "when": "snapshot_snapper__directory|d() and \"mlocate\" in snapshot_snapper__combined_packages", "register": "snapshot_snapper__register_updatedb_configured"}, "module_options": "grep PRUNENAMES=.*{{ snapshot_snapper__directory }}.* /etc/updatedb.conf", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure updatedb to exclude snapshots", "module": "ansible.builtin.lineinfile", "index": 6, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Configure updatedb to exclude snapshots", "when": "snapshot_snapper__register_updatedb_configured.rc != 0"}, "module_options": {"dest": "/etc/updatedb.conf", "backrefs": true, "regexp": "^(# )?PRUNENAMES=(\".*)\"$", "line": "PRUNENAMES=\\2 {{ snapshot_snapper__directory }}\"", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check which snapper /etc/snapper/configs/ exist", "module": "ansible.builtin.stat", "index": 7, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Check which snapper /etc/snapper/configs/ exist", "when": "(snapshot_snapper__auto_reinit|bool and item.path|d() and item.name|d() and (item.state|d(\"present\") == \"present\"))", "register": "snapshot_snapper__register_snapper_configs", "tags": ["role::snapshot_snapper:reinit"], "with_items": "{{ snapshot_snapper__volumes_combined }}"}, "module_options": {"path": "/etc/snapper/configs/{{ item.name }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check which snapper snapshot directories exist", "module": "ansible.builtin.stat", "index": 8, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Check which snapper snapshot directories exist", "when": "(snapshot_snapper__auto_reinit|bool and item.path|d() and item.name|d() and (item.state|d(\"present\") == \"present\"))", "tags": ["role::snapshot_snapper:reinit"], "register": "snapshot_snapper__register_snapshot_directory", "with_items": "{{ snapshot_snapper__volumes_combined }}"}, "module_options": {"path": "{{ item.path + \"/\" + snapshot_snapper__directory }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Delete snapper configuration to automatically reinit", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Delete snapper configuration to automatically reinit", "tags": ["role::snapshot_snapper:reinit"], "when": "(item.0 is not skipped and item.1 is not skipped and item.0.stat.exists|d(item.0.stat.isreg) and not item.1.stat.exists)", "register": "snapshot_snapper__register_snapper_configs_delete", "with_together": ["{{ snapshot_snapper__register_snapper_configs.results }}", "{{ snapshot_snapper__register_snapshot_directory.results }}"]}, "module_options": {"path": "/etc/snapper/configs/{{ item.0.item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of active snapper volumes", "module": "ansible.builtin.find", "index": 10, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Get list of active snapper volumes", "register": "snapshot_snapper__register_snapper_configs_current", "when": "(snapshot_snapper__auto_reinit|bool)", "tags": ["role::snapshot_snapper:reinit"]}, "module_options": {"file_type": "file", "paths": ["/etc/snapper/configs/"], "hidden": false, "recurse": false}, "fqcn": "ansible.builtin.find", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update active snapper volumes in /etc/default/snapper", "module": "ansible.builtin.lineinfile", "index": 11, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Update active snapper volumes in /etc/default/snapper", "when": "(snapshot_snapper__auto_reinit|bool)", "tags": ["role::snapshot_snapper:reinit"]}, "module_options": {"dest": "/etc/default/snapper", "state": "present", "regexp": "^SNAPPER_CONFIGS=\"[^\"]*\"$", "line": "SNAPPER_CONFIGS=\"{{ snapshot_snapper__register_snapper_configs_current.files | map(attribute=\"path\") | map(\"replace\", \"/etc/snapper/configs/\", \"\") | join(\" \") }}\"", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure snapper templates", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Configure snapper templates", "with_dict": "{{ snapshot_snapper__templates_combined }}"}, "module_options": {"src": "etc/snapper/config-templates/item.j2", "dest": "/etc/snapper/config-templates/{{ item.key }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create initial configuration per volume", "module": "ansible.builtin.command", "index": 13, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Create initial configuration per volume", "args": {"creates": "/etc/snapper/configs/{{ item.name }}"}, "when": "(item.path|d() and item.name|d() and (item.state|d(\"present\") == \"present\"))", "with_items": "{{ snapshot_snapper__volumes_combined }}"}, "module_options": "snapper --config '{{ item.name|default(\"root\") }}' create-config {{ (\"'--template' '\" + item.template + \"'\") if (item.template|d()) else '' }} '{{ item.path }}'", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Adjust configuration per volume", "module": "ansible.builtin.include_tasks", "index": 14, "defined_in": "testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml", "options": {"name": "Adjust configuration per volume", "loop_control": {"loop_var": "snapshot_snapper__volume"}, "with_items": "{{ snapshot_snapper__volumes_combined }}"}, "module_options": "configure_snapper_volume.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/snapshot_snapper"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "cryptsetup", "defined_in": "testdata/scm_repo/roles/cryptsetup", "task_yamls": ["testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "testdata/scm_repo/roles/cryptsetup/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Set device list to process to a single device", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Set device list to process to a single device", "when": "cryptsetup__process_device is defined"}, "module_options": {"cryptsetup__process_devices": "{{ [ cryptsetup__process_device ] }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Assert that device configuration is valid", "module": "ansible.builtin.assert", "index": 1, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Assert that device configuration is valid", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": {"that": ["item.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present', 'absent' ]", "item.name is defined and item.name is string", "(item.state|d(cryptsetup__state) == 'ansible_controller_mounted' and 'remote_keyfile' not in item) or item.state|d(cryptsetup__state) != 'ansible_controller_mounted'", "item.keyfile_gen_type|d(cryptsetup__keyfile_gen_type) in [ 'binary', 'text' ]"]}, "fqcn": "ansible.builtin.assert", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create secrets directory on Ansible controller", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Create secrets directory on Ansible controller", "become": false, "delegate_to": "localhost", "when": "(item.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and 'remote_keyfile' not in item)", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": {"path": "{{ cryptsetup__secret_path + \"/\" + item.name }}", "state": "directory", "owner": "{{ cryptsetup__secret_owner }}", "group": "{{ cryptsetup__secret_group }}", "mode": "{{ cryptsetup__secret_mode }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate binary keyfile on the Ansible controller", "module": "ansible.builtin.shell", "index": 3, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Generate binary keyfile on the Ansible controller", "args": {"creates": "{{ item.keyfile | d(cryptsetup__secret_path + \"/\" + item.name + \"/keyfile.raw\") }}"}, "become": false, "delegate_to": "localhost", "register": "cryptsetup__register_keyfile_gen", "when": "(item.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and ('remote_keyfile' not in item) and (item.keyfile_gen_type|d(cryptsetup__keyfile_gen_type) == 'binary'))", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": "head -c {{ ((512/8) if (item.key_size|d(cryptsetup__key_size) == \"default\") else ((item.key_size|d(cryptsetup__key_size))/8)) | int }} \\ {{ cryptsetup__keyfile_source_dev | quote }} > \\ {{ (item.keyfile | d(cryptsetup__secret_path + \"/\" + item.name + \"/keyfile.raw\")) | quote }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate text/passphrase keyfile on the Ansible controller", "module": "ansible.builtin.shell", "index": 4, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Generate text/passphrase keyfile on the Ansible controller", "args": {"executable": "bash", "creates": "{{ item.keyfile | d(cryptsetup__secret_path + \"/\" + item.name + \"/keyfile.raw\") }}"}, "become": false, "delegate_to": "localhost", "register": "cryptsetup__register_keyfile_gen", "when": "(item.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and ('remote_keyfile' not in item) and (item.keyfile_gen_type|d(cryptsetup__keyfile_gen_type) == 'text'))", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": "set -o nounset -o pipefail -o errexit && {{ item.keyfile_gen_command|d(cryptsetup__keyfile_gen_command) }} \\ | tr -d \"\\n\" > {{ (item.keyfile | d(cryptsetup__secret_path + \"/\" + item.name + \"/keyfile.raw\")) | quote }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enforce permissions of the keyfile on the Ansible controller", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Enforce permissions of the keyfile on the Ansible controller", "tags": ["role::cryptsetup:backup"], "become": false, "delegate_to": "localhost", "when": "(item.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and not ansible_check_mode and 'remote_keyfile' not in item)", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": {"path": "{{ item.keyfile | d(cryptsetup__secret_path + \"/\" + item.name + \"/keyfile.raw\") }}", "owner": "{{ cryptsetup__secret_owner }}", "group": "{{ cryptsetup__secret_group }}", "mode": "{{ cryptsetup__secret_mode }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy keyfiles to remote system", "module": "ansible.builtin.copy", "index": 6, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Copy keyfiles to remote system", "when": "(item.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and not ansible_check_mode and 'remote_keyfile' not in item)", "with_items": "{{ cryptsetup__process_devices|d([]) }}", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"dest": "{{ (\"/dev/shm\" if (item.state|d(cryptsetup__state) == \"ansible_controller_mounted\") else cryptsetup__keyfile_remote_location) + \"/\" + item.name + \"_keyfile.raw\" }}", "backup": "{{ item.keyfile_backup         | d(omit) }}", "follow": "{{ item.keyfile_follow         | d(omit) }}", "force": "{{ item.keyfile_force          | d(omit) }}", "group": "{{ item.keyfile_group          | d(cryptsetup__keyfile_group) }}", "mode": "{{ item.keyfile_mode           | d(cryptsetup__keyfile_mode) }}", "owner": "{{ item.keyfile_owner          | d(cryptsetup__keyfile_owner) }}", "selevel": "{{ item.keyfile_selevel        | d(omit) }}", "serole": "{{ item.keyfile_serole         | d(omit) }}", "setype": "{{ item.keyfile_setype         | d(omit) }}", "seuser": "{{ item.keyfile_seuser         | d(omit) }}", "src": "{{ item.keyfile                | d(cryptsetup__secret_path + \"/\" + item.name + \"/keyfile.raw\") }}", "validate": "{{ item.keyfile_validate       | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if ciphertext block device exists", "module": "ansible.builtin.stat", "index": 7, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Check if ciphertext block device exists", "register": "cryptsetup__register_ciphertext_device", "when": "(item.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ])", "with_items": "{{ cryptsetup__process_devices|d([]) }}", "tags": ["role::cryptsetup:backup"]}, "module_options": {"path": "{{ item.ciphertext_block_device }}", "get_checksum": false}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when ciphertext block device does not exist but the state requires for it to exist", "module": "ansible.builtin.fail", "index": 8, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Fail when ciphertext block device does not exist but the state requires for it to exist", "when": "(item.0.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted' ] and not item.1.stat.exists)", "with_together": ["{{ cryptsetup__process_devices|d([]) }}", "{{ cryptsetup__register_ciphertext_device.results|d([]) }}"]}, "module_options": {"msg": "Ciphertext block device {{ item.0.ciphertext_block_device }} does not\nexist and state was requested to be {{ item.0.state|d(cryptsetup__state) }}!\n"}, "fqcn": "ansible.builtin.fail", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail when ciphertext block device does not exist but the keyfile has changed", "module": "ansible.builtin.fail", "index": 9, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Fail when ciphertext block device does not exist but the keyfile has changed", "when": "(item.0.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and not item.1.stat.exists and item.2 is changed)", "with_together": ["{{ cryptsetup__process_devices|d([]) }}", "{{ cryptsetup__register_ciphertext_device.results|d([]) }}", "{{ cryptsetup__register_keyfile_gen.results|d([]) }}"]}, "module_options": {"msg": "Ciphertext block device {{ item.0.ciphertext_block_device }} does not\nexist but the keyfile has just been generated. You will need to make the\nblock device available during a later Ansible run so that the encryption\nand filesystem layer can be setup. You will not see this error on later\nruns but that does not mean that the encryption and filesystem setup was\nsuccessfully until you make the block device available. See documentation\nfor details.\n"}, "fqcn": "ansible.builtin.fail", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create encryption layer", "module": "ansible.builtin.shell", "index": 10, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Create encryption layer", "args": {"executable": "bash"}, "register": "cryptsetup__register_cmd", "changed_when": "(\"Command successful.\" == cryptsetup__register_cmd.stdout)", "when": "(item.0.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and item.1.stat.exists and item.0.mode|d(\"luks\") == \"luks\")", "with_together": ["{{ cryptsetup__process_devices|d([]) }}", "{{ cryptsetup__register_ciphertext_device.results|d([]) }}"]}, "module_options": "set -o nounset -o pipefail -o errexit && cryptsetup isLuks \"{{ item.0.ciphertext_block_device }}\" || cryptsetup luksFormat --batch-mode --verbose {{ \"\" if (item.0.hash|d(cryptsetup__hash) == \"default\") else (\"--hash=\" + item.0.hash|d(cryptsetup__hash)) }} {{ \"\" if (item.0.cipher|d(cryptsetup__cipher) == \"default\") else (\"--cipher=\" + item.0.cipher|d(cryptsetup__cipher)) }} {{ \"\" if (item.0.key_size|d(cryptsetup__key_size) == \"default\") else (\"--key-size=\" + item.0.key_size|d(cryptsetup__key_size)|string) }} {{ \"\" if (item.0.iter_time|d(cryptsetup__iter_time) == \"default\") else (\"--iter-time=\" + item.0.iter_time|d(cryptsetup__iter_time)|string) }} {% if cryptsetup__use_dev_random|d(\"default\") != \"default\" %} {{ \"--use-random\" if cryptsetup__use_dev_random else \"--use-urandom\" }} {% endif %} --key-file '{{ item.0.remote_keyfile|d((\"/dev/shm\" if (item.0.state|d(cryptsetup__state) == \"ansible_controller_mounted\") else cryptsetup__keyfile_remote_location) + \"/\" + item.0.name + \"_keyfile.raw\") }}' '{{ item.0.ciphertext_block_device }}'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get UUID for ciphertext block device", "module": "ansible.builtin.command", "index": 11, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Get UUID for ciphertext block device", "register": "cryptsetup__register_ciphertext_blkid", "changed_when": false, "failed_when": "(cryptsetup__register_ciphertext_blkid.rc not in [ 0, 2 ])", "check_mode": false, "when": "(item.0.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and item.1.stat.exists)", "with_together": ["{{ cryptsetup__process_devices|d([]) }}", "{{ cryptsetup__register_ciphertext_device.results|d([]) }}"]}, "module_options": "blkid -s UUID -o value \"{{ item.0.ciphertext_block_device }}\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure ciphertext block device is configured in crypttab", "module": "crypttab", "index": 12, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Ensure ciphertext block device is configured in crypttab", "no_log": "{{ debops__no_log | d(True) }}", "when": "(item.0.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ])", "with_together": ["{{ cryptsetup__process_devices|d([]) }}", "{{ cryptsetup__register_ciphertext_blkid.results|d([]) }}", "{{ lookup(\"template\", \"lookup/cryptsetup__devices_crypttab_options.j2\") | from_yaml }}"]}, "module_options": {"backing_device": "{{ (\"UUID=\" + item.1.stdout) if (item.1.stdout|d() and item.0.use_uuid|d(cryptsetup__use_uuid)|bool) else item.0.ciphertext_block_device }}", "name": "{{ item.0.name }}", "opts": "{{ (item.2.crypttab_options|d(cryptsetup__crypttab_options|d([]))|list | sort | unique | join(\",\")) if ((item.2.crypttab_options|d(cryptsetup__crypttab_options|d([]))|list | length) > 0) else \"none\" }}", "password": "{{ item.0.remote_keyfile|d((\"/dev/shm\" if (item.0.state|d(cryptsetup__state) == \"ansible_controller_mounted\") else cryptsetup__keyfile_remote_location) + \"/\" + item.0.name + \"_keyfile.raw\") }}", "path": "{{ item.0.crypttab_path | d(omit) }}", "state": "present"}, "fqcn": "community.general.crypttab", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Start plaintext device mapper target", "module": "ansible.builtin.command", "index": 13, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Start plaintext device mapper target", "register": "cryptsetup__register_cryptdisks_start", "changed_when": "(\"(started)\" in cryptsetup__register_cryptdisks_start.stdout)", "when": "(item.0.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and item.1.stat.exists)", "with_together": ["{{ cryptsetup__process_devices|d([]) }}", "{{ cryptsetup__register_ciphertext_device.results|d([]) }}"]}, "module_options": "cryptdisks_start \"{{ item.0.name }}\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if plaintext device mapper target exists", "module": "ansible.builtin.stat", "index": 14, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Check if plaintext device mapper target exists", "register": "cryptsetup__register_plaintext_device", "when": "(item.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and (item.manage_filesystem|d(True) | bool))", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": {"path": "/dev/mapper/{{ item.name }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create filesystem on plaintext device mapper target", "module": "filesystem", "index": 15, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Create filesystem on plaintext device mapper target", "when": "(item.1|d() and item.1.stat|d() and item.1.stat.exists|d() and (item.0.create_filesystem|d(item.0.manage_filesystem|d(True)) | bool) and not (item.0.swap|d(False) | bool))", "with_together": ["{{ cryptsetup__process_devices|d([]) }}", "{{ cryptsetup__register_plaintext_device.results|d([]) }}"]}, "module_options": {"dev": "/dev/mapper/{{ item.0.name }}", "force": "{{ item.0.format_force   | d(omit) }}", "fstype": "{{ item.0.fstype         | d(cryptsetup__fstype) }}", "opts": "{{ item.0.format_options | d(omit) }}"}, "fqcn": "community.general.filesystem", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Ensure mount directories exist when manually mounted", "module": "ansible.builtin.file", "index": 16, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Ensure mount directories exist when manually mounted", "when": "(item.state|d(cryptsetup__state) in [ 'present' ] and (item.manage_filesystem|d(True) | bool))", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": {"path": "{{ item.mount | d(cryptsetup__mountpoint_parent_directory + \"/\" + item.name) }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create LUKS header backup", "module": "ansible.builtin.shell", "index": 17, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Create LUKS header backup", "tags": ["role::cryptsetup:backup"], "args": {"executable": "bash", "warn": false}, "changed_when": false, "when": "((item.0.backup_header|d(cryptsetup__header_backup) | bool) and item.0.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and item.1.stat.exists and item.0.mode|d(\"luks\") == \"luks\")", "with_together": ["{{ cryptsetup__process_devices|d([]) }}", "{{ cryptsetup__register_ciphertext_device.results|d([]) }}"]}, "module_options": "set -o nounset -o pipefail -o errexit &&\nrm -f {{ (cryptsetup__header_backup_remote_location + \"/\" + item.0.name + \"_header_backup.raw\") | quote }}\ncryptsetup luksHeaderBackup {{ item.0.ciphertext_block_device | quote }} \\\n  --header-backup-file {{ (cryptsetup__header_backup_remote_location + \"/\"\n                           + item.0.name + \"_header_backup.raw\") | quote }}\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Store the header backup in secret directory on to the Ansible controller", "module": "ansible.builtin.fetch", "index": 18, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Store the header backup in secret directory on to the Ansible controller", "tags": ["role::cryptsetup:backup"], "when": "((item.0.backup_header|d(cryptsetup__header_backup) | bool) and item.0.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and item.1.stat.exists and item.0.mode|d(\"luks\") == \"luks\")", "with_together": ["{{ cryptsetup__process_devices|d([]) }}", "{{ cryptsetup__register_ciphertext_device.results|d([]) }}"]}, "module_options": {"src": "{{ cryptsetup__header_backup_remote_location + \"/\" + item.0.name + \"_header_backup.raw\" }}", "dest": "{{ cryptsetup__secret_path + \"/\" + item.0.name + \"/header_backup.raw\" }}", "fail_on_missing": true, "flat": true}, "fqcn": "ansible.builtin.fetch", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enforce permissions of the header backup on the Ansible controller", "module": "ansible.builtin.file", "index": 19, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Enforce permissions of the header backup on the Ansible controller", "tags": ["role::cryptsetup:backup"], "become": false, "delegate_to": "localhost", "when": "((item.0.backup_header|d(cryptsetup__header_backup) | bool) and item.0.state|d(cryptsetup__state) in [ 'mounted', 'ansible_controller_mounted', 'unmounted', 'present' ] and item.1.stat.exists and item.0.mode|d(\"luks\") == \"luks\" and not ansible_check_mode)", "with_together": ["{{ cryptsetup__process_devices|d([]) }}", "{{ cryptsetup__register_ciphertext_device.results|d([]) }}"]}, "module_options": {"path": "{{ cryptsetup__secret_path + \"/\" + item.0.name + \"/header_backup.raw\" }}", "owner": "{{ cryptsetup__secret_owner }}", "group": "{{ cryptsetup__secret_group }}", "mode": "{{ cryptsetup__secret_mode }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage fstab and mount state of the plaintext device mapper targets", "module": "ansible.posix.mount", "index": 20, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Manage fstab and mount state of the plaintext device mapper targets", "when": "((item.manage_filesystem|d(True) | bool) and not (item.swap|d(False) | bool))", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": {"src": "/dev/mapper/{{ item.name }}", "fstype": "{{ item.fstype         | d(cryptsetup__fstype) }}", "name": "{{ item.mount          | d(cryptsetup__mountpoint_parent_directory + \"/\" + item.name) }}", "opts": "{{ (item.mount_options | d(cryptsetup__mount_options | d([]))) | list | sort | unique | join(\",\") }}", "dump": "{{ item.mount_dump     | d(omit) }}", "passno": "{{ item.mount_passno   | d(omit) }}", "fstab": "{{ item.fstab_path | d(cryptsetup__fstab_file) }}", "state": "{{ \"mounted\" if (item.state|d(cryptsetup__state) == \"ansible_controller_mounted\") else item.state|d(cryptsetup__state) }}"}, "fqcn": "ansible.posix.mount", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Disable swap devices when requested", "module": "ansible.builtin.shell", "index": 21, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Disable swap devices when requested", "changed_when": false, "when": "((item.swap|d(False) | bool) and (item.state|d(cryptsetup__state) in [\"unmounted\", \"absent\"]))", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": "if [ -e {{ (\"/dev/mapper/\" + item.name) | quote }} ]\nthen swapoff {{ (\"/dev/mapper/\" + item.name) | quote }}\nelse true\nfi\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage swap devices in fstab", "module": "ansible.posix.mount", "index": 22, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Manage swap devices in fstab", "register": "cryptsetup__register_swap_fstab", "when": "item.swap|d(False) | bool", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": {"src": "{{ \"/dev/mapper/\" + item.name }}", "name": "none", "fstype": "swap", "opts": "{{ ((item.swap_options|d([]) | list) + ([\"pri=\" + (item.priority | d(cryptsetup__swap_priority) | string)])) | list | sort | unique | join(\",\") }}", "dump": "0", "passno": "0", "fstab": "{{ item.fstab_path | d(cryptsetup__fstab_file) }}", "state": "{{ (item.state|d(cryptsetup__state) == \"absent\")|ternary(\"absent\", \"present\") }}"}, "fqcn": "ansible.posix.mount", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Enable swap devices", "module": "ansible.builtin.command", "index": 23, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Enable swap devices", "when": "(item is changed and (item.item.swap|d(False) | bool) and (item.item.state|d(cryptsetup__state) in ['mounted', 'ansible_controller_mounted']))", "with_items": "{{ cryptsetup__register_swap_fstab.results|d([]) }}"}, "module_options": "swapon --priority {{ (item.item.priority | d(cryptsetup__swap_priority) | string) | quote }} {{ (\"/dev/mapper/\" + item.item.name) | quote }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure mount directory is absent", "module": "ansible.builtin.file", "index": 24, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Ensure mount directory is absent", "when": "(item.state|d(cryptsetup__state) in [ 'absent' ])", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": {"path": "{{ item.mount | d(cryptsetup__mountpoint_parent_directory + \"/\" + item.name) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop plaintext device mapper target", "module": "ansible.builtin.command", "index": 25, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Stop plaintext device mapper target", "register": "cryptsetup__register_cryptdisks_stop", "changed_when": "(\"(stopping)\" in cryptsetup__register_cryptdisks_stop.stdout)", "failed_when": "( cryptsetup__register_cryptdisks_stop.rc != 0 and not ( ('Stopping crypto disk...' == cryptsetup__register_cryptdisks_stop.stdout or 'failed, not found in crypttab' in cryptsetup__register_cryptdisks_stop.stdout) and cryptsetup__register_cryptdisks_stop.rc == 1) )", "when": "(item.0.state|d(cryptsetup__state) in [ 'unmounted', 'absent' ] or (item.0.state|d(cryptsetup__state) in [ 'present' ] and item.1 is changed) )", "with_together": ["{{ cryptsetup__process_devices|d([]) }}", "{{ cryptsetup__register_cryptdisks_start.results|d([]) }}"]}, "module_options": "cryptdisks_stop \"{{ item.0.name }}\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure ciphertext block device is absent in crypttab", "module": "crypttab", "index": 26, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Ensure ciphertext block device is absent in crypttab", "when": "(item.state|d(cryptsetup__state) in [ 'absent' ])", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": {"name": "{{ item.name }}", "path": "{{ item.crypttab_path | d(omit) }}", "state": "absent"}, "fqcn": "community.general.crypttab", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Check if remote keyfiles are regular files", "module": "ansible.builtin.stat", "index": 27, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Check if remote keyfiles are regular files", "register": "cryptsetup__register_stat_remote_keyfile", "when": "(item.state|d(cryptsetup__state) in [ 'ansible_controller_mounted', 'absent'])", "with_items": "{{ cryptsetup__process_devices|d([]) }}"}, "module_options": {"path": "{{ (item.remote_keyfile|d((\"/dev/shm\" if (item.state|d(cryptsetup__state) == \"ansible_controller_mounted\") else cryptsetup__keyfile_remote_location) + \"/\" + item.name + \"_keyfile.raw\")) }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure keyfile is unaccessible on the remote system", "module": "ansible.builtin.command", "index": 28, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Ensure keyfile is unaccessible on the remote system", "args": {"removes": "{{ item.stat.path }}"}, "when": "(item.item.state|d(cryptsetup__state) in [ 'ansible_controller_mounted', 'absent'] and item.stat.exists and item.stat.isreg)", "with_items": "{{ cryptsetup__register_stat_remote_keyfile.results|d([]) }}"}, "module_options": "{{ cryptsetup__keyfile_shred_command }} {{ item.stat.path | quote }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure header backup is unaccessible on the remote system", "module": "ansible.builtin.command", "index": 29, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml", "options": {"name": "Ensure header backup is unaccessible on the remote system", "args": {"removes": "{{ cryptsetup__header_backup_remote_location + \"/\" + item.name + \"_header_backup.raw\" }}"}, "when": "((item.state|d(cryptsetup__state) == 'absent' or not (item.backup_header|d(cryptsetup__header_backup) | bool)) and 'remote_keyfile' not in item)", "with_items": "{{ cryptsetup__process_devices|d([]) }}", "tags": ["role::cryptsetup:backup"]}, "module_options": "{{ cryptsetup__header_backup_shred_command }} {{ cryptsetup__header_backup_remote_location + \"/\" + item.name + \"_header_backup.raw\" | quote }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check for Ansible version without known vulnerabilities", "module": "ansible.builtin.assert", "index": 1, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/main.yml", "options": {"name": "Check for Ansible version without known vulnerabilities", "run_once": true, "delegate_to": "localhost", "tags": ["play::security-assertions", "role::cryptsetup:backup"]}, "module_options": {"that": ["ansible_version.full is version_compare(\"2.2.3.0\", \">=\")"], "msg": "VULNERABLE or unsupported Ansible version DETECTED, please update to\nAnsible >= v2.2.3 or a newer!\nTo skip, add \"--skip-tags play::security-assertions\" parameter. Refer to\nthe changelog of debops.cryptsetup for details. Exiting.\n"}, "fqcn": "ansible.builtin.assert", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Assert that combined device configuration is valid", "module": "ansible.builtin.assert", "index": 2, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/main.yml", "options": {"name": "Assert that combined device configuration is valid", "run_once": true, "delegate_to": "localhost"}, "module_options": {"that": ["(cryptsetup__combined_devices | map(attribute=\"ciphertext_block_device\") | unique | length) == (cryptsetup__combined_devices | length)", "(cryptsetup__combined_devices | map(attribute=\"name\") | unique | length) == (cryptsetup__combined_devices | length)"]}, "fqcn": "ansible.builtin.assert", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Assert that /dev/shm/ is stored in RAM (assumed to be non-persistent)", "module": "ansible.builtin.command", "index": 3, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/main.yml", "options": {"name": "Assert that /dev/shm/ is stored in RAM (assumed to be non-persistent)", "changed_when": false}, "module_options": "df /dev/shm --type tmpfs", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure specified packages are in there desired state", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/main.yml", "options": {"name": "Ensure specified packages are in there desired state", "register": "cryptsetup__register_packages", "until": "cryptsetup__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", cryptsetup__base_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create keyfile and backup directories on the remote system", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/main.yml", "options": {"name": "Create keyfile and backup directories on the remote system", "when": "item.condition", "with_flattened": [{"path": "{{ cryptsetup__keyfile_remote_location }}", "condition": "{{ (cryptsetup__combined_devices | selectattr(\"remote_keyfile\", \"undefined\") | list | length) > 0 }}"}, {"path": "{{ cryptsetup__header_backup_remote_location }}", "condition": "{{ ((cryptsetup__combined_devices | selectattr(\"backup_header\", \"defined\") | selectattr(\"backup_header\") | list | length) > 0) or (cryptsetup__header_backup|bool and ((cryptsetup__combined_devices | selectattr(\"backup_header\", \"undefined\") | list | length) > 0)) }}"}]}, "module_options": {"path": "{{ item.path }}", "state": "directory", "owner": "root", "group": "root", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage Cryptsetup devices in parallel", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/main.yml", "options": {"name": "Manage Cryptsetup devices in parallel", "when": "cryptsetup__devices_execution_strategy == 'parallel'", "vars": {"cryptsetup__process_devices": "{{ cryptsetup__combined_devices }}"}}, "module_options": "manage_devices.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage Cryptsetup devices sequentially", "module": "ansible.builtin.include_tasks", "index": 7, "defined_in": "testdata/scm_repo/roles/cryptsetup/tasks/main.yml", "options": {"name": "Manage Cryptsetup devices sequentially", "when": "cryptsetup__devices_execution_strategy == 'serial'", "with_items": "{{ cryptsetup__combined_devices }}", "loop_control": {"loop_var": "cryptsetup__process_device"}}, "module_options": "manage_devices.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/cryptsetup"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "neurodebian", "defined_in": "testdata/scm_repo/roles/neurodebian", "task_yamls": ["testdata/scm_repo/roles/neurodebian/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/neurodebian/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/neurodebian"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NeuroDebian APT repository", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/neurodebian/tasks/main.yml", "options": {"name": "Configure NeuroDebian APT repository", "register": "neurodebian__register_apt_repository", "when": "(neurodebian__deploy_state == \"present\" and neurodebian__upstream|bool)"}, "module_options": {"src": "etc/apt/sources.list.d/neurodebian.sources.list.j2", "dest": "/etc/apt/sources.list.d/neurodebian.sources.list", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/neurodebian"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the NeuroDebian APT repository is disabled", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/neurodebian/tasks/main.yml", "options": {"name": "Ensure the NeuroDebian APT repository is disabled", "register": "neurodebian__register_apt_repository_absent", "when": "(neurodebian__deploy_state == \"absent\" and neurodebian__upstream|bool)"}, "module_options": {"path": "/etc/apt/sources.list.d/neurodebian.sources.list", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/neurodebian"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure NeuroDebian support in debconf", "module": "ansible.builtin.debconf", "index": 3, "defined_in": "testdata/scm_repo/roles/neurodebian/tasks/main.yml", "options": {"name": "Configure NeuroDebian support in debconf", "when": "not neurodebian__upstream|bool"}, "module_options": {"name": "neurodebian", "question": "neurodebian/enable", "vtype": "boolean", "value": "{{ \"true\" if (neurodebian__deploy_state == \"present\") else \"false\" }}"}, "fqcn": "ansible.builtin.debconf", "used_in": ["testdata/scm_repo/roles/neurodebian"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install packages required for NeuroDebian support", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/neurodebian/tasks/main.yml", "options": {"name": "Install packages required for NeuroDebian support", "register": "neurodebian__register_support_packages", "until": "neurodebian__register_support_packages is succeeded", "when": "(neurodebian__deploy_state == \"present\" and not neurodebian__upstream|bool)"}, "module_options": {"name": "{{ q(\"flattened\", neurodebian__support_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/neurodebian"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update APT repository cache", "module": "ansible.builtin.apt", "index": 5, "defined_in": "testdata/scm_repo/roles/neurodebian/tasks/main.yml", "options": {"name": "Update APT repository cache", "register": "neurodebian__register_apt_update", "until": "neurodebian__register_apt_update is succeeded", "when": "neurodebian__register_apt_repository is changed or neurodebian__register_apt_repository_absent is changed or neurodebian__register_support_packages is changed"}, "module_options": {"update_cache": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/neurodebian"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure specified packages are in their desired state", "module": "ansible.builtin.package", "index": 6, "defined_in": "testdata/scm_repo/roles/neurodebian/tasks/main.yml", "options": {"name": "Ensure specified packages are in their desired state", "register": "neurodebian__register_packages", "until": "neurodebian__register_packages is succeeded", "tags": ["role::neurodebian:package"]}, "module_options": {"name": "{{ q(\"flattened\", (neurodebian__packages + neurodebian__group_packages + neurodebian__host_packages + neurodebian__dependent_packages)) }}", "state": "{{ \"present\" if (neurodebian__deploy_state == \"present\") else \"absent\" }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/neurodebian"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/neurodebian/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/neurodebian"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save NeuroDebian local facts", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/neurodebian/tasks/main.yml", "options": {"name": "Save NeuroDebian local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/neurodebian.fact.j2", "dest": "/etc/ansible/facts.d/neurodebian.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/neurodebian"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 9, "defined_in": "testdata/scm_repo/roles/neurodebian/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/neurodebian"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "controller", "defined_in": "testdata/scm_repo/roles/controller", "task_yamls": ["testdata/scm_repo/roles/controller/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/controller/tasks/main.yml", "options": {"name": "Install required packages", "register": "controller__register_packages", "until": "controller__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (controller__base_packages + controller__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/controller"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install DebOps from PyPI", "module": "ansible.builtin.pip", "index": 1, "defined_in": "testdata/scm_repo/roles/controller/tasks/main.yml", "options": {"name": "Install DebOps from PyPI", "register": "controller__register_pip_install", "until": "controller__register_pip_install is succeeded", "notify": "{{ [ \"Update DebOps in the background with \" + controller__update_method ] if not controller__update_method == \"sync\" else omit }}"}, "module_options": {"name": "{{ q(\"flattened\", controller__pip_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.pip", "used_in": ["testdata/scm_repo/roles/controller"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure system-wide DebOps scripts", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/controller/tasks/main.yml", "options": {"name": "Configure system-wide DebOps scripts", "when": "controller__install_systemwide|bool"}, "module_options": {"src": "etc/debops.cfg.j2", "dest": "/etc/debops.cfg", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/controller"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update roles and playbooks", "module": "ansible.builtin.command", "index": 3, "defined_in": "testdata/scm_repo/roles/controller/tasks/main.yml", "options": {"name": "Update roles and playbooks", "become": "{{ controller__install_systemwide|bool }}", "when": "controller__update_method == 'sync'"}, "module_options": "debops-update", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/controller"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone project repository", "module": "ansible.builtin.git", "index": 4, "defined_in": "testdata/scm_repo/roles/controller/tasks/main.yml", "options": {"name": "Clone project repository", "become": "{{ controller__install_systemwide|bool }}", "when": "controller__project_git_repo|d()"}, "module_options": {"repo": "{{ controller__project_git_repo }}", "dest": "{{ controller__project_name if controller__project_name else controller__project_git_repo | basename }}", "version": "master", "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/controller"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize new project", "module": "ansible.builtin.command", "index": 5, "defined_in": "testdata/scm_repo/roles/controller/tasks/main.yml", "options": {"name": "Initialize new project", "become": "{{ controller__install_systemwide|bool }}", "args": {"creates": "{{ controller__project_name }}/.debops.cfg"}, "when": "controller__project_name|d() and not controller__project_git_repo|d()"}, "module_options": "debops-init '{{ controller__project_name }}'", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/controller"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "rails_deploy", "defined_in": "testdata/scm_repo/roles/rails_deploy", "task_yamls": ["testdata/scm_repo/roles/rails_deploy/tasks/deploy_keys.yml", "testdata/scm_repo/roles/rails_deploy/tasks/local_facts.yml", "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "testdata/scm_repo/roles/rails_deploy/tasks/database.yml", "testdata/scm_repo/roles/rails_deploy/tasks/system.yml", "testdata/scm_repo/roles/rails_deploy/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Slurp the deploy key", "module": "ansible.builtin.slurp", "index": 0, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy_keys.yml", "options": {"name": "Slurp the deploy key", "register": "rails_deploy_register_deploy_key", "when": "rails_deploy_service is defined and rails_deploy_service and rails_deploy_register_deploy_key is undefined"}, "module_options": "src={{ rails_deploy_home }}/.ssh/id_rsa.pub", "fqcn": "ansible.builtin.slurp", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create a json formatted deploy key", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy_keys.yml", "options": {"name": "Create a json formatted deploy key", "when": "rails_deploy_service is defined and rails_deploy_service and rails_deploy_register_deploy_key is defined"}, "module_options": {"rails_deploy_key_data": {"title": "{{ rails_deploy_service }}@{{ ansible_hostname }} deployed by Ansible", "key": "{{ rails_deploy_register_deploy_key.content | b64decode | trim }}"}}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Transfer the deploy key to Github", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy_keys.yml", "options": {"name": "Transfer the deploy key to Github", "args": {"warn": false}, "changed_when": false, "when": "rails_deploy_git_access_token and 'file://' not in rails_deploy_git_location and rails_deploy_register_deploy_key is defined and 'github' in rails_deploy_git_host"}, "module_options": "curl --silent --header 'Authorization: token {{ rails_deploy_git_access_token }}' --data '{{ rails_deploy_key_data | to_nice_json }}' https://api.github.com/repos/{{ rails_deploy_git_account }}/{{ rails_deploy_git_repo }}/keys", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the Gitlab repo id", "module": "ansible.builtin.uri", "index": 3, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy_keys.yml", "options": {"name": "Get the Gitlab repo id", "register": "rails_deploy_register_gitlab_response", "when": "rails_deploy_git_access_token and 'file://' not in rails_deploy_git_location and rails_deploy_register_deploy_key is defined and not 'github' in rails_deploy_git_host"}, "module_options": "url=https://{{ rails_deploy_git_host }}/api/v3/projects/{{ rails_deploy_git_account }}%2F{{ rails_deploy_git_repo }} HEADER_PRIVATE-TOKEN='{{ rails_deploy_git_access_token }}'", "fqcn": "ansible.builtin.uri", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Transfer the deploy key to Gitlab", "module": "ansible.builtin.command", "index": 4, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy_keys.yml", "options": {"name": "Transfer the deploy key to Gitlab", "args": {"warn": false}, "changed_when": false, "register": "foo", "when": "rails_deploy_git_access_token and 'file://' not in rails_deploy_git_location and rails_deploy_register_deploy_key is defined and not 'github' in rails_deploy_git_host"}, "module_options": "curl --insecure --header 'PRIVATE-TOKEN: {{ rails_deploy_git_access_token }}' --data '{{ rails_deploy_key_data | to_nice_json }}' https://{{ rails_deploy_git_host }}/api/v3/projects/{{ rails_deploy_register_gitlab_response.json.id }}/keys", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Ansible facts directory", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/local_facts.yml", "options": {"name": "Create Ansible facts directory", "when": "rails_deploy_database_force_migrate or rails_deploy_git_location is defined and rails_deploy_git_location"}, "module_options": "path=/etc/ansible/facts.d state=directory owner=root group=root mode=0755", "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create local facts", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/local_facts.yml", "options": {"name": "Create local facts", "when": "rails_deploy_database_force_migrate or rails_deploy_git_location is defined and rails_deploy_git_location"}, "module_options": "src='etc/ansible/facts.d/rails_deploy.fact.j2' dest='/etc/ansible/facts.d/rails_deploy.fact' mode='0644'", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone the app's source code", "module": "ansible.builtin.git", "index": 0, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Clone the app's source code", "register": "rails_deploy_register_repo_status", "when": "rails_deploy_git_location is defined and rails_deploy_git_location", "become": true, "become_user": "{{ rails_deploy_service }}"}, "module_options": "repo={{ rails_deploy_git_location }} dest={{ rails_deploy_src }} version={{ rails_deploy_git_version }} remote={{ rails_deploy_git_remote }} accept_hostkey=yes", "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Detect a temporary public deploy page", "module": "ansible.builtin.stat", "index": 1, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Detect a temporary public deploy page", "register": "register_rails_deploy_public_deploy_page"}, "module_options": "path={{ rails_deploy_src }}/public/deploy.html", "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable the temporary deploy page", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Enable the temporary deploy page", "when": "register_rails_deploy_public_deploy_page.stat.exists and rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed", "changed_when": false, "become": true, "become_user": "{{ rails_deploy_service }}"}, "module_options": "cp public/deploy.html public/index.html chdir={{ rails_deploy_src }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update gems", "module": "ansible.builtin.command", "index": 3, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Update gems", "changed_when": false, "when": "rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed", "become": true, "become_user": "{{ rails_deploy_service }}"}, "module_options": "bundle install --deployment --without={{ rails_deploy_bundle_without | difference([rails_deploy_system_env]) | join(',') }} chdir={{ rails_deploy_src }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart the background worker asynchronously", "module": "ansible.builtin.service", "index": 4, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Restart the background worker asynchronously", "async": 90, "when": "rails_deploy_worker_enabled and rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed"}, "module_options": "name={{ rails_deploy_worker }} state=restarted", "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare the database", "module": "ansible.builtin.shell", "index": 5, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Prepare the database", "when": "(rails_deploy_database_create and rails_deploy_register_database_created is defined and rails_deploy_register_database_created is changed and rails_app_database_prepare) and inventory_hostname == rails_deploy_hosts_master and rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed", "become": true, "become_user": "{{ rails_deploy_service }}"}, "module_options": "{{ rails_deploy_env_source }} && bundle exec rake db:schema:load db:seed chdir={{ rails_deploy_src }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Store mtime of the config folder", "module": "ansible.builtin.stat", "index": 6, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Store mtime of the config folder", "register": "rails_deploy_register_mtime_config", "when": "inventory_hostname == rails_deploy_hosts_master and rails_deploy_git_location is defined and rails_deploy_git_location"}, "module_options": "path={{ rails_deploy_src }}/config", "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Store mtime of the db/schema.rb file", "module": "ansible.builtin.stat", "index": 7, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Store mtime of the db/schema.rb file", "register": "rails_deploy_register_mtime_schema", "when": "inventory_hostname == rails_deploy_hosts_master and rails_deploy_git_location is defined and rails_deploy_git_location"}, "module_options": "path={{ rails_deploy_src }}/db/schema.rb", "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Execute shell commands before migration", "module": "ansible.builtin.shell", "index": 8, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Execute shell commands before migration", "when": "rails_deploy_pre_migrate_shell_commands and rails_deploy_git_location and rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed", "with_items": "{{ rails_deploy_pre_migrate_shell_commands }}", "become": true, "become_user": "{{ rails_deploy_service }}"}, "module_options": "{{ rails_deploy_env_source }} && {{ item }} chdir={{ rails_deploy_src }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Migrate the database", "module": "ansible.builtin.shell", "index": 9, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Migrate the database", "when": "inventory_hostname == rails_deploy_hosts_master and (rails_deploy_database_force_migrate or (rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed and (rails_deploy_register_mtime_schema.stat.mtime != ansible_local.rails_deploy[rails_deploy_service].mtime.schema) or ansible_local.rails_deploy[rails_deploy_service].mtime.schema is undefined))", "register": "rails_deploy_register_migration", "become": true, "become_user": "{{ rails_deploy_service }}"}, "module_options": "{{ rails_deploy_env_source }} && bundle exec rake db:migrate chdir={{ rails_deploy_src }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Execute shell commands after migration", "module": "ansible.builtin.shell", "index": 10, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Execute shell commands after migration", "when": "rails_deploy_post_migrate_shell_commands and rails_deploy_git_location and rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed", "with_items": "{{ rails_deploy_post_migrate_shell_commands }}", "become": true, "become_user": "{{ rails_deploy_service }}"}, "module_options": "{{ rails_deploy_env_source }} && {{ item }} chdir={{ rails_deploy_src }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload the backend server", "module": "ansible.builtin.service", "index": 11, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Reload the backend server", "when": "rails_deploy_backend and (rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed and (inventory_hostname == rails_deploy_hosts_master or inventory_hostname != item) and not rails_deploy_register_migration is changed and rails_deploy_register_mtime_config.stat.mtime == ansible_local.rails_deploy[rails_deploy_service].mtime.config and not rails_deploy_backend_always_restart)", "delegate_to": "{{ item }}", "with_items": "{{ groups[rails_deploy_hosts_group] }}"}, "module_options": "name={{ rails_deploy_service }} state=reloaded", "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart the backend server", "module": "ansible.builtin.service", "index": 12, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Restart the backend server", "when": "rails_deploy_backend and (rails_deploy_database_force_migrate or ((rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed) and rails_deploy_register_migration is changed) and (inventory_hostname == rails_deploy_hosts_master or inventory_hostname != item) or rails_deploy_register_mtime_config.stat.mtime != ansible_local.rails_deploy[rails_deploy_service].mtime.config or (rails_deploy_backend_always_restart and rails_deploy_git_location and rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed))", "delegate_to": "{{ item }}", "with_items": "{{ groups[rails_deploy_hosts_group] }}"}, "module_options": "name={{ rails_deploy_service }} state=restarted", "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the extra services state", "module": "ansible.builtin.service", "index": 13, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Set the extra services state", "when": "rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed and rails_deploy_extra_services", "with_items": "{{ rails_deploy_extra_services }}"}, "module_options": "name={{ item.name }} state={{ item.changed_state | default('reloaded') }}", "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the initial backend server state", "module": "ansible.builtin.service", "index": 14, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Set the initial backend server state", "when": "rails_deploy_git_location is defined and rails_deploy_git_location and rails_deploy_backend"}, "module_options": "name={{ rails_deploy_service }} state={{ rails_deploy_backend_state }} enabled={{ rails_deploy_backend_enabled }}", "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the initial background worker state", "module": "ansible.builtin.service", "index": 15, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Set the initial background worker state", "when": "rails_deploy_worker_enabled and rails_deploy_git_location is defined and rails_deploy_git_location"}, "module_options": "name={{ rails_deploy_worker }} state={{ rails_deploy_worker_state }} enabled={{ rails_deploy_worker_enabled }}", "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set the initial extra services state", "module": "ansible.builtin.service", "index": 16, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Set the initial extra services state", "when": "rails_deploy_git_location is defined and rails_deploy_git_location and rails_deploy_extra_services", "with_items": "{{ rails_deploy_extra_services }}"}, "module_options": "name={{ item.name }} state={{ item.state | default('started') }} enabled={{ item.enabled | default(True) }}", "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Execute shell commands after the backend is ready", "module": "ansible.builtin.shell", "index": 17, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Execute shell commands after the backend is ready", "when": "rails_deploy_post_restart_shell_commands and rails_deploy_git_location and rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed", "with_items": "{{ rails_deploy_post_restart_shell_commands }}", "become": true, "become_user": "{{ rails_deploy_service }}"}, "module_options": "{{ rails_deploy_env_source }} && {{ item }} chdir={{ rails_deploy_src }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable the temporary deploy page", "module": "ansible.builtin.file", "index": 18, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml", "options": {"name": "Disable the temporary deploy page", "when": "register_rails_deploy_public_deploy_page.stat.exists and rails_deploy_register_repo_status is defined and rails_deploy_register_repo_status is changed", "changed_when": false, "become": true, "become_user": "{{ rails_deploy_service }}"}, "module_options": {"path": "{{ rails_deploy_src + \"/public/index.html\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create PostgreSQL user", "module": "postgresql_user", "index": 0, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/database.yml", "options": {"name": "Create PostgreSQL user", "no_log": "{{ debops__no_log | d(True) }}", "when": "rails_deploy_database_adapter == 'postgresql' and inventory_hostname == rails_deploy_hosts_master", "become": true, "become_user": "{{ rails_deploy_postgresql_super_username }}"}, "module_options": {"login_host": "{{ rails_deploy_database_host }}", "port": "{{ rails_deploy_database_port }}", "login_user": "{{ rails_deploy_postgresql_super_username }}", "login_password": "{{ rails_deploy_database_super_password }}", "name": "{{ rails_deploy_service }}", "password": "{{ rails_deploy_database_user_password }}", "encrypted": false, "state": "present", "role_attr_flags": "{{ rails_deploy_database_user_role_attrs }}"}, "fqcn": "community.postgresql.postgresql_user", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create PostgreSQL database if enabled", "module": "postgresql_db", "index": 1, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/database.yml", "options": {"name": "Create PostgreSQL database if enabled", "register": "rails_deploy_register_database_created", "when": "rails_deploy_database_adapter == 'postgresql' and inventory_hostname == rails_deploy_hosts_master", "become": true, "become_user": "{{ rails_deploy_postgresql_super_username }}", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"login_host": "{{ rails_deploy_database_host }}", "port": "{{ rails_deploy_database_port }}", "login_user": "{{ rails_deploy_postgresql_super_username }}", "login_password": "{{ rails_deploy_database_super_password }}", "name": "{{ rails_deploy_service }}_{{ rails_deploy_system_env }}", "owner": "{{ rails_deploy_service }}", "encoding": "UTF-8", "state": "present", "template": "template1"}, "fqcn": "community.postgresql.postgresql_db", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create MySQL user", "module": "mysql_user", "index": 2, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/database.yml", "options": {"name": "Create MySQL user", "when": "rails_deploy_database_adapter == 'mysql' and inventory_hostname == rails_deploy_hosts_master", "become": true, "become_user": "{{ rails_deploy_mysql_super_username }}", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"login_host": "{{ rails_deploy_database_host }}", "login_port": "{{ rails_deploy_database_port }}", "login_user": "{{ rails_deploy_mysql_super_username }}", "login_password": "{{ rails_deploy_database_super_password }}", "name": "{{ rails_deploy_service }}", "password": "{{ rails_deploy_mysql_user_password }}", "state": "present"}, "fqcn": "community.mysql.mysql_user", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create MySQL database if enabled", "module": "mysql_db", "index": 3, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/database.yml", "options": {"name": "Create MySQL database if enabled", "register": "rails_deploy_register_database_created", "when": "rails_deploy_database_adapter == 'mysql' and inventory_hostname == rails_deploy_hosts_master", "become": true, "become_user": "{{ rails_deploy_mysql_super_username }}", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"login_host": "{{ rails_deploy_database_host }}", "login_port": "{{ rails_deploy_database_port }}", "login_user": "{{ rails_deploy_mysql_super_username }}", "login_password": "{{ rails_deploy_database_super_password }}", "name": "{{ rails_deploy_service }}_{{ rails_deploy_system_env }}", "encoding": "UTF-8", "state": "present"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Install app packages", "module": "ansible.builtin.apt", "index": 0, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/system.yml", "options": {"name": "Install app packages", "with_items": "{{ rails_deploy_packages + [ \"git\" ] }}", "register": "rails_deploy__register_packages", "until": "rails_deploy__register_packages is succeeded"}, "module_options": "pkg={{ item }} state=present install_recommends=False", "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create app group", "module": "ansible.builtin.group", "index": 1, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/system.yml", "options": {"name": "Create app group", "when": "rails_deploy_service is defined and rails_deploy_service"}, "module_options": "name={{ rails_deploy_service }} system=True state=present", "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create app user", "module": "ansible.builtin.user", "index": 2, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/system.yml", "options": {"name": "Create app user", "when": "rails_deploy_service is defined and rails_deploy_service"}, "module_options": "name={{ rails_deploy_service }} group={{ rails_deploy_service }} home={{ rails_deploy_home }} generate_ssh_key=True comment={{ rails_deploy_service }} groups={{ rails_deploy_user_groups | join(',') }} shell=/bin/bash append=True system=True state=present", "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow ssh access from the app user", "module": "ansible.posix.authorized_key", "index": 3, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/system.yml", "options": {"name": "Allow ssh access from the app user", "when": "rails_deploy_service is defined and rails_deploy_service and 'sshusers' in rails_deploy_user_groups and rails_deploy_user_sshkey"}, "module_options": "key='{{ rails_deploy_user_sshkey }}' user={{ rails_deploy_service }} manage_dir=False", "fqcn": "ansible.posix.authorized_key", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create backup copy of the host's ssh keys", "module": "ansible.builtin.fetch", "index": 4, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/system.yml", "options": {"name": "Create backup copy of the host's ssh keys", "when": "rails_deploy_service is defined and rails_deploy_service and secret is defined and secret", "with_items": ["{{ rails_deploy_home }}/.ssh/id_rsa", "{{ rails_deploy_home }}/.ssh/id_rsa.pub"], "tags": "system_backup"}, "module_options": "dest={{ secret }}/storage/sensitive/{{ rails_deploy_service }} src={{ item }} validate_md5=True", "fqcn": "ansible.builtin.fetch", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Secure app home directory", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/system.yml", "options": {"name": "Secure app home directory", "when": "rails_deploy_service is defined and rails_deploy_service"}, "module_options": "path={{ rails_deploy_home }} state=directory owner={{ rails_deploy_service }} group={{ rails_deploy_service }} mode=0751", "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create src, log and run state paths", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/system.yml", "options": {"name": "Create src, log and run state paths", "when": "rails_deploy_service is defined and rails_deploy_service", "with_items": ["{{ rails_deploy_src }}", "{{ rails_deploy_log }}", "{{ rails_deploy_run }}"]}, "module_options": "path={{ item }} state=directory owner={{ rails_deploy_service }} group={{ rails_deploy_service }} mode=0755", "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create logrotate file", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/system.yml", "options": {"name": "Create logrotate file", "when": "rails_deploy_service is defined and rails_deploy_service"}, "module_options": "src=etc/logrotate.d/service.j2 dest=/etc/logrotate.d/{{ rails_deploy_service }} owner=root group=root mode=0644", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create /etc/default/app file", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/system.yml", "options": {"name": "Create /etc/default/app file", "when": "rails_deploy_service is defined and rails_deploy_service"}, "module_options": "src=etc/default/app.j2 dest=/etc/default/{{ rails_deploy_service }} owner={{ rails_deploy_service }} group={{ rails_deploy_service }} mode=0644", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create application service", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/system.yml", "options": {"name": "Create application service", "when": "rails_deploy_service is defined and rails_deploy_service and rails_deploy_backend", "with_items": ["service"]}, "module_options": "src=etc/init.d/service.j2 dest=/etc/init.d/{{ rails_deploy_service }} owner={{ rails_deploy_service }} group={{ rails_deploy_service }} mode=0755", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create background worker service", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/system.yml", "options": {"name": "Create background worker service", "when": "rails_deploy_worker_enabled and rails_deploy_worker is defined and rails_deploy_worker", "with_items": ["worker"]}, "module_options": "src=etc/init.d/service.j2 dest=/etc/init.d/{{ rails_deploy_worker }} owner={{ rails_deploy_service }} group={{ rails_deploy_service }} mode=0755", "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure system environment", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/main.yml", "options": {"name": "Configure system environment"}, "module_options": "system.yml tags=rails_deploy", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure database", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/main.yml", "options": {"name": "Configure database", "when": "rails_deploy_database_create"}, "module_options": "database.yml tags=rails_deploy_setup", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Deploy access keys", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/main.yml", "options": {"name": "Deploy access keys"}, "module_options": "deploy_keys.yml tags=rails_deploy_setup", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Deploy application", "module": "ansible.builtin.include_tasks", "index": 4, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/main.yml", "options": {"name": "Deploy application"}, "module_options": "deploy.yml tags=rails_deploy", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure local facts", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "testdata/scm_repo/roles/rails_deploy/tasks/main.yml", "options": {"name": "Configure local facts"}, "module_options": "local_facts.yml tags=rails_deploy", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/rails_deploy"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "influxdb", "defined_in": "testdata/scm_repo/roles/influxdb", "task_yamls": ["testdata/scm_repo/roles/influxdb/tasks/manage_contents.yml", "testdata/scm_repo/roles/influxdb/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Drop databases if requested", "module": "influxdb_database", "index": 0, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/manage_contents.yml", "options": {"name": "Drop databases if requested", "with_flattened": "{{ influxdb__databases + influxdb__dependent_databases|d([]) }}", "delegate_to": "{{ influxdb__delegate_to }}", "when": "((item.database|d(False) or item.name|d(False)) and (item.state is defined and item.state == 'absent'))"}, "module_options": {"database_name": "{{ item.database | d(item.name) }}", "state": "absent", "hostname": "{{ influxdb__server }}", "port": "{{ influxdb__port }}", "ssl": "{{ influxdb__pki }}", "password": "{{ influxdb__root_password }}", "proxies": "{{ item.proxies | d(influxdb__proxies | d(omit)) }}", "validate_certs": "{{ item.validate_certs | d(influxdb__validate_certs | d(True)) }}"}, "fqcn": "community.general.influxdb_database", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create databases", "module": "influxdb_database", "index": 1, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/manage_contents.yml", "options": {"name": "Create databases", "with_flattened": "{{ influxdb__databases + influxdb__dependent_databases|d([]) }}", "delegate_to": "{{ influxdb__delegate_to }}", "when": "((item.database|d(False) or item.name|d(False)) and (item.state is undefined or item.state != 'absent'))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"database_name": "{{ item.database | d(item.name) }}", "state": "present", "hostname": "{{ influxdb__server }}", "port": "{{ influxdb__port }}", "ssl": "{{ influxdb__pki }}", "password": "{{ influxdb__root_password }}", "proxies": "{{ item.proxies | d(influxdb__proxies | d(omit)) }}", "validate_certs": "{{ item.validate_certs | d(influxdb__validate_certs | d(True)) }}"}, "fqcn": "community.general.influxdb_database", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create retention policies", "module": "influxdb_retention_policy", "index": 2, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/manage_contents.yml", "options": {"name": "Create retention policies", "with_flattened": "{{ influxdb__retention_policies + influxdb__dependent_retention_policies|d([]) }}", "delegate_to": "{{ influxdb__delegate_to }}", "when": "item.policy|d(False) or item.name|d(False)"}, "module_options": {"policy_name": "{{ item.policy | d(item.name) }}", "database_name": "{{ item.database }}", "duration": "{{ item.duration }}", "replication": "{{ item.replication }}", "default": "{{ item.default | d(False) }}", "hostname": "{{ influxdb__server }}", "port": "{{ influxdb__port }}", "ssl": "{{ influxdb__pki }}", "password": "{{ influxdb__root_password }}", "proxies": "{{ item.proxies | d(influxdb__proxies | d(omit)) }}", "validate_certs": "{{ item.validate_certs | d(influxdb__validate_certs | d(True)) }}"}, "fqcn": "community.general.influxdb_retention_policy", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Drop user accounts if requested", "module": "influxdb_user", "index": 3, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/manage_contents.yml", "options": {"name": "Drop user accounts if requested", "with_flattened": "{{ influxdb__users + influxdb__dependent_users }}", "delegate_to": "{{ influxdb__delegate_to }}", "when": "((item.user|d(False) or item.name|d(False)) and (item.state is defined and item.state == \"absent\"))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"user_name": "{{ item.user | d(item.name) }}", "state": "absent", "hostname": "{{ influxdb__server }}", "port": "{{ influxdb__port }}", "ssl": "{{ influxdb__pki }}", "password": "{{ influxdb__root_password }}", "proxies": "{{ item.proxies | d(influxdb__proxies | d(omit)) }}", "validate_certs": "{{ item.validate_certs | d(influxdb__validate_certs | d(True)) }}"}, "fqcn": "community.general.influxdb_user", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create user accounts", "module": "influxdb_user", "index": 4, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/manage_contents.yml", "options": {"name": "Create user accounts", "with_flattened": "{{ influxdb__users + influxdb__dependent_users }}", "delegate_to": "{{ influxdb__delegate_to }}", "when": "((item.user|d(False) or item.name|d(False)) and (item.state is undefined or item.state != \"absent\"))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"user_name": "{{ item.user | d(item.name) }}", "user_password": "{{ item.password | d(lookup(\"password\", secret + \"/influxdb/\" + influxdb__server + \"/credentials/\" + item.user | d(item.name) + \"/password \" + \"length=\" + influxdb__password_length)) }}", "grants": "{{ item.grants | d(omit) }}", "admin": "{{ item.admin | d(False) }}", "state": "present", "hostname": "{{ influxdb__server }}", "port": "{{ influxdb__port }}", "ssl": "{{ influxdb__pki }}", "password": "{{ influxdb__root_password }}", "proxies": "{{ item.proxies | d(influxdb__proxies | d(omit)) }}", "validate_certs": "{{ item.validate_certs | d(influxdb__validate_certs | d(True)) }}"}, "fqcn": "community.general.influxdb_user", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if database server is installed", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/main.yml", "options": {"name": "Check if database server is installed", "environment": {"LC_MESSAGES": "C"}, "args": {"executable": "bash"}, "register": "influxdb__register_version", "changed_when": false, "failed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && dpkg-query -W -f='${Version}\\n' 'influxdb' | grep -v '^$'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Override configuration if local server is detected", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/main.yml", "options": {"name": "Override configuration if local server is detected", "when": "(influxdb__register_version.stdout|d(False))"}, "module_options": {"influxdb__server": "{{ ansible_fqdn if influxdb__pki else \"localhost\" }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that local fact directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/main.yml", "options": {"name": "Make sure that local fact directory exists"}, "module_options": {"dest": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save InfluxDB local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/main.yml", "options": {"name": "Save InfluxDB local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/influxdb.fact.j2", "dest": "/etc/ansible/facts.d/influxdb.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage database contents", "module": "ansible.builtin.include_tasks", "index": 7, "defined_in": "testdata/scm_repo/roles/influxdb/tasks/main.yml", "options": {"name": "Manage database contents", "when": "(influxdb__server|d(False) and influxdb__delegate_to)", "tags": ["role::influxdb:contents"]}, "module_options": "manage_contents.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/influxdb"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "ntp", "defined_in": "testdata/scm_repo/roles/ntp", "task_yamls": ["testdata/scm_repo/roles/ntp/tasks/ntpd.yml", "testdata/scm_repo/roles/ntp/tasks/chrony.yml", "testdata/scm_repo/roles/ntp/tasks/openntpd.yml", "testdata/scm_repo/roles/ntp/tasks/install.yml", "testdata/scm_repo/roles/ntp/tasks/main.yml", "testdata/scm_repo/roles/ntp/tasks/systemd-timesyncd.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Divert original /etc/ntp.conf", "module": "dpkg_divert", "index": 0, "defined_in": "testdata/scm_repo/roles/ntp/tasks/ntpd.yml", "options": {"name": "Divert original /etc/ntp.conf", "when": "ntp__daemon == 'ntpd'"}, "module_options": {"path": "/etc/ntp.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure NTPd", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/ntp/tasks/ntpd.yml", "options": {"name": "Configure NTPd", "notify": ["Restart ntp"]}, "module_options": {"src": "etc/ntpd/ntp.conf.j2", "dest": "/etc/ntp.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure chrony", "module": "ansible.builtin.template", "index": 0, "defined_in": "testdata/scm_repo/roles/ntp/tasks/chrony.yml", "options": {"name": "Configure chrony", "notify": ["Restart chrony"]}, "module_options": {"src": "etc/chrony/chrony.conf.j2", "dest": "/etc/chrony/chrony.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert OpenNTPd configuration files", "module": "dpkg_divert", "index": 0, "defined_in": "testdata/scm_repo/roles/ntp/tasks/openntpd.yml", "options": {"name": "Divert OpenNTPd configuration files", "loop": ["/etc/default/openntpd", "/etc/openntpd/ntpd.conf", "/etc/network/if-up.d/openntpd"]}, "module_options": {"path": "{{ item }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure OpenNTPd", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/ntp/tasks/openntpd.yml", "options": {"name": "Configure OpenNTPd", "with_items": [{"name": "etc/default/openntpd"}, {"name": "etc/openntpd/ntpd.conf"}, {"name": "etc/network/if-up.d/openntpd", "mode": "0755"}, {"name": "etc/dpkg/dpkg.cfg.d/debops-ntp-openntpd"}, {"name": "usr/local/lib/debops-ntp-openntpd-dpkg-cleanup", "mode": "0755"}], "notify": ["Restart openntpd"]}, "module_options": {"src": "{{ item.name }}.j2", "dest": "/{{ item.name }}", "owner": "root", "group": "root", "mode": "{{ item.mode | d(\"0644\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/ntp/tasks/install.yml", "options": {"name": "Install required packages", "register": "ntp__register_apt_install", "until": "ntp__register_apt_install is succeeded"}, "module_options": {"name": "{{ (ntp__base_packages + ntp__packages) | flatten }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Query available systemd services", "module": "ansible.builtin.service_facts", "index": 1, "defined_in": "testdata/scm_repo/roles/ntp/tasks/install.yml", "options": {"name": "Query available systemd services", "when": "ansible_service_mgr == \"systemd\""}, "module_options": null, "fqcn": "ansible.builtin.service_facts", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage systemd-timesyncd state", "module": "ansible.builtin.service", "index": 2, "defined_in": "testdata/scm_repo/roles/ntp/tasks/install.yml", "options": {"name": "Manage systemd-timesyncd state", "when": ["ansible_service_mgr == \"systemd\"", "(\"systemd-timesyncd.service\" in ansible_facts.services and ansible_facts.services['systemd-timesyncd.service'].status != 'not-found')"]}, "module_options": {"name": "systemd-timesyncd", "state": "{{ \"started\" if (ntp__daemon in [ \"systemd-timesyncd\" ]) else \"stopped\" }}", "enabled": "{{ True if (ntp__daemon in [ \"systemd-timesyncd\" ]) else False }}"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install chrony", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/ntp/tasks/install.yml", "options": {"name": "Install chrony", "when": "ntp__daemon == 'chrony'"}, "module_options": "chrony.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install ntpd", "module": "ansible.builtin.include_tasks", "index": 4, "defined_in": "testdata/scm_repo/roles/ntp/tasks/install.yml", "options": {"name": "Install ntpd", "when": "ntp__daemon in [ 'ntpd', 'ntpdate' ]"}, "module_options": "ntpd.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install OpenNTPd", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "testdata/scm_repo/roles/ntp/tasks/install.yml", "options": {"name": "Install OpenNTPd", "when": "ntp__daemon == 'openntpd'"}, "module_options": "openntpd.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Include systemd-timesyncd configuration", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/ntp/tasks/install.yml", "options": {"name": "Include systemd-timesyncd configuration", "when": "(ansible_service_mgr == \"systemd\" and ntp__daemon == 'systemd-timesyncd')"}, "module_options": "systemd-timesyncd.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/ntp/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that configuration is supported", "module": "ansible.builtin.assert", "index": 1, "defined_in": "testdata/scm_repo/roles/ntp/tasks/main.yml", "options": {"name": "Ensure that configuration is supported"}, "module_options": {"that": "not ntp__daemon or ntp__daemon in [ 'chrony', 'ntpd', 'ntpdate', 'openntpd', 'systemd-timesyncd' ]"}, "fqcn": "ansible.builtin.assert", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that alternative daemons/programs are not installed", "module": "ansible.builtin.apt", "index": 2, "defined_in": "testdata/scm_repo/roles/ntp/tasks/main.yml", "options": {"name": "Ensure that alternative daemons/programs are not installed", "register": "ntp__register_apt_purge", "until": "ntp__register_apt_purge is succeeded"}, "module_options": {"name": "{{ ntp__purge_packages | flatten }}", "state": "absent", "purge": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install NTP service", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/ntp/tasks/main.yml", "options": {"name": "Install NTP service", "when": "ntp__daemon_enabled|bool"}, "module_options": "install.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/ntp/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save ntp local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/ntp/tasks/main.yml", "options": {"name": "Save ntp local facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/ntp.fact.j2", "dest": "/etc/ansible/facts.d/ntp.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure conf override dir exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/ntp/tasks/systemd-timesyncd.yml", "options": {"name": "Make sure conf override dir exists"}, "module_options": {"path": "/etc/systemd/timesyncd.conf.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure systemd-timesyncd", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/ntp/tasks/systemd-timesyncd.yml", "options": {"name": "Configure systemd-timesyncd", "notify": ["Restart systemd-timesyncd"]}, "module_options": {"src": "etc/systemd/timesyncd.conf.d/ansible.conf.j2", "dest": "/etc/systemd/timesyncd.conf.d/ansible.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ntp"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "ansible", "defined_in": "testdata/scm_repo/roles/ansible", "task_yamls": ["testdata/scm_repo/roles/ansible/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/ansible/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/ansible"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/ansible/tasks/main.yml", "options": {"name": "Install required packages", "register": "ansible__register_packages", "until": "ansible__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (ansible__base_packages + ansible__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/ansible"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Bootstrap Ansible from source", "module": "ansible.builtin.script", "index": 2, "defined_in": "testdata/scm_repo/roles/ansible/tasks/main.yml", "options": {"name": "Bootstrap Ansible from source", "when": "(ansible__deploy_type == 'bootstrap' and (ansible_local is undefined or (ansible_local.ansible is undefined or not (ansible_local.ansible.installed|d())|bool or (ansible_local.ansible.deploy_type|d(ansible__deploy_type) != 'bootstrap'))))"}, "module_options": "script/bootstrap-ansible \"{{ ansible__bootstrap_version }}\"", "fqcn": "ansible.builtin.script", "used_in": ["testdata/scm_repo/roles/ansible"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local fact directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/ansible/tasks/main.yml", "options": {"name": "Make sure that Ansible local fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ansible"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Ansible local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/ansible/tasks/main.yml", "options": {"name": "Save Ansible local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/ansible.fact.j2", "dest": "/etc/ansible/facts.d/ansible.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ansible"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/ansible/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/ansible"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/service/ansible.yml"]}, {"py/object": "struct4.Role", "name": "docker_server", "defined_in": "testdata/scm_repo/roles/docker_server", "task_yamls": ["testdata/scm_repo/roles/docker_server/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that docker.service.d override directory exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Make sure that docker.service.d override directory exists", "when": "ansible_service_mgr == 'systemd'", "tags": ["role::docker_server:config"]}, "module_options": {"path": "/etc/systemd/system/docker.service.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove other version if upstream is modified", "module": "ansible.builtin.apt", "index": 2, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Remove other version if upstream is modified", "notify": ["Reload service manager"], "register": "docker_server__register_other_version_removed", "until": "docker_server__register_other_version_removed is succeeded"}, "module_options": {"name": "{{ (([\"docker.io\"] if docker_server__upstream|d() else [docker_server__upstream_packagename]) + ([\"docker-engine\"] if docker_server__upstream|d() else [])) | flatten }}", "state": "absent", "install_recommends": false}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove startup file(s) if present", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Remove startup file(s) if present", "tags": ["role::docker_server:config"], "with_items": ["/etc/systemd/system/docker.service", "/lib/systemd/system/docker.service", "/etc/default/docker", "/etc/docker/daemon.json", "/etc/systemd/system/docker.service.d/http-proxy.conf", "/etc/systemd/system/docker.service.d/execstart-override.conf"], "notify": ["Reload service manager"], "when": "(docker_server__register_other_version_removed is changed)"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.apt", "index": 4, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Install required packages", "notify": ["Refresh host facts"], "register": "docker_server__register_packages", "until": "docker_server__register_packages is succeeded"}, "module_options": {"name": "{{ (docker_server__mandatory_packages + [ docker_server__packagename ] + docker_server__base_packages + docker_server__packages) | flatten }}", "state": "present", "install_recommends": false}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save APT local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Save APT local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/docker_server.fact.j2", "dest": "/etc/ansible/facts.d/docker_server.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Python packages in virtualenv", "module": "ansible.builtin.pip", "index": 8, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Install Python packages in virtualenv", "with_flattened": ["{{ docker_server__default_pip_packages }}", "{{ docker_server__pip_packages }}"], "when": "docker_server__install_virtualenv"}, "module_options": {"name": "{{ item.name | d(item) }}", "version": "{{ item.version | d(omit) }}", "virtualenv": "{{ docker_server__virtualenv }}", "state": "{{ item.state | d(\"present\") }}"}, "fqcn": "ansible.builtin.pip", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Expose Docker virtualenv for Ansible modules", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Expose Docker virtualenv for Ansible modules", "when": "docker_server__install_virtualenv"}, "module_options": {"path": "{{ docker_server__virtualenv_python_symlink }}", "src": "{{ docker_server__virtualenv_python_interpreter }}", "state": "link", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink selected Python scripts to /usr/local/bin", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Symlink selected Python scripts to /usr/local/bin", "with_flattened": ["{{ docker_server__default_pip_packages }}", "{{ docker_server__pip_packages }}"], "when": "item.path|d() and item.src|d() and item.state|d('present') != 'absent' and docker_server__install_virtualenv"}, "module_options": {"path": "{{ item.path }}", "src": "{{ item.src }}", "state": "link", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install ferm post hook", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Install ferm post hook", "when": "docker_server__ferm_post_hook|bool"}, "module_options": {"src": "etc/ferm/hooks/post.d/restart-docker.j2", "dest": "/etc/ferm/hooks/post.d/restart-docker", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Docker options", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Configure Docker options", "notify": ["Restart docker"], "tags": ["role::docker_server:config"], "when": "(ansible_service_mgr != 'systemd' or docker_server__version is version_compare('1.10', '<'))"}, "module_options": {"src": "etc/default/docker.j2", "dest": "/etc/default/docker", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Docker systemd options", "module": "ansible.builtin.template", "index": 13, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Configure Docker systemd options", "notify": ["Restart docker"], "tags": ["role::docker_server:config"], "when": "(ansible_service_mgr == 'systemd' and docker_server__version is version_compare('1.10', '>='))"}, "module_options": {"src": "etc/docker/daemon.json.j2", "dest": "/etc/docker/daemon.json", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Docker systemd overrides", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Configure Docker systemd overrides", "loop": ["execstart-override.conf", "http-proxy.conf"], "register": "docker_server__register_systemd_overrides", "notify": ["Reload service manager", "Restart docker"], "when": "ansible_service_mgr == 'systemd'", "tags": ["role::docker_server:config"]}, "module_options": {"src": "etc/systemd/system/docker.service.d/{{ item }}.j2", "dest": "/etc/systemd/system/docker.service.d/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add specified users to 'docker' group", "module": "ansible.builtin.user", "index": 15, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Add specified users to 'docker' group", "with_items": "{{ docker_server__admins }}", "when": "item|d()", "tags": ["role::docker_server:config", "role::docker_server:admins"]}, "module_options": {"name": "{{ item }}", "groups": "docker", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Execute pending handlers", "module": "ansible.builtin.meta", "index": 16, "defined_in": "testdata/scm_repo/roles/docker_server/tasks/main.yml", "options": {"name": "Execute pending handlers"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/docker_server"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "tinc", "defined_in": "testdata/scm_repo/roles/tinc", "task_yamls": ["testdata/scm_repo/roles/tinc/tasks/main_env.yml", "testdata/scm_repo/roles/tinc/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare debops.tinc environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main_env.yml", "options": {"name": "Prepare debops.tinc environment"}, "module_options": {"tinc__env_secret__directories": "{{ tinc__secret__directories }}", "tinc__env_etc_services__dependent_list": "{{ tinc__etc_services__dependent_list }}", "tinc__env_ferm__dependent_rules": "{{ tinc__ferm__dependent_rules }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Install required packages", "register": "tinc__register_install", "until": "tinc__register_install is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (tinc__base_packages + tinc__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create system group for VPN service", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Create system group for VPN service"}, "module_options": {"name": "{{ tinc__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create system user for VPN service", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Create system user for VPN service"}, "module_options": {"name": "{{ tinc__user }}", "state": "present", "system": true, "comment": "tinc VPN service", "home": "{{ tinc__home }}", "group": "{{ tinc__group }}", "shell": "/bin/false", "createhome": false}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Load the required kernel modules", "module": "community.general.modprobe", "index": 5, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Load the required kernel modules", "with_items": "{{ tinc__modprobe_modules }}", "when": "(tinc__modprobe|bool and (((ansible_system_capabilities_enforced|d())|bool and \"cap_sys_admin\" in ansible_system_capabilities) or not (ansible_system_capabilities_enforced|d(True))|bool))"}, "module_options": {"name": "{{ item }}", "state": "present"}, "fqcn": "community.general.modprobe", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure that required modules are loaded on boot", "module": "ansible.builtin.lineinfile", "index": 6, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Make sure that required modules are loaded on boot", "with_items": "{{ tinc__modprobe_modules }}", "when": "(tinc__modprobe|bool and (((ansible_system_capabilities_enforced|d())|bool and \"cap_sys_admin\" in ansible_system_capabilities) or not (ansible_system_capabilities_enforced|d(True))|bool))"}, "module_options": {"dest": "/etc/modules", "regexp": "^{{ item }}$", "line": "{{ item }}", "state": "present", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set tincd default environment", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Set tincd default environment", "notify": ["Reload tinc"]}, "module_options": {"src": "etc/default/tinc.j2", "dest": "/etc/default/tinc", "owner": "root", "group": "root", "mode": "0644", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable tinc networks in systemd if requested", "module": "ansible.builtin.service", "index": 8, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Disable tinc networks in systemd if requested", "with_dict": "{{ tinc__combined_networks }}", "when": "tinc__systemd|bool and item.value.state|d('present') == 'absent' and not tinc__register_install is changed"}, "module_options": {"name": "tinc@{{ item.value.name | d(item.key) }}", "enabled": false, "state": "{{ (item.state|d(\"present\") in [\"absent\"]) | ternary(\"started\", \"stopped\") }}"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove tinc network configuration if requested", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Remove tinc network configuration if requested", "with_dict": "{{ tinc__combined_networks }}", "when": "item.value.state|d('present') == 'absent'"}, "module_options": {"path": "/etc/tinc/{{ item.value.name | d(item.key) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required directories", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Create required directories", "with_dict": "{{ tinc__combined_networks }}", "when": "item.value.state|d('present') != 'absent'"}, "module_options": {"path": "/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.hostname | d(tinc__hostname)) | replace(\"-\",\"_\") }}.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate main configuration file", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Generate main configuration file", "with_dict": "{{ tinc__combined_networks }}", "when": "item.value.state|d('present') != 'absent' and item.value.tinc_options|d()", "notify": ["Reload tinc"]}, "module_options": {"src": "etc/tinc/network/tinc.conf.j2", "dest": "/etc/tinc/{{ item.value.name | d(item.key) }}/tinc.conf", "owner": "root", "group": "root", "mode": "0644", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove deprecated dhclient hook script", "module": "ansible.builtin.file", "index": 12, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Remove deprecated dhclient hook script"}, "module_options": {"dest": "/etc/dhcp/dhclient-enter-hooks.d/00debops-tinc", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate tinc-up network scripts", "module": "ansible.builtin.template", "index": 13, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Generate tinc-up network scripts", "with_dict": "{{ tinc__combined_networks }}", "when": "(item.value.state|d('present') != 'absent' and item.value.generate_tinc_up|d(True)|bool)"}, "module_options": {"src": "etc/tinc/network/tinc-up.j2", "dest": "/etc/tinc/{{ item.value.name | d(item.key) }}/tinc-up", "owner": "root", "group": "{{ tinc__group }}", "mode": "0750", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate tinc-down network scripts", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Generate tinc-down network scripts", "with_dict": "{{ tinc__combined_networks }}", "when": "(item.value.state|d('present') != 'absent' and item.value.generate_tinc_up|d(True)|bool)"}, "module_options": {"src": "etc/tinc/network/tinc-down.j2", "dest": "/etc/tinc/{{ item.value.name |d(item.key) }}/tinc-down", "owner": "root", "group": "{{ tinc__group }}", "mode": "0750", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure which networks are started at boot", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Configure which networks are started at boot"}, "module_options": {"src": "etc/tinc/nets.boot.j2", "dest": "/etc/tinc/nets.boot", "owner": "root", "group": "root", "mode": "0644", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that sensitive files are excluded from version control", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Ensure that sensitive files are excluded from version control"}, "module_options": {"src": "etc/tinc/gitignore.j2", "dest": "/etc/tinc/.gitignore", "owner": "root", "group": "root", "mode": "0644", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize RSA key pairs", "module": "ansible.builtin.shell", "index": 17, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Initialize RSA key pairs", "args": {"executable": "bash", "creates": "/etc/tinc/{{ item.value.name | d(item.key) }}/rsa_key.priv"}, "with_dict": "{{ tinc__combined_networks }}", "when": "item.value.state|d('present') != 'absent'"}, "module_options": "set -o nounset -o pipefail -o errexit && sh -c 'yes || true' | tincd -n {{ item.value.name | d(item.key) }} -K {{ item.value.rsa_key_length | d(tinc__rsa_key_length) }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create persistent copy of host public key", "module": "ansible.builtin.command", "index": 18, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Create persistent copy of host public key", "args": {"creates": "/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname)) | replace(\"-\",\"_\") + \".d/99_rsa-public-key\" }}"}, "with_dict": "{{ tinc__combined_networks }}", "when": "item.value.state|d('present') != 'absent'"}, "module_options": "cp /etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname)) | replace(\"-\",\"_\") }} /etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname)) | replace(\"-\",\"_\") + \".d/99_rsa-public-key\" }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate host configuration file", "module": "ansible.builtin.template", "index": 19, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Generate host configuration file", "with_dict": "{{ tinc__combined_networks }}", "when": "item.value.state|d('present') != 'absent'"}, "module_options": {"src": "etc/tinc/network/hosts/host-config.j2", "dest": "/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname)) | replace(\"-\",\"_\") }}.d/00_host-config", "owner": "root", "group": "root", "mode": "0640", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Assemble host configuration file from parts", "module": "ansible.builtin.assemble", "index": 20, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Assemble host configuration file from parts", "with_dict": "{{ tinc__combined_networks }}", "when": "item.value.state|d('present') != 'absent'", "notify": ["Reload tinc"]}, "module_options": {"src": "/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname)) | replace(\"-\",\"_\") }}.d", "dest": "/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname)) | replace(\"-\",\"_\") }}", "owner": "root", "group": "{{ tinc__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.assemble", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload public keys from hosts to Ansible Controller", "module": "ansible.builtin.fetch", "index": 21, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Upload public keys from hosts to Ansible Controller", "with_dict": "{{ tinc__combined_networks }}", "when": "item.value.state|d('present') != 'absent'"}, "module_options": {"src": "/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname)) | replace(\"-\",\"_\") }}", "dest": "{{ secret + \"/tinc/networks/\" + item.value.name | d(item.key) + \"/by-network/\" + item.value.name | d(item.key) + \"/hosts/\" + (item.value.hostname | d(tinc__hostname) | replace(\"-\",\"_\")) }}", "flat": true}, "fqcn": "ansible.builtin.fetch", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download public keys per network", "module": "ansible.builtin.copy", "index": 22, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Download public keys per network", "with_dict": "{{ tinc__combined_networks }}", "when": "item.value.state|d('present') != 'absent'", "notify": ["Reload tinc"]}, "module_options": {"src": "{{ secret + \"/tinc/networks/\" + item.value.name | d(item.key) + \"/by-network/\" + item.value.name | d(item.key) + \"/hosts/\" }}", "dest": "/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/", "owner": "root", "group": "{{ tinc__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download public keys for all hosts", "module": "ansible.builtin.copy", "index": 23, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Download public keys for all hosts", "with_dict": "{{ tinc__combined_networks }}", "when": "item.value.state|d('present') != 'absent'", "notify": ["Reload tinc"]}, "module_options": {"src": "{{ secret + \"/tinc/networks/\" + item.value.name | d(item.key) + \"/by-group/all/hosts/\" }}", "dest": "/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/", "owner": "root", "group": "{{ tinc__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download public keys per group", "module": "ansible.builtin.copy", "index": 24, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Download public keys per group", "with_nested": ["{{ lookup(\"template\", \"lookup/tinc__network_list.j2\", convert_data=False) | from_yaml }}", "{{ lookup(\"template\", \"lookup/tinc__inventory_groups.j2\", convert_data=False) | from_yaml }}"], "when": "(item.0.name|d() and item.0.state|d('present') != 'absent' and item.1 in item.0.inventory_groups|d([]) and item.1 in group_names)", "notify": ["Reload tinc"]}, "module_options": {"src": "{{ secret + \"/tinc/networks/\" + item.0.name + \"/by-group/\" + item.1 + \"/hosts/\" }}", "dest": "/etc/tinc/{{ item.0.name }}/hosts/", "owner": "root", "group": "{{ tinc__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download public keys per host", "module": "ansible.builtin.copy", "index": 25, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Download public keys per host", "with_dict": "{{ tinc__combined_networks }}", "when": "item.value.state|d('present') != 'absent'", "notify": ["Reload tinc"]}, "module_options": {"src": "{{ secret + \"/tinc/networks/\" + item.value.name | d(item.key) + \"/by-host/\" + ((item.value.inventory_hostname | d(tinc__inventory_hostname))) + \"/hosts/\" }}", "dest": "/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/", "owner": "root", "group": "{{ tinc__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure systemd default variables", "module": "ansible.builtin.template", "index": 26, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Configure systemd default variables", "with_dict": "{{ tinc__combined_networks }}", "when": "tinc__systemd|bool and item.value.state|d('present') != 'absent'", "notify": ["Reload tinc"]}, "module_options": {"src": "etc/default/tinc-network.j2", "dest": "/etc/default/tinc-{{ item.value.name | d(item.key) }}", "owner": "root", "group": "root", "mode": "0644", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure tinc-down wrapper script", "module": "ansible.builtin.template", "index": 27, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Configure tinc-down wrapper script", "when": "tinc__systemd | bool"}, "module_options": {"src": "usr/local/lib/tinc-down-wrapper.j2", "dest": "/usr/local/lib/tinc-down-wrapper", "owner": "root", "group": "root", "mode": "0755", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clean up old systemd configuration", "module": "ansible.builtin.file", "index": 28, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Clean up old systemd configuration"}, "module_options": {"path": "/etc/systemd/system/network.target.wants/tinc.service", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure systemd unit files", "module": "ansible.builtin.template", "index": 29, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Configure systemd unit files", "with_items": ["tinc.service", "tinc@.service"], "register": "tinc__register_systemd", "when": "tinc__systemd | bool"}, "module_options": {"src": "etc/systemd/system/{{ item }}.j2", "dest": "/etc/systemd/system/{{ item }}", "owner": "root", "group": "root", "mode": "0644", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd daemon configuration", "module": "ansible.builtin.systemd", "index": 30, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Reload systemd daemon configuration", "when": "tinc__register_systemd is changed"}, "module_options": {"daemon_reload": true, "name": "tinc.service", "enabled": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start tinc VPN networks on first install", "module": "ansible.builtin.service", "index": 31, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Start tinc VPN networks on first install", "when": "not tinc__systemd|bool and tinc__register_install is changed"}, "module_options": {"name": "tinc", "state": "restarted"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure tinc network services in systemd", "module": "ansible.builtin.service", "index": 32, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Configure tinc network services in systemd", "with_dict": "{{ tinc__combined_networks }}", "when": "tinc__systemd|bool and item.value.state|d('present') != 'absent' and item.value.port|d()"}, "module_options": {"name": "tinc@{{ item.value.name | d(item.key) }}", "enabled": "{{ (item.value.boot|d(True))|bool }}", "state": "{{ (item.value.state|d(\"present\") in [\"absent\"]) | ternary(\"stopped\", \"started\") }}"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 33, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create local facts of tinc", "module": "ansible.builtin.template", "index": 34, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Create local facts of tinc", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/tinc.fact.j2", "dest": "/etc/ansible/facts.d/tinc.fact", "owner": "root", "group": "root", "mode": "0644", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 35, "defined_in": "testdata/scm_repo/roles/tinc/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/tinc"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "postconf", "defined_in": "testdata/scm_repo/roles/postconf", "task_yamls": ["testdata/scm_repo/roles/postconf/tasks/main_env.yml", "testdata/scm_repo/roles/postconf/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare postconf environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/postconf/tasks/main_env.yml", "options": {"name": "Prepare postconf environment"}, "module_options": {"postconf__env_capabilities": "{{ lookup(\"template\", \"lookup/postconf__env_capabilities.j2\") }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/postconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/postconf/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/postconf/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/postconf/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/postconf/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Postconf local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/postconf/tasks/main.yml", "options": {"name": "Save Postconf local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/postconf.fact.j2", "dest": "/etc/ansible/facts.d/postconf.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/postconf/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/postconf"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "memcached", "defined_in": "testdata/scm_repo/roles/memcached", "task_yamls": ["testdata/scm_repo/roles/memcached/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/memcached/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/memcached"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install memcached", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/memcached/tasks/main.yml", "options": {"name": "Install memcached", "register": "memcached__register_packages", "until": "memcached__register_packages is succeeded"}, "module_options": {"name": "{{ (memcached__base_packages + memcached__packages) | flatten }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/memcached"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/memcached/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/memcached"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save memcached local facts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/memcached/tasks/main.yml", "options": {"name": "Save memcached local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/memcached.fact.j2", "dest": "/etc/ansible/facts.d/memcached.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/memcached"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 4, "defined_in": "testdata/scm_repo/roles/memcached/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/memcached"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure memcached", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/memcached/tasks/main.yml", "options": {"name": "Configure memcached", "notify": ["Restart memcached"]}, "module_options": {"src": "etc/memcached.conf.j2", "dest": "/etc/memcached.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/memcached"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "dhcpd", "defined_in": "testdata/scm_repo/roles/dhcpd", "task_yamls": ["testdata/scm_repo/roles/dhcpd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/dhcpd/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dhcpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/dhcpd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dhcpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/dhcpd/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dhcpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install ISC DHCP packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/dhcpd/tasks/main.yml", "options": {"name": "Install ISC DHCP packages", "register": "dhcpd__register_packages", "until": "dhcpd__register_packages is succeeded"}, "module_options": {"name": "{{ (dhcpd__base_packages + dhcpd__packages)|flatten }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/dhcpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original configuration", "module": "dpkg_divert", "index": 4, "defined_in": "testdata/scm_repo/roles/dhcpd/tasks/main.yml", "options": {"name": "Divert original configuration", "with_items": ["/etc/default/isc-dhcp-server", "/etc/dhcp/dhcpd.conf", "/etc/dhcp/dhcpd6.conf"]}, "module_options": {"path": "{{ item }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/dhcpd"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Write configuration includes", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/dhcpd/tasks/main.yml", "options": {"name": "Write configuration includes", "with_items": ["failovers", "ipxe", "zones"], "notify": ["Restart isc-dhcp-server"]}, "module_options": {"src": "etc/dhcp/ansible_{{ item }}.conf.j2", "dest": "/etc/dhcp/ansible_{{ item }}.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhcpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Store secret keys", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/dhcpd/tasks/main.yml", "options": {"name": "Store secret keys", "notify": ["Restart isc-dhcp-server"]}, "module_options": {"src": "etc/dhcp/ansible_keys.conf.j2", "dest": "/etc/dhcp/ansible_keys.conf", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhcpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure dhcpd.conf and dhcpd6.conf", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/dhcpd/tasks/main.yml", "options": {"name": "Configure dhcpd.conf and dhcpd6.conf", "vars": {"dhcpd__protocol": "{{ item.protocol }}"}, "loop": [{"filename": "dhcpd.conf", "protocol": "DHCPv4"}, {"filename": "dhcpd6.conf", "protocol": "DHCPv6"}], "notify": ["Restart isc-dhcp-server"]}, "module_options": {"src": "etc/dhcp/dhcpd.conf.j2", "dest": "/etc/dhcp/{{ item.filename }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhcpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure ISC DHCP Server defaults", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/dhcpd/tasks/main.yml", "options": {"name": "Configure ISC DHCP Server defaults", "notify": ["Restart isc-dhcp-server"]}, "module_options": {"src": "etc/default/isc-dhcp-server.j2", "dest": "/etc/default/isc-dhcp-server", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhcpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/dhcpd/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dhcpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save local facts", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/dhcpd/tasks/main.yml", "options": {"name": "Save local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/dhcpd.fact.j2", "dest": "/etc/ansible/facts.d/dhcpd.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhcpd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 11, "defined_in": "testdata/scm_repo/roles/dhcpd/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/dhcpd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "redis_server", "defined_in": "testdata/scm_repo/roles/redis_server", "task_yamls": ["testdata/scm_repo/roles/redis_server/tasks/main_env.yml", "testdata/scm_repo/roles/redis_server/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare Redis role environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main_env.yml", "options": {"name": "Prepare Redis role environment"}, "module_options": {"redis_server__env_ports": "{{ lookup(\"template\", \"lookup/redis_server__env_ports.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Redis Server packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Install Redis Server packages", "register": "redis_server__register_packages", "until": "redis_server__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (redis_server__base_packages + redis_server__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that standalone Redis Server is stopped on install", "module": "ansible.builtin.systemd", "index": 4, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Ensure that standalone Redis Server is stopped on install", "when": "((ansible_local is undefined or ansible_local.redis_server is undefined) and ansible_service_mgr == 'systemd')"}, "module_options": {"name": "redis-server.service", "state": "stopped"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup Redis local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Setup Redis local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/redis_server.fact.j2", "dest": "/etc/ansible/facts.d/redis_server.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom Redis scripts", "module": "ansible.builtin.copy", "index": 8, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Install custom Redis scripts"}, "module_options": {"src": "usr/local/bin/", "dest": "/usr/local/bin/", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Redis auth UNIX group", "module": "ansible.builtin.group", "index": 9, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Create Redis auth UNIX group"}, "module_options": {"name": "{{ redis_server__auth_group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Redis instance directories", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Create Redis instance directories", "with_items": "{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "/etc/redis/{{ item.name }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install the original Redis config file to instance", "module": "ansible.builtin.command", "index": 11, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Install the original Redis config file to instance", "args": {"creates": "/etc/redis/{{ item.name }}/redis.conf"}, "with_items": "{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "install -o {{ redis_server__user }} -g {{ redis_server__auth_group }} -m 0640 /etc/redis/redis.conf /etc/redis/{{ item.name }}/redis.conf", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate dynamic Redis configuration scripts", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Generate dynamic Redis configuration scripts", "with_items": "{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ]", "register": "redis_server__register_config_dynamic", "notify": ["Refresh host facts"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/redis/instance/ansible-redis-dynamic.conf.j2", "dest": "/etc/redis/{{ item.name }}/ansible-redis-dynamic.conf", "owner": "root", "group": "{{ redis_server__group }}", "mode": "0750"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate static Redis configuration files", "module": "ansible.builtin.template", "index": 13, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Generate static Redis configuration files", "with_items": "{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ]", "register": "redis_server__register_config_static", "notify": ["Refresh host facts"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/redis/instance/ansible-redis-static.conf.j2", "dest": "/etc/redis/{{ item.name }}/ansible-redis-static.conf", "owner": "root", "group": "{{ redis_server__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove include line from redis.conf", "module": "ansible.builtin.lineinfile", "index": 14, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Remove include line from redis.conf", "with_items": "{{ redis_server__register_config_static.results }}", "when": "item is changed", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"dest": "/etc/redis/{{ item.item.name }}/redis.conf", "regexp": "^include\\s+/etc/redis/{{ item.item.name }}/ansible-redis-static.conf", "state": "absent"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add include line into redis.conf", "module": "ansible.builtin.lineinfile", "index": 15, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Add include line into redis.conf", "with_items": "{{ redis_server__register_config_static.results }}", "when": "not ansible_check_mode|bool and item is changed", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"dest": "/etc/redis/{{ item.item.name }}/redis.conf", "regexp": "^include\\s+/etc/redis/{{ item.item.name }}/ansible-redis-static.conf", "line": "include /etc/redis/{{ item.item.name }}/ansible-redis-static.conf", "insertafter": "EOF", "state": "present", "mode": "0640"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom systemd unit files", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Install custom systemd unit files", "with_items": ["etc/systemd/system/redis-server@.service", "etc/systemd/system/redis-server.service"], "notify": ["Reload service manager"]}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create systemd override directories for instances", "module": "ansible.builtin.file", "index": 17, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Create systemd override directories for instances", "with_items": "{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ] and item.systemd_override|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "/etc/systemd/system/redis-server@{{ item.name }}.service.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate systemd instance override files", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Generate systemd instance override files", "with_items": "{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ] and item.systemd_override|d()", "notify": ["Reload service manager"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/systemd/system/redis-server@.service.d/ansible-override.conf.j2", "dest": "/etc/systemd/system/redis-server@{{ item.name }}.service.d/ansible-override.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop Redis instances if requested", "module": "ansible.builtin.systemd", "index": 19, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Stop Redis instances if requested", "with_items": "{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}", "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') == 'absent'", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "redis-server@{{ item.name }}.service", "state": "stopped", "enabled": false}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Redis instance systemd override if requested", "module": "ansible.builtin.file", "index": 20, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Remove Redis instance systemd override if requested", "with_items": "{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}", "notify": ["Reload service manager"], "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') == 'absent'", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "/etc/systemd/system/redis-server@{{ item.name }}.service.d", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Redis instance configuration if requested", "module": "ansible.builtin.file", "index": 21, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Remove Redis instance configuration if requested", "with_items": "{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}", "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') == 'absent'", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "/etc/redis/{{ item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd configuration when needed", "module": "ansible.builtin.meta", "index": 22, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Reload systemd configuration when needed"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that Redis instances are started", "module": "ansible.builtin.systemd", "index": 23, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Ensure that Redis instances are started", "with_items": "{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}", "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "redis-server@{{ item.name }}.service", "state": "started", "enabled": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart Redis instances if their configuration changed", "module": "ansible.builtin.systemd", "index": 24, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Restart Redis instances if their configuration changed", "with_items": "{{ redis_server__register_config_static.results }}", "when": "item is changed", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "redis-server@{{ item.item.name }}.service", "state": "restarted"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Apply dynamic configuration to Redis instances", "module": "ansible.builtin.command", "index": 25, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Apply dynamic configuration to Redis instances", "with_items": "{{ redis_server__register_config_dynamic.results }}", "when": "item is changed", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "/etc/redis/{{ item.item.name }}/ansible-redis-dynamic.conf config", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set Redis Server slave status on first install", "module": "redis", "index": 26, "defined_in": "testdata/scm_repo/roles/redis_server/tasks/main.yml", "options": {"name": "Set Redis Server slave status on first install", "with_items": "{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}", "when": "((ansible_local is undefined or (ansible_local.redis_server is undefined or (ansible_local.redis_server.instances is undefined or (item.name not in (ansible_local.redis_server.instances | selectattr('name', 'defined') | list | map(attribute='name') | list))))) and item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and item.master_host|d() and item.master_port|d())", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"command": "slave", "master_host": "{{ item.master_host }}", "master_port": "{{ item.master_port }}", "login_port": "{{ item.port }}", "login_password": "{{ item.requirepass | d(omit) }}"}, "fqcn": "community.general.redis", "used_in": ["testdata/scm_repo/roles/redis_server"], "annotations": {"use-non-builtin-module": true}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/service/redis_server.yml"]}, {"py/object": "struct4.Role", "name": "lxc", "defined_in": "testdata/scm_repo/roles/lxc", "task_yamls": ["testdata/scm_repo/roles/lxc/tasks/main.yml", "testdata/scm_repo/roles/lxc/tasks/lxc/pre_main.yml", "testdata/scm_repo/roles/lxc/tasks/lxc/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps pre_tasks hook", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "DebOps pre_tasks hook"}, "module_options": "{{ lookup('debops.debops.task_src', 'lxc/pre_main.yml') }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Install required packages", "register": "lxc__register_packages", "until": "lxc__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (lxc__base_packages + lxc__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save LXC local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Save LXC local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/lxc.fact.j2", "dest": "/etc/ansible/facts.d/lxc.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required directories", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Create required directories", "loop": ["/etc/systemd/system/lxc.service.d", "/etc/systemd/system/lxc@.service.d", "/usr/local/lib/lxc"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom LXC hooks", "module": "ansible.builtin.copy", "index": 8, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Install custom LXC hooks"}, "module_options": {"src": "usr/local/lib/lxc/", "dest": "/usr/local/lib/lxc/", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom LXC helper scripts", "module": "ansible.builtin.copy", "index": 9, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Install custom LXC helper scripts"}, "module_options": {"src": "usr/local/bin/", "dest": "/usr/local/bin/", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove systemd service overrides", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Remove systemd service overrides", "loop": [{"name": "/etc/systemd/system/lxc@.service.d/poweroff.conf", "state": "{{ \"present\" if (lxc__version is version(\"2.1.0\", \"<\")) else \"absent\" }}"}], "register": "lxc__register_systemd_overrides_remove", "when": "item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ item.name | d(item) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install systemd service overrides", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Install systemd service overrides", "loop": ["etc/systemd/system/lxc.service.d/exec-override.conf", "etc/systemd/system/lxc@.service.d/partof.conf", {"name": "etc/systemd/system/lxc@.service.d/poweroff.conf", "state": "{{ \"present\" if (lxc__version is version(\"2.1.0\", \"<\")) else \"absent\" }}"}], "register": "lxc__register_systemd_overrides_create", "when": "item.state|d('present') != 'absent'"}, "module_options": {"src": "{{ item.name | d(item) }}.j2", "dest": "/{{ item.name | d(item) }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable internal network when requested", "module": "ansible.builtin.systemd", "index": 12, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Disable internal network when requested", "when": "(lxc__net_deploy_state == 'absent' and ansible_service_mgr == 'systemd')", "tags": ["role::lxc:net"]}, "module_options": {"name": "lxc-net.service", "state": "stopped"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove lxc-net support files", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Remove lxc-net support files", "loop": ["{{ lxc__net_dnsmasq_conf }}", "/etc/systemd/system/lxc-net.service.d", "/etc/ferm/hooks/post.d/restart-lxc-net"], "register": "lxc__register_net_remove", "when": "lxc__net_deploy_state == 'absent'", "tags": ["role::lxc:net"]}, "module_options": {"path": "{{ item }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate lxc-net configuration file", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Generate lxc-net configuration file", "register": "lxc__register_net_config", "tags": ["role::lxc:net"]}, "module_options": {"src": "etc/default/lxc-net.j2", "dest": "/etc/default/lxc-net", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate lxc-net dnsmasq config file", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Generate lxc-net dnsmasq config file", "register": "lxc__register_net_dnsmasq", "when": "lxc__net_deploy_state == 'present'", "tags": ["role::lxc:net", "role::lxc:dnsmasq"]}, "module_options": {"src": "etc/lxc/lxc-net-dnsmasq.conf.j2", "dest": "{{ lxc__net_dnsmasq_conf }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install lxc-net ferm hook", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Install lxc-net ferm hook", "when": "(lxc__net_deploy_state == 'present' and ansible_local|d() and ansible_local.ferm|d() and (ansible_local.ferm.enabled|d())|bool)", "tags": ["role::lxc:net"]}, "module_options": {"src": "etc/ferm/hooks/post.d/restart-lxc-net.j2", "dest": "/etc/ferm/hooks/post.d/restart-lxc-net", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create lxc-net service override directory", "module": "ansible.builtin.file", "index": 17, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Create lxc-net service override directory", "when": "lxc__net_deploy_state == 'present'", "tags": ["role::lxc:net"]}, "module_options": {"path": "/etc/systemd/system/lxc-net.service.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Hook lxc-net-resolvconf script to the lxc-net service", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Hook lxc-net-resolvconf script to the lxc-net service", "register": "lxc__register_net_systemd", "when": "lxc__net_deploy_state == 'present'", "tags": ["role::lxc:net"]}, "module_options": {"src": "etc/systemd/system/lxc-net.service.d/resolvconf.conf.j2", "dest": "/etc/systemd/system/lxc-net.service.d/resolvconf.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reconfigure systemd services when modified", "module": "ansible.builtin.systemd", "index": 19, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Reconfigure systemd services when modified", "when": "(ansible_service_mgr == 'systemd' and (lxc__register_net_remove|d({}) is changed or lxc__register_net_config|d({}) is changed or lxc__register_net_dnsmasq|d({}) is changed or lxc__register_net_systemd|d({}) is changed or lxc__register_systemd_overrides_create|d({}) is changed or lxc__register_systemd_overrides_remove|d({}) is changed))", "tags": ["role::lxc:net", "role::lxc:dnsmasq"]}, "module_options": {"name": "{{ \"lxc-net.service\" if (lxc__net_deploy_state == \"present\") else omit }}", "state": "{{ \"restarted\" if (lxc__net_deploy_state == \"present\") else omit }}", "daemon_reload": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove default SSH keys for root in containers if none are defined", "module": "ansible.builtin.file", "index": 20, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Remove default SSH keys for root in containers if none are defined", "when": "not lxc__default_container_ssh_root_sshkeys|d()"}, "module_options": {"path": "/etc/lxc/root_authorized_keys", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Define default SSH keys for root account in containers", "module": "ansible.posix.authorized_key", "index": 21, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Define default SSH keys for root account in containers", "when": "lxc__default_container_ssh_root_sshkeys|d()"}, "module_options": {"key": "{{ lxc__default_container_ssh_root_sshkeys | join('\n') }}", "path": "/etc/lxc/root_authorized_keys", "manage_dir": false, "user": "root", "state": "present", "exclusive": true}, "fqcn": "ansible.posix.authorized_key", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove LXC configuration if requested", "module": "ansible.builtin.file", "index": 22, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Remove LXC configuration if requested", "with_items": "{{ lxc__combined_configuration | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "/etc/lxc/{{ item.filename | d(item.name + \".conf\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate LXC configuration", "module": "ansible.builtin.template", "index": 23, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Generate LXC configuration", "with_items": "{{ lxc__combined_configuration | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ]"}, "module_options": {"src": "etc/lxc/template.conf.j2", "dest": "/etc/lxc/{{ item.filename | d(item.name + \".conf\") }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove common LXC container configuration if requested", "module": "ansible.builtin.file", "index": 24, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Remove common LXC container configuration if requested", "with_items": "{{ lxc__common_combined_conf | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "/usr/share/lxc/config/common.conf.d/{{ item.filename | d(item.name + \".conf\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate common LXC container configuration", "module": "ansible.builtin.template", "index": 25, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Generate common LXC container configuration", "with_items": "{{ lxc__common_combined_conf | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ]"}, "module_options": {"src": "etc/lxc/template.conf.j2", "dest": "/usr/share/lxc/config/common.conf.d/{{ item.filename | d(item.name + \".conf\") }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop LXC containers if requested", "module": "ansible.builtin.systemd", "index": 26, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Stop LXC containers if requested", "loop": "{{ lxc__containers }}", "when": "ansible_local|d() and ansible_local.lxc|d() and (item.name | d(item)) in ansible_local.lxc.containers|d() and item.state|d(\"started\") in [ \"stopped\", \"absent\" ]", "tags": ["role::lxc:containers"]}, "module_options": {"name": "lxc@{{ item.name | d(item) }}.service", "state": "stopped", "enabled": "{{ True if item.state | d(\"started\") == \"stopped\" else False }}"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Destroy LXC containers if requested", "module": "lxc_container", "index": 27, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Destroy LXC containers if requested", "loop": "{{ lxc__containers }}", "tags": ["role::lxc:containers"], "when": "ansible_local|d() and ansible_local.lxc|d() and (item.name | d(item)) in ansible_local.lxc.containers|d() and item.state|d(\"started\") == \"absent\""}, "module_options": {"name": "{{ item.name | d(item) }}", "state": "absent"}, "fqcn": "community.general.lxc_container", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove systemd LXC instance configuration if requested", "module": "ansible.builtin.file", "index": 28, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Remove systemd LXC instance configuration if requested", "loop": "{{ lxc__containers }}", "register": "lxc__register_systemd_remove_override", "when": "ansible_local|d() and ansible_local.lxc|d() and (item.name | d(item)) in ansible_local.lxc.containers|d() and item.state|d(\"started\") == \"absent\" and item.systemd_override|d()", "tags": ["role::lxc:containers"]}, "module_options": {"path": "/etc/systemd/system/lxc@{{ item.name }}.service.d", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create systemd override directories for LXC instances", "module": "ansible.builtin.file", "index": 29, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Create systemd override directories for LXC instances", "loop": "{{ lxc__containers }}", "when": "item.state|d(\"started\") != \"absent\" and item.systemd_override|d()", "tags": ["role::lxc:containers"]}, "module_options": {"path": "/etc/systemd/system/lxc@{{ item.name }}.service.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate systemd LXC instance override files", "module": "ansible.builtin.template", "index": 30, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Generate systemd LXC instance override files", "loop": "{{ lxc__containers }}", "register": "lxc__register_systemd_create_override", "when": "item.state|d(\"started\") != \"absent\" and item.systemd_override|d()", "tags": ["role::lxc:containers"]}, "module_options": {"src": "etc/systemd/system/lxc@.service.d/ansible-override.conf.j2", "dest": "/etc/systemd/system/lxc@{{ item.name }}.service.d/ansible-override.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd configuration when needed", "module": "ansible.builtin.systemd", "index": 31, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Reload systemd configuration when needed", "when": "ansible_service_mgr == 'systemd' and lxc__register_systemd_create_override is changed or lxc__register_systemd_remove_override is changed", "tags": ["role::lxc:containers"]}, "module_options": {"daemon_reload": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage LXC containers", "module": "vars", "index": 32, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Manage LXC containers", "environment": {"DOWNLOAD_KEYSERVER": "{{ ansible_local.keyring.keyserver | d(\"hkp://keyserver.ubuntu.com\") }}"}, "lxc_container": {"name": "{{ item.name                | d(item) }}", "archive": "{{ item.archive             | d(omit) }}", "archive_compression": "{{ item.archive_compression | d(omit) }}", "archive_path": "{{ item.archive_path        | d(omit) }}", "backing_store": "{{ item.backing_store       | d(lxc__default_container_backing_store) }}", "clone_name": "{{ item.clone_name          | d(omit) }}", "clone_snapshot": "{{ item.clone_snapshot      | d(omit) }}", "config": "{{ item.config              | d(lxc__default_container_config) }}", "container_command": "{{ item.container_command   | d(omit) }}", "container_config": "{{ item.container_config    | d(omit) }}", "container_log": "{{ item.container_log       | d(omit) }}", "container_log_level": "{{ item.container_log_level | d(omit) }}", "directory": "{{ item.directory           | d(omit) }}", "fs_size": "{{ item.fs_size             | d(omit) }}", "fs_type": "{{ item.fs_type             | d(omit) }}", "lv_name": "{{ item.lv_name             | d(omit) }}", "lxc_path": "{{ item.lxc_path            | d(omit) }}", "state": "{{ item.state               | d(\"started\" if (ansible_local|d() and ansible_local.lxc|d() and (item.name | d(item)) in ansible_local.lxc.containers|d()) else \"stopped\") }}", "template": "{{ item.template            | d(lxc__default_container_template) }}", "template_options": "{{ item.template_options    | d((template_options | join(\" \")) if ((item.template | d(lxc__default_container_template)) == \"download\") else omit) }}", "thinpool": "{{ item.thinpool            | d(omit) }}", "vg_name": "{{ item.vg_name             | d(omit) }}", "vfs_root": "{{ item.zfs_root            | d(omit) }}"}, "loop": "{{ lxc__containers }}", "tags": ["role::lxc:containers"], "when": "ansible_local|d() and ansible_local.lxc|d() and (item.name | d(item)) not in ansible_local.lxc.containers|d() and item.state|d(\"started\") != \"absent\""}, "module_options": {"template_options": ["--dist {{ (item.distribution | d(lxc__default_container_distribution)) | lower }}", "--release {{ (item.release   | d(lxc__default_container_release))      | lower }}", "--arch {{ (item.architecture | d(lxc__default_container_architecture)) | lower }}"]}, "fqcn": "ansible.builtin.vars", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure static MAC addresses for new LXC containers", "module": "ansible.builtin.command", "index": 33, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Configure static MAC addresses for new LXC containers", "loop": "{{ lxc__containers }}", "when": "ansible_local|d() and ansible_local.lxc|d() and (item.name | d(item)) not in ansible_local.lxc.containers|d() and item.state|d(\"started\") == \"started\"", "tags": ["role::lxc:containers"]}, "module_options": "lxc-hwaddr-static {{ item.name | d(item) }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Include fstab parameter in LXC container configuration for lxc<4.0", "module": "ansible.builtin.lineinfile", "index": 34, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Include fstab parameter in LXC container configuration for lxc<4.0", "loop": "{{ lxc__containers }}", "when": "ansible_local|d() and ansible_local.lxc|d() and (item.name | d(item)) not in ansible_local.lxc.containers|d() and item.state|d(\"started\") == \"started\" and item.fstab|d() and lxc__version is version(\"4.0\", operator=\"lt\", strict=True)", "tags": ["role::lxc:containers"]}, "module_options": {"path": "/var/lib/lxc/{{ item.name | d(item) }}/config", "regexp": "^lxc\\.mount\\s+=\\s+", "line": "lxc.mount = /var/lib/lxc/{{ item.name | d(item) }}/fstab", "insertafter": "^lxc\\.rootfs\\.backend\\s+=\\s+", "state": "present", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Include fstab parameter in LXC container configuration for lxc>=4.0", "module": "ansible.builtin.lineinfile", "index": 35, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Include fstab parameter in LXC container configuration for lxc>=4.0", "loop": "{{ lxc__containers }}", "when": "ansible_local|d() and ansible_local.lxc|d() and (item.name | d(item)) not in ansible_local.lxc.containers|d() and item.state|d(\"started\") == \"started\" and item.fstab|d() and lxc__version is version(\"4.0\", operator=\">=\", strict=True)", "tags": ["role::lxc:containers"]}, "module_options": {"path": "/var/lib/lxc/{{ item.name | d(item) }}/config", "regexp": "^lxc\\.mount\\.fstab\\s+=\\s+", "line": "lxc.mount.fstab = /var/lib/lxc/{{ item.name | d(item) }}/fstab", "insertafter": "^lxc\\.rootfs\\.backend\\s+=\\s+", "state": "present", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create custom fstab files for LXC containers", "module": "ansible.builtin.copy", "index": 36, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Create custom fstab files for LXC containers", "loop": "{{ lxc__containers }}", "when": "ansible_local|d() and ansible_local.lxc|d() and (item.name | d(item)) not in ansible_local.lxc.containers|d() and item.state|d(\"started\") == \"started\" and item.fstab|d()", "tags": ["role::lxc:containers"]}, "module_options": {"content": "# Filesystem table for the '{{ item.name | d(item) }}' LXC container\n{{ item.fstab | regex_replace('\\n$','') }}\n", "dest": "/var/lib/lxc/{{ item.name | d(item) }}/fstab", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start LXC containers after creation", "module": "ansible.builtin.systemd", "index": 37, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Start LXC containers after creation", "loop": "{{ lxc__containers }}", "when": "ansible_local|d() and ansible_local.lxc|d() and (item.name | d(item)) not in ansible_local.lxc.containers|d() and item.state|d(\"started\") == \"started\"", "tags": ["role::lxc:containers"]}, "module_options": {"name": "lxc@{{ item.name | d(item) }}.service", "state": "{{ \"restarted\" if (item.state is defined) else \"started\" }}", "enabled": "{{ True if item.state|d(\"started\") == \"started\" else False }}"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart LXC containers when modified", "module": "ansible.builtin.systemd", "index": 38, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Restart LXC containers when modified", "loop": "{{ lxc__containers | zip(lxc__register_systemd_create_override.results|d([])) | list }}", "when": "ansible_local|d() and ansible_local.lxc|d() and (item.0.name | d(item.0)) in ansible_local.lxc.containers|d() and item.0.state|d('started') == 'started' and item.1 is changed", "tags": ["role::lxc:containers"]}, "module_options": {"name": "lxc@{{ item.0.name | d(item.0) }}.service", "state": "restarted"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare SSH access in LXC containers", "module": "ansible.builtin.shell", "index": 39, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "Prepare SSH access in LXC containers", "loop": "{{ lxc__containers }}", "when": "ansible_local|d() and ansible_local.lxc|d() and (item.name | d(item)) not in ansible_local.lxc.containers|d() and (item.ssh|d(lxc__default_container_ssh))|bool and item.state|d(\"started\") == \"started\"", "tags": ["role::lxc:containers"]}, "module_options": "if lxc-attach -n \"{{ item.name | d(item) }}\" -- grep -q '127.0.1.1' /etc/hosts ; then\n    lxc-attach -n \"{{ item.name | d(item) }}\" -- sed -i \"/127\\.0\\.1\\.1/d\" /etc/hosts > /dev/null\nfi\nuntil lxc-prepare-ssh {{ item.name | d(item) }} ; do\n   ((c++)) && ((c==4)) && break\n   printf \"Waiting for network connection inside container to settle...\\n\" ; sleep 5\ndone\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps post_tasks hook", "module": "ansible.builtin.include_tasks", "index": 40, "defined_in": "testdata/scm_repo/roles/lxc/tasks/main.yml", "options": {"name": "DebOps post_tasks hook"}, "module_options": "{{ lookup('debops.debops.task_src', 'lxc/post_main.yml') }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/lxc"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "lxd", "defined_in": "testdata/scm_repo/roles/lxd", "task_yamls": ["testdata/scm_repo/roles/lxd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy custom dependent libraries to system directory", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Copy custom dependent libraries to system directory", "args": {"chdir": "{{ lxd__golang_gosrc }}", "creates": "/usr/local/lib/x86_64-linux-gnu/libraft.so.0", "executable": "bash"}, "when": "lxd__upstream_enabled|bool and lxd__upstream_type == 'git'"}, "module_options": "set -o nounset -o pipefail -o errexit &&\nmkdir -p /usr/local/lib/x86_64-linux-gnu &&\ncp -Pf ../deps/raft/.libs/libraft.so* \\\n       ../deps/dqlite/.libs/libdqlite.so* \\\n       /usr/local/lib/x86_64-linux-gnu &&\nldconfig\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Install required packages"}, "module_options": {"name": "{{ (lxd__base_packages + lxd__packages) | flatten }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required POSIX system group", "module": "ansible.builtin.group", "index": 4, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Create required POSIX system group"}, "module_options": {"name": "{{ lxd__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add selected UNIX accounts to LXD system group", "module": "ansible.builtin.user", "index": 5, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Add selected UNIX accounts to LXD system group", "loop": "{{ lxd__admin_accounts }}"}, "module_options": {"name": "{{ item }}", "groups": "{{ lxd__group }}", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create the log directory", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Create the log directory"}, "module_options": {"state": "directory", "path": "/var/log/lxd", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate systemd units", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Generate systemd units", "loop": ["lxd.socket", "lxd.service", "lxd-containers.service"], "register": "lxd__register_systemd", "when": "lxd__upstream_enabled|bool and ansible_service_mgr == 'systemd'"}, "module_options": {"src": "etc/systemd/system/{{ item }}.j2", "dest": "/etc/systemd/system/{{ item }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable systemd units", "module": "ansible.builtin.systemd", "index": 8, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Enable systemd units", "loop": ["lxd.socket", "lxd-containers.service"], "when": "lxd__register_systemd is changed"}, "module_options": {"daemon_reload": true, "name": "{{ item }}", "state": "started", "enabled": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Apply preseed configuration", "module": "ansible.builtin.command", "index": 9, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Apply preseed configuration", "args": {"stdin": "{{ lxd__preseed_data }}"}, "changed_when": false, "when": "lxd__init_preseed|bool", "tags": ["role::lxd:init"]}, "module_options": "lxd init --preseed", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save LXD local facts", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Save LXD local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/lxd.fact.j2", "dest": "/etc/ansible/facts.d/lxd.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 12, "defined_in": "testdata/scm_repo/roles/lxd/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/lxd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "proc_hidepid", "defined_in": "testdata/scm_repo/roles/proc_hidepid", "task_yamls": ["testdata/scm_repo/roles/proc_hidepid/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Install required packages", "register": "proc_hidepid__register_install", "until": "proc_hidepid__register_install is succeeded", "when": "proc_hidepid__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", (proc_hidepid__base_packages + proc_hidepid__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save proc_hidepid local facts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Save proc_hidepid local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/proc_hidepid.fact.j2", "dest": "/etc/ansible/facts.d/proc_hidepid.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 4, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that UNIX system group with /proc access exists", "module": "ansible.builtin.group", "index": 5, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Ensure that UNIX system group with /proc access exists", "when": "proc_hidepid__enabled|bool"}, "module_options": {"name": "{{ proc_hidepid__group }}", "gid": "{{ proc_hidepid__gid if proc_hidepid__gid|d() else omit }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure /proc with hidepid= option in /etc/fstab", "module": "ansible.posix.mount", "index": 6, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Configure /proc with hidepid= option in /etc/fstab", "notify": ["Refresh host facts"], "when": "proc_hidepid__enabled|bool and proc_hidepid__remount|bool"}, "module_options": {"name": "/proc", "src": "proc", "fstype": "proc", "opts": "defaults,hidepid={{ proc_hidepid__level }},gid={{ proc_hidepid__group }}", "state": "mounted"}, "fqcn": "ansible.posix.mount", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remount /proc from rc.local when needed", "module": "ansible.builtin.lineinfile", "index": 7, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Remount /proc from rc.local when needed", "when": "(proc_hidepid__enabled|bool and proc_hidepid__remount|bool and (ansible_distribution in [ 'Ubuntu' ] and ansible_distribution_release in [ 'trusty' ]))"}, "module_options": {"dest": "/etc/rc.local", "regexp": "^mount -o remount,hidepid={{ proc_hidepid__level }},gid={{ proc_hidepid__group }} /proc", "line": "mount -o remount,hidepid={{ proc_hidepid__level }},gid={{ proc_hidepid__group }} /proc", "insertbefore": "exit 0", "state": "present", "mode": "0755"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check /proc/sched_debug file attributes", "module": "ansible.builtin.stat", "index": 8, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Check /proc/sched_debug file attributes", "register": "proc_hidepid__register_sched"}, "module_options": {"path": "/proc/sched_debug"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate tmpfiles configuration for securing /proc/sched_debug", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Generate tmpfiles configuration for securing /proc/sched_debug", "notify": ["Create temporary files"], "when": "proc_hidepid__enabled|bool and ansible_service_mgr == 'systemd' and proc_hidepid__secure_scheduler_enabled|bool"}, "module_options": {"src": "etc/tmpfiles.d/proc-sched_debug.conf.j2", "dest": "/etc/tmpfiles.d/proc-sched_debug.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create the systemd override directories", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Create the systemd override directories", "loop": ["systemd-logind.service.d", "user@.service.d"], "when": "proc_hidepid__enabled|bool and ansible_service_mgr == 'systemd'"}, "module_options": {"path": "{{ \"/etc/systemd/system/\" + item }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that systemd services are exempt from hidepid", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Ensure that systemd services are exempt from hidepid", "loop": ["systemd-logind.service.d", "user@.service.d"], "notify": ["Reload service manager"], "when": "proc_hidepid__enabled|bool and ansible_service_mgr == 'systemd'"}, "module_options": {"src": "{{ \"etc/systemd/system/\" + item + \"/hidepid.conf.j2\" }}", "dest": "{{ \"/etc/systemd/system/\" + item + \"/hidepid.conf\" }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 12, "defined_in": "testdata/scm_repo/roles/proc_hidepid/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/proc_hidepid"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "salt", "defined_in": "testdata/scm_repo/roles/salt", "task_yamls": ["testdata/scm_repo/roles/salt/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/salt/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/salt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Salt Master packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/salt/tasks/main.yml", "options": {"name": "Install Salt Master packages", "register": "salt__register_packages", "until": "salt__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (salt__base_packages + salt__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/salt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Salt Master using Ansible", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/salt/tasks/main.yml", "options": {"name": "Configure Salt Master using Ansible", "notify": ["Restart salt-master"], "when": "salt__configuration|bool"}, "module_options": {"src": "etc/salt/master.d/ansible.conf.j2", "dest": "{{ salt__configuration_file }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/salt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Salt Master configuration file if disabled", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/salt/tasks/main.yml", "options": {"name": "Remove Salt Master configuration file if disabled", "notify": ["Restart salt-master"], "when": "not salt__configuration|bool"}, "module_options": {"path": "{{ salt__configuration_file }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/salt"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "unattended_upgrades", "defined_in": "testdata/scm_repo/roles/unattended_upgrades", "task_yamls": ["testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.apt", "index": 0, "defined_in": "testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml", "options": {"name": "Install required packages", "register": "unattended_upgrades__register_packages", "until": "unattended_upgrades__register_packages is succeeded", "when": "unattended_upgrades__enabled | bool"}, "module_options": {"name": "{{ (unattended_upgrades__base_packages + unattended_upgrades__packages) | flatten }}", "state": "present", "install_recommends": false}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/unattended_upgrades"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure debconf answer", "module": "ansible.builtin.debconf", "index": 1, "defined_in": "testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml", "options": {"name": "Configure debconf answer"}, "module_options": {"name": "unattended-upgrades", "question": "unattended-upgrades/enable_auto_updates", "vtype": "boolean", "value": "{{ \"true\" if unattended_upgrades__enabled|bool else \"false\" }}"}, "fqcn": "ansible.builtin.debconf", "used_in": ["testdata/scm_repo/roles/unattended_upgrades"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure periodic APT updates", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml", "options": {"name": "Configure periodic APT updates", "when": "((unattended_upgrades__periodic|bool) or (ansible_local|d() and ansible_local.unattended_upgrades|d() and ansible_local.unattended_upgrades.periodic|bool))"}, "module_options": {"src": "etc/apt/apt.conf.d/20periodic.j2", "dest": "/etc/apt/apt.conf.d/20periodic", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/unattended_upgrades"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure periodic APT upgrades", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml", "options": {"name": "Configure periodic APT upgrades", "when": "((unattended_upgrades__enabled|bool) or (ansible_local|d() and ansible_local.unattended_upgrades|d() and ansible_local.unattended_upgrades.enabled|bool))"}, "module_options": {"src": "etc/apt/apt.conf.d/20auto-upgrades.j2", "dest": "/etc/apt/apt.conf.d/20auto-upgrades", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/unattended_upgrades"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of unattended-upgrades configuration", "module": "dpkg_divert", "index": 4, "defined_in": "testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml", "options": {"name": "Add/remove diversion of unattended-upgrades configuration"}, "module_options": {"path": "/etc/apt/apt.conf.d/50unattended-upgrades", "state": "{{ \"present\" if unattended_upgrades__enabled|bool else \"absent\" }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/unattended_upgrades"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure unattended-upgrades", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml", "options": {"name": "Configure unattended-upgrades", "when": "unattended_upgrades__enabled | bool"}, "module_options": {"src": "etc/apt/apt.conf.d/50unattended-upgrades.j2", "dest": "/etc/apt/apt.conf.d/50unattended-upgrades", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/unattended_upgrades"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local fact directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml", "options": {"name": "Make sure that Ansible local fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/unattended_upgrades"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Ansible local facts", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml", "options": {"name": "Save Ansible local facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/unattended_upgrades.fact.j2", "dest": "/etc/ansible/facts.d/unattended_upgrades.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/unattended_upgrades"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "cran", "defined_in": "testdata/scm_repo/roles/cran", "task_yamls": ["testdata/scm_repo/roles/cran/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/cran/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/cran"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install system packages required for R support", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/cran/tasks/main.yml", "options": {"name": "Install system packages required for R support", "register": "cran__register_packages", "until": "cran__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (cran__base_packages + cran__packages + cran__group_packages + cran__host_packages + cran__dependent_packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/cran"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Java environment in R", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/cran/tasks/main.yml", "options": {"name": "Configure Java environment in R", "when": "(cran__java_integration|bool and (ansible_local|d() and ansible_local.cran is undefined))"}, "module_options": "R CMD javareconf", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/cran"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage R packages", "module": "cran", "index": 3, "defined_in": "testdata/scm_repo/roles/cran/tasks/main.yml", "options": {"name": "Manage R packages", "with_flattened": ["{{ cran__r_packages }}", "{{ cran__group_r_packages }}", "{{ cran__host_r_packages }}", "{{ cran__dependent_r_packages }}"]}, "module_options": {"name": "{{ item.name  | d(item) }}", "repo": "{{ item.repo  | d(cran__upstream_mirror) }}", "state": "{{ item.state | d(\"present\") }}"}, "fqcn": "debops.debops.cran", "used_in": ["testdata/scm_repo/roles/cran"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/cran/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/cran"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save CRAN local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/cran/tasks/main.yml", "options": {"name": "Save CRAN local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/cran.fact.j2", "dest": "/etc/ansible/facts.d/cran.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/cran"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/cran/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/cran"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "apt_listchanges", "defined_in": "testdata/scm_repo/roles/apt_listchanges", "task_yamls": ["testdata/scm_repo/roles/apt_listchanges/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Manage APT packages", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/apt_listchanges/tasks/main.yml", "options": {"name": "Manage APT packages", "register": "apt_listchanges__register_packages", "until": "apt_listchanges__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (apt_listchanges__base_packages + apt_listchanges__packages)) }}", "state": "{{ apt_listchanges__deploy_state }}", "purge": true}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/apt_listchanges"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure apt-listchanges", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/apt_listchanges/tasks/main.yml", "options": {"name": "Configure apt-listchanges", "when": "apt_listchanges__deploy_state == 'present'"}, "module_options": {"src": "etc/apt/listchanges.conf.j2", "dest": "/etc/apt/listchanges.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt_listchanges"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible fact directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/apt_listchanges/tasks/main.yml", "options": {"name": "Make sure that Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt_listchanges"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save apt-listchanges facts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/apt_listchanges/tasks/main.yml", "options": {"name": "Save apt-listchanges facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/apt_listchanges.fact.j2", "dest": "/etc/ansible/facts.d/apt_listchanges.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt_listchanges"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "resolvconf", "defined_in": "testdata/scm_repo/roles/resolvconf", "task_yamls": ["testdata/scm_repo/roles/resolvconf/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/resolvconf/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/resolvconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/resolvconf/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/resolvconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/resolvconf/tasks/main.yml", "options": {"name": "Install required packages", "register": "resolvconf__register_packages", "until": "resolvconf__register_packages is succeeded", "when": "resolvconf__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", (resolvconf__base_packages + resolvconf__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/resolvconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate static configuration script", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/resolvconf/tasks/main.yml", "options": {"name": "Generate static configuration script", "notify": ["Apply static resolvconf configuration"], "when": "resolvconf__enabled|bool and resolvconf__static_enabled|bool"}, "module_options": {"src": "usr/local/lib/resolvconf-static.j2", "dest": "/usr/local/lib/resolvconf-static", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/resolvconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create systemd override directory", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/resolvconf/tasks/main.yml", "options": {"name": "Create systemd override directory", "when": "resolvconf__enabled|bool and resolvconf__static_enabled|bool"}, "module_options": {"path": "/etc/systemd/system/resolvconf.service.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/resolvconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate systemd service override", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/resolvconf/tasks/main.yml", "options": {"name": "Generate systemd service override", "notify": ["Reload service manager"], "when": "resolvconf__enabled|bool and resolvconf__static_enabled|bool"}, "module_options": {"src": "etc/systemd/system/resolvconf.service.d/static.conf.j2", "dest": "/etc/systemd/system/resolvconf.service.d/static.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/resolvconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of /etc/resolvconf/interface-order", "module": "dpkg_divert", "index": 6, "defined_in": "testdata/scm_repo/roles/resolvconf/tasks/main.yml", "options": {"name": "Add/remove diversion of /etc/resolvconf/interface-order", "notify": ["Refresh /etc/resolv.conf"], "when": "(resolvconf__enabled|bool and resolvconf__deploy_state in [ 'present', 'absent' ])"}, "module_options": {"path": "/etc/resolvconf/interface-order", "state": "{{ resolvconf__deploy_state }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/resolvconf"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate /etc/resolvconf/interface-order configuration", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/resolvconf/tasks/main.yml", "options": {"name": "Generate /etc/resolvconf/interface-order configuration", "notify": ["Refresh /etc/resolv.conf"], "when": "resolvconf__enabled|bool and resolvconf__deploy_state == 'present'"}, "module_options": {"src": "etc/resolvconf/interface-order.j2", "dest": "/etc/resolvconf/interface-order", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/resolvconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/resolvconf/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/resolvconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate resolvconf Ansible local facts", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/resolvconf/tasks/main.yml", "options": {"name": "Generate resolvconf Ansible local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/resolvconf.fact.j2", "dest": "/etc/ansible/facts.d/resolvconf.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/resolvconf"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 10, "defined_in": "testdata/scm_repo/roles/resolvconf/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/resolvconf"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/bootstrap.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "nscd", "defined_in": "testdata/scm_repo/roles/nscd", "task_yamls": ["testdata/scm_repo/roles/nscd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/nscd/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nscd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/nscd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nscd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/nscd/tasks/main.yml", "options": {"name": "Install required packages", "register": "nscd__register_packages", "until": "nscd__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", nscd__base_packages + nscd__packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/nscd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the nscd configuration file", "module": "dpkg_divert", "index": 3, "defined_in": "testdata/scm_repo/roles/nscd/tasks/main.yml", "options": {"name": "Divert the nscd configuration file"}, "module_options": {"path": "/etc/nscd.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/nscd"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate nscd configuration", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/nscd/tasks/main.yml", "options": {"name": "Generate nscd configuration", "register": "nscd__register_config"}, "module_options": {"src": "etc/nscd.conf.j2", "dest": "/etc/nscd.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nscd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart nscd if its configuration was modified", "module": "ansible.builtin.service", "index": 5, "defined_in": "testdata/scm_repo/roles/nscd/tasks/main.yml", "options": {"name": "Restart nscd if its configuration was modified", "when": "nscd__register_config is changed"}, "module_options": {"name": "{{ nscd__flavor }}", "state": "restarted"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/nscd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/nscd/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nscd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save nscd local facts", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/nscd/tasks/main.yml", "options": {"name": "Save nscd local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/nscd.fact.j2", "dest": "/etc/ansible/facts.d/nscd.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nscd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 8, "defined_in": "testdata/scm_repo/roles/nscd/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/nscd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml"]}, {"py/object": "struct4.Role", "name": "global_handlers", "defined_in": "testdata/scm_repo/roles/global_handlers", "task_yamls": [], "tasks": [], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "libuser", "defined_in": "testdata/scm_repo/roles/libuser", "task_yamls": ["testdata/scm_repo/roles/libuser/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/libuser/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/libuser"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/libuser/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/libuser"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Libuser requested packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/libuser/tasks/main.yml", "options": {"name": "Install Libuser requested packages", "register": "libuser__register_packages", "until": "libuser__register_packages is succeeded", "when": "libuser__enabled | bool"}, "module_options": {"name": "{{ q(\"flattened\", libuser__base_packages + libuser__packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/libuser"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the original libuser configuration file", "module": "dpkg_divert", "index": 3, "defined_in": "testdata/scm_repo/roles/libuser/tasks/main.yml", "options": {"name": "Divert the original libuser configuration file", "when": "libuser__enabled|bool"}, "module_options": {"path": "/etc/libuser.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/libuser"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure main libuser config file", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/libuser/tasks/main.yml", "options": {"name": "Configure main libuser config file", "when": "libuser__enabled|bool"}, "module_options": {"src": "etc/libuser.conf.j2", "dest": "/etc/libuser.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/libuser"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that local fact directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/libuser/tasks/main.yml", "options": {"name": "Make sure that local fact directory exists"}, "module_options": {"dest": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/libuser"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Libuser local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/libuser/tasks/main.yml", "options": {"name": "Save Libuser local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/libuser.fact.j2", "dest": "/etc/ansible/facts.d/libuser.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/libuser"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/libuser/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/libuser"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/bootstrap.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "persistent_paths", "defined_in": "testdata/scm_repo/roles/persistent_paths", "task_yamls": ["testdata/scm_repo/roles/persistent_paths/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/persistent_paths/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/persistent_paths"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the qubes-bind-dirs.d directory does exist", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/persistent_paths/tasks/main.yml", "options": {"name": "Ensure the qubes-bind-dirs.d directory does exist"}, "module_options": {"path": "{{ persistent_paths__qubes_os_config_dir }}", "state": "directory", "owner": "root", "group": "root", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/persistent_paths"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configuration persistent paths on Qubes OS", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/persistent_paths/tasks/main.yml", "options": {"name": "Configuration persistent paths on Qubes OS", "when": "(item.value.state|d(\"present\") == \"present\")", "with_dict": "{{ persistent_paths__combined_paths }}", "notify": ["Run bind-dirs"]}, "module_options": {"src": "rw/config/qubes-bind-dirs.d/default.conf.j2", "dest": "{{ persistent_paths__qubes_os_config_dir + \"/\" + item.key + \".conf\" }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/persistent_paths"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove configuration of persistent paths on Qubes OS", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/persistent_paths/tasks/main.yml", "options": {"name": "Remove configuration of persistent paths on Qubes OS", "when": "(item.value.state|d(\"present\") == \"absent\")", "with_dict": "{{ persistent_paths__combined_paths }}", "notify": ["Run bind-dirs"]}, "module_options": {"path": "{{ persistent_paths__qubes_os_config_dir + \"/\" + item.key + \".conf\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/persistent_paths"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/persistent_paths/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/persistent_paths"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create local facts of persistent_paths", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/persistent_paths/tasks/main.yml", "options": {"name": "Create local facts of persistent_paths", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/persistent_paths.fact.j2", "dest": "/etc/ansible/facts.d/persistent_paths.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/persistent_paths"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/persistent_paths/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/persistent_paths"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "kmod", "defined_in": "testdata/scm_repo/roles/kmod", "task_yamls": ["testdata/scm_repo/roles/kmod/tasks/main.yml", "testdata/scm_repo/roles/kmod/tasks/modprobe.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if modprobe is available", "module": "ansible.builtin.stat", "index": 2, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Check if modprobe is available", "register": "kmod__register_modprobe"}, "module_options": {"path": "/sbin/modprobe"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Install required packages", "register": "kmod__register_packages", "until": "kmod__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (kmod__base_packages + kmod__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save kmod local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Save kmod local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/kmod.fact.j2", "dest": "/etc/ansible/facts.d/kmod.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure kernel modules", "module": "include_tasks", "index": 7, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Configure kernel modules", "loop_control": {"loop_var": "module"}, "with_items": "{{ kmod__combined_modules | debops.debops.parse_kv_items }}", "when": "kmod__enabled|bool"}, "module_options": "modprobe.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove module load configuration", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Remove module load configuration", "with_items": "{{ kmod__combined_load | debops.debops.parse_kv_items }}", "when": "kmod__enabled|bool and ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"dest": "/etc/modules-load.d/{{ item.filename | d(item.name | replace(\"_\",\"-\") + \".conf\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure module loading at boot", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Configure module loading at boot", "with_items": "{{ kmod__combined_load | debops.debops.parse_kv_items }}", "when": "kmod__enabled|bool and ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"src": "etc/modules-load.d/module.conf.j2", "dest": "/etc/modules-load.d/{{ item.filename | d(item.name | replace(\"_\",\"-\") + \".conf\") }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage module loading in /etc/modules", "module": "ansible.builtin.lineinfile", "index": 10, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Manage module loading in /etc/modules", "loop": "{{ kmod__combined_load | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state | d(\"present\")} }}"}, "when": "kmod__enabled|bool and ansible_service_mgr != 'systemd' and item.name|d() and item.state|d('present') in [ 'present', 'absent' ]"}, "module_options": {"dest": "/etc/modules", "regexp": "^{{ item.name }}", "line": "{{ item.name }}", "state": "{{ item.state }}", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Load missing kernel modules enabled at boot", "module": "community.general.modprobe", "index": 11, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Load missing kernel modules enabled at boot", "with_items": "{{ kmod__combined_load | debops.debops.parse_kv_items }}", "notify": ["Refresh host facts"], "when": "kmod__enabled|bool and item.name|d() and item.state|d('present') not in [ 'config', 'absent', 'ignore' ] and item.modules is undefined and ansible_local.kmod.modules|d() and item.name not in ansible_local.kmod.modules"}, "module_options": {"name": "{{ item.name }}", "state": "present"}, "fqcn": "community.general.modprobe", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if modules were loaded", "module": "ansible.builtin.meta", "index": 12, "defined_in": "testdata/scm_repo/roles/kmod/tasks/main.yml", "options": {"name": "Update Ansible facts if modules were loaded"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove module configuration", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/kmod/tasks/modprobe.yml", "options": {"name": "Remove module configuration", "notify": ["Refresh host facts"], "register": "kmod__register_module_config_delete", "when": "module.name|d() and module.state|d('present') == 'absent'"}, "module_options": {"dest": "/etc/modprobe.d/{{ module.filename | d(module.name | replace(\"_\",\"-\") + \".conf\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate module configuration", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/kmod/tasks/modprobe.yml", "options": {"name": "Generate module configuration", "notify": ["Refresh host facts"], "register": "kmod__register_module_config_create", "when": "module.name|d() and module.state|d('present') != 'absent'"}, "module_options": {"src": "etc/modprobe.d/module.conf.j2", "dest": "/etc/modprobe.d/{{ module.filename | d(module.name | replace(\"_\",\"-\") + \".conf\") }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Unload kernel module if configuration changed", "module": "modprobe", "index": 2, "defined_in": "testdata/scm_repo/roles/kmod/tasks/modprobe.yml", "options": {"name": "Unload kernel module if configuration changed", "when": "((kmod__register_module_config_delete is changed or kmod__register_module_config_create is changed) and module.blacklist is not defined and ansible_local.kmod.modules|d() and module.name in ansible_local.kmod.modules and module.state|d('present') not in [ 'config' ])"}, "module_options": {"name": "{{ module.name }}", "state": "absent"}, "fqcn": "community.general.modprobe", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Load kernel module if configuration changed", "module": "modprobe", "index": 3, "defined_in": "testdata/scm_repo/roles/kmod/tasks/modprobe.yml", "options": {"name": "Load kernel module if configuration changed", "when": "((kmod__register_module_config_delete is changed or kmod__register_module_config_create is changed) and module.blacklist is not defined and module.state|d('present') not in [ 'config', 'absent', 'blacklist' ])"}, "module_options": {"name": "{{ module.name }}", "state": "present"}, "fqcn": "community.general.modprobe", "used_in": ["testdata/scm_repo/roles/kmod"], "annotations": {"use-non-builtin-module": true}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "icinga", "defined_in": "testdata/scm_repo/roles/icinga", "task_yamls": ["testdata/scm_repo/roles/icinga/tasks/main_env.yml", "testdata/scm_repo/roles/icinga/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare Icinga environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main_env.yml", "options": {"name": "Prepare Icinga environment"}, "module_options": {"icinga__secret__directories": "{{ lookup(\"template\", \"lookup/icinga__secret__directories.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import Custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Import Custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required Icinga packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Install required Icinga packages", "register": "icinga__register_packages", "until": "icinga__register_packages is succeeded"}, "module_options": {"name": "{{ lookup(\"flattened\", (icinga__base_packages + icinga__packages), wantlist=True) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add Icinga user to system UNIX groups", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Add Icinga user to system UNIX groups", "notify": ["Check icinga2 configuration and restart"]}, "module_options": {"name": "{{ icinga__user }}", "groups": "{{ lookup(\"flattened\", icinga__additional_groups, wantlist=True) | join(\",\") }}", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Load dependent configuration variables", "module": "ansible.builtin.include_vars", "index": 5, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Load dependent configuration variables", "when": "(ansible_local|d() and ansible_local.icinga|d() and (ansible_local.icinga.configured|d())|bool)"}, "module_options": {"dir": "{{ secret + \"/icinga/dependent_config/\" + inventory_hostname }}", "depth": 1, "name": "icinga__vars_dependent_configuration"}, "fqcn": "ansible.builtin.include_vars", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Icinga local facts", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Save Icinga local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/icinga.fact.j2", "dest": "/etc/ansible/facts.d/icinga.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 8, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of Icinga configuration files", "module": "dpkg_divert", "index": 9, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Add/remove diversion of Icinga configuration files", "loop": "{{ icinga__combined_configuration | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ { \"name\": item.name, \"state\": item.state|d(\"present\") } }}"}, "notify": ["Check icinga2 configuration and restart"], "when": "(item.name|d() and item.state|d('present') in [ 'absent', 'present' ] and item.divert|d(False)|bool)"}, "module_options": {"path": "{{ \"/etc/icinga2/\" + item.filename | d(item.name | regex_replace(\".conf$\",\"\") + \".conf\") }}", "state": "{{ item.state|d(\"present\") }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Ensure that configuration directories exist", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Ensure that configuration directories exist", "with_items": "{{ icinga__combined_configuration | debops.debops.parse_kv_items }}", "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init', 'feature' ] and ((item.filename | d(item.name | regex_replace(\".conf$\",\"\") + \".conf\")) | dirname | d()))"}, "module_options": {"path": "/etc/icinga2/{{ (item.filename | d(item.name | regex_replace(\".conf$\",\"\") + \".conf\")) | dirname }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Icinga configuration files", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Remove Icinga configuration files", "with_items": "{{ icinga__combined_configuration | debops.debops.parse_kv_items }}", "notify": ["Check icinga2 configuration and restart"], "when": "(item.name|d() and item.state|d('present') == 'absent' and not item.divert|d(False)|bool)"}, "module_options": {"path": "/etc/icinga2/{{ item.filename | d(item.name | regex_replace(\".conf$\",\"\") + \".conf\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Icinga configuration files", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Generate Icinga configuration files", "with_items": "{{ icinga__combined_configuration | debops.debops.parse_kv_items }}", "notify": ["Check icinga2 configuration and restart"], "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init', 'divert', 'feature' ])", "no_log": "{{ debops__no_log | d(item.no_log) | d(False) }}"}, "module_options": {"src": "etc/icinga2/template.conf.j2", "dest": "/etc/icinga2/{{ item.filename | d(item.name | regex_replace(\".conf$\",\"\") + \".conf\") }}", "owner": "{{ item.owner | d(\"root\") }}", "group": "{{ item.group | d(\"root\") }}", "mode": "{{ item.mode  | d(\"0644\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that configuration directories exist on the master node", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Ensure that configuration directories exist on the master node", "with_items": "{{ icinga__master_combined_configuration | debops.debops.parse_kv_items }}", "delegate_to": "{{ icinga__master_delegate_to }}", "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init', 'feature' ] and ((item.filename | d(item.name | regex_replace(\".conf$\",\"\") + \".conf\")) | dirname | d()))"}, "module_options": {"path": "/etc/icinga2/zones.d/{{ (item.filename | d(item.name | regex_replace(\".conf$\",\"\") + \".conf\")) | dirname }}", "state": "directory", "recurse": true, "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Icinga configuration on the master node if requested", "module": "ansible.builtin.file", "index": 14, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Remove Icinga configuration on the master node if requested", "with_items": "{{ icinga__master_combined_configuration | debops.debops.parse_kv_items }}", "delegate_to": "{{ icinga__master_delegate_to }}", "notify": ["Check icinga2 configuration and restart it on the master node"], "when": "(item.name|d() and item.state|d('present') == 'absent')"}, "module_options": {"path": "/etc/icinga2/zones.d/{{ item.filename | d(item.name | regex_replace(\".conf$\",\"\") + \".conf\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Icinga configuration files on the master node", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Generate Icinga configuration files on the master node", "with_items": "{{ icinga__master_combined_configuration | debops.debops.parse_kv_items }}", "delegate_to": "{{ icinga__master_delegate_to }}", "notify": ["Check icinga2 configuration and restart it on the master node"], "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init', 'divert', 'feature' ])", "no_log": "{{ debops__no_log | d(item.no_log) | d(False) }}"}, "module_options": {"src": "etc/icinga2/template.conf.j2", "dest": "/etc/icinga2/zones.d/{{ item.filename | d(item.name | regex_replace(\".conf$\",\"\") + \".conf\") }}", "owner": "{{ item.owner | d(\"root\") }}", "group": "{{ item.group | d(\"root\") }}", "mode": "{{ item.mode  | d(\"0644\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure state of Icinga features", "module": "ansible.builtin.file", "index": 16, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Configure state of Icinga features", "with_items": "{{ icinga__combined_configuration | debops.debops.parse_kv_items }}", "notify": ["Check icinga2 configuration and restart"], "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init', 'divert' ] and item.feature_name|d() and item.feature_state|d())"}, "module_options": {"path": "/etc/icinga2/features-enabled/{{ item.feature_name }}.conf", "src": "{{ (\"../features-available/\" + item.feature_name + \".conf\") if (item.feature_state|d(\"present\") == \"present\") else omit }}", "state": "{{ \"link\" if item.feature_state|d(\"present\") == \"present\" else \"absent\" }}", "mode": "0644", "force": "{{ True if ansible_check_mode|bool else omit }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy custom files for Icinga", "module": "ansible.builtin.copy", "index": 17, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Copy custom files for Icinga", "with_flattened": ["{{ icinga__custom_files }}", "{{ icinga__group_custom_files }}", "{{ icinga__host_custom_files }}"], "when": "((item.src|d() or item.content|d()) and item.dest|d() and item.state|d(\"present\") != \"absent\")"}, "module_options": {"content": "{{ item.content | d(omit) }}", "src": "{{ item.src     | d(omit) }}", "dest": "{{ item.dest    | d(omit) }}", "force": "{{ item.force   | d(omit) }}", "owner": "{{ item.owner   | d(\"root\") }}", "group": "{{ item.group   | d(\"root\") }}", "mode": "{{ item.mode    | d(\"0755\") }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save dependent configuration on Ansible Controller", "module": "ansible.builtin.template", "index": 18, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Save dependent configuration on Ansible Controller", "become": false, "delegate_to": "localhost"}, "module_options": {"src": "secret/icinga/dependent_config/inventory_hostname/configuration.json.j2", "dest": "{{ secret + \"/icinga/dependent_config/\" + inventory_hostname + \"/configuration.json\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Register Icinga node in Icinga Director", "module": "ansible.builtin.uri", "index": 19, "defined_in": "testdata/scm_repo/roles/icinga/tasks/main.yml", "options": {"name": "Register Icinga node in Icinga Director", "register": "icinga__register_director_host", "notify": ["Trigger Icinga Director configuration deployment"], "when": "icinga__director_enabled|bool and icinga__director_register|bool and icinga__node_type != 'master'", "changed_when": "icinga__register_director_host.status == 201", "tags": ["role::icinga:register"], "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"body_format": "json", "headers": {"Accept": "application/json"}, "method": "POST", "body": "{{ icinga__director_register_host_object }}", "url": "{{ icinga__director_register_api_url }}", "user": "{{ icinga__director_register_api_user }}", "password": "{{ icinga__director_register_api_password }}", "status_code": "201,422,500", "force_basic_auth": true}, "fqcn": "ansible.builtin.uri", "used_in": ["testdata/scm_repo/roles/icinga"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "tor", "defined_in": "testdata/scm_repo/roles/tor", "task_yamls": ["testdata/scm_repo/roles/tor/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/tor/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/tor"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "samba", "defined_in": "testdata/scm_repo/roles/samba", "task_yamls": ["testdata/scm_repo/roles/samba/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/samba/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/samba"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Samba packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/samba/tasks/main.yml", "options": {"name": "Install Samba packages", "register": "samba__register_packages", "until": "samba__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", samba__base_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/samba"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create root Samba directories", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/samba/tasks/main.yml", "options": {"name": "Create root Samba directories", "with_flattened": ["{{ samba__path }}", "{{ samba__homes_path }}", "{{ samba__shares_path }}"], "when": "('samba' in samba__base_packages)"}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "root", "group": "root", "mode": "0751"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/samba"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup samba-homedir.sh script", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/samba/tasks/main.yml", "options": {"name": "Setup samba-homedir.sh script", "when": "('samba' in samba__base_packages)"}, "module_options": {"src": "usr/local/sbin/samba-homedir.sh.j2", "dest": "/usr/local/sbin/samba-homedir.sh", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/samba"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Samba", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/samba/tasks/main.yml", "options": {"name": "Configure Samba", "notify": ["Check samba config"]}, "module_options": {"src": "etc/samba/smb.conf.j2", "dest": "/etc/samba/smb.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/samba"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Load kernel module specified by samba__kernel_modules", "module": "modprobe", "index": 5, "defined_in": "testdata/scm_repo/roles/samba/tasks/main.yml", "options": {"name": "Load kernel module specified by samba__kernel_modules", "with_flattened": "{{ samba__kernel_modules }}", "when": "(('samba' in samba__base_packages) and (samba__kernel_modules_load|bool))"}, "module_options": {"name": "{{ item }}", "state": "present"}, "fqcn": "community.general.modprobe", "used_in": ["testdata/scm_repo/roles/samba"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Ensure kernel modules are loaded on system boot", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/samba/tasks/main.yml", "options": {"name": "Ensure kernel modules are loaded on system boot", "when": "(('samba' in samba__base_packages) and (samba__kernel_modules_load|bool))"}, "module_options": {"src": "etc/modules-load.d/ansible-samba.conf.j2", "dest": "/etc/modules-load.d/ansible-samba.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/samba"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove legacy entries from /etc/modules", "module": "ansible.builtin.lineinfile", "index": 7, "defined_in": "testdata/scm_repo/roles/samba/tasks/main.yml", "options": {"name": "Remove legacy entries from /etc/modules"}, "module_options": {"dest": "/etc/modules", "regexp": "^nf_conntrack_netbios_ns", "state": "absent"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/samba"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "nginx", "defined_in": "testdata/scm_repo/roles/nginx", "task_yamls": ["testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml", "testdata/scm_repo/roles/nginx/tasks/passenger_config.yml", "testdata/scm_repo/roles/nginx/tasks/nginx_htpasswd.yml", "testdata/scm_repo/roles/nginx/tasks/main.yml", "testdata/scm_repo/roles/nginx/tasks/nginx/pre_main.yml", "testdata/scm_repo/roles/nginx/tasks/nginx/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Create global webroot directories if allowed", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Create global webroot directories if allowed", "with_flattened": ["{{ nginx__servers }}", "{{ nginx__default_servers }}", "{{ nginx__internal_servers }}", "{{ nginx__dependent_servers }}", "{{ nginx_servers | d([]) }}", "{{ nginx_default_servers | d([]) }}", "{{ nginx_internal_servers | d([]) }}", "{{ nginx_dependent_servers | d([]) }}"], "when": "((item.webroot_create|d(nginx_webroot_create)|bool) and item.state|d('present') != 'absent')"}, "module_options": {"path": "{{ item.root | d( \"{}/sites/{}/{}\".format( nginx_www + (\"/\" + item.owner if item.owner | d() else \"\"), (item.name if item.name is string else item.name[0]) | d(\"default\"), item.public_dir_name | d(nginx_public_dir_name)) ) }}", "state": "directory", "owner": "{{ item.owner | d(nginx_webroot_owner) }}", "group": "{{ item.group | d(item.owner | d(nginx_webroot_group)) }}", "mode": "{{ item.mode | d(nginx_webroot_mode) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create default welcome page if enabled", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Create default welcome page if enabled", "with_flattened": ["{{ nginx__servers }}", "{{ nginx__default_servers }}", "{{ nginx__internal_servers }}", "{{ nginx__dependent_servers }}", "{{ nginx_servers | d([]) }}", "{{ nginx_default_servers | d([]) }}", "{{ nginx_internal_servers | d([]) }}", "{{ nginx_dependent_servers | d([]) }}"], "when": "((item.webroot_create|d(nginx_webroot_create)|bool) and item.state|d('present') != 'absent' and (item.delete is undefined or not item.delete|bool) and (item.welcome|d() | bool))"}, "module_options": {"src": "{{ item.welcome_template | d(nginx_welcome_template) }}", "dest": "{{ item.root + \"/index.html\" if item.root | d() else (\"{}/sites/{}/{}/index.html\".format( nginx_www + (\"/\" + item.owner if item.owner | d() else \"\"), (item.name if item.name is string else item.name[0]) | d(\"default\"), item.public_dir_name | d(nginx_public_dir_name)) ) }}", "owner": "{{ item.owner | d(nginx_webroot_owner) }}", "group": "{{ item.group | d(item.owner | d(nginx_webroot_group)) }}", "mode": "0644", "force": "{{ item.welcome_force|d() | bool }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy 'normalize.css' CSS file for welcome page", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Copy 'normalize.css' CSS file for welcome page", "with_flattened": ["{{ nginx__servers }}", "{{ nginx__default_servers }}", "{{ nginx__internal_servers }}", "{{ nginx__dependent_servers }}", "{{ nginx_servers | d([]) }}", "{{ nginx_default_servers | d([]) }}", "{{ nginx_internal_servers | d([]) }}", "{{ nginx_dependent_servers | d([]) }}"], "when": "((item.webroot_create|d(nginx_webroot_create)|bool) and item.state|d('present') != 'absent' and (item.delete is undefined or not item.delete|bool) and (item.welcome|d() | bool))"}, "module_options": {"src": "srv/www/sites/welcome/public/normalize.css", "dest": "{{ item.root + \"/normalize.css\" if item.root | d() else (\"{}/sites/{}/{}/normalize.css\".format( nginx_www + (\"/\" + item.owner if item.owner | d() else \"\"), (item.name if item.name is string else item.name[0]) | d(\"default\"), item.public_dir_name | d(nginx_public_dir_name)) ) }}", "owner": "{{ item.owner | d(nginx_webroot_owner) }}", "group": "{{ item.group | d(item.owner | d(nginx_webroot_group)) }}", "mode": "0644", "force": "{{ item.welcome_force|d() | bool }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove nginx server configuration if requested", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Remove nginx server configuration if requested", "with_flattened": ["{{ nginx__servers }}", "{{ nginx__default_servers }}", "{{ nginx__internal_servers }}", "{{ nginx__dependent_servers }}", "{{ nginx_servers | d([]) }}", "{{ nginx_default_servers | d([]) }}", "{{ nginx_internal_servers | d([]) }}", "{{ nginx_dependent_servers | d([]) }}"], "when": "(item.name is defined and ((item.state|d(\"present\") == 'absent') or (item.delete|d()|bool)))"}, "module_options": {"path": "/etc/nginx/sites-available/{{ item.filename | d(item.name if item.name is string else item.name[0] | d(\"default\")) }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get last used HTTP default_server for default_server roulette", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Get last used HTTP default_server for default_server roulette", "when": "(ansible_local is defined and ansible_local.nginx is defined and ansible_local.nginx.default_server is defined)"}, "module_options": {"nginx_register_default_server_saved": "{{ ansible_local.nginx.default_server }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get last used HTTPS default_server for default_server roulette", "module": "ansible.builtin.set_fact", "index": 5, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Get last used HTTPS default_server for default_server roulette", "when": "(ansible_local is defined and ansible_local.nginx is defined and ansible_local.nginx.default_server_ssl is defined)"}, "module_options": {"nginx_register_default_server_ssl_saved": "{{ ansible_local.nginx.default_server_ssl }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get HTTP server from nginx defaults for default_server roulette", "module": "ansible.builtin.set_fact", "index": 6, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Get HTTP server from nginx defaults for default_server roulette", "when": "nginx_default_name is defined and nginx_default_name"}, "module_options": {"nginx_register_default_server_name": "{{ nginx_default_name }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get HTTPS server from nginx defaults for default_server roulette", "module": "ansible.builtin.set_fact", "index": 7, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Get HTTPS server from nginx defaults for default_server roulette", "when": "nginx_default_ssl_name is defined and nginx_default_ssl_name"}, "module_options": {"nginx_register_default_server_ssl_name": "{{ nginx_default_ssl_name }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get first server that listens on http port for default_server roulette", "module": "ansible.builtin.set_fact", "index": 8, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Get first server that listens on http port for default_server roulette", "with_flattened": "{{ (nginx__servers + nginx__default_servers + nginx__internal_servers + nginx__dependent_servers + nginx_servers|d([]) + nginx_default_servers|d([]) + nginx_internal_servers|d([]) + nginx_dependent_servers|d([]))[::-1] }}", "when": "(item.state|d('present') != 'absent' and (item.enabled|d(True)|bool) and (item.listen|d(True)) and ((item.ssl is undefined or not item.ssl | bool) or not nginx_pki | bool))"}, "module_options": {"nginx_register_default_server_http": "{{ item.name if item.name is string else item.name[0] | d(\"default\") }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get first server that listens on https port for default_server roulette", "module": "ansible.builtin.set_fact", "index": 9, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Get first server that listens on https port for default_server roulette", "with_flattened": "{{ (nginx__servers + nginx__default_servers + nginx__internal_servers + nginx__dependent_servers + nginx_servers|d([]) + nginx_default_servers|d([]) + nginx_internal_servers|d([]) + nginx_dependent_servers|d([]))[::-1] }}", "when": "(item.state|d('present') != 'absent' and (item.enabled is undefined or item.enabled|bool) and (item.listen_ssl is undefined or item.listen_ssl|d()) and ((item.ssl|d() and item.ssl | bool) or (item.ssl is undefined and nginx_pki | bool)))"}, "module_options": {"nginx_register_default_server_https": "{{ item.name if item.name is string else item.name[0] | d(\"default\") }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Spin the HTTP default_server roulette!", "module": "ansible.builtin.set_fact", "index": 10, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Spin the HTTP default_server roulette!"}, "module_options": {"nginx_register_default_server": "{{ nginx_register_default_server_saved | default(nginx_register_default_server_name | default(nginx_register_default_server_http | default(\"\"))) }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Spin the HTTPS default_server roulette!", "module": "ansible.builtin.set_fact", "index": 11, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Spin the HTTPS default_server roulette!"}, "module_options": {"nginx_register_default_server_ssl": "{{ nginx_register_default_server_ssl_saved | default(nginx_register_default_server_ssl_name | default(nginx_register_default_server_https | default(\"\"))) }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate nginx server configuration", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Generate nginx server configuration", "with_flattened": ["{{ nginx__servers }}", "{{ nginx__default_servers }}", "{{ nginx__internal_servers }}", "{{ nginx__dependent_servers }}", "{{ nginx_servers | d([]) }}", "{{ nginx_default_servers | d([]) }}", "{{ nginx_internal_servers | d([]) }}", "{{ nginx_dependent_servers | d([]) }}"], "notify": ["Test nginx and reload"], "when": "(item.state|d('present') != 'absent' and (item.delete is undefined or not item.delete|bool))"}, "module_options": {"src": "etc/nginx/sites-available/{{ item.type | d(nginx_default_type) }}.conf.j2", "dest": "/etc/nginx/sites-available/{{ item.filename | d(item.name if item.name is string else item.name[0] | d(\"default\")) }}.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable nginx server configuration", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Disable nginx server configuration", "with_flattened": ["{{ nginx__servers }}", "{{ nginx__default_servers }}", "{{ nginx__internal_servers }}", "{{ nginx__dependent_servers }}", "{{ nginx_servers | d([]) }}", "{{ nginx_default_servers | d([]) }}", "{{ nginx_internal_servers | d([]) }}", "{{ nginx_dependent_servers | d([]) }}"], "notify": ["Test nginx and restart"], "when": "(item.name is defined and ((item.state|d(\"present\") == 'absent') or (item.enabled|d() and not item.enabled|bool) or (item.delete|d()|bool)))"}, "module_options": {"path": "/etc/nginx/sites-enabled/{{ item.filename | d(item.name if item.name is string else item.name[0] | d(\"default\")) }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Test if Ansible is running in check mode", "module": "ansible.builtin.command", "index": 14, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Test if Ansible is running in check mode", "changed_when": false, "register": "nginx__register_check_mode"}, "module_options": "/bin/true", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save fact if Ansible is running in check mode in variable", "module": "ansible.builtin.set_fact", "index": 15, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Save fact if Ansible is running in check mode in variable"}, "module_options": {"nginx__fact_check_mode": "{{ nginx__register_check_mode is skipped }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable nginx server configuration", "module": "ansible.builtin.file", "index": 16, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml", "options": {"name": "Enable nginx server configuration", "with_flattened": ["{{ nginx__servers }}", "{{ nginx__default_servers }}", "{{ nginx__internal_servers }}", "{{ nginx__dependent_servers }}", "{{ nginx_servers | d([]) }}", "{{ nginx_default_servers | d([]) }}", "{{ nginx_internal_servers | d([]) }}", "{{ nginx_dependent_servers | d([]) }}"], "notify": ["Test nginx and restart"], "when": "(item.state|d('present') != 'absent' and (item.enabled|d(True)|bool) and (item.delete is undefined or not item.delete|bool) and not nginx__fact_check_mode|bool)"}, "module_options": {"path": "/etc/nginx/sites-enabled/{{ item.filename | d(item.name if item.name is string else item.name[0] | d(\"default\")) }}.conf", "src": "/etc/nginx/sites-available/{{ item.filename | d(item.name if item.name is string else item.name[0] | d(\"default\")) }}.conf", "state": "link", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure configuration directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml", "options": {"name": "Make sure configuration directory exists"}, "module_options": {"path": "/etc/nginx/conf.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove nginx maps if requested", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml", "options": {"name": "Remove nginx maps if requested", "with_flattened": ["{{ nginx__maps }}", "{{ nginx__default_maps }}", "{{ nginx__dependent_maps }}", "{{ nginx_maps |d([]) }}", "{{ nginx_default_maps | d([]) }}", "{{ nginx_dependent_maps | d([]) }}"], "notify": ["Test nginx and reload"], "when": "(item.name|d() and ((item.state|d() and item.state == 'absent') or (item.delete|d() and item.delete|bool)))"}, "module_options": {"dest": "/etc/nginx/conf.d/map_{{ item.name }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure nginx maps", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml", "options": {"name": "Configure nginx maps", "with_flattened": ["{{ nginx__maps }}", "{{ nginx__default_maps }}", "{{ nginx__dependent_maps }}", "{{ nginx_maps |d([]) }}", "{{ nginx_default_maps | d([]) }}", "{{ nginx_dependent_maps | d([]) }}"], "notify": ["Test nginx and reload"], "when": "(item.name|d() and item.state|d('present') != 'absent' and (item.delete is undefined or not item.delete|bool))"}, "module_options": {"src": "etc/nginx/conf.d/map.conf.j2", "dest": "/etc/nginx/conf.d/map_{{ item.name }}.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove nginx upstreams if requested", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml", "options": {"name": "Remove nginx upstreams if requested", "with_flattened": ["{{ nginx__upstreams }}", "{{ nginx__default_upstreams }}", "{{ nginx__dependent_upstreams }}", "{{ nginx_upstreams | d([]) }}", "{{ nginx_default_upstreams | d([]) }}", "{{ nginx_dependent_upstreams | d([]) }}"], "notify": ["Test nginx and reload"], "when": "(item.name|d() and ((item.state|d('present') == 'absent') or (item.delete|d() and item.delete|bool)))"}, "module_options": {"dest": "/etc/nginx/conf.d/upstream_{{ item.name }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure nginx upstreams", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml", "options": {"name": "Configure nginx upstreams", "with_flattened": ["{{ nginx__upstreams }}", "{{ nginx__default_upstreams }}", "{{ nginx__dependent_upstreams }}", "{{ nginx_upstreams | d([]) }}", "{{ nginx_default_upstreams | d([]) }}", "{{ nginx_dependent_upstreams | d([]) }}"], "notify": ["Test nginx and reload"], "when": "(item.name|d() and item.state|d('present') != 'absent' and (item.delete is undefined or not item.delete|bool))"}, "module_options": {"src": "etc/nginx/conf.d/upstream_{{ item.type | d(\"default\") }}.conf.j2", "dest": "/etc/nginx/conf.d/upstream_{{ item.name }}.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove nginx log_format if requested", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml", "options": {"name": "Remove nginx log_format if requested", "with_flattened": ["{{ nginx__log_format }}", "{{ nginx__dependent_log_format }}"], "notify": ["Test nginx and reload"], "when": "(item.name|d() and ((item.state|d('present') == 'absent') or (item.delete|d() and item.delete|bool)))"}, "module_options": {"dest": "/etc/nginx/conf.d/log_{{ item.name }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure nginx log_format", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml", "options": {"name": "Configure nginx log_format", "with_flattened": ["{{ nginx__log_format }}", "{{ nginx__dependent_log_format }}"], "notify": ["Test nginx and reload"], "when": "(item.name|d() and item.state|d('present') != 'absent' and (item.delete is undefined or not item.delete|bool))"}, "module_options": {"src": "etc/nginx/conf.d/log_format.conf.j2", "dest": "/etc/nginx/conf.d/log_{{ item.name }}.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove custom nginx configuration if requested", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml", "options": {"name": "Remove custom nginx configuration if requested", "with_flattened": ["{{ nginx__custom_config }}", "{{ nginx_custom_config | d([]) }}"], "notify": ["Test nginx and reload"], "when": "(item.name|d() and ((item.state|d() and item.state == 'absent') or (item.delete|d() and item.delete|bool)))"}, "module_options": {"dest": "/etc/nginx/conf.d/{{ item.filename | d(\"custom_\" + item.name + \".conf\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add custom nginx configuration", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml", "options": {"name": "Add custom nginx configuration", "with_flattened": ["{{ nginx__custom_config }}", "{{ nginx_custom_config | d([]) }}"], "notify": ["Test nginx and reload"], "when": "(item.name|d() and item.state|d('present') != 'absent' and (item.delete is undefined or not item.delete|bool))"}, "module_options": {"src": "etc/nginx/conf.d/custom.conf.j2", "dest": "/etc/nginx/conf.d/{{ item.filename | d(\"custom_\" + item.name + \".conf\") }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Detect passenger root", "module": "ansible.builtin.command", "index": 0, "defined_in": "testdata/scm_repo/roles/nginx/tasks/passenger_config.yml", "options": {"name": "Detect passenger root", "register": "nginx_register_passenger_root", "changed_when": false}, "module_options": "passenger-config about root", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set passenger_root value", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "testdata/scm_repo/roles/nginx/tasks/passenger_config.yml", "options": {"name": "Set passenger_root value", "when": "nginx_passenger_root is undefined or not nginx_passenger_root"}, "module_options": {"nginx_passenger_root": "{{ nginx_register_passenger_root.stdout }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Detect passenger ruby", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/nginx/tasks/passenger_config.yml", "options": {"name": "Detect passenger ruby", "args": {"executable": "bash"}, "register": "nginx_register_passenger_ruby", "changed_when": false}, "module_options": "set -o nounset -o pipefail -o errexit && passenger-config about ruby-command | grep Command | tail -1 | awk -F: '{print $2}'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set passenger_ruby value", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "testdata/scm_repo/roles/nginx/tasks/passenger_config.yml", "options": {"name": "Set passenger_ruby value", "when": "nginx_passenger_ruby is undefined or not nginx_passenger_ruby"}, "module_options": {"nginx_passenger_ruby": "{{ nginx_register_passenger_ruby.stdout | trim }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create directory for htpasswd files", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_htpasswd.yml", "options": {"name": "Create directory for htpasswd files"}, "module_options": {"path": "{{ nginx_private_path }}", "state": "directory", "owner": "root", "group": "{{ nginx_user }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove htpasswd files if requested", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_htpasswd.yml", "options": {"name": "Remove htpasswd files if requested", "with_flattened": ["{{ nginx__htpasswd }}", "{{ nginx__default_htpasswd }}", "{{ nginx__dependent_htpasswd }}", "{{ nginx_htpasswd | d([]) }}"], "when": "(item.name|d() and (item.state|d() and item.state == 'absent'))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"dest": "{{ nginx_private_path + \"/\" + item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage users in htpasswd files", "module": "htpasswd", "index": 2, "defined_in": "testdata/scm_repo/roles/nginx/tasks/nginx_htpasswd.yml", "options": {"name": "Manage users in htpasswd files", "with_subelements": ["{{ nginx__htpasswd + nginx__default_htpasswd + nginx__dependent_htpasswd + nginx_htpasswd|d([]) }}", "users"], "when": "(item.0.name|d() and item.0.state|d('present') != 'absent' and item.1|d())", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ nginx_private_path + \"/\" + item.0.name }}", "name": "{{ item.1 }}", "crypt_scheme": "{{ nginx__htpasswd_crypt_scheme }}", "password": "{{ item.0.password if item.0.password|d() else lookup(\"password\", nginx_htpasswd_secret_path + \"/\" + item.0.name + \"/\" + item.1 + \" length=\" + nginx__htpasswd_password_length|string + \" chars=\" + nginx__htpasswd_password_characters) }}", "state": "{{ \"present\" if not (item.0.delete | d(False) |bool) else \"absent\" }}", "owner": "root", "group": "{{ nginx_user }}", "mode": "0640"}, "fqcn": "community.general.htpasswd", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps pre_tasks hook", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "DebOps pre_tasks hook", "when": "(nginx__deploy_state in [ 'present' ])"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"nginx/pre_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Assert that no legacy options are used", "module": "ansible.builtin.assert", "index": 4, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Assert that no legacy options are used", "run_once": true, "delegate_to": "localhost", "with_flattened": ["{{ nginx__servers }}", "{{ nginx__default_servers }}", "{{ nginx__internal_servers }}", "{{ nginx__dependent_servers }}", "{{ nginx_servers | d([]) }}", "{{ nginx_default_servers | d([]) }}", "{{ nginx_internal_servers | d([]) }}", "{{ nginx_dependent_servers | d([]) }}"]}, "module_options": {"that": ["((item.csp is defined and item.csp is string) or item.csp is undefined)", "(item.csp_policy is undefined)"]}, "fqcn": "ansible.builtin.assert", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if nginx is installed", "module": "ansible.builtin.stat", "index": 5, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Check if nginx is installed", "register": "nginx_register_installed"}, "module_options": {"path": "/usr/sbin/nginx"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure base packages are installed", "module": "ansible.builtin.package", "index": 6, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Ensure base packages are installed", "when": "(nginx__deploy_state in [ 'present' ])", "register": "nginx__register_packages_present", "until": "nginx__register_packages_present is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", nginx_base_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure Nginx packages are in their desired state", "module": "ansible.builtin.package", "index": 7, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Ensure Nginx packages are in their desired state", "register": "nginx__register_packages_flavor", "until": "nginx__register_packages_flavor is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", nginx__flavor_packages) }}", "state": "{{ \"present\" if (nginx__deploy_state == \"present\") else \"absent\" }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory is present", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory is present", "when": "(nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save nginx local facts", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Save nginx local facts", "notify": ["Refresh host facts"], "when": "(nginx__deploy_state in [ 'present', 'config' ])", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/nginx.fact.j2", "dest": "/etc/ansible/facts.d/nginx.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather facts if they were modified", "module": "ansible.builtin.meta", "index": 10, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Gather facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create default nginx directories", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Create default nginx directories", "with_items": ["/etc/nginx/sites-default.d", "/etc/nginx/sites-available", "/etc/nginx/sites-enabled", "/etc/nginx/snippets"], "when": "(nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert default.conf in case nginx nginx.org flavor is used", "module": "dpkg_divert", "index": 12, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Divert default.conf in case nginx nginx.org flavor is used", "when": "(nginx_flavor == 'nginx.org' and nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": {"path": "/etc/nginx/conf.d/default.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure Passenger support", "module": "ansible.builtin.include_tasks", "index": 13, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Configure Passenger support", "when": "(nginx_flavor == 'passenger' and nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": "passenger_config.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart nginx on first install to bypass missing pid bug", "module": "ansible.builtin.service", "index": 14, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Restart nginx on first install to bypass missing pid bug", "when": "(nginx_register_installed|d() and not nginx_register_installed.stat.exists and nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": {"name": "nginx", "state": "restarted"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of nameservers configured in /etc/resolv.conf", "module": "ansible.builtin.shell", "index": 15, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Get list of nameservers configured in /etc/resolv.conf", "args": {"executable": "sh"}, "register": "nginx_register_nameservers", "changed_when": false, "check_mode": false, "when": "(nginx__deploy_state in [ 'present', 'config' ])", "tags": ["role::nginx:servers"]}, "module_options": "awk '$1==\"nameserver\" {if(/%/){sub(/[0-9a-fA-F:]+/, \"[&]\", $2)}; print $2}' /etc/resolv.conf", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Convert list of nameservers to Ansible list", "module": "ansible.builtin.set_fact", "index": 16, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Convert list of nameservers to Ansible list", "when": "((nginx_register_nameservers.stdout is defined and nginx_register_nameservers.stdout) and (nginx_ocsp_resolvers is undefined or (nginx_ocsp_resolvers is defined and not nginx_ocsp_resolvers)) and (nginx__deploy_state in [ 'present', 'config' ]))", "tags": ["role::nginx:servers"]}, "module_options": {"nginx_ocsp_resolvers": "{{ nginx_register_nameservers.stdout_lines }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that webadmins privileged group exists", "module": "ansible.builtin.group", "index": 17, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Ensure that webadmins privileged group exists", "when": "(nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": {"name": "{{ nginx_privileged_group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create directory for webadmins configuration", "module": "ansible.builtin.file", "index": 18, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Create directory for webadmins configuration", "when": "(nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": {"path": "/etc/nginx/sites-local", "state": "directory", "owner": "root", "group": "{{ nginx_privileged_group }}", "mode": "0775"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow webadmins to control nginx system service using sudo", "module": "ansible.builtin.template", "index": 19, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Allow webadmins to control nginx system service using sudo", "when": "(ansible_local|d() and ansible_local.sudo|d() and (ansible_local.sudo.installed|d())|bool and nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": {"src": "etc/sudoers.d/nginx_webadmins.j2", "dest": "/etc/sudoers.d/nginx_webadmins", "owner": "root", "group": "root", "mode": "0440"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original /etc/nginx/nginx.conf", "module": "dpkg_divert", "index": 20, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Divert original /etc/nginx/nginx.conf", "when": "(nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": {"path": "/etc/nginx/nginx.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Setup /etc/nginx/nginx.conf", "module": "ansible.builtin.template", "index": 21, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Setup /etc/nginx/nginx.conf", "notify": ["Test nginx and reload"], "when": "(nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": {"src": "etc/nginx/nginx.conf.j2", "dest": "/etc/nginx/nginx.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate custom nginx snippets", "module": "ansible.builtin.template", "index": 22, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Generate custom nginx snippets", "with_items": ["acme-challenge", "ssl"], "when": "(nginx__deploy_state in [ 'present', 'config' ])", "notify": ["Test nginx and reload"]}, "module_options": {"src": "etc/nginx/snippets/{{ item }}.conf.j2", "dest": "/etc/nginx/snippets/{{ item }}.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable default nginx site", "module": "ansible.builtin.file", "index": 23, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Disable default nginx site", "notify": ["Test nginx and reload"], "when": "(nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": {"path": "/etc/nginx/sites-enabled/default", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage local server definitions - create symlinks", "module": "ansible.builtin.file", "index": 24, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Manage local server definitions - create symlinks", "when": "(item.value and nginx__deploy_state in [ 'present', 'config' ])", "with_dict": "{{ nginx_local_servers|d({}) }}", "notify": ["Test nginx and reload"]}, "module_options": {"src": "/etc/nginx/sites-local/{{ item.value }}", "path": "/etc/nginx/sites-enabled/{{ item.key }}", "state": "link", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage local server definitions - remove symlinks", "module": "ansible.builtin.file", "index": 25, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Manage local server definitions - remove symlinks", "when": "((not item.value|d()) and nginx__deploy_state in [ 'present', 'config' ])", "with_dict": "{{ nginx_local_servers|d({}) }}", "notify": ["Test nginx and reload"]}, "module_options": {"path": "/etc/nginx/sites-enabled/{{ item.key }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove all configuration symlinks during config reset", "module": "ansible.builtin.shell", "index": 26, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Remove all configuration symlinks during config reset", "args": {"executable": "sh", "creates": "/etc/ansible/facts.d/nginx.fact", "warn": false}, "when": "(nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": "rm -f /etc/nginx/sites-enabled/*", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure htpasswd files", "module": "ansible.builtin.include_tasks", "index": 27, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Configure htpasswd files", "when": "(nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": "nginx_htpasswd.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate nginx conf.d/ files", "module": "ansible.builtin.include_tasks", "index": 28, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Generate nginx conf.d/ files", "tags": ["role::nginx:servers"], "when": "(nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": "nginx_configs.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate nginx server configuration", "module": "ansible.builtin.include_tasks", "index": 29, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Generate nginx server configuration", "tags": ["role::nginx:servers"], "when": "(nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": "nginx_servers.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that PKI hook directory exists", "module": "ansible.builtin.file", "index": 30, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Make sure that PKI hook directory exists", "when": "(nginx_pki|bool and nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": {"path": "{{ nginx_pki_hook_path }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage PKI nginx hook", "module": "ansible.builtin.template", "index": 31, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Manage PKI nginx hook", "when": "(nginx_pki|bool and nginx__deploy_state in [ 'present', 'config' ])"}, "module_options": {"src": "etc/pki/hooks/nginx.j2", "dest": "{{ nginx_pki_hook_path + \"/\" + nginx_pki_hook_name }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the PKI nginx hook is absent", "module": "ansible.builtin.file", "index": 32, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Ensure the PKI nginx hook is absent", "when": "(nginx__deploy_state in [ 'absent' ])"}, "module_options": {"path": "{{ nginx_pki_hook_path + \"/\" + nginx_pki_hook_name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save nginx local facts", "module": "ansible.builtin.template", "index": 33, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Save nginx local facts", "notify": ["Refresh host facts"]}, "module_options": {"src": "etc/ansible/facts.d/nginx.fact.j2", "dest": "/etc/ansible/facts.d/nginx.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather facts if they were modified", "module": "ansible.builtin.meta", "index": 34, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "Gather facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps post_tasks hook", "module": "ansible.builtin.include_tasks", "index": 35, "defined_in": "testdata/scm_repo/roles/nginx/tasks/main.yml", "options": {"name": "DebOps post_tasks hook", "when": "(nginx__deploy_state in [ 'present' ])"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"nginx/post_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/nginx"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/service/minio.yml"]}, {"py/object": "struct4.Role", "name": "keyring", "defined_in": "testdata/scm_repo/roles/keyring", "task_yamls": ["testdata/scm_repo/roles/keyring/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of local GPG key fingerprints on Ansible Controller", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Get list of local GPG key fingerprints on Ansible Controller"}, "module_options": {"keyring__fact_local_keys": "{{ (q(\"fileglob\", (keyring__local_path + \"/*.asc\")) | map(\"basename\") | map(\"replace\",\" \",\"\") | map(\"regex_replace\",\"^0x(.*)\\.asc\",\"\\1\") | list) if keyring__local_path|d() else [] }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Install required packages", "when": "keyring__enabled|bool and ansible_pkg_mgr == 'apt'"}, "module_options": {"name": "{{ q(\"flattened\", (keyring__base_packages + keyring__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local fact directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Make sure that Ansible local fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save keyring local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Save keyring local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/keyring.fact.j2", "dest": "/etc/ansible/facts.d/keyring.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import specified GPG keys to APT keyring", "module": "ansible.builtin.apt_key", "index": 7, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Import specified GPG keys to APT keyring", "loop": "{{ q(\"flattened\", (keyring__dependent_apt_keys)) }}", "register": "keyring__register_apt_key", "until": "keyring__register_apt_key is succeeded", "when": "keyring__enabled|bool and ansible_pkg_mgr == 'apt' and (item.id|d() or item is string) and (item.extrepo is undefined or item.extrepo not in (ansible_local.extrepo.sources|d([])))", "tags": ["role::keyring:apt_key"]}, "module_options": {"id": "{{ (item.id | d(item)) | replace(\" \",\"\") }}", "data": "{{ item.data | d((lookup(\"file\", keyring__local_path + \"/0x\" + ((item.id | d(item)) | replace(\" \",\"\")) + \".asc\")) if (item.state | d(\"present\") != \"absent\" and item.url is undefined and item.keybase is undefined and ((item.id | d(item)) | replace(\" \",\"\")) in keyring__fact_local_keys) else omit) }}", "keyserver": "{{ item.keyserver | d(keyring__keyserver if (keyring__keyserver|d() and item.url is undefined and item.keybase is undefined and ((item.id | d(item)) | replace(\" \",\"\")) not in keyring__fact_local_keys) else omit) }}", "url": "{{ item.url | d((keyring__keybase_api + item.keybase + \"/pgp_keys.asc?fingerprint=\" + ((item.id | d(item)) | replace(\" \",\"\"))) if item.keybase|d() else omit) }}", "state": "{{ item.state | d(\"present\") }}"}, "fqcn": "ansible.builtin.apt_key", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure specified upstream APT repositories", "module": "ansible.builtin.apt_repository", "index": 8, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Configure specified upstream APT repositories", "loop": "{{ q(\"flattened\", (keyring__dependent_apt_keys)) }}", "register": "keyring__register_apt_repository", "when": "keyring__enabled|bool and ansible_pkg_mgr == 'apt' and item.repo|d() and (item.extrepo is undefined or item.extrepo not in (ansible_local.extrepo.sources|d([])))", "tags": ["role::keyring:apt_repository"]}, "module_options": {"repo": "{{ item.repo }}", "filename": "{{ item.filename | d(omit) }}", "state": "{{ item.state | d(\"present\") }}", "update_cache": false}, "fqcn": "ansible.builtin.apt_repository", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove APT auth configuration if requested", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Remove APT auth configuration if requested", "loop": "{{ q(\"flattened\", (keyring__dependent_apt_auth_files)) }}", "when": "keyring__enabled|bool and ansible_pkg_mgr == 'apt' and item.state|d('present') == 'absent'", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ \"/etc/apt/auth.conf.d/\" + (item.name | regex_replace(\".conf$\",\"\")) + \".conf\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate APT auth configuration", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Generate APT auth configuration", "loop": "{{ q(\"flattened\", (keyring__dependent_apt_auth_files)) }}", "when": "keyring__enabled|bool and ansible_pkg_mgr == 'apt' and item.machine|d() and item.login|d() and item.password|d() and item.state|d('present') not in [ 'absent', 'ignore' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/apt/auth.conf.d/template.conf.j2", "dest": "{{ \"/etc/apt/auth.conf.d/\" + (item.name | regex_replace(\".conf$\",\"\")) + \".conf\" }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update APT cache when needed", "module": "ansible.builtin.apt", "index": 11, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Update APT cache when needed", "when": "keyring__enabled|bool and ansible_pkg_mgr == 'apt' and keyring__register_apt_repository is changed", "tags": ["role::keyring:apt_repository"]}, "module_options": {"update_cache": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that required UNIX groups exist", "module": "ansible.builtin.group", "index": 12, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Ensure that required UNIX groups exist", "loop": "{{ q(\"flattened\", (keyring__dependent_gpg_keys)) }}", "when": "keyring__enabled|bool and (item.create_user|d(True))|bool and item.user|d() and item.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"name": "{{ item.group | d(item.user) }}", "state": "present", "system": "{{ item.system | d(True) }}"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that required UNIX accounts exist", "module": "ansible.builtin.user", "index": 13, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Ensure that required UNIX accounts exist", "loop": "{{ q(\"flattened\", (keyring__dependent_gpg_keys)) }}", "when": "keyring__enabled|bool and (item.create_user|d(True))|bool and item.user|d() and item.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"name": "{{ item.user }}", "group": "{{ item.group | d(item.user) }}", "home": "{{ item.home | d(omit) }}", "system": "{{ item.system | d(True) }}", "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather information about existing UNIX accounts", "module": "ansible.builtin.getent", "index": 14, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Gather information about existing UNIX accounts", "check_mode": false}, "module_options": {"database": "passwd"}, "fqcn": "ansible.builtin.getent", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import specified GPG keys to account keyring", "module": "vars", "index": 15, "defined_in": "testdata/scm_repo/roles/keyring/tasks/main.yml", "options": {"name": "Import specified GPG keys to account keyring", "ansible.builtin.shell": "set -o nounset -o pipefail -o errexit && {{ gpg_command }} --list-keys '{{ (item.id | d(item)) | replace(\" \",\"\") }}' {% if item.state | d('present') == 'absent' %} && ( printf \"Removing key...\\n\" && {{ gpg_command }} --delete-key {{ (item.id | d(item)) | replace(\" \",\"\") }} ) || true {% else %} {%   if ((item.id | d(item)) | replace(\" \",\"\")) not in keyring__fact_local_keys %} {%     if item.url|d() %} || ( printf \"Adding key...\\n\" && curl {{ item.url }} | {{ gpg_command }} --import - ) {%     elif item.keybase|d() %} || ( printf \"Adding key...\\n\" && curl {{ keyring__keybase_api + item.keybase + '/pgp_keys.asc?fingerprint=' + ((item.id | d(item)) | replace(\" \",\"\")) }} | {{ gpg_command }} --import - ) {%     elif (item.keyserver | d(keyring__keyserver if keyring__keyserver|d() else False)) %} || ( printf \"Adding key...\\n\" && gpg --keyserver {{ item.keyserver | d(keyring__keyserver if keyring__keyserver else \"\") }} \\ --batch --recv-key {{ (item.id | d(item)) | replace(\" \",\"\") }} && gpgconf --kill all ) {%     endif %} {%   else %} || ( printf \"Adding key...\\n\" && {{ gpg_command }} --import - ) {%   endif %} {% endif %}", "args": {"executable": "bash", "stdin": "{{ item.data | d((lookup(\"file\", keyring__local_path + \"/0x\" + ((item.id | d(item)) | replace(\" \",\"\")) + \".asc\")) if (item.state | d(\"present\") != \"absent\" and ((item.id | d(item)) | replace(\" \",\"\")) in keyring__fact_local_keys) else omit) }}"}, "become": true, "become_user": "{{ item.user | d(keyring__dependent_gpg_user if keyring__dependent_gpg_user|d() else \"root\") }}", "loop": "{{ q(\"flattened\", (keyring__dependent_gpg_keys)) }}", "register": "keyring__register_gpg_key", "until": "keyring__register_gpg_key.rc|d(0) == 0", "when": "(keyring__enabled|bool and (item.id|d() or item is string) and (item.user | d(keyring__dependent_gpg_user if keyring__dependent_gpg_user|d() else \"root\")) in getent_passwd.keys())", "changed_when": "(\"Adding key...\" in keyring__register_gpg_key.stdout_lines) or (\"Removing key...\" in keyring__register_gpg_key.stdout_lines)"}, "module_options": {"gpg_command": "{{ \"gpg --batch\" if (keyring__gpg_version is version(\"2.0.0\", \"<\")) else \"gpg --no-autostart --batch\" }}"}, "fqcn": "ansible.builtin.vars", "used_in": ["testdata/scm_repo/roles/keyring"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml", "testdata/scm_repo/playbooks/service/ansible.yml", "testdata/scm_repo/playbooks/service/minio.yml", "testdata/scm_repo/playbooks/service/nodejs.yml"]}, {"py/object": "struct4.Role", "name": "dhcp_probe", "defined_in": "testdata/scm_repo/roles/dhcp_probe", "task_yamls": ["testdata/scm_repo/roles/dhcp_probe/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Install required packages", "register": "dhcp_probe__register_packages", "until": "dhcp_probe__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (dhcp_probe__base_packages + dhcp_probe__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that sysvinit dhcp-probe service is stopped on install", "module": "ansible.builtin.systemd", "index": 3, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Ensure that sysvinit dhcp-probe service is stopped on install", "when": "((ansible_local is undefined or ansible_local.dhcp_probe is undefined) and ansible_service_mgr == 'systemd')"}, "module_options": {"name": "dhcp-probe.service", "state": "stopped"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom systemd unit files", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Install custom systemd unit files", "loop": ["dhcp-probe@.service", "dhcp-probe.service"], "notify": ["Reload service manager"], "when": "ansible_service_mgr == 'systemd'"}, "module_options": {"src": "etc/systemd/system/{{ item }}.j2", "dest": "/etc/systemd/system/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd configuration when needed", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Reload systemd configuration when needed"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable DHCP Probe instances if requested", "module": "ansible.builtin.systemd", "index": 6, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Disable DHCP Probe instances if requested", "loop": "{{ dhcp_probe__combined_interfaces | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"name": "dhcp-probe@{{ item.name }}.service", "state": "stopped", "enabled": false}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable DHCP Probe instances if requested", "module": "ansible.builtin.systemd", "index": 7, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Enable DHCP Probe instances if requested", "loop": "{{ dhcp_probe__combined_interfaces | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state} }}"}, "when": "ansible_service_mgr == 'systemd' and item.name|d() and item.state|d('present') != 'absent'", "notify": ["Restart dhcp-probe"]}, "module_options": {"name": "dhcp-probe@{{ item.name }}.service", "enabled": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that required directories exist", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Ensure that required directories exist", "loop": ["{{ dhcp_probe__cache }}", "{{ dhcp_probe__lib }}"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom notification scripts", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Install custom notification scripts", "loop": ["dhcp_probe_notify2", "mail-throttled"]}, "module_options": {"src": "usr/local/lib/dhcp-probe/{{ item }}.j2", "dest": "{{ dhcp_probe__lib + \"/\" + item }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate dhcp_probe.cf configuration file", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Generate dhcp_probe.cf configuration file", "notify": ["Restart dhcp-probe"]}, "module_options": {"src": "etc/dhcp_probe.cf.j2", "dest": "/etc/dhcp_probe.cf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup DHCP Probe local facts", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Setup DHCP Probe local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/dhcp_probe.fact.j2", "dest": "/etc/ansible/facts.d/dhcp_probe.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 13, "defined_in": "testdata/scm_repo/roles/dhcp_probe/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/dhcp_probe"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "apt", "defined_in": "testdata/scm_repo/roles/apt", "task_yamls": ["testdata/scm_repo/roles/apt/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update APT cache on first run", "module": "ansible.builtin.apt", "index": 3, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Update APT cache on first run", "register": "apt__register_apt_first_update", "until": "apt__register_apt_first_update is succeeded", "when": "(apt__enabled|bool and not (ansible_local.apt.configured|d())|bool)"}, "module_options": {"update_cache": true, "cache_valid_time": "{{ apt__cache_valid_time }}"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.apt", "index": 4, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Install required packages", "register": "apt__register_packages", "until": "apt__register_packages is succeeded", "when": "apt__enabled|bool"}, "module_options": {"name": "{{ (apt__base_packages + apt__packages) | flatten }}", "state": "present", "install_recommends": false}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists", "tags": ["meta::facts"]}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save APT local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Save APT local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/apt.fact.j2", "dest": "/etc/ansible/facts.d/apt.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that APT default configuration is absent", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Ensure that APT default configuration is absent", "when": "(apt__enabled|bool and apt__remove_default_configuration|bool)"}, "module_options": {"path": "/etc/apt/apt.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate APT configuration files", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Generate APT configuration files", "with_items": ["etc/apt/apt.conf.d/25no-recommends.conf"], "when": "apt__enabled|bool"}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable extra architectures", "module": "ansible.builtin.command", "index": 10, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Enable extra architectures", "with_flattened": ["{{ apt__extra_architectures }}", "{{ apt__group_extra_architectures }}", "{{ apt__host_extra_architectures }}"], "when": "item not in ansible_facts.ansible_local.apt.foreign_architectures|d()", "notify": ["Refresh host facts"]}, "module_options": "dpkg --add-architecture {{ item }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of /etc/apt/sources.list", "module": "dpkg_divert", "index": 11, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Add/remove diversion of /etc/apt/sources.list", "register": "apt__register_sources_diversion", "when": "(apt__enabled|bool and apt__sources_deploy_state in [ 'absent', 'present' ])"}, "module_options": {"path": "/etc/apt/sources.list", "state": "{{ apt__sources_deploy_state }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure APT distribution sources", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Configure APT distribution sources", "register": "apt__register_sources_template", "when": "(apt__enabled|bool and apt__sources_deploy_state == 'present')"}, "module_options": {"src": "etc/apt/sources.list.j2", "dest": "/etc/apt/sources.list", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure custom APT keys", "module": "ansible.builtin.apt_key", "index": 13, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Configure custom APT keys", "with_flattened": ["{{ apt__keys }}", "{{ apt__group_keys }}", "{{ apt__host_keys }}"], "register": "apt__register_apt_key", "until": "apt__register_apt_key is succeeded", "when": "(apt__enabled|bool and (item.url|d() or item.data|d() or item.id|d() or item.file|d()) and (item.state|d(\"present\") == 'present' and (item.architecture|d(apt__architecture) == apt__architecture and item.distribution|d(apt__distribution) == apt__distribution and item.distribution_release|d(apt__distribution_release) == apt__distribution_release)))", "tags": ["role::apt:keys"]}, "module_options": {"data": "{{ item.data      | d(omit) }}", "file": "{{ item.file      | d(omit) }}", "id": "{{ item.id        | d(omit) }}", "keyring": "{{ item.keyring   | d(omit) }}", "keyserver": "{{ item.keyserver | d(omit) }}", "url": "{{ item.url       | d(omit) }}", "state": "{{ item.state     | d(\"present\" if (item.architecture|d(apt__architecture) == apt__architecture and item.distribution|d(apt__distribution) == apt__distribution and item.distribution_release|d(apt__distribution_release) == apt__distribution_release) else omit) }}"}, "fqcn": "ansible.builtin.apt_key", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure custom APT repositories", "module": "ansible.builtin.apt_repository", "index": 14, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Configure custom APT repositories", "with_flattened": ["{{ apt__repositories }}", "{{ apt__group_repositories }}", "{{ apt__host_repositories }}"], "register": "apt__register_repositories", "when": "(apt__enabled|bool and item.repo|d())"}, "module_options": {"update_cache": false, "repo": "{{ item.repo }}", "mode": "{{ item.mode     | d(omit) }}", "filename": "{{ item.filename | d(omit) }}", "state": "{{ item.state    | d(\"present\" if (item.architecture|d(apt__architecture) == apt__architecture and item.distribution|d(apt__distribution) == apt__distribution and item.distribution_release|d(apt__distribution_release) == apt__distribution_release) else \"absent\") }}"}, "fqcn": "ansible.builtin.apt_repository", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove APT auth configuration if requested", "module": "ansible.builtin.file", "index": 15, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Remove APT auth configuration if requested", "loop": "{{ q(\"flattened\", (apt__auth_files + apt__group_auth_files + apt__host_auth_files)) }}", "when": "apt__enabled|bool and item.state|d('present') == 'absent'", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ \"/etc/apt/auth.conf.d/\" + (item.name | regex_replace(\".conf$\",\"\")) + \".conf\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate APT auth configuration", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Generate APT auth configuration", "loop": "{{ q(\"flattened\", (apt__auth_files + apt__group_auth_files + apt__host_auth_files)) }}", "when": "apt__enabled|bool and item.machine|d() and item.login|d() and item.password|d() and item.state|d('present') not in [ 'absent', 'ignore' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "etc/apt/auth.conf.d/template.conf.j2", "dest": "{{ \"/etc/apt/auth.conf.d/\" + (item.name | regex_replace(\".conf$\",\"\")) + \".conf\" }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate additional APT configuration files", "module": "ansible.builtin.copy", "index": 17, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Generate additional APT configuration files", "with_flattened": ["{{ apt__conf }}", "{{ apt__group_conf }}", "{{ apt__host_conf }}"], "when": "(apt__enabled|bool  and (item.src|d() or item.content|d()) and (item.dest|d() or item.path|d() or item.name|d()) and (item.state|d('present') != 'absent'))"}, "module_options": {"dest": "/etc/apt/apt.conf.d/{{ (item.priority | d('60')) + (item.dest | d(item.path | d(item.name))) }}", "src": "{{ item.src       | d(omit) }}", "content": "{{ item.content   | d(omit) }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Delete APT configuration files on remote hosts", "module": "ansible.builtin.file", "index": 18, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Delete APT configuration files on remote hosts", "with_flattened": ["{{ apt__conf }}", "{{ apt__group_conf }}", "{{ apt__host_conf }}"], "when": "(apt__enabled|bool  and (item.dest|d() or item.path|d() or item.name|d()) and (item.state|d('present') == 'absent'))"}, "module_options": {"path": "/etc/apt/apt.conf.d/{{ (item.priority | d('60')) + (item.dest | d(item.path | d(item.name))) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update APT cache", "module": "ansible.builtin.apt", "index": 19, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Update APT cache", "register": "apt__register_apt_update", "until": "apt__register_apt_update is succeeded", "when": "apt__enabled|bool"}, "module_options": {"update_cache": true, "cache_valid_time": "{{ omit if (apt__register_sources_template is changed or apt__register_sources_diversion is changed or apt__register_repositories is changed) else apt__cache_valid_time }}"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Purge APT packages if requested", "module": "ansible.builtin.apt", "index": 20, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Purge APT packages if requested", "register": "apt__register_purge_packages", "until": "apt__register_purge_packages is succeeded", "when": "apt__enabled|bool"}, "module_options": {"name": "{{ (apt__purge_packages + apt__purge_group_packages + apt__purge_host_packages) | flatten }}", "state": "absent", "purge": true, "autoremove": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update the role status in local facts", "module": "ansible.builtin.lineinfile", "index": 21, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Update the role status in local facts", "notify": ["Refresh host facts"], "when": "(apt__enabled|bool and ansible_local|d() and ansible_local.apt|d() and not ansible_local.apt.configured|bool)"}, "module_options": {"dest": "/etc/ansible/facts.d/apt.fact", "regexp": "^\\s+\"configured\":\\s+", "line": "    \"configured\": true,", "state": "present", "mode": "0755"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 22, "defined_in": "testdata/scm_repo/roles/apt/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/apt"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/bootstrap.yml", "testdata/scm_repo/playbooks/common.yml", "testdata/scm_repo/playbooks/service/apt.yml"]}, {"py/object": "struct4.Role", "name": "stunnel", "defined_in": "testdata/scm_repo/roles/stunnel", "task_yamls": ["testdata/scm_repo/roles/stunnel/tasks/main.yml", "testdata/scm_repo/roles/stunnel/tasks/stunnel/pre_main.yml", "testdata/scm_repo/roles/stunnel/tasks/stunnel/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/stunnel/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/stunnel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/stunnel/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/stunnel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Pre hooks", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "testdata/scm_repo/roles/stunnel/tasks/main.yml", "options": {"name": "Pre hooks"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"stunnel/pre_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/stunnel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/stunnel/tasks/main.yml", "options": {"name": "Install required packages", "register": "stunnel__register_packages", "until": "stunnel__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", ([ \"stunnel4\", \"openssl\", \"ssl-cert\" ])) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/stunnel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure default variables", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/stunnel/tasks/main.yml", "options": {"name": "Configure default variables", "notify": ["Restart stunnel"]}, "module_options": {"src": "etc/default/stunnel4.j2", "dest": "/etc/default/stunnel4", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/stunnel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add stunnel user to ssl-cert system group", "module": "ansible.builtin.user", "index": 5, "defined_in": "testdata/scm_repo/roles/stunnel/tasks/main.yml", "options": {"name": "Add stunnel user to ssl-cert system group"}, "module_options": {"name": "stunnel4", "state": "present", "createhome": false, "groups": "ssl-cert", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/stunnel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove SSL tunnels if requested", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/stunnel/tasks/main.yml", "options": {"name": "Remove SSL tunnels if requested", "with_items": "{{ stunnel_services }}", "when": "((item.name is defined and item.name) and (item.delete is defined and item.delete | bool))", "notify": ["Restart stunnel"]}, "module_options": {"path": "/etc/stunnel/{{ item.filename | default(item.name) }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/stunnel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure SSL tunnels", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/stunnel/tasks/main.yml", "options": {"name": "Configure SSL tunnels", "with_items": "{{ stunnel_services }}", "when": "((item.name is defined and item.name) and (item.delete is undefined or not item.delete | bool))", "notify": ["Restart stunnel"]}, "module_options": {"src": "etc/stunnel/service.conf.j2", "dest": "/etc/stunnel/{{ item.filename | default(item.name) }}.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/stunnel"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Post hooks", "module": "ansible.builtin.include_tasks", "index": 8, "defined_in": "testdata/scm_repo/roles/stunnel/tasks/main.yml", "options": {"name": "Post hooks"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"stunnel/post_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/stunnel"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "machine", "defined_in": "testdata/scm_repo/roles/machine", "task_yamls": ["testdata/scm_repo/roles/machine/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install requested packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Install requested packages", "register": "machine__register_packages", "until": "machine__register_packages is succeeded", "when": "machine__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", machine__packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate machine-info config file", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Generate machine-info config file", "when": "machine__enabled|bool"}, "module_options": {"src": "etc/machine-info.j2", "dest": "/etc/machine-info", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of /etc/issue", "module": "dpkg_divert", "index": 4, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Add/remove diversion of /etc/issue", "when": "machine__enabled|bool"}, "module_options": {"path": "/etc/issue", "state": "{{ \"present\" if machine__etc_issue_state|d(\"present\") != \"absent\" else \"absent\" }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure /etc/issue file", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Configure /etc/issue file", "when": "machine__enabled|bool and machine__etc_issue_state|d('present') != 'absent'"}, "module_options": {"src": "{{ machine__etc_issue_template }}", "dest": "/etc/issue", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove static /etc/motd file if requested", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Remove static /etc/motd file if requested", "when": "machine__enabled|bool and machine__etc_motd_state == 'absent'"}, "module_options": {"path": "/etc/motd", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate static /etc/motd file", "module": "ansible.builtin.copy", "index": 7, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Generate static /etc/motd file", "when": "machine__enabled|bool and machine__etc_motd_state|d('present') != 'absent' and machine__motd|d()"}, "module_options": {"content": "{{ machine__motd }}", "dest": "/etc/motd", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that required directories exist", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Ensure that required directories exist", "when": "machine__enabled|bool"}, "module_options": {"path": "{{ machine__motd_update_dir }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create /run/motd.dynamic symlink", "module": "ansible.builtin.meta", "index": 9, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Create /run/motd.dynamic symlink"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of packaged MOTD scripts", "module": "vars", "index": 10, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Add/remove diversion of packaged MOTD scripts", "dpkg_divert": {"path": "{{ divert_path }}", "divert": "{{ divert_path + \".disabled\" }}", "state": "{{ \"present\" if (machine__enabled|bool and item.state|d(\"present\") not in [ \"absent\", \"revert\" ]) else \"absent\" }}", "delete": true}, "loop": "{{ machine__motd_combined_scripts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ item.filename|d(item.name) }}"}, "when": "item.filename|d(item.name) and item.divert|d(False)|bool"}, "module_options": {"divert_path": "{{ \"/etc/update-motd.d/\" + item.filename | d((\"%02d\" | format(item.weight|int))|string + \"-\" + item.name) }}"}, "fqcn": "ansible.builtin.vars", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove dynamic MOTD scripts", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Remove dynamic MOTD scripts", "with_flattened": "{{ machine__motd_combined_scripts | debops.debops.parse_kv_items }}", "register": "machine__register_motd_scripts_removed", "when": "(machine__enabled|bool and item.filename|d(item.name) and item.state|d('present') == 'absent' and not item.divert|d(False)|bool)"}, "module_options": {"path": "{{ machine__motd_update_dir + \"/\" + (item.filename | d((\"%02d\" | format(item.weight|int))|string + \"-\" + item.name)) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install dynamic MOTD scripts", "module": "ansible.builtin.copy", "index": 12, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Install dynamic MOTD scripts", "loop": "{{ machine__motd_combined_scripts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ item.filename|d() or item.name }}"}, "register": "machine__register_motd_scripts_created", "when": "(machine__enabled|bool and item.filename|d(item.name) and item.src|d(item.content) and item.state|d('present') not in [ 'init', 'absent', 'ignore', 'divert', 'revert' ])"}, "module_options": {"src": "{{ item.src | d(omit) }}", "content": "{{ item.content | d(omit) }}", "dest": "{{ machine__motd_update_dir + \"/\" + (item.filename | d((\"%02d\" | format(item.weight|int))|string + \"-\" + item.name)) }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove unknown MOTD scripts", "module": "ansible.builtin.shell", "index": 13, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Remove unknown MOTD scripts", "loop": "{{ machine__register_motd_scripts_removed.results + machine__register_motd_scripts_created.results }}", "loop_control": {"label": "{{ item.item.name }}"}, "when": "(item.item.name|d() and not item.item.divert|d(False)|bool and item.item.filename is undefined and item is changed)"}, "module_options": "find /etc/update-motd.d -maxdepth 1 -type f -name '*-{{ item.item.name }}' ! -name '{{ (\"%02d\" | format((item.item.weight | d(\"0\"))|int))|string + \"-\" + item.item.name }}' -exec rm -vf {} +", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 14, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save machine local facts", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Save machine local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/machine.fact.j2", "dest": "/etc/ansible/facts.d/machine.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 16, "defined_in": "testdata/scm_repo/roles/machine/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/machine"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "pam_access", "defined_in": "testdata/scm_repo/roles/pam_access", "task_yamls": ["testdata/scm_repo/roles/pam_access/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/pam_access/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/pam_access"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/pam_access/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/pam_access"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of PAM access control files", "module": "vars", "index": 2, "defined_in": "testdata/scm_repo/roles/pam_access/tasks/main.yml", "options": {"name": "Add/remove diversion of PAM access control files", "dpkg_divert": {"path": "{{ access_conf }}", "state": "{{ item.state|d(\"present\") }}", "delete": true}, "loop": "{{ pam_access__combined_rules | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"access_conf\": access_conf, \"state\": item.state|d(\"present\")} }}"}, "when": "(pam_access__enabled|bool and item.name|d() and item.divert|d(False)|bool and item.state|d('present') in [ 'present', 'absent' ])"}, "module_options": {"access_conf": "{{ \"/etc/security/\" + item.filename | d(\"access-\" + (item.name | regex_replace(\"\\.conf$\",\"\")) + \".conf\") }}"}, "fqcn": "ansible.builtin.vars", "used_in": ["testdata/scm_repo/roles/pam_access"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate PAM access control files", "module": "vars", "index": 3, "defined_in": "testdata/scm_repo/roles/pam_access/tasks/main.yml", "options": {"name": "Generate PAM access control files", "ansible.builtin.template": {"src": "etc/security/access.conf.j2", "dest": "/etc/security/{{ item.filename | d(\"access-\" + (item.name | regex_replace(\"\\.conf$\",\"\")) + \".conf\") }}", "mode": "0644"}, "loop": "{{ pam_access__combined_rules | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"access_conf\": access_conf, \"state\": item.state|d(\"present\")} }}"}, "when": "pam_access__enabled|bool and item.name|d() and item.options|d() and item.state|d('present') not in [ 'absent', 'init', 'ignore' ]"}, "module_options": {"access_conf": "{{ \"/etc/security/\" + item.filename | d(\"access-\" + (item.name | regex_replace(\"\\.conf$\",\"\")) + \".conf\") }}"}, "fqcn": "ansible.builtin.vars", "used_in": ["testdata/scm_repo/roles/pam_access"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove PAM access control files", "module": "vars", "index": 4, "defined_in": "testdata/scm_repo/roles/pam_access/tasks/main.yml", "options": {"name": "Remove PAM access control files", "ansible.builtin.file": {"path": "/etc/security/{{ item.filename | d(\"access-\" + (item.name | regex_replace(\"\\.conf$\",\"\")) + \".conf\") }}", "state": "absent"}, "loop": "{{ pam_access__combined_rules | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"access_conf\": access_conf, \"state\": item.state|d(\"present\")} }}"}, "when": "pam_access__enabled|bool and item.name|d() and not item.divert|d(False)|bool and item.state|d('present') == 'absent'"}, "module_options": {"access_conf": "{{ \"/etc/security/\" + item.filename | d(\"access-\" + (item.name | regex_replace(\"\\.conf$\",\"\")) + \".conf\") }}"}, "fqcn": "ansible.builtin.vars", "used_in": ["testdata/scm_repo/roles/pam_access"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/pam_access/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/pam_access"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save pam_access local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/pam_access/tasks/main.yml", "options": {"name": "Save pam_access local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/pam_access.fact.j2", "dest": "/etc/ansible/facts.d/pam_access.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/pam_access"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/pam_access/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/pam_access"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "sks", "defined_in": "testdata/scm_repo/roles/sks", "task_yamls": ["testdata/scm_repo/roles/sks/tasks/sks_frontend.yml", "testdata/scm_repo/roles/sks/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Ensure that webpage directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/sks/tasks/sks_frontend.yml", "options": {"name": "Ensure that webpage directory exists"}, "module_options": {"path": "/srv/www/sites/{{ sks_domain[0] }}/public", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sks"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if index.html page exists", "module": "ansible.builtin.stat", "index": 1, "defined_in": "testdata/scm_repo/roles/sks/tasks/sks_frontend.yml", "options": {"name": "Check if index.html page exists", "register": "sks_register_index_html"}, "module_options": {"path": "/srv/www/sites/{{ sks_domain[0] }}/public/index.html"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/sks"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure SKS Keyserver webpage if not present", "module": "ansible.builtin.copy", "index": 2, "defined_in": "testdata/scm_repo/roles/sks/tasks/sks_frontend.yml", "options": {"name": "Configure SKS Keyserver webpage if not present", "with_items": ["index.html", "robots.txt"], "when": "sks_register_index_html is defined and not sks_register_index_html.stat.exists"}, "module_options": {"src": "srv/www/sites/default/public/{{ item }}", "dest": "/srv/www/sites/{{ sks_domain[0] }}/public/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/sks"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/sks/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sks"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install SKS Keyserver", "module": "ansible.builtin.apt", "index": 1, "defined_in": "testdata/scm_repo/roles/sks/tasks/main.yml", "options": {"name": "Install SKS Keyserver", "register": "sks__register_packages", "until": "sks__register_packages is succeeded"}, "module_options": {"name": "sks", "state": "present", "install_recommends": "no"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/sks"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure firewall for SKS Keyserver", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/sks/tasks/main.yml", "options": {"name": "Configure firewall for SKS Keyserver", "notify": ["Restart ferm"]}, "module_options": {"src": "etc/ferm/filter-input.d/sks.conf.j2", "dest": "/etc/ferm/filter-input.d/sks.conf", "owner": "root", "group": "adm", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sks"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if SKS Keyserver database exists", "module": "ansible.builtin.stat", "index": 3, "defined_in": "testdata/scm_repo/roles/sks/tasks/main.yml", "options": {"name": "Check if SKS Keyserver database exists", "register": "sks_register_database_pre_build"}, "module_options": {"path": "/var/lib/sks/DB/key"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/sks"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure SKS Keyserver without database", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/sks/tasks/main.yml", "options": {"name": "Configure SKS Keyserver without database", "with_items": ["etc/sks/sksconf", "etc/sks/mailsync", "etc/sks/membership"], "when": "sks_register_database_pre_build is defined and not sks_register_database_pre_build.stat.exists"}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sks"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Build SKS Keyserver database", "module": "ansible.builtin.command", "index": 5, "defined_in": "testdata/scm_repo/roles/sks/tasks/main.yml", "options": {"name": "Build SKS Keyserver database", "become": true, "become_user": "debian-sks", "when": "sks_autoinit is defined and sks_autoinit"}, "module_options": "/usr/sbin/sks build chdir=/var/lib/sks creates=/var/lib/sks/DB/key", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/sks"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if SKS Keyserver database exists", "module": "ansible.builtin.stat", "index": 6, "defined_in": "testdata/scm_repo/roles/sks/tasks/main.yml", "options": {"name": "Check if SKS Keyserver database exists", "register": "sks_register_database_post_build"}, "module_options": {"path": "/var/lib/sks/DB/key"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/sks"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure SKS Keyserver with database", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/sks/tasks/main.yml", "options": {"name": "Configure SKS Keyserver with database", "notify": ["Restart sks"], "with_items": ["etc/default/sks", "etc/sks/sksconf", "etc/sks/mailsync", "etc/sks/membership"], "when": "sks_register_database_post_build is defined and sks_register_database_post_build.stat.exists"}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sks"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure frontend webserver", "module": "ansible.builtin.include_tasks", "index": 8, "defined_in": "testdata/scm_repo/roles/sks/tasks/main.yml", "options": {"name": "Configure frontend webserver", "when": "sks_frontends is defined and inventory_hostname in sks_frontends"}, "module_options": "sks_frontend.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/sks"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "users", "defined_in": "testdata/scm_repo/roles/users", "task_yamls": ["testdata/scm_repo/roles/users/tasks/main.yml", "testdata/scm_repo/roles/users/tasks/users/pre_main.yml", "testdata/scm_repo/roles/users/tasks/users/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Install required packages", "register": "users__register_packages", "until": "users__register_packages is succeeded", "when": "users__enabled | bool"}, "module_options": {"name": "{{ q(\"flattened\", (users__base_packages + users__shell_packages + users__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps pre_tasks hook", "module": "ansible.builtin.include_tasks", "index": 4, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "DebOps pre_tasks hook"}, "module_options": "{{ lookup('debops.debops.task_src', 'users/pre_main.yml') }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create user groups", "module": "ansible.builtin.group", "index": 5, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Create user groups", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\":  (item.group | d(item.name)), \"state\": item.state|d(\"present\")} }}"}, "when": "(users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') != 'absent' and (item.private_group|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": {"name": "{{ item.group | d(item.name) }}", "system": "{{ item.system | d(False if (item.user|d(True))|bool else True) }}", "gid": "{{ item.gid    | d(omit) }}", "state": "present", "local": "{{ item.local | d(True if (item.user|d(True))|bool else False) }}"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather information about existing remote users", "module": "ansible.builtin.getent", "index": 6, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Gather information about existing remote users"}, "module_options": {"database": "passwd"}, "fqcn": "ansible.builtin.getent", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage user accounts", "module": "ansible.builtin.user", "index": 7, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Manage user accounts", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\"), \"gecos\": item.comment|d()} }}"}, "when": "(users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'ignore' ] and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": {"name": "{{ item.name }}", "group": "{{ item.group              | d(item.name) }}", "home": "{{ item.home | d((getent_passwd[item.name][4]) if (getent_passwd[item.name]|d()) else omit) }}", "uid": "{{ item.uid                | d(omit) }}", "state": "{{ item.state              | d(\"present\") }}", "comment": "{{ item.comment            | d(omit) }}", "password": "{{ item.password           | d(\"*\") }}", "update_password": "{{ item.update_password    | d(\"on_create\") }}", "system": "{{ item.system             | d(omit) }}", "shell": "{{ item.shell              | d(users__chroot_shell if (item.chroot|d())|bool else (users__default_shell if users__default_shell|d() else omit)) }}", "create_home": "{{ item.create_home        | d(omit) }}", "move_home": "{{ item.move_home          | d(omit) }}", "skeleton": "{{ item.skeleton           | d(omit) }}", "expires": "{{ item.expires            | d(omit) }}", "remove": "{{ item.remove             | d(omit) }}", "force": "{{ item.force              | d(omit) }}", "non_unique": "{{ item.non_unique         | d(omit) }}", "generate_ssh_key": "{{ item.generate_ssh_key   | d(omit) }}", "ssh_key_bits": "{{ item.ssh_key_bits       | d(omit) }}", "ssh_key_comment": "{{ item.ssh_key_comment    | d(omit) }}", "ssh_key_file": "{{ item.ssh_key_file       | d(omit) }}", "ssh_key_passphrase": "{{ item.ssh_key_passphrase | d(omit) }}", "ssh_key_type": "{{ item.ssh_key_type       | d(omit) }}", "local": "{{ item.local              | d(True) }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather information about existing remote groups", "module": "ansible.builtin.getent", "index": 8, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Gather information about existing remote groups"}, "module_options": {"database": "group"}, "fqcn": "ansible.builtin.getent", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage additional UNIX groups for UNIX accounts", "module": "ansible.builtin.user", "index": 9, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Manage additional UNIX groups for UNIX accounts", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\"), \"gecos\": item.comment|d(), \"groups\": item.groups|d()} }}"}, "when": "(users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'ignore' ] and (item.groups|d() or (item.chroot|d())|bool) and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": {"name": "{{ item.name }}", "groups": "{{ (( (([ item.groups ] if (item.groups is string) else item.groups) if (item.groups is defined) else []) + (users__chroot_groups if ((item.chroot|d())|bool) else []) ) | intersect(getent_group.keys()) ) if (item.groups is defined or (item.chroot|d())|bool) else omit }}", "append": "{{ item.append       | d(True) }}", "state": "{{ item.state        | d(\"present\") }}", "create_home": "{{ item.create_home  | d(omit) }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage user home directories", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Manage user home directories", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\"), \"home\": (item.home | d(((getent_passwd[item.name][4]) if (getent_passwd[item.name]|d()) else (\"~\" + item.name)) if ((item.create_home|d(True))|bool) else \"\"))} }}"}, "when": "(users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and item.create_home|d(True) and (item.home_owner|d() or item.home_group|d() or item.home_mode|d() or (item.local|d(True))|bool) and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": {"path": "{{ item.home | d(((getent_passwd[item.name][4]) if (getent_passwd[item.name]|d()) else (\"~\" + item.name)) if ((item.create_home|d(True))|bool) else omit) }}", "state": "directory", "owner": "{{ item.home_owner | d(\"root\" if ((item.chroot|d())|bool) else omit) }}", "group": "{{ item.home_group | d(omit) }}", "mode": "{{ item.home_mode  | d(users__default_home_mode if (item.local|d(True))|bool else omit) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage home directory ACLs", "module": "ansible.posix.acl", "index": 11, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Manage home directory ACLs", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items | selectattr(\"home_acl\", \"defined\") | list | subelements(\"home_acl\") }}", "loop_control": {"label": "{{ {\"name\": item.0.name, \"state\": item.0.state | d(\"present\"), \"home_acl\": item.1} }}"}, "when": "(users__enabled|bool and users__acl_enabled|bool and item.0.name|d() and item.0.name != 'root' and item.0.state|d('present') not in [ 'absent', 'ignore' ] and item.0.create_home|d(True) and item.0.home_acl|d() and (item.0.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}", "tags": ["role::users:home_acl", "skip::users:home_acl", "skip::check"]}, "module_options": {"path": "{{ item.0.home | d(((getent_passwd[item.0.name][4]) if (getent_passwd[item.0.name]|d()) else (\"~\" + item.0.name)) if ((item.0.create_home|d(True))|bool) else omit) }}", "default": "{{ item.1.default     | d(omit) }}", "entity": "{{ item.1.entity      | d(omit) }}", "entry": "{{ item.1.entry       | d(omit) }}", "etype": "{{ item.1.etype       | d(omit) }}", "permissions": "{{ item.1.permissions | d(omit) }}", "follow": "{{ item.1.follow      | d(omit) }}", "recursive": "{{ item.1.recursive   | d(omit) }}", "state": "{{ item.1.state       | d(\"present\") }}"}, "fqcn": "ansible.posix.acl", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Allow specified UNIX accounts to linger when not logged in", "module": "ansible.builtin.command", "index": 12, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Allow specified UNIX accounts to linger when not logged in", "args": {"creates": "/var/lib/systemd/linger/{{ item.name }}"}, "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state | d(\"present\"), \"linger\": item.linger|d(False)} }}"}, "when": "(users__enabled|bool and ansible_service_mgr == 'systemd' and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and item.linger is defined and item.linger|bool and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": "loginctl enable-linger {{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disallow specified UNIX accounts to linger when not logged in", "module": "ansible.builtin.command", "index": 13, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Disallow specified UNIX accounts to linger when not logged in", "args": {"removes": "/var/lib/systemd/linger/{{ item.name }}"}, "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state | d(\"present\"), \"linger\": item.linger|d(False)} }}"}, "when": "(users__enabled|bool and ansible_service_mgr == 'systemd' and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and item.linger is defined and not item.linger|bool and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": "loginctl disable-linger {{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure ~/.ssh/authorized_keys for users", "module": "ansible.posix.authorized_key", "index": 14, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Configure ~/.ssh/authorized_keys for users", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state | d(\"present\"), \"sshkeys\": item.sshkeys|d()} }}"}, "when": "(users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and item.create_home|d(True) and item.sshkeys|d() and item.sshkeys_state|d('present') != 'absent' and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}", "tags": ["role::users:authorized_keys", "skip::users:authorized_keys", "skip::check"]}, "module_options": {"key": "{{ (item.sshkeys if item.sshkeys is string else '\n'.join(item.sshkeys)) | string }}", "state": "present", "user": "{{ item.name }}", "exclusive": "{{ item.sshkeys_exclusive | d(omit) }}"}, "fqcn": "ansible.posix.authorized_key", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove ~/.ssh/authorized_keys from user account if disabled", "module": "ansible.builtin.file", "index": 15, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Remove ~/.ssh/authorized_keys from user account if disabled", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state | d(\"present\"), \"sshkeys_state\": item.sshkeys_state|d(\"present\")} }}"}, "when": "(users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and item.create_home|d(True) and item.sshkeys_state|d('present') == 'absent' and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": {"path": "~{{ item.name }}/.ssh/authorized_keys", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure user mail forwarding", "module": "ansible.builtin.lineinfile", "index": 16, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Configure user mail forwarding", "become": true, "become_user": "{{ \"root\" if ((item.chroot|d())|bool) else item.name }}", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state | d(\"present\"), \"forward\": item.forward|d()} }}"}, "when": "(users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and item.create_home|d(True) and item.forward|d() and (item.user|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}", "tags": ["role::users:forward", "skip::users:forward", "skip::check"]}, "module_options": {"dest": "{{ \"~\" + item.name + \"/.forward\" }}", "regexp": "{{ '^' + (item.forward if item.forward is string else item.forward[0]) }}", "line": "{{ item.forward if item.forward is string else item.forward | join(\", \") }}", "state": "{{ item.forward_state | d(\"present\") }}", "create": true, "owner": "{{ item.name if ((item.chroot|d())|bool) else omit }}", "group": "{{ (item.group | d(item.name)) if ((item.chroot|d())|bool) else omit }}", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage users dotfiles", "module": "ansible.builtin.shell", "index": 17, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Manage users dotfiles", "environment": {"LC_MESSAGES": "C"}, "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\"), \"dotfiles\": (item.dotfiles | d(item.dotfiles_enabled | d(users__dotfiles_enabled))), \"dotfiles_repo\": ((item.dotfiles_repo | d(users__dotfiles_repo)) if ((item.dotfiles|d(item.dotfiles_enabled|d(users__dotfiles_enabled)))|bool) else \"\")} }}"}, "become": true, "become_user": "{{ item.name }}", "check_mode": false, "register": "users__register_dotfiles", "changed_when": "('Already up to date.' not in users__register_dotfiles.stdout_lines|regex_replace('-', ' '))", "when": "(users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') not in [ 'absent', 'ignore' ] and item.create_home|d(True) and (ansible_local|d() and ansible_local.yadm|d() and (ansible_local.yadm.installed|d())|bool) and (item.dotfiles | d(item.dotfiles_enabled | d(users__dotfiles_enabled))) | bool and (item.dotfiles_repo | d(users__dotfiles_repo)) and (item.user|d(True))|bool and not (item.chroot|d())|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}", "tags": ["role::users:dotfiles", "skip::users:dotfiles", "skip::check"]}, "module_options": "if ! yadm status > /dev/null ; then\n    yadm clone --bootstrap \"{{ item.dotfiles_repo | d(users__dotfiles_repo) }}\"\nelse\n    yadm pull\nfi\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage user resource directories", "module": "ansible.builtin.file", "index": 18, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Manage user resource directories", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items | selectattr(\"resources\", \"defined\") | list | subelements(\"resources\") }}", "loop_control": {"label": "{{ {\"name\": item.0.name, \"state\": item.0.state | d(\"present\"), \"resources\": item.1} }}"}, "when": "(users__enabled|bool and item.0.name|d() and item.0.name != 'root' and item.0.state|d('present') not in [ 'absent', 'ignore' ] and item.0.create_home|d(True) and item.0.resources|d() and (item.0.user|d(True))|bool and item.1.state|d('directory') in [ 'directory', 'link', 'touch' ] and item.1.content is undefined)", "no_log": "{{ debops__no_log | d(item.0.no_log) | d(True if item.0.password|d() else False) }}"}, "module_options": {"path": "{{ \"~\" + item.0.name + \"/\" + (item.1.path | d(item.1.dest | d(item.1))) }}", "src": "{{ item.1.src     | d(omit) }}", "state": "{{ item.1.state   | d(\"directory\") }}", "owner": "{{ item.1.owner   | d(item.0.name) }}", "group": "{{ item.1.group   | d(item.0.group | d(item.0.name)) }}", "mode": "{{ item.1.mode    | d(omit) }}", "force": "{{ item.1.force   | d(omit) }}", "recurse": "{{ item.1.recurse | d(omit) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage user resource parent directories", "module": "ansible.builtin.file", "index": 19, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Manage user resource parent directories", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items | selectattr(\"resources\", \"defined\") | list | subelements(\"resources\") }}", "loop_control": {"label": "{{ {\"name\": item.0.name, \"state\": item.0.state | d(\"present\"), \"resources\": item.1} }}"}, "when": "(users__enabled|bool and item.0.name|d() and item.0.name != 'root' and item.0.state|d('present') not in [ 'absent', 'ignore' ] and item.0.create_home|d(True) and item.0.resources|d() and (item.0.user|d(True))|bool and item.1.state|d('directory') in [ 'present', 'file' ])", "no_log": "{{ debops__no_log | d(item.0.no_log) | d(True if item.0.password|d() else False) }}"}, "module_options": {"path": "{{ (\"~\" + item.0.name + \"/\" + (item.1.path | d(item.1.dest))) | dirname }}", "state": "directory", "owner": "{{ item.1.parent_owner   | d(item.0.name) }}", "group": "{{ item.1.parent_group   | d(item.0.group | d(item.0.name)) }}", "mode": "{{ item.1.parent_mode    | d(omit) }}", "force": "{{ item.1.force          | d(omit) }}", "recurse": "{{ item.1.parent_recurse | d(omit) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage user resource files", "module": "ansible.builtin.copy", "index": 20, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Manage user resource files", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items | selectattr(\"resources\", \"defined\") | list | subelements(\"resources\") }}", "loop_control": {"label": "{{ {\"name\": item.0.name, \"state\": item.0.state | d(\"present\"), \"resources\": item.1} }}"}, "when": "(users__enabled|bool and item.0.name|d() and item.0.name != 'root' and item.0.state|d('present') not in [ 'absent', 'ignore' ] and item.0.create_home|d(True) and item.0.resources|d() and (item.0.user|d(True))|bool and item.1.state|d('directory') in [ 'present', 'file' ] and (item.1.dest|d() or item.1.path|d()) and (item.1.src|d() or item.1.content|d()))", "no_log": "{{ debops__no_log | d(item.0.no_log) | d(True if item.0.password|d() else False) }}"}, "module_options": {"dest": "{{ \"~\" + item.0.name + \"/\" + (item.1.path | d(item.1.dest)) }}", "src": "{{ item.1.src     | d(omit) }}", "content": "{{ item.1.content | d(omit) }}", "owner": "{{ item.1.owner   | d(item.0.name) }}", "group": "{{ item.1.group   | d(item.0.group | d(item.0.name)) }}", "mode": "{{ item.1.mode    | d(omit) }}", "force": "{{ item.1.force   | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove user resources if requested", "module": "ansible.builtin.file", "index": 21, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Remove user resources if requested", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items | selectattr(\"resources\", \"defined\") | list | subelements(\"resources\") }}", "loop_control": {"label": "{{ {\"name\": item.0.name, \"state\": item.0.state | d(\"present\"), \"resources\": item.1} }}"}, "when": "(users__enabled|bool and item.0.name|d() and item.0.name != 'root' and item.0.state|d('present') not in [ 'absent', 'ignore' ] and item.0.create_home|d(True) and item.0.resources|d() and (item.0.user|d(True))|bool and item.1.state|d('directory') == 'absent')", "no_log": "{{ debops__no_log | d(item.0.no_log) | d(True if item.0.password|d() else False) }}"}, "module_options": {"path": "{{ \"~\" + item.0.name + \"/\" + (item.1.path | d(item.1.dest | d(item.1))) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove user groups if requested", "module": "ansible.builtin.group", "index": 22, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Remove user groups if requested", "loop": "{{ users__combined_accounts | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": (item.group | d(item.name)), \"state\": item.state | d(\"present\")} }}"}, "when": "(users__enabled|bool and item.name|d() and item.name != 'root' and item.state|d('present') == 'absent' and (item.private_group|d(True))|bool)", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if item.password|d() else False) }}"}, "module_options": {"name": "{{ item.group | d(item.name) }}", "state": "absent", "local": "{{ item.local | d(True if (item.user|d(True))|bool else False) }}"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 23, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save users local facts", "module": "ansible.builtin.template", "index": 24, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Save users local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/users.fact.j2", "dest": "/etc/ansible/facts.d/users.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 25, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps post_tasks hook", "module": "ansible.builtin.include_tasks", "index": 26, "defined_in": "testdata/scm_repo/roles/users/tasks/main.yml", "options": {"name": "DebOps post_tasks hook"}, "module_options": "{{ lookup('debops.debops.task_src', 'users/post_main.yml') }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/users"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "dpkg_cleanup", "defined_in": "testdata/scm_repo/roles/dpkg_cleanup", "task_yamls": ["testdata/scm_repo/roles/dpkg_cleanup/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Ensure that the cleanup script directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/dpkg_cleanup/tasks/main.yml", "options": {"name": "Ensure that the cleanup script directory exists", "when": "dpkg_cleanup__enabled|bool"}, "module_options": {"path": "{{ dpkg_cleanup__scripts_path }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dpkg_cleanup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove cleanup scripts if requested", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/dpkg_cleanup/tasks/main.yml", "options": {"name": "Remove cleanup scripts if requested", "loop": "{{ q(\"flattened\", dpkg_cleanup__dependent_packages) }}", "loop_control": {"label": "{{ {\"package\": item.name} }}"}, "when": "dpkg_cleanup__enabled|bool and item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ dpkg_cleanup__scripts_path + \"/\" + item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dpkg_cleanup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove cleanup hooks if requested", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/dpkg_cleanup/tasks/main.yml", "options": {"name": "Remove cleanup hooks if requested", "loop": "{{ q(\"flattened\", dpkg_cleanup__dependent_packages) }}", "loop_control": {"label": "{{ {\"package\": item.name} }}"}, "when": "dpkg_cleanup__enabled|bool and item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ dpkg_cleanup__hooks_path + \"/dpkg-cleanup-\" + item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dpkg_cleanup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate cleanup scripts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/dpkg_cleanup/tasks/main.yml", "options": {"name": "Generate cleanup scripts", "loop": "{{ q(\"flattened\", dpkg_cleanup__dependent_packages) }}", "loop_control": {"label": "{{ {\"package\": item.name} }}"}, "when": "dpkg_cleanup__enabled|bool and item.name|d() and item.state|d('present') != 'absent'"}, "module_options": {"src": "usr/local/lib/dpkg-cleanup/package.j2", "dest": "{{ dpkg_cleanup__scripts_path + \"/\" + item.name }}", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dpkg_cleanup"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate cleanup hooks", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/dpkg_cleanup/tasks/main.yml", "options": {"name": "Generate cleanup hooks", "loop": "{{ q(\"flattened\", dpkg_cleanup__dependent_packages) }}", "loop_control": {"label": "{{ {\"package\": item.name} }}"}, "when": "dpkg_cleanup__enabled|bool and item.name|d() and item.state|d('present') != 'absent'"}, "module_options": {"src": "etc/dpkg/dpkg.cfg.d/dpkg-cleanup-package.j2", "dest": "{{ dpkg_cleanup__hooks_path + \"/dpkg-cleanup-\" + item.name }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dpkg_cleanup"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "grub", "defined_in": "testdata/scm_repo/roles/grub", "task_yamls": ["testdata/scm_repo/roles/grub/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create /etc/default/grub.d directory", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Create /etc/default/grub.d directory"}, "module_options": {"path": "/etc/default/grub.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate GRUB configuration file", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Generate GRUB configuration file", "notify": ["Update GRUB"]}, "module_options": {"src": "etc/default/grub.d/ansible.cfg.j2", "dest": "/etc/default/grub.d/ansible.cfg", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure secrets directories exist", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Ensure secrets directories exist", "with_items": "{{ grub__combined_users }}", "become": false, "delegate_to": "localhost", "when": "item.name|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ secret + \"/credentials/\" + inventory_hostname + \"/grub/\" + item.name }}", "state": "directory", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save plaintext password in secrets", "module": "ansible.builtin.copy", "index": 6, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Save plaintext password in secrets", "with_items": "{{ grub__combined_users }}", "register": "grub__register_pw_plain", "become": false, "delegate_to": "localhost", "when": "item.name|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"content": "{{ item.password + '\n' }}", "dest": "{{ secret + \"/credentials/\" + inventory_hostname + \"/grub/\" + item.name + \"/password\" }}", "mode": "0640"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save temporary grub-mkpasswd formatted password in secrets", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Save temporary grub-mkpasswd formatted password in secrets", "with_together": ["{{ grub__combined_users }}", "{{ grub__register_pw_plain.results|d({}) }}"], "become": false, "delegate_to": "localhost", "when": "(item.0.name|d() and item.1 is changed)", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "secret/credentials/inventory_hostname/grub/user_name/password_mkpasswd.j2", "dest": "{{ secret + \"/credentials/\" + inventory_hostname + \"/grub/\" + item.0.name + \"/password_mkpasswd\" }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate salted hash from user password", "module": "ansible.builtin.shell", "index": 8, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Generate salted hash from user password", "environment": {"GRUB_PLAINTEXT_PASSWORD": "{{ item.0.password }}"}, "args": {"executable": "bash"}, "with_together": ["{{ grub__combined_users }}", "{{ grub__register_pw_plain.results|d({}) }}"], "register": "grub__register_pw_hashes", "become": false, "delegate_to": "localhost", "changed_when": false, "when": "(item.0.name|d() and item.1 is changed)", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "set -o nounset -o pipefail -o errexit && cat '{{ (secret + \"/credentials/\" + inventory_hostname + \"/grub/\" + item.0.name + \"/password_mkpasswd\") | quote }}' | LANG=C LC_ALL=C grub-mkpasswd-pbkdf2 {{ \"\" if grub__iter_time|d()   == \"default\" else (\"--iteration-count=\" + grub__iter_time) }} {{ \"\" if grub__salt_length|d() == \"default\" else (\"--salt=\" + grub__salt_length) }} {{ \"\" if grub__hash_length|d() == \"default\" else (\"--buflen=\" + grub__hash_length) }} | perl -ne 's/^(:?Your PBKDF2|PBKDF2 hash of your password) is //ms && print'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove temporary grub-mkpassword formatted password", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Remove temporary grub-mkpassword formatted password", "with_together": ["{{ grub__combined_users }}", "{{ grub__register_pw_plain.results|d({}) }}"], "become": false, "delegate_to": "localhost", "when": "(item.0.name|d() and item.1 is changed)", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ secret + \"/credentials/\" + inventory_hostname + \"/grub/\" + item.0.name + \"/password_mkpasswd\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save hashed password in secrets", "module": "ansible.builtin.copy", "index": 10, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Save hashed password in secrets", "with_together": ["{{ grub__combined_users }}", "{{ grub__register_pw_hashes.results|d({}) }}"], "become": false, "delegate_to": "localhost", "when": "(item.1 is not skipped)", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"content": "{{ item.1.stdout_lines.0 + '\n' }}", "dest": "{{ secret + \"/credentials/\" + inventory_hostname + \"/grub/\" + item.0.name + \"/password_hash\" }}", "mode": "0640"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure users and passwords", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Configure users and passwords", "when": "(not ansible_check_mode and grub__combined_users|length > 0)", "notify": ["Update GRUB"]}, "module_options": {"src": "etc/grub.d/01_users.j2", "dest": "/etc/grub.d/01_users", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove users and passwords", "module": "ansible.builtin.file", "index": 12, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Remove users and passwords", "when": "(grub__combined_users|length == 0)", "notify": ["Update GRUB"]}, "module_options": {"path": "/etc/grub.d/01_users", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of /etc/grub.d/10_linux", "module": "dpkg_divert", "index": 13, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Add/remove diversion of /etc/grub.d/10_linux", "notify": ["Update GRUB"]}, "module_options": {"path": "/etc/grub.d/10_linux", "state": "{{ \"present\" if grub__combined_users|length > 0 else \"absent\" }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Copy /etc/grub.d/10_linux.dpkg-divert to its original location", "module": "ansible.builtin.copy", "index": 14, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Copy /etc/grub.d/10_linux.dpkg-divert to its original location", "when": "(grub__combined_users|length > 0)"}, "module_options": {"src": "/etc/grub.d/10_linux.dpkg-divert", "dest": "/etc/grub.d/10_linux", "remote_src": true, "force": false, "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow configuration of the default menu entry parameters", "module": "ansible.builtin.replace", "index": 15, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Allow configuration of the default menu entry parameters", "notify": ["Update GRUB"], "when": "(grub__combined_users|length > 0)"}, "module_options": {"dest": "/etc/grub.d/10_linux", "regexp": "^CLASS=(?:\\$\\{[A-Z_]+:-)?([\"'][\\w _-]+)([\"'])\\}?", "replace": "CLASS=${GRUB_LINUX_MENUENTRY_CLASS:-\\1 ${GRUB_LINUX_MENUENTRY_CLASS_ADDITIONAL:-}\\2}", "mode": "0755"}, "fqcn": "ansible.builtin.replace", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that local fact directory exists", "module": "ansible.builtin.file", "index": 16, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Make sure that local fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save local GRUB facts", "module": "ansible.builtin.template", "index": 17, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Save local GRUB facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/grub.fact.j2", "dest": "/etc/ansible/facts.d/grub.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 18, "defined_in": "testdata/scm_repo/roles/grub/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/grub"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "icinga_db", "defined_in": "testdata/scm_repo/roles/icinga_db", "task_yamls": ["testdata/scm_repo/roles/icinga_db/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/icinga_db/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/icinga_db"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set dbconfig configuration for Icinga database", "module": "ansible.builtin.debconf", "index": 1, "defined_in": "testdata/scm_repo/roles/icinga_db/tasks/main.yml", "options": {"name": "Set dbconfig configuration for Icinga database", "with_items": ["icinga2-{{ icinga_db__feature }}/dbconfig-install", "icinga2-{{ icinga_db__feature }}/dbconfig-upgrade"], "when": "icinga_db__icinga_installed|bool and icinga_db__type != 'unknown'"}, "module_options": {"name": "icinga2-{{ icinga_db__feature }}", "question": "{{ item }}", "vtype": "boolean", "value": "true"}, "fqcn": "ansible.builtin.debconf", "used_in": ["testdata/scm_repo/roles/icinga_db"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/icinga_db/tasks/main.yml", "options": {"name": "Install required packages", "register": "icinga_db__register_packages", "until": "icinga_db__register_packages is succeeded", "notify": ["Check icinga2 configuration and restart"], "when": "icinga_db__icinga_installed|bool and icinga_db__type != 'unknown'"}, "module_options": {"name": "{{ lookup(\"flattened\", (icinga_db__base_packages + icinga_db__packages), wantlist=True) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/icinga_db"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that IDO feature is enabled", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/icinga_db/tasks/main.yml", "options": {"name": "Ensure that IDO feature is enabled", "notify": ["Check icinga2 configuration and restart"], "when": "icinga_db__icinga_installed|bool and icinga_db__feature != 'unknown'"}, "module_options": {"path": "/etc/icinga2/features-enabled/{{ icinga_db__feature }}.conf", "src": "../features-available/{{ icinga_db__feature }}.conf", "state": "link", "mode": "0600"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga_db"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/icinga_db/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga_db"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Icinga database local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/icinga_db/tasks/main.yml", "options": {"name": "Save Icinga database local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/icinga_db.fact.j2", "dest": "/etc/ansible/facts.d/icinga_db.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/icinga_db"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/icinga_db/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/icinga_db"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "apt_install", "defined_in": "testdata/scm_repo/roles/apt_install", "task_yamls": ["testdata/scm_repo/roles/apt_install/tasks/main.yml", "testdata/scm_repo/roles/apt_install/tasks/apt_install/pre_main.yml", "testdata/scm_repo/roles/apt_install/tasks/apt_install/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Pre hooks", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Pre hooks"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"apt_install/pre_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible fact directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Make sure that Ansible fact directory exists", "when": "apt_install__enabled|bool"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save local Ansible facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Save local Ansible facts", "when": "apt_install__enabled|bool", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/apt_install.fact.j2", "dest": "/etc/ansible/facts.d/apt_install.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Debconf module dependencies", "module": "ansible.builtin.apt", "index": 6, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Debconf module dependencies", "register": "apt_install__register_debconf_packages", "until": "apt_install__register_debconf_packages is succeeded"}, "module_options": {"name": ["debconf", "debconf-utils"], "state": "present", "install_recommends": "{{ apt_install__recommends|bool }}"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Apply requested packages configuration", "module": "ansible.builtin.debconf", "index": 7, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Apply requested packages configuration", "with_flattened": ["{{ apt_install__debconf }}", "{{ apt_install__group_debconf }}", "{{ apt_install__host_debconf }}"], "when": "item.name|d()"}, "module_options": {"name": "{{ item.name }}", "question": "{{ item.question | d(omit) }}", "selection": "{{ item.selection | d(omit) }}", "setting": "{{ item.setting | d(omit) }}", "unseen": "{{ item.unseen | d(omit) }}", "value": "{{ item.value | d(omit) }}", "answer": "{{ item.answer | d(omit) }}", "vtype": "{{ item.vtype | d(omit) }}"}, "fqcn": "ansible.builtin.debconf", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install requested APT packages", "module": "ansible.builtin.apt", "index": 8, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Install requested APT packages", "register": "apt_install__register_packages", "until": "apt_install__register_packages is succeeded", "when": "apt_install__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", lookup(\"template\", \"lookup/apt_install__all_packages.j2\", convert_data=False) | from_json) }}", "state": "{{ apt_install__state }}", "install_recommends": "{{ apt_install__recommends|bool }}", "update_cache": "{{ apt_install__update_cache|bool }}", "cache_valid_time": "{{ apt_install__cache_valid_time }}"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure alternative symlinks", "module": "alternatives", "index": 9, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Configure alternative symlinks", "with_flattened": ["{{ apt_install__default_alternatives }}", "{{ apt_install__alternatives }}", "{{ apt_install__group_alternatives }}", "{{ apt_install__host_alternatives }}"], "when": "item.name|d() and item.path|d()"}, "module_options": {"name": "{{ item.name }}", "path": "{{ item.path }}", "link": "{{ item.link | d(omit) }}", "priority": "{{ item.priority | d(omit) }}"}, "fqcn": "community.general.alternatives", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure automatic alternatives", "module": "ansible.builtin.command", "index": 10, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Configure automatic alternatives", "register": "apt_install__register_alternatives", "with_flattened": ["{{ apt_install__alternatives }}", "{{ apt_install__group_alternatives }}", "{{ apt_install__host_alternatives }}"], "when": "item.name|d() and not item.path|d()", "changed_when": "apt_install__register_alternatives.stdout|d()"}, "module_options": "update-alternatives --auto {{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable kernel hints about pending upgrades", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Disable kernel hints about pending upgrades", "when": "apt_install__enabled|bool and apt_install__no_kernel_hints|bool"}, "module_options": {"src": "etc/needrestart/conf.d/no-kernel-hints.conf.j2", "dest": "/etc/needrestart/conf.d/no-kernel-hints.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Post hooks", "module": "ansible.builtin.include_tasks", "index": 12, "defined_in": "testdata/scm_repo/roles/apt_install/tasks/main.yml", "options": {"name": "Post hooks"}, "module_options": "{{ lookup(\"debops.debops.task_src\", \"apt_install/post_main.yml\") }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/apt_install"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "etc_services", "defined_in": "testdata/scm_repo/roles/etc_services", "task_yamls": ["testdata/scm_repo/roles/etc_services/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/etc_services/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/etc_services"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/etc_services/tasks/main.yml", "options": {"name": "Install required packages", "register": "etc_services__register_packages", "until": "etc_services__register_packages is succeeded"}, "module_options": {"name": "{{ (etc_services__base_packages + etc_services__packages) | flatten }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/etc_services"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure /etc/services.d directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/etc_services/tasks/main.yml", "options": {"name": "Make sure /etc/services.d directory exists"}, "module_options": {"path": "/etc/services.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etc_services"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create /etc/services.d/00_ansible", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/etc_services/tasks/main.yml", "options": {"name": "Create /etc/services.d/00_ansible"}, "module_options": {"src": "etc/services.d/00_ansible.j2", "dest": "/etc/services.d/00_ansible", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etc_services"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of /etc/services", "module": "dpkg_divert", "index": 4, "defined_in": "testdata/scm_repo/roles/etc_services/tasks/main.yml", "options": {"name": "Add/remove diversion of /etc/services", "when": "not ansible_check_mode|bool"}, "module_options": {"path": "/etc/services", "divert": "{{ etc_services__diversion }}", "state": "{{ \"present\" if etc_services__enabled|bool else \"absent\" }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/etc_services"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate list of local services if requested", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/etc_services/tasks/main.yml", "options": {"name": "Generate list of local services if requested", "loop": "{{ etc_services__combined_list | flatten }}", "when": "(etc_services__enabled|bool and item.state|d('present') != 'absent' and ((item.name|d() and item.port|d()) or item.custom|d()))"}, "module_options": {"src": "etc/services.d/local_service.j2", "dest": "/etc/services.d/{{ item.filename | default(\"20_local_service_\" + item.name) }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/etc_services"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove list of local services if requested", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/etc_services/tasks/main.yml", "options": {"name": "Remove list of local services if requested", "with_flattened": "{{ etc_services__combined_list }}", "when": "((not etc_services__enabled|bool or item.delete|d() or item.state|d('present') == 'absent') and ((item.name|d() and item.port|d()) or item.custom|d()))"}, "module_options": {"path": "/etc/services.d/{{ item.filename | default(\"20_local_service_\" + item.name) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/etc_services"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Assemble services.d", "module": "ansible.builtin.assemble", "index": 7, "defined_in": "testdata/scm_repo/roles/etc_services/tasks/main.yml", "options": {"name": "Assemble services.d", "when": "etc_services__enabled|bool"}, "module_options": {"src": "/etc/services.d", "dest": "/etc/services", "backup": false, "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.assemble", "used_in": ["testdata/scm_repo/roles/etc_services"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml", "testdata/scm_repo/playbooks/service/minio.yml", "testdata/scm_repo/playbooks/service/redis_server.yml"]}, {"py/object": "struct4.Role", "name": "nslcd", "defined_in": "testdata/scm_repo/roles/nslcd", "task_yamls": ["testdata/scm_repo/roles/nslcd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/nslcd/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nslcd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/nslcd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nslcd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/nslcd/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nslcd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure pam-mkhomedir to create home directories", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/nslcd/tasks/main.yml", "options": {"name": "Configure pam-mkhomedir to create home directories", "register": "nslcd__register_mkhomedir"}, "module_options": {"src": "usr/share/pam-configs/mkhomedir.j2", "dest": "/usr/share/pam-configs/mkhomedir", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nslcd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable mkhomedir PAM module", "module": "ansible.builtin.shell", "index": 4, "defined_in": "testdata/scm_repo/roles/nslcd/tasks/main.yml", "options": {"name": "Enable mkhomedir PAM module", "when": "nslcd__register_mkhomedir is changed"}, "module_options": "pam-auth-update --package --remove mkhomedir 2>/dev/null && pam-auth-update --package --enable mkhomedir 2>/dev/null", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/nslcd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install packages for nslcd support", "module": "ansible.builtin.package", "index": 5, "defined_in": "testdata/scm_repo/roles/nslcd/tasks/main.yml", "options": {"name": "Install packages for nslcd support", "register": "nslcd__register_packages", "until": "nslcd__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", nslcd__base_packages + nslcd__packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/nslcd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate nslcd configuration", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/nslcd/tasks/main.yml", "options": {"name": "Generate nslcd configuration", "register": "nslcd__register_config", "when": "nslcd__ldap_base_dn|d()"}, "module_options": {"src": "etc/nslcd.conf.j2", "dest": "/etc/nslcd.conf", "group": "{{ nslcd__group }}", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nslcd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart nslcd if its configuration was modified", "module": "ansible.builtin.service", "index": 7, "defined_in": "testdata/scm_repo/roles/nslcd/tasks/main.yml", "options": {"name": "Restart nslcd if its configuration was modified", "when": "nslcd__register_config is changed"}, "module_options": {"name": "nslcd", "state": "restarted"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/nslcd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/nslcd/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nslcd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save nslcd local facts", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/nslcd/tasks/main.yml", "options": {"name": "Save nslcd local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/nslcd.fact.j2", "dest": "/etc/ansible/facts.d/nslcd.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nslcd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 10, "defined_in": "testdata/scm_repo/roles/nslcd/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/nslcd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml"]}, {"py/object": "struct4.Role", "name": "yadm", "defined_in": "testdata/scm_repo/roles/yadm", "task_yamls": ["testdata/scm_repo/roles/yadm/tasks/manage_dotfiles.yml", "testdata/scm_repo/roles/yadm/tasks/upstream_yadm.yml", "testdata/scm_repo/roles/yadm/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Clone the {{ dotfile.name }} dotfiles", "module": "ansible.builtin.git", "index": 0, "defined_in": "testdata/scm_repo/roles/yadm/tasks/manage_dotfiles.yml", "options": {"name": "Clone the {{ dotfile.name }} dotfiles", "loop": "{{ q(\"flattened\", dotfile.git) }}", "loop_control": {"loop_var": "item_git"}, "when": "dotfile.git|d() and dotfile.state|d('present') not in [ 'absent', 'ignore' ] and not ansible_check_mode"}, "module_options": {"repo": "{{ item_git.repo | d(item_git) }}", "dest": "{{ yadm__dotfiles_root + \"/\" + (item_git.repo | d(item_git)).split(\"://\")[1] | regex_replace(\"\\.git$\",\"\") + \".git\" }}", "version": "{{ item_git.version | d(\"master\") }}", "verify_commit": "{{ True if dotfile.gpg|d() else omit }}", "bare": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove the {{ dotfile.name }} dotfiles mirror if requested", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/yadm/tasks/manage_dotfiles.yml", "options": {"name": "Remove the {{ dotfile.name }} dotfiles mirror if requested", "loop": "{{ q(\"flattened\", dotfile.git) }}", "loop_control": {"loop_var": "item_git"}, "when": "dotfile.git|d() and dotfile.state|d('present') == 'absent'"}, "module_options": {"dest": "{{ (yadm__dotfiles_root + \"/\" + (item_git.repo | d(item_git)).split(\"://\")[1] | regex_replace(\"\\.git$\",\"\") + \".git\") | dirname }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone the yadm upstream repository", "module": "ansible.builtin.git", "index": 0, "defined_in": "testdata/scm_repo/roles/yadm/tasks/upstream_yadm.yml", "options": {"name": "Clone the yadm upstream repository"}, "module_options": {"repo": "{{ yadm__upstream_repo }}", "dest": "{{ yadm__upstream_dest }}", "version": "{{ yadm__upstream_version }}", "verify_commit": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink the upstream yadm binary in $PATH", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/yadm/tasks/upstream_yadm.yml", "options": {"name": "Symlink the upstream yadm binary in $PATH"}, "module_options": {"dest": "{{ yadm__upstream_link }}", "src": "{{ yadm__upstream_dest + \"/yadm\" }}", "state": "link", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/yadm/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/yadm/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required APT packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/yadm/tasks/main.yml", "options": {"name": "Install required APT packages", "register": "yadm__register_packages", "until": "yadm__register_packages is succeeded", "when": "yadm__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", yadm__base_packages + yadm__packages + yadm__group_packages + yadm__host_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install yadm from upstream", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/yadm/tasks/main.yml", "options": {"name": "Install yadm from upstream", "when": "yadm__enabled|bool and yadm__upstream_enabled|bool"}, "module_options": "upstream_yadm.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the /root/.gnupg directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/yadm/tasks/main.yml", "options": {"name": "Ensure that the /root/.gnupg directory exists", "when": "yadm__enabled|bool and yadm__dotfiles_enabled|bool"}, "module_options": {"path": "~/.gnupg", "state": "directory", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download custom dotfile repositories", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "testdata/scm_repo/roles/yadm/tasks/main.yml", "options": {"name": "Download custom dotfile repositories", "loop": "{{ q(\"flattened\", yadm__combined_dotfiles) | debops.debops.parse_kv_items }}", "loop_control": {"loop_var": "dotfile", "label": "{{ dotfile.name }}"}, "when": "yadm__enabled|bool and yadm__dotfiles_enabled|bool and dotfile.name|d()"}, "module_options": "manage_dotfiles.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/yadm/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save yadm local facts", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/yadm/tasks/main.yml", "options": {"name": "Save yadm local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/yadm.fact.j2", "dest": "/etc/ansible/facts.d/yadm.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 8, "defined_in": "testdata/scm_repo/roles/yadm/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/yadm"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "minidlna", "defined_in": "testdata/scm_repo/roles/minidlna", "task_yamls": ["testdata/scm_repo/roles/minidlna/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/minidlna/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/minidlna"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/minidlna/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/minidlna"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install MiniDLNA packages", "module": "ansible.builtin.apt", "index": 2, "defined_in": "testdata/scm_repo/roles/minidlna/tasks/main.yml", "options": {"name": "Install MiniDLNA packages", "register": "minidlna__register_packages", "until": "minidlna__register_packages is succeeded"}, "module_options": {"name": "{{ (minidlna__base_packages + minidlna__packages) | flatten }}", "state": "present"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/minidlna"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the MiniDLNA configuration file", "module": "dpkg_divert", "index": 3, "defined_in": "testdata/scm_repo/roles/minidlna/tasks/main.yml", "options": {"name": "Divert the MiniDLNA configuration file"}, "module_options": {"path": "/etc/minidlna.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/minidlna"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate MiniDLNA configuration file", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/minidlna/tasks/main.yml", "options": {"name": "Generate MiniDLNA configuration file", "register": "minidlna__register_configuration"}, "module_options": {"src": "etc/minidlna.conf.j2", "dest": "/etc/minidlna.conf", "owner": "root", "group": "root", "mode": "0644", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/minidlna"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Conditionally restart MiniDLNA service", "module": "ansible.builtin.systemd", "index": 5, "defined_in": "testdata/scm_repo/roles/minidlna/tasks/main.yml", "options": {"name": "Conditionally restart MiniDLNA service", "when": "ansible_service_mgr == 'systemd'"}, "module_options": {"name": "minidlna.service", "enabled": true, "daemon_reload": "{{ True if (minidlna__register_configuration is changed) else omit }}", "state": "{{ \"restarted\" if (minidlna__register_configuration is changed) else \"started\" }}"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/minidlna"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local fact directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/minidlna/tasks/main.yml", "options": {"name": "Make sure that Ansible local fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/minidlna"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create local facts of MiniDLNA", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/minidlna/tasks/main.yml", "options": {"name": "Create local facts of MiniDLNA", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/minidlna.fact.j2", "dest": "/etc/ansible/facts.d/minidlna.fact", "owner": "root", "group": "root", "mode": "0755", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/minidlna"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 8, "defined_in": "testdata/scm_repo/roles/minidlna/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/minidlna"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "monit", "defined_in": "testdata/scm_repo/roles/monit", "task_yamls": ["testdata/scm_repo/roles/monit/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/monit/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/monit"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/monit/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/monit"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/monit/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/monit"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Monit packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/monit/tasks/main.yml", "options": {"name": "Install Monit packages", "register": "monit__register_packages", "until": "monit__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (monit__base_packages + monit__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/monit"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Monit configuration if requested", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/monit/tasks/main.yml", "options": {"name": "Remove Monit configuration if requested", "with_items": "{{ monit__combined_config | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') == 'absent'", "notify": ["Test monit and reload"], "no_log": "{{ debops__no_log | d(True if (item.mode|d(\"0644\") == \"0600\") else False) }}"}, "module_options": {"path": "/etc/monit/conf.d/{{ ((item.weight|string + \"_\") if (item.weight != 0) else \"\") + item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/monit"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Monit configuration", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/monit/tasks/main.yml", "options": {"name": "Generate Monit configuration", "with_items": "{{ monit__combined_config | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') not in [ 'init', 'absent' ]", "notify": ["Test monit and reload"], "no_log": "{{ debops__no_log | d(True if (item.mode|d(\"0644\") == \"0600\") else False) }}"}, "module_options": {"src": "etc/monit/conf.d/template.j2", "dest": "/etc/monit/conf.d/{{ ((item.weight|string + \"_\") if (item.weight != 0) else \"\") + item.name }}", "owner": "root", "group": "root", "mode": "{{ item.mode | d(\"0600\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/monit"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/monit/tasks/main.yml", "options": {"name": "Make sure Ansible local facts directory exists"}, "module_options": {"dest": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/monit"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Monit local facts", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/monit/tasks/main.yml", "options": {"name": "Configure Monit local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/monit.fact.j2", "dest": "/etc/ansible/facts.d/monit.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/monit"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 8, "defined_in": "testdata/scm_repo/roles/monit/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/monit"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "rstudio_server", "defined_in": "testdata/scm_repo/roles/rstudio_server", "task_yamls": ["testdata/scm_repo/roles/rstudio_server/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if rstudio-server package is available", "module": "ansible.builtin.shell", "index": 1, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Check if rstudio-server package is available", "args": {"executable": "bash"}, "register": "rstudio_server__register_package_rstudio", "changed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && apt-cache pkgnames | grep rstudio-server || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required system groups", "module": "ansible.builtin.group", "index": 2, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Create required system groups", "with_items": ["{{ rstudio_server__group }}", "{{ rstudio_server__auth_group }}"]}, "module_options": {"name": "{{ item }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create system account for RStudio Server", "module": "ansible.builtin.user", "index": 3, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Create system account for RStudio Server"}, "module_options": {"name": "{{ rstudio_server__user }}", "group": "{{ rstudio_server__group }}", "home": "{{ rstudio_server__home }}", "shell": "{{ rstudio_server__shell }}", "comment": "{{ rstudio_server__comment }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get the current user accounts", "module": "ansible.builtin.getent", "index": 4, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Get the current user accounts"}, "module_options": {"database": "passwd"}, "fqcn": "ansible.builtin.getent", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Allow specified user accounts to access RStudio Server", "module": "ansible.builtin.user", "index": 5, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Allow specified user accounts to access RStudio Server", "with_flattened": ["{{ rstudio_server__allow_users }}", "{{ rstudio_server__group_allow_users }}", "{{ rstudio_server__host_allow_users }}"], "when": "item.name|d(item) in getent_passwd.keys() and item.state|d('present') != 'absent'"}, "module_options": {"name": "{{ item.name|d(item) }}", "groups": "{{ rstudio_server__auth_group }}", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install RStudio Server packages", "module": "ansible.builtin.package", "index": 6, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Install RStudio Server packages", "register": "rstudio_server__register_packages", "until": "rstudio_server__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (rstudio_server__base_packages + rstudio_server__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create source directory", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Create source directory", "when": "not rstudio_server__rstudio_in_apt|bool"}, "module_options": {"path": "{{ rstudio_server__src }}", "state": "directory", "owner": "{{ rstudio_server__user }}", "group": "{{ rstudio_server__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download RStudio Server .deb package", "module": "ansible.builtin.get_url", "index": 8, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Download RStudio Server .deb package", "become": true, "become_user": "{{ rstudio_server__user }}", "register": "rstudio_server__register_rstudio_package", "until": "rstudio_server__register_rstudio_package is succeeded", "when": "not rstudio_server__rstudio_in_apt|bool"}, "module_options": {"url": "{{ rstudio_server__rstudio_deb_url }}", "dest": "{{ rstudio_server__src + \"/\" + rstudio_server__rstudio_deb_url | basename }}", "checksum": "{{ rstudio_server__rstudio_deb_checksum }}", "mode": "0644"}, "fqcn": "ansible.builtin.get_url", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Verify RStudio Server package signature", "module": "ansible.builtin.command", "index": 9, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Verify RStudio Server package signature", "become": true, "become_user": "{{ rstudio_server__user }}", "changed_when": false, "check_mode": false}, "module_options": "dpkg-sig --verify {{ rstudio_server__src + '/' + (rstudio_server__rstudio_deb_url | basename) }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install RStudio Server .deb package", "module": "ansible.builtin.apt", "index": 10, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Install RStudio Server .deb package", "register": "rstudio_server__register_rstudio_deb", "until": "rstudio_server__register_rstudio_deb is succeeded", "when": "not rstudio_server__rstudio_in_apt|bool"}, "module_options": {"deb": "{{ rstudio_server__src + \"/\" + rstudio_server__rstudio_deb_url | basename }}", "state": "present"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure RStudio Server", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Configure RStudio Server", "with_items": ["rserver.conf", "rsession.conf"], "notify": ["Verify rstudio-server"]}, "module_options": {"src": "etc/rstudio/{{ item }}.j2", "dest": "/etc/rstudio/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 12, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save RStudio Server local facts", "module": "ansible.builtin.template", "index": 13, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Save RStudio Server local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/rstudio_server.fact.j2", "dest": "/etc/ansible/facts.d/rstudio_server.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 14, "defined_in": "testdata/scm_repo/roles/rstudio_server/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/rstudio_server"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "icinga_web", "defined_in": "testdata/scm_repo/roles/icinga_web", "task_yamls": ["testdata/scm_repo/roles/icinga_web/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required Icinga Web packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Install required Icinga Web packages", "register": "icinga_web__register_packages", "until": "icinga_web__register_packages is succeeded"}, "module_options": {"name": "{{ lookup(\"flattened\", (icinga_web__base_packages + icinga_web__packages), wantlist=True) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get current Icinga Web configuration", "module": "ansible.builtin.script", "index": 4, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Get current Icinga Web configuration", "register": "icinga_web__register_config", "changed_when": false, "check_mode": false}, "module_options": "script/icingaweb-config{{ \"2\" if (ansible_python_version is version_compare(\"3.5\", \"<\")) else \"3\" }}", "fqcn": "ansible.builtin.script", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that configuration directories exist", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Ensure that configuration directories exist", "with_items": [{"name": "enabledModules", "mode": "02750"}, {"name": "modules/monitoring"}, {"name": "modules/director"}, {"name": "modules/x509"}], "when": "item.state|d('present') not in [ 'absent', 'ignore', 'init' ]"}, "module_options": {"path": "/etc/icingaweb2/{{ item.name }}", "state": "directory", "owner": "{{ icinga_web__user }}", "group": "{{ icinga_web__group }}", "mode": "{{ item.mode | d(\"02770\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download and install Icinga upstream modules", "module": "ansible.builtin.git", "index": 6, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Download and install Icinga upstream modules", "with_items": "{{ (icinga_web__default_modules + icinga_web__modules) | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.git_repo|d() and item.git_version|d() and item.state|d('present') != 'absent'"}, "module_options": {"repo": "{{ item.git_repo }}", "dest": "{{ icinga_web__src + \"/\" + item.git_repo.split(\"://\")[1] }}", "version": "{{ item.git_version }}"}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink Icinga upstream modules to Icinga Web application", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Symlink Icinga upstream modules to Icinga Web application", "with_items": "{{ (icinga_web__default_modules + icinga_web__modules) | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.git_repo|d() and item.git_version|d() and item.state|d('present') != 'absent'"}, "module_options": {"path": "{{ \"/usr/share/icingaweb2/modules/\" + item.name }}", "src": "{{ icinga_web__src + \"/\" + item.git_repo.split(\"://\")[1] }}", "state": "link", "force": "{{ True if ansible_check_mode|bool else omit }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage Icinga Web modules", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Manage Icinga Web modules", "with_items": "{{ (icinga_web__default_modules + icinga_web__modules) | debops.debops.parse_kv_items }}", "when": "item.name|d()"}, "module_options": {"path": "/etc/icingaweb2/enabledModules/{{ item.name }}", "src": "{{ (item.path | d(\"/usr/share/icingaweb2/modules/\" + item.name)) if (item.state|d(\"present\") != \"absent\" and (item.enabled|d(True))|bool) else omit }}", "state": "{{ \"link\" if (item.state|d(\"present\") != \"absent\" and (item.enabled|d(True))|bool) else \"absent\" }}", "force": "{{ True if ansible_check_mode|bool else omit }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Icinga Web configuration", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Generate Icinga Web configuration", "no_log": "{{ debops__no_log | d(item.no_log) | d(False) }}", "with_items": [{"filename": "authentication.ini", "config": "{{ icinga_web__combined_authentication }}"}, {"filename": "config.ini", "config": "{{ icinga_web__combined_config }}"}, {"filename": "groups.ini", "config": "{{ icinga_web__combined_groups }}"}, {"filename": "resources.ini", "config": "{{ icinga_web__combined_resources }}", "no_log": "{{ debops__no_log | d(True) }}"}, {"filename": "roles.ini", "config": "{{ icinga_web__combined_roles }}"}, {"filename": "modules/monitoring/backends.ini", "config": "{{ icinga_web__combined_backends }}"}, {"filename": "modules/monitoring/commandtransports.ini", "config": "{{ icinga_web__combined_commandtransports }}"}, {"filename": "modules/director/config.ini", "config": "{{ icinga_web__combined_director_cfg }}"}, {"filename": "modules/director/kickstart.ini", "config": "{{ icinga_web__combined_director_kickstart_cfg }}"}, {"filename": "modules/x509/config.ini", "config": "{{ icinga_web__combined_x509_cfg }}"}], "when": "item.state|d('present') not in [ 'absent', 'ignore', 'init' ]"}, "module_options": {"src": "etc/icingaweb2/template.ini.j2", "dest": "/etc/icingaweb2/{{ item.filename }}", "owner": "{{ icinga_web__user }}", "group": "{{ icinga_web__group }}", "mode": "0660"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate initial data file", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Generate initial data file", "when": "icinga_web__database_host == 'localhost' and icinga_web__database_init|bool", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"src": "tmp/icingaweb-initial-data.sql.j2", "dest": "/tmp/icingaweb-initial-data.sql", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import Icinga Web database on installation into PostgreSQL", "module": "postgresql_db", "index": 11, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Import Icinga Web database on installation into PostgreSQL", "with_items": ["{{ icinga_web__database_schema }}", "/tmp/icingaweb-initial-data.sql"], "delegate_to": "{{ icinga_web__database_delegate_to }}", "when": "icinga_web__database_type == 'postgresql' and icinga_web__database_host == 'localhost' and icinga_web__database_init|bool"}, "module_options": {"name": "{{ icinga_web__database_name }}", "state": "restore", "target": "{{ item }}"}, "fqcn": "community.postgresql.postgresql_db", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Ensure that PostgreSQL database tables are accessible", "module": "postgresql_privs", "index": 12, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Ensure that PostgreSQL database tables are accessible", "delegate_to": "{{ icinga_web__database_delegate_to }}", "when": "icinga_web__database_type == 'postgresql' and icinga_web__database_host == 'localhost' and icinga_web__database_init|bool"}, "module_options": {"db": "{{ icinga_web__database_name }}", "role": "{{ icinga_web__database_user }}", "objs": "ALL_IN_SCHEMA", "privs": "SELECT,INSERT,UPDATE,DELETE"}, "fqcn": "community.postgresql.postgresql_privs", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import Icinga Web database on installation into MariaDB", "module": "mysql_db", "index": 13, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Import Icinga Web database on installation into MariaDB", "with_items": ["{{ icinga_web__database_schema }}", "/tmp/icingaweb-initial-data.sql"], "delegate_to": "{{ icinga_web__database_delegate_to }}", "when": "icinga_web__database_type == 'mariadb' and icinga_web__database_host == 'localhost' and icinga_web__database_init|bool"}, "module_options": {"name": "{{ icinga_web__database_name }}", "state": "import", "target": "{{ item }}"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import Icinga Web x509 database on installation into MariaDB", "module": "mysql_db", "index": 14, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Import Icinga Web x509 database on installation into MariaDB", "when": "icinga_web__x509_enabled|bool and icinga_web__x509_database_init|bool", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"name": "{{ icinga_web__x509_database_name }}", "state": "import", "target": "{{ icinga_web__x509_database_schema }}", "login_host": "{{ icinga_web__x509_database_host }}", "login_port": "{{ icinga_web__x509_database_port }}", "login_user": "{{ icinga_web__x509_database_user }}", "login_password": "{{ icinga_web__x509_database_password }}"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Ensure that initial data schema is removed", "module": "ansible.builtin.file", "index": 15, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Ensure that initial data schema is removed"}, "module_options": {"path": "/tmp/icingaweb-initial-data.sql", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create or migrate Icinga Director database", "module": "ansible.builtin.command", "index": 16, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Create or migrate Icinga Director database", "when": "icinga_web__director_enabled|bool and icinga_web__director_database_init|bool"}, "module_options": "icingacli director migration run", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Kickstart Icinga Director configuration", "module": "ansible.builtin.command", "index": 17, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Kickstart Icinga Director configuration", "when": "icinga_web__director_enabled|bool and icinga_web__director_database_init|bool and icinga_web__director_kickstart_enabled|bool"}, "module_options": "icingacli director kickstart run", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Deploy Icinga Director configuration", "module": "ansible.builtin.command", "index": 18, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Deploy Icinga Director configuration", "when": "icinga_web__director_enabled|bool and icinga_web__director_database_init|bool and icinga_web__director_kickstart_enabled|bool"}, "module_options": "icingacli director config deploy", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Director Unix account", "module": "ansible.builtin.user", "index": 19, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Create Director Unix account"}, "module_options": {"name": "{{ icinga_web__director_user }}", "group": "{{ icinga_web__director_group }}", "system": true, "home": "{{ icinga_web__director_home }}", "shell": "{{ icinga_web__director_shell }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set permissions on Director home directory", "module": "ansible.builtin.file", "index": 20, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Set permissions on Director home directory"}, "module_options": {"path": "{{ icinga_web__director_home }}", "mode": "{{ icinga_web__director_home_mode }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if old Director jobs service exists", "module": "ansible.builtin.stat", "index": 21, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Check if old Director jobs service exists", "register": "icinga_web__register_director_jobs_service"}, "module_options": {"path": "/etc/systemd/system/icinga2-director-jobs.service"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop and disable old Director jobs service", "module": "ansible.builtin.systemd", "index": 22, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Stop and disable old Director jobs service", "when": "icinga_web__register_director_jobs_service.stat.exists"}, "module_options": {"name": "icinga2-director-jobs.service", "state": "stopped", "enabled": false}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove old Director jobs service", "module": "ansible.builtin.file", "index": 23, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Remove old Director jobs service"}, "module_options": {"path": "/etc/systemd/system/icinga2-director-jobs.service", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Director service", "module": "ansible.builtin.template", "index": 24, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Configure Director service"}, "module_options": {"src": "etc/systemd/system/icinga-director.service.j2", "dest": "/etc/systemd/system/icinga-director.service", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start and enable Director service", "module": "ansible.builtin.systemd", "index": 25, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Start and enable Director service", "when": "icinga_web__director_enabled|bool"}, "module_options": {"daemon_reload": true, "name": "icinga-director.service", "enabled": true, "state": "started"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop and disable Director service", "module": "ansible.builtin.systemd", "index": 26, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Stop and disable Director service", "when": "not icinga_web__director_enabled|bool"}, "module_options": {"name": "icinga-director.service", "enabled": false, "state": "stopped"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import CA certificates to Icinga Web x509 truststore", "module": "ansible.builtin.command", "index": 27, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Import CA certificates to Icinga Web x509 truststore", "when": "icinga_web__x509_enabled|bool and icinga_web__x509_database_init|bool"}, "module_options": "icingacli x509 import --file /etc/ssl/certs/ca-certificates.crt", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 28, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Icinga Web local facts", "module": "ansible.builtin.template", "index": 29, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Save Icinga Web local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/icinga_web.fact.j2", "dest": "/etc/ansible/facts.d/icinga_web.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 30, "defined_in": "testdata/scm_repo/roles/icinga_web/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/icinga_web"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "mount", "defined_in": "testdata/scm_repo/roles/mount", "task_yamls": ["testdata/scm_repo/roles/mount/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/mount/tasks/main.yml", "options": {"name": "Install required packages", "register": "mount__register_packages", "until": "mount__register_packages is succeeded", "when": "mount__enabled|bool"}, "module_options": {"name": "{{ (mount__base_packages + mount__packages) | flatten }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/mount"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the mount points exist", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/mount/tasks/main.yml", "options": {"name": "Ensure that the mount points exist", "loop": "{{ (mount__devices + mount__group_devices + mount__host_devices) | flatten }}", "when": "(mount__enabled|bool and item.state|d('mounted') in [ 'mounted', 'present', 'unmounted' ] and (item.device | d(item.src)) not in (ansible_mounts | map(attribute='device') | list))"}, "module_options": {"path": "{{ item.path    | d(item.dest | d(item.name)) }}", "owner": "{{ item.owner   | d(omit) }}", "group": "{{ item.group   | d(item.owner | d(omit)) }}", "mode": "{{ item.mode    | d(\"0755\") }}", "state": "directory"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mount"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop devices automounted by systemd if requested", "module": "ansible.builtin.systemd", "index": 2, "defined_in": "testdata/scm_repo/roles/mount/tasks/main.yml", "options": {"name": "Stop devices automounted by systemd if requested", "loop": "{{ (mount__devices + mount__group_devices + mount__host_devices) | flatten }}", "when": "(mount__enabled|bool and ansible_service_mgr == 'systemd' and item.state|d('mounted') in [ 'unmounted', 'absent' ] and (((item.opts if (item.opts is string) else item.opts | join(',')) if item.opts|d() else 'defaults') is match(\".*x-systemd.automount.*\")))"}, "module_options": {"name": "{{ item.name | regex_replace(\"^/\",\"\") | regex_replace(\"/\",\"-\") + \".automount\" }}", "state": "stopped"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/mount"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage device mounts", "module": "ansible.posix.mount", "index": 3, "defined_in": "testdata/scm_repo/roles/mount/tasks/main.yml", "options": {"name": "Manage device mounts", "loop": "{{ (mount__devices + mount__group_devices + mount__host_devices) | flatten }}", "register": "mount__register_devices", "when": "(mount__enabled|bool and (item.name|d() or item.dest|d() or item.path|d()) and item.src)"}, "module_options": {"src": "{{ item.src }}", "path": "{{ item.path   | d(item.dest | d(item.name)) }}", "fstype": "{{ item.fstype | d(\"auto\") }}", "opts": "{{ ((item.opts if (item.opts is string) else (item.opts | join(\",\"))) if item.opts|d() else \"defaults\") }}", "dump": "{{ item.dump   | d(omit) }}", "passno": "{{ item.passno | d(omit) }}", "state": "{{ item.state  | d(\"mounted\") }}", "fstab": "{{ item.fstab  | d(omit) }}"}, "fqcn": "ansible.posix.mount", "used_in": ["testdata/scm_repo/roles/mount"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Restart 'local-fs.target' systemd unit", "module": "ansible.builtin.systemd", "index": 4, "defined_in": "testdata/scm_repo/roles/mount/tasks/main.yml", "options": {"name": "Restart 'local-fs.target' systemd unit", "loop": "{{ mount__register_devices.results }}", "when": "(mount__enabled|bool and ansible_service_mgr == 'systemd' and item is changed and (((item.opts if (item.opts is string) else item.opts | join(',')) if item.opts|d() else 'defaults') is match(\".*x-systemd.automount.*\")))"}, "module_options": {"name": "local-fs.target", "state": "restarted", "daemon_reload": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/mount"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart 'remote-fs.target' systemd unit", "module": "ansible.builtin.systemd", "index": 5, "defined_in": "testdata/scm_repo/roles/mount/tasks/main.yml", "options": {"name": "Restart 'remote-fs.target' systemd unit", "loop": "{{ mount__register_devices.results }}", "when": "(mount__enabled|bool and ansible_service_mgr == 'systemd' and item is changed and (((item.opts if (item.opts is string) else item.opts | join(',')) if item.opts|d() else 'defaults') is match(\".*x-systemd.automount.*\")))"}, "module_options": {"name": "remote-fs.target", "state": "restarted", "daemon_reload": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/mount"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage directories", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/mount/tasks/main.yml", "options": {"name": "Manage directories", "loop": "{{ (mount__directories + mount__group_directories + mount__host_directories) | flatten }}", "when": "mount__enabled|bool and (item.path|d() or item.dest|d() or item.name|d()) and item.state|d('directory') in [ 'directory', 'absent' ]"}, "module_options": {"path": "{{ item.path    | d(item.dest | d(item.name)) }}", "owner": "{{ item.owner   | d(omit) }}", "group": "{{ item.group   | d(item.owner | d(omit)) }}", "mode": "{{ item.mode    | d(\"0755\") }}", "recurse": "{{ item.recurse | d(omit) }}", "state": "{{ item.state   | d(\"directory\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mount"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage directory ACLs", "module": "ansible.posix.acl", "index": 7, "defined_in": "testdata/scm_repo/roles/mount/tasks/main.yml", "options": {"name": "Manage directory ACLs", "loop": "{{ ((mount__directories + mount__group_directories + mount__host_directories) | flatten) | selectattr(\"acl\", \"defined\") | list | subelements(\"acl\") }}", "loop_control": {"label": "{{ {\"name\": item.0.name, \"acl\": item.1} }}"}, "when": "mount__enabled|bool and (item.0.path|d() or item.0.dest|d() or item.0.name|d()) and item.0.state|d('directory') == 'directory' and item.0.acl|d()"}, "module_options": {"path": "{{ item.0.path        | d(item.0.dest | d(item.0.name)) }}", "default": "{{ item.1.default     | d(omit) }}", "entity": "{{ item.1.entity      | d(omit) }}", "etype": "{{ item.1.etype       | d(omit) }}", "permissions": "{{ item.1.permissions | d(omit) }}", "follow": "{{ item.1.follow      | d(omit) }}", "recursive": "{{ item.1.recursive   | d(omit) }}", "state": "{{ item.1.state       | d(\"present\") }}"}, "fqcn": "ansible.posix.acl", "used_in": ["testdata/scm_repo/roles/mount"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage bind mounts", "module": "ansible.posix.mount", "index": 8, "defined_in": "testdata/scm_repo/roles/mount/tasks/main.yml", "options": {"name": "Manage bind mounts", "loop": "{{ (mount__binds + mount__group_binds + mount__host_binds) | flatten }}", "when": "(mount__enabled|bool and (item.name|d() or item.dest|d() or item.path|d()) and item.src|d())"}, "module_options": {"src": "{{ item.src }}", "path": "{{ item.path   | d(item.dest | d(item.name)) }}", "fstype": "{{ item.fstype | d(\"none\") }}", "opts": "{{ ((item.opts if (item.opts is string) else (item.opts | join(\",\"))) if item.opts|d() else \"bind\") }}", "dump": "{{ item.dump   | d(omit) }}", "passno": "{{ item.passno | d(omit) }}", "state": "{{ item.state  | d(\"mounted\") }}", "fstab": "{{ item.fstab  | d(omit) }}"}, "fqcn": "ansible.posix.mount", "used_in": ["testdata/scm_repo/roles/mount"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/mount/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mount"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save mount local facts", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/mount/tasks/main.yml", "options": {"name": "Save mount local facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/mount.fact.j2", "dest": "/etc/ansible/facts.d/mount.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mount"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "nullmailer", "defined_in": "testdata/scm_repo/roles/nullmailer", "task_yamls": ["testdata/scm_repo/roles/nullmailer/tasks/main_env.yml", "testdata/scm_repo/roles/nullmailer/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Check if MTA is installed", "module": "ansible.builtin.shell", "index": 0, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main_env.yml", "options": {"name": "Check if MTA is installed", "environment": {"LC_MESSAGES": "C"}, "args": {"executable": "/bin/bash"}, "register": "nullmailer__register_mta", "changed_when": false, "failed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && dpkg --get-selections | grep -w -E '({{ nullmailer__skip_mta_packages | join(\"|\") }})' | awk '{print $1}' || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set nullmailer deployment state", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main_env.yml", "options": {"name": "Set nullmailer deployment state"}, "module_options": {"nullmailer__deploy_state": "{{ \"present\" if (nullmailer__enabled|bool and (not nullmailer__skip_mta|bool or not nullmailer__register_mta.stdout|d())) else \"absent\" }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main.yml", "options": {"name": "Install required packages", "register": "nullmailer__register_packages", "until": "nullmailer__register_packages is succeeded", "when": "nullmailer__deploy_state|d('present') != 'absent'"}, "module_options": {"name": "{{ q(\"flattened\", (nullmailer__base_packages + nullmailer__smtpd_packages + nullmailer__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Purge other SMTP servers", "module": "ansible.builtin.apt", "index": 3, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main.yml", "options": {"name": "Purge other SMTP servers", "when": "(nullmailer__deploy_state|d('present') != 'absent' and nullmailer__purge_mta_packages)"}, "module_options": {"name": "{{ nullmailer__purge_mta_packages | flatten }}", "state": "absent", "purge": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate configuration files", "module": "ansible.builtin.copy", "index": 4, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main.yml", "options": {"name": "Generate configuration files", "with_flattened": ["{{ nullmailer__configuration_files }}"], "notify": ["Restart nullmailer"], "when": "(nullmailer__deploy_state|d('present') != 'absent' and (item.dest|d() and (item.src|d() or item.content is defined) and item.state|d('present') != 'absent'))"}, "module_options": {"dest": "{{ item.dest }}", "content": "{{ (item.content + '\n') if item.content|d() else ('' if item.content is defined else omit) }}", "src": "{{ item.src   | d(omit) }}", "owner": "{{ item.owner | d(omit) }}", "group": "{{ item.group | d(omit) }}", "mode": "{{ item.mode  | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate private configuration files", "module": "ansible.builtin.copy", "index": 5, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main.yml", "options": {"name": "Generate private configuration files", "with_flattened": ["{{ nullmailer__private_configuration_files }}"], "notify": ["Restart nullmailer"], "when": "(nullmailer__deploy_state|d('present') != 'absent' and (item.dest|d() and (item.src|d() or item.content|d()) and item.state|d('present') != 'absent'))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"dest": "{{ item.dest }}", "content": "{{ (item.content + '\n') if item.content|d() else omit }}", "src": "{{ item.src   | d(omit) }}", "owner": "{{ item.owner | d(omit) }}", "group": "{{ item.group | d(omit) }}", "mode": "{{ item.mode  | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove configuration files if requested", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main.yml", "options": {"name": "Remove configuration files if requested", "with_flattened": ["{{ nullmailer__configuration_files }}"], "notify": ["Restart nullmailer"], "when": "(nullmailer__deploy_state|d('present') != 'absent' and (item.dest|d() and (item.src|d() or item.content is defined) and item.state|d('present') == 'absent'))"}, "module_options": {"path": "{{ item.dest }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove private configuration files if requested", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main.yml", "options": {"name": "Remove private configuration files if requested", "with_flattened": ["{{ nullmailer__private_configuration_files }}"], "notify": ["Restart nullmailer"], "when": "(nullmailer__deploy_state|d('present') != 'absent' and (item.dest|d() and (item.src|d() or item.content is defined) and item.state|d('present') == 'absent'))", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ item.dest }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure nullmailer services in xinetd", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main.yml", "options": {"name": "Configure nullmailer services in xinetd", "loop": ["nullmailer-smtpd", "nullmailer-smtpd6"], "notify": ["Reload xinetd"], "when": "(nullmailer__deploy_state|d('present') != 'absent' and nullmailer__smtpd|bool)"}, "module_options": {"src": "etc/xinetd.d/{{ item }}.j2", "dest": "/etc/xinetd.d/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable nullmailer-smtpd service in xinetd", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main.yml", "options": {"name": "Disable nullmailer-smtpd service in xinetd", "loop": ["nullmailer-smtpd", "nullmailer-smtpd6"], "notify": ["Reload xinetd"], "when": "((nullmailer__deploy_state|d() and nullmailer__deploy_state == 'absent') or not nullmailer__smtpd|bool)"}, "module_options": {"path": "/etc/xinetd.d/{{ item }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove old dpkg cleanup hook and script", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main.yml", "options": {"name": "Remove old dpkg cleanup hook and script", "loop": ["/etc/dpkg/dpkg.cfg.d/debops-nullmailer", "/usr/local/lib/debops-nullmailer-dpkg-cleanup"], "when": "nullmailer__deploy_state|d('present') != 'absent'"}, "module_options": {"path": "{{ item }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare cleanup during package removal", "module": "ansible.builtin.import_role", "index": 11, "defined_in": "testdata/scm_repo/roles/nullmailer/tasks/main.yml", "options": {"name": "Prepare cleanup during package removal", "vars": {"dpkg_cleanup__dependent_packages": ["{{ nullmailer__dpkg_cleanup__dependent_packages }}"]}, "when": "nullmailer__deploy_state|d('present') != 'absent'", "tags": ["role::dpkg_cleanup", "skip::dpkg_cleanup", "role::nullmailer:dpkg_cleanup"]}, "module_options": {"name": "dpkg_cleanup"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nullmailer"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "gitusers", "defined_in": "testdata/scm_repo/roles/gitusers", "task_yamls": ["testdata/scm_repo/roles/gitusers/tasks/groups_absent.yml", "testdata/scm_repo/roles/gitusers/tasks/sshkeys.yml", "testdata/scm_repo/roles/gitusers/tasks/gitusers.yml", "testdata/scm_repo/roles/gitusers/tasks/forward.yml", "testdata/scm_repo/roles/gitusers/tasks/groups_present.yml", "testdata/scm_repo/roles/gitusers/tasks/git-shell.yml", "testdata/scm_repo/roles/gitusers/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Remove user groups if requested", "module": "ansible.builtin.group", "index": 0, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/groups_absent.yml", "options": {"name": "Remove user groups if requested", "with_flattened": ["{{ gitusers_list }}", "{{ gitusers_group_list }}", "{{ gitusers_host_list }}"], "when": "(item.name is defined and (item.state is defined and item.state == 'absent'))"}, "module_options": {"name": "{{ item.group | default(item.name + gitusers_name_suffix) }}", "state": "absent"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure authorized SSH keys for users", "module": "ansible.posix.authorized_key", "index": 0, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/sshkeys.yml", "options": {"name": "Configure authorized SSH keys for users", "with_flattened": ["{{ gitusers_list }}", "{{ gitusers_group_list }}", "{{ gitusers_host_list }}"], "when": "((item.name is defined and item.name) and (item.state is undefined or (item.state is defined and item.state != 'absent')) and (item.sshkeys is defined and item.sshkeys))"}, "module_options": {"key": "{{ \"\\n\".join(item.sshkeys) | string }}", "state": "present", "user": "{{ item.name + gitusers_name_suffix }}"}, "fqcn": "ansible.posix.authorized_key", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove ~/.ssh/authorized_keys from user account if disabled", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/sshkeys.yml", "options": {"name": "Remove ~/.ssh/authorized_keys from user account if disabled", "with_flattened": ["{{ gitusers_list }}", "{{ gitusers_group_list }}", "{{ gitusers_host_list }}"], "when": "((item.name is defined and item.name) and (item.state is undefined or (item.state is defined and item.state != 'absent')) and (item.sshkeys is defined and not item.sshkeys|bool))"}, "module_options": {"dest": "{{ item.home | default(gitusers_default_home_prefix + \"/\" + item.name + gitusers_name_suffix) }}/.ssh/authorized_keys", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage user accounts without UIDs", "module": "ansible.builtin.user", "index": 0, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/gitusers.yml", "options": {"name": "Manage user accounts without UIDs", "with_flattened": ["{{ gitusers_list }}", "{{ gitusers_group_list }}", "{{ gitusers_host_list }}"], "when": "((item.name is defined and item.name) and (item.uid is undefined or (item.uid is defined and not item.uid)))"}, "module_options": {"name": "{{ item.name + gitusers_name_suffix }}", "state": "{{ item.state | default(\"present\") }}", "group": "{{ item.group | default(item.name + gitusers_name_suffix) }}", "comment": "{{ item.comment | default(\"\") }}", "system": "{{ item.systemuser | default(\"no\") }}", "shell": "{{ item.shell | default(gitusers_default_shell) }}", "home": "{{ item.home | default(gitusers_default_home_prefix + \"/\" + item.name + gitusers_name_suffix) }}", "createhome": "no"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage user accounts with UIDs", "module": "ansible.builtin.user", "index": 1, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/gitusers.yml", "options": {"name": "Manage user accounts with UIDs", "with_flattened": ["{{ gitusers_list }}", "{{ gitusers_group_list }}", "{{ gitusers_host_list }}"], "when": "((item.name is defined and item.name) and (item.uid is defined and item.uid))"}, "module_options": {"name": "{{ item.name + gitusers_name_suffix }}", "uid": "{{ item.uid }}", "state": "{{ item.state | default(\"present\") }}", "group": "{{ item.group | default(item.name + gitusers_name_suffix) }}", "comment": "{{ item.comment | default(\"\") }}", "system": "{{ item.systemuser | default(\"no\") }}", "shell": "{{ item.shell | default(gitusers_default_shell) }}", "home": "{{ item.home | default(gitusers_default_home_prefix + \"/\" + item.name + gitusers_name_suffix) }}", "createhome": "no"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage user default groups", "module": "ansible.builtin.user", "index": 2, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/gitusers.yml", "options": {"name": "Manage user default groups", "with_flattened": ["{{ gitusers_list }}", "{{ gitusers_group_list }}", "{{ gitusers_host_list }}"], "when": "((item.name is defined and item.name) and (gitusers_default_groups_list is defined and gitusers_default_groups_list))"}, "module_options": {"name": "{{ item.name + gitusers_name_suffix }}", "state": "{{ item.state | default(\"present\") }}", "groups": "{{ gitusers_default_groups_list | join(\",\") }}", "append": "{{ gitusers_default_groups_append }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage user custom groups", "module": "ansible.builtin.user", "index": 3, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/gitusers.yml", "options": {"name": "Manage user custom groups", "with_flattened": ["{{ gitusers_list }}", "{{ gitusers_group_list }}", "{{ gitusers_host_list }}"], "when": "((item.name is defined and item.name) and (item.groups is defined and item.groups))"}, "module_options": {"name": "{{ item.name + gitusers_name_suffix }}", "state": "{{ item.state | default(\"present\") }}", "groups": "{{ item.groups | join(\",\") }}", "append": "{{ item.append | default(\"yes\") }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enforce home directories permissions", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/gitusers.yml", "options": {"name": "Enforce home directories permissions", "with_flattened": ["{{ gitusers_list }}", "{{ gitusers_group_list }}", "{{ gitusers_host_list }}"], "when": "((item.name is defined and item.name) and (item.state is undefined or (item.state is defined and item.state != 'absent')))"}, "module_options": {"state": "directory", "path": "{{ item.home | default(gitusers_default_home_prefix + \"/\" + item.name + gitusers_name_suffix) }}", "owner": "{{ item.name + gitusers_name_suffix }}", "group": "{{ item.group | default(item.name + gitusers_name_suffix) }}", "mode": "{{ gitusers_default_home_mode }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create user groups without GIDs", "module": "ansible.builtin.group", "index": 0, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/groups_present.yml", "options": {"name": "Create user groups without GIDs", "with_flattened": ["{{ gitusers_list }}", "{{ gitusers_group_list }}", "{{ gitusers_host_list }}"], "when": "(((item.name is defined and item.name) and (item.gid is undefined or (item.gid is defined and not item.gid))) and (item.state is undefined or (item.state is defined and item.state != 'absent')))"}, "module_options": {"name": "{{ item.group | default(item.name + gitusers_name_suffix) }}", "system": "{{ item.systemgroup | default(\"no\") }}", "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create user groups with GIDs", "module": "ansible.builtin.group", "index": 1, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/groups_present.yml", "options": {"name": "Create user groups with GIDs", "with_flattened": ["{{ gitusers_list }}", "{{ gitusers_group_list }}", "{{ gitusers_host_list }}"], "when": "((item.name is defined and item.name) and (item.gid is defined and item.gid) and (item.state is undefined or (item.state is defined and item.state != 'absent')))"}, "module_options": {"name": "{{ item.group | default(item.name + gitusers_name_suffix) }}", "system": "{{ item.systemgroup | default(\"no\") }}", "gid": "{{ item.gid }}", "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create gitusers scripts path", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/git-shell.yml", "options": {"name": "Create gitusers scripts path"}, "module_options": {"path": "{{ gitusers_git_scripts }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install gitusers scripts", "module": "ansible.builtin.copy", "index": 1, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/git-shell.yml", "options": {"name": "Install gitusers scripts"}, "module_options": {"src": "var/lib/gitusers/", "dest": "{{ gitusers_git_scripts }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare gituser environment", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/git-shell.yml", "options": {"name": "Prepare gituser environment", "with_nested": ["{{ gitusers_list + gitusers_group_list + gitusers_host_list }}", ["forward", "gitconfig", "motd"]], "when": "((item.0.name is defined and item.0.name) and (item.0.state is undefined or (item.0.state is defined and item.0.state != 'absent')))"}, "module_options": {"src": "srv/gitusers/{{ item.1 }}.j2", "dest": "{{ item.0.home | default(gitusers_default_home_prefix + \"/\" + item.0.name + gitusers_name_suffix) }}/.{{ item.1 }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create base directory for user websites", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/git-shell.yml", "options": {"name": "Create base directory for user websites", "with_flattened": ["{{ gitusers_list }}", "{{ gitusers_group_list }}", "{{ gitusers_host_list }}"], "when": "((item.name is defined and item.name) and (item.state is undefined or (item.state is defined and item.state != 'absent')))"}, "module_options": {"path": "{{ gitusers_default_www_prefix }}/{{ item.group | default(item.name + gitusers_name_suffix) }}", "state": "directory", "owner": "root", "group": "{{ gitusers_default_www_group }}", "mode": "0711"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create root directory for user websites", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/git-shell.yml", "options": {"name": "Create root directory for user websites", "with_nested": ["{{ gitusers_list + gitusers_group_list + gitusers_host_list }}", ["checkouts", "sites", "userdir"]], "when": "((item.0.name is defined and item.0.name) and (item.0.state is undefined or (item.0.state is defined and item.0.state != 'absent')))"}, "module_options": {"path": "{{ gitusers_default_www_prefix }}/{{ item.0.group | default(item.0.name + gitusers_name_suffix) }}/{{ item.1 }}", "state": "directory", "owner": "root", "group": "{{ item.0.group | default(item.0.name + gitusers_name_suffix) }}", "mode": "02775"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Symlink git-shell-commands to user directories", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/git-shell.yml", "options": {"name": "Symlink git-shell-commands to user directories", "with_flattened": ["{{ gitusers_list }}", "{{ gitusers_group_list }}", "{{ gitusers_host_list }}"], "when": "((item.name is defined and item.name) and (item.state is undefined or (item.state is defined and item.state != 'absent')))"}, "module_options": {"path": "{{ item.home | default(gitusers_default_home_prefix + \"/\" + item.name + gitusers_name_suffix) + \"/git-shell-commands\" }}", "src": "{{ gitusers_git_scripts + \"/git-shell-commands/\" }}", "state": "link", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create directory for gituser homes", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/main.yml", "options": {"name": "Create directory for gituser homes"}, "module_options": {"path": "{{ gitusers_default_home_prefix }}", "state": "directory", "owner": "root", "group": "root", "mode": "0751"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure groups", "module": "ansible.builtin.include_tasks", "index": 1, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/main.yml", "options": {"name": "Configure groups"}, "module_options": "groups_present.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure users", "module": "ansible.builtin.include_tasks", "index": 2, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/main.yml", "options": {"name": "Configure users"}, "module_options": "gitusers.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure git-shell", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/main.yml", "options": {"name": "Configure git-shell"}, "module_options": "git-shell.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure sshkeys", "module": "ansible.builtin.include_tasks", "index": 4, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/main.yml", "options": {"name": "Configure sshkeys"}, "module_options": "sshkeys.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove groups if requested", "module": "ansible.builtin.include_tasks", "index": 5, "defined_in": "testdata/scm_repo/roles/gitusers/tasks/main.yml", "options": {"name": "Remove groups if requested"}, "module_options": "groups_absent.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/gitusers"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "libvirtd", "defined_in": "testdata/scm_repo/roles/libvirtd", "task_yamls": ["testdata/scm_repo/roles/libvirtd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if host supports hardware virtualization", "module": "ansible.builtin.shell", "index": 1, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Check if host supports hardware virtualization", "args": {"executable": "bash"}, "register": "libvirtd__register_hw_virt", "check_mode": false, "changed_when": false}, "module_options": "set -o nounset -o pipefail -o errexit && egrep 'vmx|svm|0xc0f' /proc/cpuinfo || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install libvirtd support", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Install libvirtd support", "register": "libvirtd__register_packages", "until": "libvirtd__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (libvirtd__network_packages + libvirtd__misc_packages + libvirtd__packages + (libvirtd__base_packages_map[ansible_distribution_release] if (ansible_distribution_release in libvirtd__base_packages_map.keys()) else libvirtd__base_packages) + (libvirtd__kvm_packages if libvirtd__kvm_support|bool else []))) }}", "state": "present", "install_recommends": false}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save libvirtd local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Save libvirtd local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/libvirtd.fact.j2", "dest": "/etc/ansible/facts.d/libvirtd.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert managed configuration files", "module": "dpkg_divert", "index": 6, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Divert managed configuration files", "loop": ["/etc/libvirt/libvirt.conf", "/etc/libvirt/libvirtd.conf"]}, "module_options": {"path": "{{ item }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate libvirt configuration files", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Generate libvirt configuration files", "with_items": ["etc/libvirt/libvirt.conf"]}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate libvirtd configuration files", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Generate libvirtd configuration files", "with_items": ["etc/libvirt/libvirtd.conf"], "notify": ["Restart libvirtd", "Restart libvirt-bin"]}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add administrators to libvirtd access group", "module": "ansible.builtin.user", "index": 9, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Add administrators to libvirtd access group", "with_items": "{{ libvirtd__admins }}", "when": "libvirtd__admins|d()"}, "module_options": {"name": "{{ item }}", "groups": "{{ libvirtd__unix_sock_group }}", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install ferm post hook", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Install ferm post hook", "when": "libvirtd__ferm_post_hook|bool"}, "module_options": {"src": "etc/ferm/hooks/post.d/reload-libvirtd.j2", "dest": "/etc/ferm/hooks/post.d/reload-libvirtd", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Kernel Same-page Merging", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Configure Kernel Same-page Merging", "notify": ["Restart sysfsutils"]}, "module_options": {"src": "etc/sysfs.d/ksm.conf.j2", "dest": "/etc/sysfs.d/ksm.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check /sys filesystem mount options", "module": "ansible.builtin.shell", "index": 12, "defined_in": "testdata/scm_repo/roles/libvirtd/tasks/main.yml", "options": {"name": "Check /sys filesystem mount options", "args": {"executable": "bash"}, "register": "libvirtd__register_sysfs", "changed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && findmnt -n -o FS-OPTIONS --target /sys | tr ',' '\\n'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/libvirtd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "environment", "defined_in": "testdata/scm_repo/roles/environment", "task_yamls": ["testdata/scm_repo/roles/environment/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Configure /etc/environment", "module": "ansible.builtin.blockinfile", "index": 0, "defined_in": "testdata/scm_repo/roles/environment/tasks/main.yml", "options": {"name": "Configure /etc/environment"}, "module_options": {"dest": "{{ environment__file }}", "state": "{{ \"present\" if environment__enabled|bool else \"absent\" }}", "block": "{{ lookup(\"template\", \"lookup/environment__variables.j2\") }}", "insertbefore": "{{ \"BOF\" if environment__placement == \"before\" else omit }}", "insertafter": "{{ \"EOF\" if environment__placement == \"after\" else omit }}"}, "fqcn": "ansible.builtin.blockinfile", "used_in": ["testdata/scm_repo/roles/environment"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/environment/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/environment"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible local facts", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/environment/tasks/main.yml", "options": {"name": "Update Ansible local facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/environment.fact.j2", "dest": "/etc/ansible/facts.d/environment.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/environment"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "backup2l", "defined_in": "testdata/scm_repo/roles/backup2l", "task_yamls": ["testdata/scm_repo/roles/backup2l/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/backup2l/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/backup2l"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/backup2l/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/backup2l"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required APT packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/backup2l/tasks/main.yml", "options": {"name": "Install required APT packages"}, "module_options": {"name": "{{ q(\"flattened\", (backup2l__base_packages + backup2l__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/backup2l"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the original backup2l config file", "module": "dpkg_divert", "index": 3, "defined_in": "testdata/scm_repo/roles/backup2l/tasks/main.yml", "options": {"name": "Divert the original backup2l config file"}, "module_options": {"path": "/etc/backup2l.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/backup2l"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create required directories", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/backup2l/tasks/main.yml", "options": {"name": "Create required directories", "with_items": [{"path": "{{ backup2l__backup_dir }}", "mode": "0750"}, {"path": "{{ backup2l__pre_hook_dir }}"}, {"path": "{{ backup2l__post_hook_dir }}"}]}, "module_options": {"path": "{{ item.path }}", "state": "directory", "mode": "{{ item.mode | d(\"0755\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/backup2l"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install pre-hook scripts", "module": "ansible.builtin.copy", "index": 5, "defined_in": "testdata/scm_repo/roles/backup2l/tasks/main.yml", "options": {"name": "Install pre-hook scripts"}, "module_options": {"src": "usr/local/etc/backup/pre-hook.d/", "dest": "{{ backup2l__pre_hook_dir }}/", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/backup2l"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add paths to backup in an include file", "module": "ansible.builtin.lineinfile", "index": 6, "defined_in": "testdata/scm_repo/roles/backup2l/tasks/main.yml", "options": {"name": "Add paths to backup in an include file", "with_flattened": ["{{ backup2l__default_include }}", "{{ backup2l__include }}", "{{ backup2l__group_include }}", "{{ backup2l__host_include }}"], "when": "backup2l__srclist_from_file|bool"}, "module_options": {"dest": "{{ backup2l__include_file }}", "regexp": "^{{ item.path | d(item) }}$", "line": "{{ item.path | d(item) }}", "state": "{{ item.state | d(\"present\") }}", "create": true, "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/backup2l"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate backup2l configuration", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/backup2l/tasks/main.yml", "options": {"name": "Generate backup2l configuration"}, "module_options": {"src": "etc/backup2l.conf.j2", "dest": "/etc/backup2l.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/backup2l"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/backup2l/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/backup2l"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save backup2l local facts", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/backup2l/tasks/main.yml", "options": {"name": "Save backup2l local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/backup2l.fact.j2", "dest": "/etc/ansible/facts.d/backup2l.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/backup2l"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 10, "defined_in": "testdata/scm_repo/roles/backup2l/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/backup2l"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "tinyproxy", "defined_in": "testdata/scm_repo/roles/tinyproxy", "task_yamls": ["testdata/scm_repo/roles/tinyproxy/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/tinyproxy/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/tinyproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/tinyproxy/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/tinyproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required APT packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/tinyproxy/tasks/main.yml", "options": {"name": "Install required APT packages", "register": "tinyproxy__register_packages", "until": "tinyproxy__register_packages is succeeded", "notify": ["Restart tinyproxy"]}, "module_options": {"name": "{{ q(\"flattened\", tinyproxy__base_packages + tinyproxy__packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/tinyproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required UNIX system group", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/tinyproxy/tasks/main.yml", "options": {"name": "Create required UNIX system group"}, "module_options": {"name": "{{ tinyproxy__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/tinyproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that required UNIX account exists", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/tinyproxy/tasks/main.yml", "options": {"name": "Make sure that required UNIX account exists"}, "module_options": {"name": "{{ tinyproxy__user }}", "group": "{{ tinyproxy__group }}", "home": "{{ tinyproxy__home }}", "comment": "Tinyproxy daemon", "shell": "/bin/false", "state": "present", "system": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/tinyproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the original tinyproxy configuration file", "module": "dpkg_divert", "index": 5, "defined_in": "testdata/scm_repo/roles/tinyproxy/tasks/main.yml", "options": {"name": "Divert the original tinyproxy configuration file"}, "module_options": {"path": "{{ tinyproxy__configuration_file }}", "state": "present", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/tinyproxy"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate tinyproxy configuration", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/tinyproxy/tasks/main.yml", "options": {"name": "Generate tinyproxy configuration", "notify": ["Restart tinyproxy"]}, "module_options": {"src": "etc/tinyproxy/tinyproxy.conf.j2", "dest": "{{ tinyproxy__configuration_file }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinyproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/tinyproxy/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tinyproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Tinyproxy local facts", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/tinyproxy/tasks/main.yml", "options": {"name": "Save Tinyproxy local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/tinyproxy.fact.j2", "dest": "/etc/ansible/facts.d/tinyproxy.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tinyproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 9, "defined_in": "testdata/scm_repo/roles/tinyproxy/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/tinyproxy"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "dropbear_initramfs", "defined_in": "testdata/scm_repo/roles/dropbear_initramfs", "task_yamls": ["testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Ensure specified packages are in there desired state", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml", "options": {"name": "Ensure specified packages are in there desired state", "register": "dropbear_initramfs__register_packages", "until": "dropbear_initramfs__register_packages is succeeded", "tags": ["role::dropbear_initramfs:pkgs"]}, "module_options": {"name": "{{ q(\"flattened\", (dropbear_initramfs__base_packages + dropbear_initramfs__packages)) }}", "state": "{{ \"present\" if (dropbear_initramfs__deploy_state == \"present\") else \"absent\" }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/dropbear_initramfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure network in initramfs using kernel command line", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml", "options": {"name": "Configure network in initramfs using kernel command line", "when": "(dropbear_initramfs__deploy_state == \"present\")", "notify": ["Update initramfs"]}, "module_options": {"src": "etc/initramfs-tools/conf.d/role.conf.j2", "dest": "/etc/initramfs-tools/conf.d/50_debops.dropbear_initramfs.conf", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dropbear_initramfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure dropbear options", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml", "options": {"name": "Configure dropbear options", "when": "(dropbear_initramfs__deploy_state == \"present\")", "notify": ["Update initramfs"]}, "module_options": {"src": "etc/dropbear-initramfs/config.j2", "dest": "/etc/dropbear-initramfs/config", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dropbear_initramfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure to bring up additional interfaces/addresses in initramfs", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml", "options": {"name": "Configure to bring up additional interfaces/addresses in initramfs", "when": "(dropbear_initramfs__deploy_state == \"present\")", "notify": ["Update initramfs"]}, "module_options": {"src": "etc/initramfs-tools/scripts/local-top/debops_dropbear_initramfs.j2", "dest": "/etc/initramfs-tools/scripts/local-top/debops_dropbear_initramfs", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dropbear_initramfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure to bring down additional interfaces/addresses in initramfs", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml", "options": {"name": "Configure to bring down additional interfaces/addresses in initramfs", "when": "(dropbear_initramfs__deploy_state == \"present\")", "notify": ["Update initramfs"]}, "module_options": {"src": "etc/initramfs-tools/scripts/local-bottom/debops_dropbear_initramfs.j2", "dest": "/etc/initramfs-tools/scripts/local-bottom/debops_dropbear_initramfs", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dropbear_initramfs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure authorized ssh keys", "module": "ansible.posix.authorized_key", "index": 5, "defined_in": "testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml", "options": {"name": "Configure authorized ssh keys", "notify": ["Update initramfs"], "with_flattened": "{{ dropbear_initramfs__combined_authorized_keys }}"}, "module_options": {"key": "{{ (item.sshkeys if item.sshkeys is string else (item.sshkeys | unique | join('\n') | string)) if item.sshkeys|d() else '' }}", "user": "{{ item.user | d(\"root\") }}", "path": "{{ \"/etc/initramfs-tools/root/.ssh/authorized_keys\" if (\"dropbear\" in dropbear_initramfs__base_packages) else \"/etc/dropbear-initramfs/authorized_keys\" }}", "key_options": "{{ ((item.options if item.options is string else item.options|join(\",\")) if item.options is defined else ( (dropbear_initramfs__authorized_keys_options if dropbear_initramfs__authorized_keys_options is string else dropbear_initramfs__authorized_keys_options|join(\",\")) if dropbear_initramfs__authorized_keys_options != omit else \"\" ) ) + ( ((\",\" + item.key_options) if item.key_options is string else (\",\" + item.key_options|join(\",\"))) if item.key_options|d() else \"\" ) }}", "state": "{{ (item.state | d(\"present\")) if (dropbear_initramfs__deploy_state == \"present\") else \"absent\" }}", "exclusive": "{{ item.exclusive | d(omit) }}", "manage_dir": false}, "fqcn": "ansible.posix.authorized_key", "used_in": ["testdata/scm_repo/roles/dropbear_initramfs"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove files in deploy state absent", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml", "options": {"name": "Remove files in deploy state absent", "when": "(dropbear_initramfs__deploy_state == 'absent')", "notify": ["Update initramfs"], "with_items": ["/etc/initramfs-tools/conf.d/50_debops.dropbear_initramfs.conf", "/etc/initramfs-tools/scripts/local-top/debops_dropbear_initramfs", "/etc/initramfs-tools/scripts/local-bottom/debops_dropbear_initramfs"]}, "module_options": {"path": "{{ item }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dropbear_initramfs"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "mariadb_server", "defined_in": "testdata/scm_repo/roles/mariadb_server", "task_yamls": ["testdata/scm_repo/roles/mariadb_server/tasks/configure_server.yml", "testdata/scm_repo/roles/mariadb_server/tasks/secure_installation.yml", "testdata/scm_repo/roles/mariadb_server/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Configure database server", "module": "ansible.builtin.template", "index": 0, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/configure_server.yml", "options": {"name": "Configure database server"}, "module_options": {"src": "etc/mysql/conf.d/mysqld.cnf.j2", "dest": "{{ mariadb_server__mysqld_cnf_file }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup automysqlbackup configuration", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/configure_server.yml", "options": {"name": "Setup automysqlbackup configuration", "when": "mariadb_server__backup|d()"}, "module_options": {"src": "etc/default/automysqlbackup.j2", "dest": "/etc/default/automysqlbackup", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable events table backup in mysqldump", "module": "ini_file", "index": 2, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/configure_server.yml", "options": {"name": "Enable events table backup in mysqldump"}, "module_options": {"dest": "/etc/mysql/debian.cnf", "section": "mysqldump", "option": "events", "value": "true", "mode": "0600"}, "fqcn": "community.general.ini_file", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Delete anonymous database user", "module": "mysql_user", "index": 0, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/secure_installation.yml", "options": {"name": "Delete anonymous database user", "with_items": ["{{ ansible_hostname }}", "localhost"]}, "module_options": {"user": "", "host": "{{ item }}", "state": "absent"}, "fqcn": "community.mysql.mysql_user", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove test database on first install", "module": "mysql_db", "index": 1, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/secure_installation.yml", "options": {"name": "Remove test database on first install", "when": "((mariadb_server__register_version|d() and not mariadb_server__register_version.stdout) and (mariadb_server__register_install_status|d() and mariadb_server__register_install_status is changed))"}, "module_options": {"db": "test", "state": "absent"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if database server is installed", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Check if database server is installed", "environment": {"LC_MESSAGES": "C"}, "args": {"executable": "bash"}, "register": "mariadb_server__register_version", "check_mode": false, "changed_when": false, "failed_when": false}, "module_options": "set -o nounset -o pipefail -o errexit && dpkg-query -W -f='${Version}\\n' 'mariadb-server' 'mysql-server' 'percona-server-server' 'mysql-wsrep-server-5.6' | grep -v '^$'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install database server packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Install database server packages", "register": "mariadb_server__register_install_status", "until": "mariadb_server__register_install_status is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (mariadb_server__base_packages + mariadb_server__packages_map[mariadb_server__flavor] + mariadb_server__packages + ([ \"automysqlbackup\" ] if mariadb_server__backup|bool else []))) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Stop database server on first install", "module": "ansible.builtin.service", "index": 4, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Stop database server on first install", "when": "((mariadb_server__register_version|d() and not mariadb_server__register_version.stdout) and (mariadb_server__register_install_status|d() and mariadb_server__register_install_status is changed))"}, "module_options": {"name": "mysql", "state": "stopped"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add database server user to specified groups", "module": "ansible.builtin.user", "index": 5, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Add database server user to specified groups", "when": "mariadb_server__pki|bool"}, "module_options": {"name": "mysql", "groups": "{{ mariadb_server__append_groups | join(\",\") | default(omit) }}", "append": true, "createhome": false}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if MariaDB config directory exists", "module": "ansible.builtin.stat", "index": 6, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Check if MariaDB config directory exists", "register": "mariadb_server__register_confd"}, "module_options": {"path": "/etc/mysql/mariadb.conf.d"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure MariaDB data directory exists", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Ensure MariaDB data directory exists"}, "module_options": {"path": "{{ mariadb_server__datadir }}", "state": "directory", "owner": "mysql", "group": "mysql", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Move MariaDB data files to data directory", "module": "ansible.builtin.shell", "index": 8, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Move MariaDB data files to data directory", "when": "((mariadb_server__register_version|d() and not mariadb_server__register_version.stdout) and (mariadb_server__register_install_status|d() and mariadb_server__register_install_status is changed) and (mariadb_server__datadir != mariadb_server__default_datadir))"}, "module_options": "mv {{ mariadb_server__default_datadir }}/* {{ mariadb_server__datadir }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure database client on first install", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Configure database client on first install", "when": "(mariadb_server__register_version|d() and not mariadb_server__register_version.stdout)"}, "module_options": {"src": "etc/mysql/conf.d/client.cnf.j2", "dest": "{{ mariadb_server__client_cnf_file }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure database server", "module": "ansible.builtin.include_tasks", "index": 10, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Configure database server", "tags": ["role::mariadb_server:configure"]}, "module_options": "configure_server.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start database server on first install", "module": "ansible.builtin.service", "index": 11, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Start database server on first install", "when": "((mariadb_server__register_version|d() and not mariadb_server__register_version.stdout) and (mariadb_server__register_install_status|d() and mariadb_server__register_install_status is changed))"}, "module_options": {"name": "mysql", "state": "started"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Secure database server", "module": "ansible.builtin.include_tasks", "index": 12, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Secure database server", "tags": ["role::mariadb_server:secure"]}, "module_options": "secure_installation.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that local fact directory exists", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Make sure that local fact directory exists"}, "module_options": {"dest": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save MariaDB local facts", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Save MariaDB local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/mariadb.fact.j2", "dest": "/etc/ansible/facts.d/mariadb.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 15, "defined_in": "testdata/scm_repo/roles/mariadb_server/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/mariadb_server"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "apt_proxy", "defined_in": "testdata/scm_repo/roles/apt_proxy", "task_yamls": ["testdata/scm_repo/roles/apt_proxy/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Install requested system packages", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/apt_proxy/tasks/main.yml", "options": {"name": "Install requested system packages", "when": "apt_proxy__deploy_state == 'present' and apt_proxy__temporally_avoid_unreachable|bool", "register": "apt_proxy__register_packages", "until": "apt_proxy__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", apt_proxy__base_packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/apt_proxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy get-reachable-apt-proxy to remote host", "module": "ansible.builtin.copy", "index": 1, "defined_in": "testdata/scm_repo/roles/apt_proxy/tasks/main.yml", "options": {"name": "Copy get-reachable-apt-proxy to remote host", "when": "apt_proxy__deploy_state == 'present' and apt_proxy__temporally_avoid_unreachable|bool"}, "module_options": {"dest": "{{ apt_proxy__proxy_auto_detect }}", "src": "usr/local/lib/get-reachable-apt-proxy", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/apt_proxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove APT proxy configuration", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/apt_proxy/tasks/main.yml", "options": {"name": "Remove APT proxy configuration", "when": "apt_proxy__deploy_state == 'absent'"}, "module_options": {"path": "/etc/apt/apt.conf.d/{{ apt_proxy__filename }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt_proxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate APT proxy configuration", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/apt_proxy/tasks/main.yml", "options": {"name": "Generate APT proxy configuration", "when": "apt_proxy__deploy_state == 'present'"}, "module_options": {"src": "etc/apt/apt.conf.d/apt_proxy.conf.j2", "dest": "/etc/apt/apt.conf.d/{{ apt_proxy__filename }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt_proxy"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/bootstrap.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "libvirtd_qemu", "defined_in": "testdata/scm_repo/roles/libvirtd_qemu", "task_yamls": ["testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/libvirtd_qemu"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if host supports hardware virtualization", "module": "ansible.builtin.shell", "index": 1, "defined_in": "testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml", "options": {"name": "Check if host supports hardware virtualization", "args": {"executable": "bash"}, "register": "libvirtd_qemu__register_hw_virt", "check_mode": false, "changed_when": false}, "module_options": "set -o nounset -o pipefail -o errexit && egrep --color=auto 'vmx|svm|0xc0f' /proc/cpuinfo || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/libvirtd_qemu"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install libvirt if not already installed", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml", "options": {"name": "Install libvirt if not already installed", "register": "libvirtd_qemu__register_packages", "until": "libvirtd_qemu__register_packages is succeeded", "when": "(ansible_local is undefined or (ansible_local|d() and ansible_local.libvirtd is undefined or (ansible_local|d() and ansible_local.libvirtd|d() and (ansible_local.libvirtd.installed is undefined or not ansible_local.libvirtd.installed|bool))))"}, "module_options": {"name": "{{ q(\"flattened\", ((libvirtd_qemu__base_packages_map[ansible_distribution_release] if (ansible_distribution_release in libvirtd_qemu__base_packages_map.keys()) else libvirtd_qemu__base_packages) + (libvirtd_qemu__kvm_packages if libvirtd_qemu__kvm_support|bool else []) + libvirtd_qemu__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/libvirtd_qemu"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure required directories exist", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml", "options": {"name": "Make sure required directories exist"}, "module_options": {"path": "/etc/libvirt", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/libvirtd_qemu"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert managed configuration files", "module": "dpkg_divert", "index": 4, "defined_in": "testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml", "options": {"name": "Divert managed configuration files"}, "module_options": {"path": "/etc/libvirt/qemu.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/libvirtd_qemu"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate QEMU private configuration files", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml", "options": {"name": "Generate QEMU private configuration files", "with_items": ["etc/libvirt/qemu.conf"], "notify": ["Restart libvirtd", "Restart libvirt-bin"]}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/libvirtd_qemu"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "fhs", "defined_in": "testdata/scm_repo/roles/fhs", "task_yamls": ["testdata/scm_repo/roles/fhs/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/fhs/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/fhs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/fhs/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/fhs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create base directory hierarchy", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/fhs/tasks/main.yml", "options": {"name": "Create base directory hierarchy", "loop": "{{ fhs__combined_directories | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {item.name: (hostvars[inventory_hostname][\"ansible_local\"][\"fhs\"][item.name] | d(item.path))} }}"}, "when": "(fhs__enabled|bool and item.state|d('present') != 'absent' and (hostvars[inventory_hostname][\"ansible_local\"][\"fhs\"][item.name] | d(item.path)).startswith('/'))", "tags": ["meta::facts"]}, "module_options": {"path": "{{ hostvars[inventory_hostname][\"ansible_local\"][\"fhs\"][item.name] | d(item.path) }}", "state": "directory", "mode": "{{ item.mode | d(\"0755\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/fhs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save fhs local facts", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/fhs/tasks/main.yml", "options": {"name": "Save fhs local facts", "notify": ["Refresh host facts"], "when": "fhs__enabled|bool", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/fhs.fact.j2", "dest": "/etc/ansible/facts.d/fhs.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/fhs"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 4, "defined_in": "testdata/scm_repo/roles/fhs/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/fhs"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/bootstrap.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "ifupdown", "defined_in": "testdata/scm_repo/roles/ifupdown", "task_yamls": ["testdata/scm_repo/roles/ifupdown/tasks/ifup_systemd.yml", "testdata/scm_repo/roles/ifupdown/tasks/main_env.yml", "testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml", "testdata/scm_repo/roles/ifupdown/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Check systemd version", "module": "ansible.builtin.shell", "index": 0, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/ifup_systemd.yml", "options": {"name": "Check systemd version", "args": {"executable": "bash"}, "register": "ifupdown__register_systemd_version", "check_mode": false, "changed_when": false}, "module_options": "set -o nounset -o pipefail -o errexit && systemd --version | head -n 1 | awk '{print $2}'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom ifupdown services", "module": "ansible.builtin.template", "index": 1, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/ifup_systemd.yml", "options": {"name": "Install custom ifupdown services", "with_items": ["iface@.service", "ifup-wait-all-auto.service", "ifup-allow-boot.service"], "register": "ifupdown__register_systemd_services"}, "module_options": {"src": "etc/systemd/system/{{ item }}.j2", "dest": "/etc/systemd/system/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd services", "module": "ansible.builtin.systemd", "index": 2, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/ifup_systemd.yml", "options": {"name": "Reload systemd services", "when": "ifupdown__register_systemd_services is changed"}, "module_options": {"daemon_reload": true}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Test if Ansible is running in check mode", "module": "ansible.builtin.command", "index": 3, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/ifup_systemd.yml", "options": {"name": "Test if Ansible is running in check mode", "changed_when": false, "register": "ifupdown__register_check_mode"}, "module_options": "/bin/true", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable custom ifupdown services", "module": "ansible.builtin.service", "index": 4, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/ifup_systemd.yml", "options": {"name": "Enable custom ifupdown services", "with_items": ["ifup-wait-all-auto", "ifup-allow-boot"], "when": "ifupdown__register_check_mode is not skipped"}, "module_options": {"name": "{{ item }}", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare configuration of dependent Ansible roles", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main_env.yml", "options": {"name": "Prepare configuration of dependent Ansible roles"}, "module_options": {"ifupdown__env_ferm__dependent_rules": "{{ ifupdown__ferm__dependent_rules }}", "ifupdown__env_kmod__dependent_load": "{{ ifupdown__kmod__dependent_load }}", "ifupdown__env_sysctl__dependent_parameters": "{{ ifupdown__sysctl__dependent_parameters }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original /etc/network/interfaces", "module": "dpkg_divert", "index": 0, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml", "options": {"name": "Divert original /etc/network/interfaces", "register": "ifupdown__register_divert"}, "module_options": {"path": "/etc/network/interfaces"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Provide original interface configuration temporarily", "module": "ansible.builtin.copy", "index": 1, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml", "options": {"name": "Provide original interface configuration temporarily", "when": "ifupdown__register_divert is changed and not ansible_check_mode|bool"}, "module_options": {"src": "/etc/network/interfaces.dpkg-divert", "dest": "{{ ifupdown__reconfigure_init_file }}", "remote_src": true, "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove redundant configuration", "module": "ansible.builtin.lineinfile", "index": 2, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml", "options": {"name": "Remove redundant configuration", "with_items": ["^source /etc/network/interfaces.d/*", "^auto lo", "^iface lo inet loopback"], "when": "ifupdown__register_divert is changed"}, "module_options": {"dest": "{{ ifupdown__reconfigure_init_file }}", "regexp": "{{ item }}", "state": "absent"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create /etc/network/interfaces", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml", "options": {"name": "Create /etc/network/interfaces", "register": "ifupdown__register_main_config"}, "module_options": {"src": "etc/network/interfaces.j2", "dest": "/etc/network/interfaces", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that runtime directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml", "options": {"name": "Ensure that runtime directory exists", "when": "(ifupdown__register_divert is changed or ifupdown__register_main_config is changed)"}, "module_options": {"path": "/run/network", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Request entire network reconfiguration", "module": "ansible.builtin.copy", "index": 5, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml", "options": {"name": "Request entire network reconfiguration", "notify": ["Apply ifupdown configuration"], "when": "(ifupdown__register_divert is changed or ifupdown__register_main_config is changed)"}, "module_options": {"content": "init", "dest": "/run/network/debops-ifupdown-reconfigure.networking", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save ifupdown local facts", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Save ifupdown local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/ifupdown.fact.j2", "dest": "/etc/ansible/facts.d/ifupdown.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they have been modified", "module": "ansible.builtin.meta", "index": 3, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Update Ansible facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Install required packages", "register": "ifupdown__register_packages", "until": "ifupdown__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (ifupdown__base_packages + ifupdown__dynamic_packages + ifupdown__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Purge conflicting packages", "module": "ansible.builtin.apt", "index": 5, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Purge conflicting packages"}, "module_options": {"name": "{{ q(\"flattened\", ifupdown__purge_packages) }}", "state": "absent", "purge": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create custom ifupdown systemd services", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Create custom ifupdown systemd services", "when": "ansible_service_mgr == 'systemd'"}, "module_options": "ifup_systemd.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reset network configuration on role upgrade", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Reset network configuration on role upgrade", "when": "(ansible_local|d() and ansible_local.debops_fact|d() and ansible_local.debops_fact.enabled|bool and (ansible_local.debops_fact.version is undefined or (ansible_local.debops_fact.version.ifupdown|d(\"0.0.0\") is version_compare(\"0.3.0\",\"<\"))))"}, "module_options": {"path": "/etc/network/interfaces.config.d", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create configuration directories", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Create configuration directories", "with_items": ["/etc/network/interfaces.d", "/etc/network/interfaces.config.d"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Preserve original network configuration", "module": "ansible.builtin.include_tasks", "index": 9, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Preserve original network configuration"}, "module_options": "divert_interfaces.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove network interface configuration", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Remove network interface configuration", "with_dict": "{{ ifupdown__combined_interfaces }}", "register": "ifupdown__register_interfaces_removed", "when": "item.value.state|d('present') == 'absent'"}, "module_options": {"dest": "/etc/network/interfaces.config.d/{{ \"%03d\" | format((ifupdown__interface_weight_map[item.value.weight_class | d(item.value.type | d(\"default\"))] | d(\"90\"))|int + (item.value.weight | d(\"0\"))|int) }}_iface_{{ item.value.iface | d(item.key) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate network interface configuration", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Generate network interface configuration", "with_dict": "{{ ifupdown__combined_interfaces }}", "register": "ifupdown__register_interfaces_created", "when": "item.value.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"src": "etc/network/interfaces.d/iface.j2", "dest": "/etc/network/interfaces.config.d/{{ \"%03d\" | format((ifupdown__interface_weight_map[item.value.weight_class | d(item.value.type | d(\"default\"))] | d(\"90\"))|int + (item.value.weight | d(\"0\"))|int) }}_iface_{{ item.value.iface | d(item.key) }}", "owner": "root", "group": "root", "mode": "{{ item.value.mode | d(\"0644\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove unknown interface configuration", "module": "ansible.builtin.shell", "index": 12, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Remove unknown interface configuration", "with_items": ["{{ ifupdown__register_interfaces_removed.results }}", "{{ ifupdown__register_interfaces_created.results }}"], "when": "(item.item.key|d() and item is changed)"}, "module_options": "find /etc/network/interfaces.config.d -maxdepth 1 -type f -name '*_iface_{{ item.item.value.iface | d(item.item.key) }}' ! -name '{{ \"%03d\" | format((ifupdown__interface_weight_map[item.item.value.weight_class | d(item.item.value.type | d(\"default\"))] | d(\"90\"))|int + (item.item.value.weight | d(\"0\"))|int) }}_iface_{{ item.item.value.iface | d(item.item.key) }}' -exec rm -vf {} +", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Mark modified interfaces for processing", "module": "ansible.builtin.copy", "index": 13, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Mark modified interfaces for processing", "with_items": ["{{ ifupdown__register_interfaces_removed.results }}", "{{ ifupdown__register_interfaces_created.results }}"], "notify": ["Apply ifupdown configuration"], "when": "(item.item.key|d() and item is changed)"}, "module_options": {"content": "{{ (\"created\"\n    if ((item.item.key|replace(':','_')|replace('.','_')) not in ansible_interfaces and\n        (item.diff is undefined or\n         (item.diff|d() and item.diff.after|d() and\n          item.diff.after_header|d() and\n          item.diff.after_header == \"dynamically generated\")))\n    else (\"removed\"\n          if (item.diff|d() and item.diff.after|d() and\n              item.diff.after.state|d() and\n              item.diff.after.state == \"absent\")\n          else \"changed\")) }}\n", "dest": "{{ \"/run/network/debops-ifupdown-reconfigure,\" + (\"%03d\" | format(((ifupdown__interface_weight_map[item.item.value.weight_class | d(item.item.value.type | d(\"default\"))] | d(ifupdown__interface_weight_map[\"default\"] | d(\"90\")))|int + (item.item.value.weight | d(\"0\"))|int)))|string + \",\" + (item.item.value.iface | d(item.item.key)) }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove custom configuration files", "module": "ansible.builtin.file", "index": 14, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Remove custom configuration files", "with_flattened": ["{{ ifupdown__custom_files }}", "{{ ifupdown__custom_group_files }}", "{{ ifupdown__custom_host_files }}", "{{ ifupdown__custom_dependent_files }}"], "when": "((item.dest|d() or item.path|d()) and item.state|d('present') == 'absent')"}, "module_options": {"path": "{{ item.dest | d(item.path) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate custom configuration files", "module": "ansible.builtin.copy", "index": 15, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Generate custom configuration files", "with_flattened": ["{{ ifupdown__custom_files }}", "{{ ifupdown__custom_group_files }}", "{{ ifupdown__custom_host_files }}", "{{ ifupdown__custom_dependent_files }}"], "when": "((item.dest|d() or item.path|d()) and (item.src|d() or item.content|d()) and item.state|d('present') != 'absent')"}, "module_options": {"dest": "{{ item.dest    | d(item.path) }}", "src": "{{ item.src     | d(omit) }}", "content": "{{ item.content | d(omit) }}", "owner": "{{ item.owner   | d(\"root\") }}", "group": "{{ item.group   | d(\"root\") }}", "mode": "{{ item.mode    | d(\"0644\") }}", "force": "{{ item.force   | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove custom ifupdown hooks", "module": "ansible.builtin.file", "index": 16, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Remove custom ifupdown hooks", "with_flattened": ["{{ ifupdown__custom_hooks }}"], "when": "item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ item.dest | d(\"/\" + item.hook) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install custom ifupdown hooks", "module": "ansible.builtin.template", "index": 17, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Install custom ifupdown hooks", "with_flattened": ["{{ ifupdown__custom_hooks }}"], "when": "item.name|d() and item.state|d('present') != 'absent'"}, "module_options": {"src": "{{ item.src  | d(item.hook + \".j2\") }}", "dest": "{{ item.dest | d(\"/\" + item.hook) }}", "owner": "root", "group": "root", "mode": "{{ item.mode | d(\"0755\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install reconfiguration script if needed", "module": "ansible.builtin.copy", "index": 18, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Install reconfiguration script if needed", "when": "not ifupdown__reconfigure_auto | bool"}, "module_options": {"src": "script/ifupdown-reconfigure-interfaces", "dest": "{{ ifupdown__reconfigure_script_path }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save role version information", "module": "ini_file", "index": 19, "defined_in": "testdata/scm_repo/roles/ifupdown/tasks/main.yml", "options": {"name": "Save role version information", "when": "ansible_local|d() and ansible_local.debops_fact|d() and ansible_local.debops_fact.enabled|bool"}, "module_options": {"dest": "{{ ansible_local.debops_fact.public_facts|d(\"/etc/ansible/debops_fact.ini\") }}", "section": "version", "option": "ifupdown", "value": "{{ ifupdown__role_metadata.version }}", "mode": "0644"}, "fqcn": "community.general.ini_file", "used_in": ["testdata/scm_repo/roles/ifupdown"], "annotations": {"use-non-builtin-module": true}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "root_account", "defined_in": "testdata/scm_repo/roles/root_account", "task_yamls": ["testdata/scm_repo/roles/root_account/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that required packages are installed", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Ensure that required packages are installed", "register": "root_account__register_packages", "until": "root_account__register_packages is succeeded", "when": "root_account__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", (root_account__base_packages + root_account__shell_packages + root_account__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check available SSH key types", "module": "ansible.builtin.shell", "index": 3, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Check available SSH key types", "register": "root_account__register_key_types", "changed_when": false, "check_mode": false, "tags": ["meta::facts"]}, "module_options": "ssh -Q key 2>/dev/null || echo \"ssh-rsa\"", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if preferred shell exists", "module": "ansible.builtin.stat", "index": 4, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Check if preferred shell exists", "register": "root_account__register_shell", "when": "root_account__enabled|bool and root_account__shell|d(False)"}, "module_options": "path=\"{{ root_account__shell }}\"", "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Fail if setting a shell that does not exist", "module": "ansible.builtin.fail", "index": 5, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Fail if setting a shell that does not exist", "when": "root_account__enabled|bool and root_account__shell|d(False) and not root_account__register_shell.stat.exists and not ansible_check_mode"}, "module_options": {"msg": "Trying to set a shell that does not exist, this can lock you out!"}, "fqcn": "ansible.builtin.fail", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enforce root system group", "module": "ansible.builtin.group", "index": 6, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Enforce root system group", "when": "root_account__enabled|bool"}, "module_options": {"name": "root", "gid": "0", "system": true, "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enforce root system account", "module": "ansible.builtin.user", "index": 7, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Enforce root system account", "when": "root_account__enabled|bool", "no_log": "{{ (debops__no_log | d(True)) if root_account__password else False }}"}, "module_options": {"name": "root", "state": "present", "home": "/root", "uid": "0", "groups": "", "append": false, "system": true, "group": "{{ root_account__group }}", "generate_ssh_key": "{{ root_account__generate_ssh_key | bool }}", "ssh_key_bits": "{{ root_account__ssh_key_bits }}", "ssh_key_type": "{{ root_account__ssh_key_type }}", "ssh_key_file": "{{ root_account__ssh_key_file }}", "ssh_key_comment": "{{ root_account__ssh_key_comment }}", "update_password": "{{ \"always\" if root_account__password_update | bool else \"on_create\" }}", "password": "{{ root_account__password if root_account__password else omit }}", "shell": "{{ root_account__shell if root_account__shell else omit }}"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enforce root home permissions", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Enforce root home permissions", "when": "root_account__enabled|bool"}, "module_options": {"path": "/root", "state": "directory", "owner": "root", "group": "root", "mode": "0700"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure authorized SSH keys for root account", "module": "ansible.posix.authorized_key", "index": 9, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Configure authorized SSH keys for root account", "when": "root_account__enabled|bool and root_account__combined_authorized_keys|d() and root_account__authorized_keys_state != 'absent'"}, "module_options": {"key": "{{ q('flattened', root_account__combined_authorized_keys) | join('\n') }}", "exclusive": "{{ root_account__authorized_keys_exclusive|bool }}", "state": "present", "user": "root"}, "fqcn": "ansible.posix.authorized_key", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove /root/.ssh/authorized_keys file if requested", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Remove /root/.ssh/authorized_keys file if requested", "when": "root_account__enabled|bool and root_account__authorized_keys_state == 'absent'"}, "module_options": {"path": "/root/.ssh/authorized_keys", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check subuid presence for root account", "module": "ansible.builtin.shell", "index": 11, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Check subuid presence for root account", "register": "root_account__register_subuid", "check_mode": false, "changed_when": false, "when": "root_account__enabled|bool and root_account__subuid_enabled|bool"}, "module_options": "grep -E '^root:' /etc/subuid || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add subuids and subgids for root account", "module": "ansible.builtin.command", "index": 12, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Add subuids and subgids for root account", "with_items": "{{ root_account__subuid_start }}", "when": "root_account__enabled|bool and root_account__subuid_enabled|bool and not root_account__register_subuid.stdout|d()"}, "module_options": "usermod --add-subuids {{ (item|string + \"-\" + (item|int + root_account__subuid_count|int)|string) }} --add-subgids {{ (item|string + \"-\" + (item|int + root_account__subuid_count|int)|string) }} root", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage root dotfiles", "module": "ansible.builtin.shell", "index": 13, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Manage root dotfiles", "environment": {"LC_MESSAGES": "C"}, "register": "root_account__register_dotfiles", "changed_when": "('Already up to date.' not in root_account__register_dotfiles.stdout_lines|regex_replace('-', ' '))", "when": "((ansible_local|d() and ansible_local.yadm|d() and (ansible_local.yadm.installed|d())|bool) and root_account__dotfiles_enabled|bool)", "check_mode": false}, "module_options": "if ! yadm status > /dev/null ; then\n    yadm clone --bootstrap \"{{ root_account__dotfiles_repo }}\"\nelse\n    yadm pull\nfi\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 14, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup root account local facts", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Setup root account local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/root_account.fact.j2", "dest": "/etc/ansible/facts.d/root_account.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 16, "defined_in": "testdata/scm_repo/roles/root_account/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/root_account"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "postfix", "defined_in": "testdata/scm_repo/roles/postfix", "task_yamls": ["testdata/scm_repo/roles/postfix/tasks/main_env.yml", "testdata/scm_repo/roles/postfix/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Load persistent Postfix configuration", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main_env.yml", "options": {"name": "Load persistent Postfix configuration"}, "module_options": {"postfix__env_persistent_maincf": "{{ lookup(\"template\", \"lookup/postfix__env_persistent_maincf.j2\")   | from_yaml }}", "postfix__env_persistent_mastercf": "{{ lookup(\"template\", \"lookup/postfix__env_persistent_mastercf.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare Postfix environment", "module": "ansible.builtin.set_fact", "index": 1, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main_env.yml", "options": {"name": "Prepare Postfix environment"}, "module_options": {"postfix__env_active_services": "{{ lookup(\"template\", \"lookup/postfix__env_active_services.j2\") | from_yaml }}", "postfix__secret__directories": "{{ lookup(\"template\", \"lookup/postfix__secret__directories.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Postfix APT packages", "module": "ansible.builtin.apt", "index": 3, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Install Postfix APT packages", "register": "postfix__register_packages", "until": "postfix__register_packages is succeeded", "when": "ansible_pkg_mgr == 'apt'", "tags": ["meta::provision"]}, "module_options": {"name": "{{ (postfix__base_packages + postfix__dependent_packages + postfix__packages) | flatten }}", "state": "present", "install_recommends": false}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Purge other SMTP servers", "module": "ansible.builtin.apt", "index": 4, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Purge other SMTP servers", "when": "postfix__purge_packages|d() and ansible_pkg_mgr == 'apt'", "tags": ["meta::provision"]}, "module_options": {"name": "{{ postfix__purge_packages | flatten }}", "state": "absent", "purge": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable Postfix configuration in debconf", "module": "ansible.builtin.debconf", "index": 5, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Disable Postfix configuration in debconf", "when": "ansible_pkg_mgr == 'apt'"}, "module_options": {"name": "postfix", "question": "postfix/main_mailer_type", "vtype": "select", "value": "No configuration"}, "fqcn": "ansible.builtin.debconf", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Make sure Ansible local facts directory exists"}, "module_options": {"dest": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Postfix local facts", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Configure Postfix local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/postfix.fact.j2", "dest": "/etc/ansible/facts.d/postfix.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 8, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure /etc/mailname", "module": "ansible.builtin.copy", "index": 9, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Configure /etc/mailname", "notify": ["Check postfix and reload"]}, "module_options": {"content": "{{ postfix__mailname + '\n' }}", "dest": "/etc/mailname", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install /etc/postfix/Makefile", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Install /etc/postfix/Makefile"}, "module_options": {"src": "etc/postfix/Makefile.j2", "dest": "/etc/postfix/Makefile", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Postfix 'main.cf' configuration", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Generate Postfix 'main.cf' configuration", "notify": ["Check postfix and reload"]}, "module_options": {"src": "etc/postfix/main.cf.j2", "dest": "/etc/postfix/main.cf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Postfix 'master.cf' configuration", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Generate Postfix 'master.cf' configuration", "notify": ["Check postfix and reload"]}, "module_options": {"src": "etc/postfix/master.cf.j2", "dest": "/etc/postfix/master.cf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Postfix lookup tables", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Remove Postfix lookup tables", "with_flattened": ["{{ postfix__combined_lookup_tables | debops.debops.parse_kv_items }}"], "when": "item.name|d() and item.state|d('present') == 'absent'", "notify": ["Process Postfix Makefile", "Check postfix and reload"], "no_log": "{{ debops__no_log | d(item.no_log) | d(True if (item.mode|d(\"0644\") == \"0600\") else False) }}"}, "module_options": {"path": "/etc/postfix/{{ item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Postfix lookup tables", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Generate Postfix lookup tables", "with_flattened": ["{{ postfix__combined_lookup_tables | debops.debops.parse_kv_items }}"], "notify": ["Process Postfix Makefile", "Check postfix and reload"], "when": "item.name|d() and item.state|d('present') != 'absent'", "no_log": "{{ debops__no_log | d(item.no_log) | d(True if (item.mode|d(\"0640\") in [\"0640\",\"0600\"]) else False) }}"}, "module_options": {"src": "etc/postfix/lookup_table.j2", "dest": "/etc/postfix/{{ item.name }}", "owner": "{{ item.owner | d(\"root\") }}", "group": "{{ item.group | d(\"postfix\") }}", "mode": "{{ item.mode  | d(\"0640\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save dependent configuration on Ansible Controller", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Save dependent configuration on Ansible Controller", "become": false, "delegate_to": "localhost", "with_items": ["maincf.json", "mastercf.json"]}, "module_options": {"src": "{{ \"secret/postfix/dependent_config/inventory_hostname/\" + item + \".j2\" }}", "dest": "{{ secret + \"/postfix/dependent_config/\" + inventory_hostname + \"/\" + item }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that PKI hook directory exists", "module": "ansible.builtin.file", "index": 16, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Make sure that PKI hook directory exists", "when": "postfix__pki|bool"}, "module_options": {"path": "{{ postfix__pki_hook_path }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage PKI postfix hook", "module": "ansible.builtin.template", "index": 17, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Manage PKI postfix hook", "when": "postfix__pki|bool"}, "module_options": {"src": "etc/pki/hooks/postfix.j2", "dest": "{{ postfix__pki_hook_path + \"/\" + postfix__pki_hook_name }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the PKI postfix hook is absent", "module": "ansible.builtin.file", "index": 18, "defined_in": "testdata/scm_repo/roles/postfix/tasks/main.yml", "options": {"name": "Ensure the PKI postfix hook is absent", "when": "not (postfix__pki|bool)"}, "module_options": {"path": "{{ postfix__pki_hook_path + \"/\" + postfix__pki_hook_name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postfix"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "volkszaehler", "defined_in": "testdata/scm_repo/roles/volkszaehler", "task_yamls": ["testdata/scm_repo/roles/volkszaehler/tasks/main_env.yml", "testdata/scm_repo/roles/volkszaehler/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Ensure the parent directory for volkszaehler home exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main_env.yml", "options": {"name": "Ensure the parent directory for volkszaehler home exists", "when": "(volkszaehler__deploy_state == \"present\")"}, "module_options": {"path": "{{ volkszaehler__home_path|dirname }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure specified packages are in there desired state", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Ensure specified packages are in there desired state", "register": "volkszaehler__register_packages", "until": "volkszaehler__register_packages is succeeded", "tags": ["role::volkszaehler:pkgs"]}, "module_options": {"name": "{{ q(\"flattened\", (volkszaehler__base_packages + volkszaehler__optional_packages + volkszaehler__packages)) }}", "state": "{{ \"present\" if (volkszaehler__deploy_state in [\"present\"]) else \"absent\" }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create volkszaehler system group", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Create volkszaehler system group"}, "module_options": {"name": "{{ volkszaehler__group }}", "state": "{{ \"present\" if (volkszaehler__deploy_state == \"present\") else \"absent\" }}", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create volkszaehler system user", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Create volkszaehler system user"}, "module_options": {"name": "{{ volkszaehler__user }}", "group": "{{ volkszaehler__group }}", "home": "{{ volkszaehler__home_path }}", "comment": "{{ volkszaehler__gecos }}", "shell": "{{ volkszaehler__shell }}", "state": "{{ \"present\" if (volkszaehler__deploy_state == \"present\") else \"absent\" }}", "system": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable required Apache modules", "module": "community.general.apache2_module", "index": 5, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Enable required Apache modules", "when": "(volkszaehler__webserver == \"apache\")", "with_dict": "{{ volkszaehler__apache_modules }}"}, "module_options": {"name": "{{ item.key }}", "state": "{{ item.value.state|d(\"present\") }}"}, "fqcn": "community.general.apache2_module", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Clone volkszaehler git repository", "module": "ansible.builtin.git", "index": 6, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Clone volkszaehler git repository", "become": true, "become_user": "{{ volkszaehler__user }}", "register": "volkszaehler__register_git", "when": "(volkszaehler__deploy_state == \"present\")"}, "module_options": {"repo": "{{ volkszaehler__git_repo }}", "dest": "{{ volkszaehler__git_dest }}", "version": "{{ volkszaehler__git_version }}", "recursive": "{{ volkszaehler__git_recursive|bool }}", "update": "{{ volkszaehler__git_update|bool }}"}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install volkszaehler config file", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Install volkszaehler config file", "when": "(volkszaehler__deploy_state == \"present\")"}, "module_options": {"src": "etc/volkszaehler.conf.php.j2", "dest": "{{ volkszaehler__git_dest }}/etc/volkszaehler.conf.php", "owner": "{{ volkszaehler__config_user }}", "group": "{{ volkszaehler__config_group }}", "mode": "0640", "validate": "php -f %s"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install PHP dependencies with composer", "module": "community.general.composer", "index": 8, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Install PHP dependencies with composer", "environment": {"PATH": "{{ ansible_env.PATH }}:/usr/local/bin"}, "register": "volkszaehler__register_composer", "until": "volkszaehler__register_composer is succeeded", "become": true, "become_user": "{{ volkszaehler__user }}", "when": "volkszaehler__register_git is changed"}, "module_options": {"command": "require", "working_dir": "{{ volkszaehler__git_dest }}"}, "fqcn": "community.general.composer", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Write database initialization SQL dump", "module": "ansible.builtin.shell", "index": 9, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Write database initialization SQL dump", "become": true, "become_user": "{{ volkszaehler__user }}", "register": "volkszaehler__register_sql_init_dump", "when": "(not (ansible_local.volkszaehler[volkszaehler__database + \"_initialized\"]|bool if (ansible_local|d() and ansible_local.volkszaehler|d() and ansible_local.volkszaehler[volkszaehler__database + \"_initialized\"]|d()) else False))"}, "module_options": "php {{ (volkszaehler__git_dest + \"/misc/tools/doctrine\")|quote }} \\ orm:schema-tool:create --dump-sql > {{ (volkszaehler__home_path + \"/create_db.sql\")|quote }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import database initialization SQL dump", "module": "community.mysql.mysql_db", "index": 10, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Import database initialization SQL dump", "when": "(volkszaehler__register_sql_init_dump is changed and volkszaehler__database in ['mariadb'])"}, "module_options": {"name": "{{ volkszaehler__database_name }}", "target": "{{ (volkszaehler__home_path + \"/create_db.sql\")|quote }}", "state": "import"}, "fqcn": "community.mysql.mysql_db", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Insert demo data into database", "module": "ansible.builtin.shell", "index": 11, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Insert demo data into database", "args": {"executable": "bash"}, "become": true, "become_user": "{{ volkszaehler__user }}", "when": "(not (ansible_local.volkszaehler[volkszaehler__database + \"_demo_insert\"]|bool if (ansible_local|d() and ansible_local.volkszaehler|d() and ansible_local.volkszaehler[volkszaehler__database + \"_demo_insert\"]|d()) else False)) and (volkszaehler__database_demo_insert|bool)"}, "module_options": "set -o nounset -o pipefail -o errexit && cat {{ (volkszaehler__git_dest + \"/misc/sql/demo.sql\")|quote }} | mysql {{ volkszaehler__database_name }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate proxy classes", "module": "ansible.builtin.command", "index": 12, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Generate proxy classes", "become": true, "become_user": "{{ volkszaehler__user }}", "changed_when": false, "when": "(volkszaehler__deploy_state == \"present\")"}, "module_options": "php {{ (volkszaehler__git_dest + \"/misc/tools/doctrine\")|quote }} orm:generate-proxies", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory is present", "module": "ansible.builtin.file", "index": 13, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory is present", "when": "(volkszaehler__deploy_state == \"present\")"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save volkszaehler local facts", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Save volkszaehler local facts", "notify": ["Refresh host facts"], "when": "(volkszaehler__deploy_state == \"present\")", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/volkszaehler.fact.j2", "dest": "/etc/ansible/facts.d/volkszaehler.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather facts if they were modified", "module": "ansible.builtin.meta", "index": 15, "defined_in": "testdata/scm_repo/roles/volkszaehler/tasks/main.yml", "options": {"name": "Gather facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/volkszaehler"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "secret", "defined_in": "testdata/scm_repo/roles/secret", "task_yamls": ["testdata/scm_repo/roles/secret/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Create secret directories on Ansible Controller", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/secret/tasks/main.yml", "options": {"name": "Create secret directories on Ansible Controller", "become": false, "delegate_to": "localhost", "loop": "{{ [secret__directories, secret_directories | d([])] | flatten }}", "when": "(secret__directories or secret_directories|d()) and item", "changed_when": false}, "module_options": {"path": "{{ secret + \"/\" + item }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/secret"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml", "testdata/scm_repo/playbooks/service/minio.yml", "testdata/scm_repo/playbooks/service/redis_server.yml"]}, {"py/object": "struct4.Role", "name": "mcli", "defined_in": "testdata/scm_repo/roles/mcli", "task_yamls": ["testdata/scm_repo/roles/mcli/tasks/main_env.yml", "testdata/scm_repo/roles/mcli/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare mcli environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/mcli/tasks/main_env.yml", "options": {"name": "Prepare mcli environment"}, "module_options": {"mcli__env_upstream_url_release": "{{ ansible_local.mcli.release_tag if (ansible_local.mcli.release_tag|d() and ansible_local.mcli.release_tag.startswith(\"RELEASE.\") and not mcli__upstream_upgrade|bool) else (lookup(\"url\", (mcli__upstream_url_mirror + mcli__upstream_platform + \"/mc.sha256sum\")) | regex_search(\"mc\\.RELEASE\\..+$\") | regex_replace(\"^mc\\.\",\"\")) }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/mcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/mcli/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/mcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/mcli/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/mcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save MinIO Client local facts", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/mcli/tasks/main.yml", "options": {"name": "Save MinIO Client local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/mcli.fact.j2", "dest": "/etc/ansible/facts.d/mcli.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/mcli"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 3, "defined_in": "testdata/scm_repo/roles/mcli/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/mcli"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "keepalived", "defined_in": "testdata/scm_repo/roles/keepalived", "task_yamls": ["testdata/scm_repo/roles/keepalived/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/keepalived/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/keepalived"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/keepalived/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/keepalived"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/keepalived/tasks/main.yml", "options": {"name": "Install required packages", "register": "keepalived__register_packages", "until": "keepalived__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (keepalived__base_packages + keepalived__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/keepalived"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/keepalived/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/keepalived"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save keepalived local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/keepalived/tasks/main.yml", "options": {"name": "Save keepalived local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/keepalived.fact.j2", "dest": "/etc/ansible/facts.d/keepalived.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/keepalived"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/keepalived/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/keepalived"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove custom scripts from remote hosts if requested", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/keepalived/tasks/main.yml", "options": {"name": "Remove custom scripts from remote hosts if requested", "loop": "{{ q(\"flattened\", keepalived__scripts + keepalived__group_scripts + keepalived__host_scripts) }}", "when": "item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ \"/etc/keepalived/\" + (item.dest | d(item.name)) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/keepalived"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy custom scripts to remote hosts", "module": "ansible.builtin.copy", "index": 7, "defined_in": "testdata/scm_repo/roles/keepalived/tasks/main.yml", "options": {"name": "Copy custom scripts to remote hosts", "loop": "{{ q(\"flattened\", keepalived__scripts + keepalived__group_scripts + keepalived__host_scripts) }}", "when": "item.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"src": "{{ item.src | d(omit) }}", "dest": "{{ \"/etc/keepalived/\" + (item.dest | d(item.name)) }}", "content": "{{ item.content | d(omit) }}", "owner": "{{ item.owner | d(\"root\") }}", "group": "{{ item.group | d(\"root\") }}", "mode": "{{ item.mode | d(\"0755\") }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/keepalived"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate keepalive configuration file", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/keepalived/tasks/main.yml", "options": {"name": "Generate keepalive configuration file", "notify": ["Check keepalived configuration and reload"]}, "module_options": {"src": "etc/keepalived/keepalived.conf.j2", "dest": "/etc/keepalived/keepalived.conf", "mode": "0640"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/keepalived"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "influxdb_server", "defined_in": "testdata/scm_repo/roles/influxdb_server", "task_yamls": ["testdata/scm_repo/roles/influxdb_server/tasks/autoinfluxdbbackup.yml", "testdata/scm_repo/roles/influxdb_server/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Copy autoinfluxdbbackup script", "module": "ansible.builtin.copy", "index": 0, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/autoinfluxdbbackup.yml", "options": {"name": "Copy autoinfluxdbbackup script"}, "module_options": {"src": "usr/sbin/autoinfluxdbbackup", "dest": "/usr/sbin/autoinfluxdbbackup", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the autoinfluxdbbackup directory exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/autoinfluxdbbackup.yml", "options": {"name": "Ensure that the autoinfluxdbbackup directory exists"}, "module_options": {"path": "/etc/autoinfluxdbbackup/", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure autoinfluxdbbackup", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/autoinfluxdbbackup.yml", "options": {"name": "Configure autoinfluxdbbackup", "with_items": [{"template": "etc/cron.daily/autoinfluxdbbackup", "mode": "0755"}, {"template": "etc/default/autoinfluxdbbackup", "mode": "0644"}]}, "module_options": {"src": "{{ item.template }}.j2", "dest": "/{{ item.template }}", "owner": "root", "group": "root", "mode": "{{ item.mode }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart database server on first install (influx bug)", "module": "ansible.builtin.service", "index": 3, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Restart database server on first install (influx bug)", "when": "not (ansible_local.influxdb_server.installed|d(false)|bool)"}, "module_options": {"name": "influxdb", "state": "restarted"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Wait for HTTP endpoint port to become open on the host on first install", "module": "ansible.builtin.wait_for", "index": 4, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Wait for HTTP endpoint port to become open on the host on first install", "when": "not (ansible_local.influxdb_server.installed|d(false)|bool)"}, "module_options": {"port": "{{ influxdb_server__port }}"}, "fqcn": "ansible.builtin.wait_for", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create default admin user on first install", "module": "influxdb_user", "index": 5, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Create default admin user on first install", "when": "not (ansible_local.influxdb_server.installed|d(false)|bool)", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"user_name": "root", "user_password": "{{ influxdb_server__root_password }}", "state": "present", "admin": "yes", "proxies": {"http": null, "https": null}}, "fqcn": "community.general.influxdb_user", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Stop database server on first install", "module": "ansible.builtin.service", "index": 6, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Stop database server on first install", "when": "not (ansible_local.influxdb_server.installed|d(false)|bool)"}, "module_options": {"name": "influxdb", "state": "stopped"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add InfluxDB server user to specified groups", "module": "ansible.builtin.user", "index": 7, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Add InfluxDB server user to specified groups", "when": "influxdb_server__pki|bool"}, "module_options": {"name": "influxdb", "groups": "{{ influxdb_server__append_groups | join(\",\") | default(omit) }}", "append": true, "createhome": false}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure InfluxDB server directory exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Ensure InfluxDB server directory exists"}, "module_options": {"path": "{{ influxdb_server__directory }}", "state": "directory", "owner": "influxdb", "group": "influxdb", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Move InfluxDB data files to data directory", "module": "ansible.builtin.shell", "index": 9, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Move InfluxDB data files to data directory", "when": "(not (ansible_local.influxdb_server.installed|d(false)|bool) and influxdb_server__directory != influxdb_server__default_directory)"}, "module_options": "mv {{ influxdb_server__default_directory }}/* {{ influxdb_server__directory }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the original influxdb configuration file", "module": "dpkg_divert", "index": 10, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Divert the original influxdb configuration file", "tags": ["role::influxdb_server:config"]}, "module_options": {"path": "/etc/influxdb/influxdb.conf", "state": "present", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure InfluxDB server", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Configure InfluxDB server", "tags": ["role::influxdb_server:config"], "notify": ["Restart influxdb"]}, "module_options": {"src": "etc/influxdb/influxdb.conf.j2", "dest": "/etc/influxdb/influxdb.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start database server on first install", "module": "ansible.builtin.service", "index": 12, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Start database server on first install", "when": "not (ansible_local.influxdb_server.installed|d(false)|bool)"}, "module_options": {"name": "influxdb", "state": "started"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure autoinfluxdbbackup", "module": "ansible.builtin.include_tasks", "index": 13, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Configure autoinfluxdbbackup", "when": "influxdb_server__backup|bool", "tags": ["role::influxdb_server:autoinfluxdbbackup"]}, "module_options": "autoinfluxdbbackup.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 14, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save InfluxDB server local facts", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Save InfluxDB server local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/influxdb_server.fact.j2", "dest": "/etc/ansible/facts.d/influxdb_server.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save InfluxDB local facts", "module": "ansible.builtin.template", "index": 16, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Save InfluxDB local facts", "notify": ["Refresh host facts"]}, "module_options": {"src": "etc/ansible/facts.d/influxdb.fact.j2", "dest": "/etc/ansible/facts.d/influxdb.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Re-read local facts if they have been modified", "module": "ansible.builtin.meta", "index": 17, "defined_in": "testdata/scm_repo/roles/influxdb_server/tasks/main.yml", "options": {"name": "Re-read local facts if they have been modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/influxdb_server"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "sysnews", "defined_in": "testdata/scm_repo/roles/sysnews", "task_yamls": ["testdata/scm_repo/roles/sysnews/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/sysnews/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sysnews"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/sysnews/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sysnews"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install packages required for System News", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/sysnews/tasks/main.yml", "options": {"name": "Install packages required for System News", "register": "sysnews__register_packages", "until": "sysnews__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (sysnews__base_packages + sysnews__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/sysnews"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable System News notification after login", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/sysnews/tasks/main.yml", "options": {"name": "Disable System News notification after login", "when": "not sysnews__notification|bool"}, "module_options": {"path": "/etc/profile.d/sysnews.sh", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sysnews"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure System News notification after login", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/sysnews/tasks/main.yml", "options": {"name": "Configure System News notification after login", "when": "sysnews__notification|bool"}, "module_options": {"src": "etc/profile.d/sysnews.sh.j2", "dest": "/etc/profile.d/sysnews.sh", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sysnews"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove persistent news files", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/sysnews/tasks/main.yml", "options": {"name": "Remove persistent news files", "with_items": "{{ sysnews__combined_entries | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "/var/lib/sysnews/{{ item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sysnews"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate persistent news files", "module": "ansible.builtin.copy", "index": 6, "defined_in": "testdata/scm_repo/roles/sysnews/tasks/main.yml", "options": {"name": "Generate persistent news files", "with_items": "{{ sysnews__combined_entries | debops.debops.parse_kv_items }}", "when": "item.name|d() and item.state|d('present') != 'absent'"}, "module_options": {"src": "{{ item.src | d(omit) }}", "content": "{{ item.content | d(omit) }}", "dest": "/var/lib/sysnews/{{ item.name }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/sysnews"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update list of persistent news files", "module": "ansible.builtin.blockinfile", "index": 7, "defined_in": "testdata/scm_repo/roles/sysnews/tasks/main.yml", "options": {"name": "Update list of persistent news files"}, "module_options": {"content": "{% for entry in sysnews__combined_entries | debops.debops.parse_kv_items %}\n{{ entry.name }}\n{% endfor %}\n", "dest": "/var/lib/sysnews/.noexpire", "create": true, "owner": "root", "group": "{{ sysnews__group }}", "mode": "0664"}, "fqcn": "ansible.builtin.blockinfile", "used_in": ["testdata/scm_repo/roles/sysnews"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/sysnews/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sysnews"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save System News local facts", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/sysnews/tasks/main.yml", "options": {"name": "Save System News local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/sysnews.fact.j2", "dest": "/etc/ansible/facts.d/sysnews.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sysnews"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 10, "defined_in": "testdata/scm_repo/roles/sysnews/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/sysnews"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "sudo", "defined_in": "testdata/scm_repo/roles/sudo", "task_yamls": ["testdata/scm_repo/roles/sudo/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure access to LDAP directory", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Configure access to LDAP directory", "when": "sudo__enabled|bool and sudo__ldap_enabled|bool"}, "module_options": {"src": "etc/sudo-ldap.conf.j2", "dest": "/etc/sudo-ldap.conf", "mode": "0440"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 4, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Install required packages", "environment": {"SUDO_FORCE_REMOVE": "yes"}, "register": "sudo__register_packages", "until": "sudo__register_packages is succeeded", "when": "sudo__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", (sudo__base_packages + sudo__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save sudo local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Save sudo local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/sudo.fact.j2", "dest": "/etc/ansible/facts.d/sudo.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that '/etc/sudoers' includes '/etc/sudoers.d'", "module": "ansible.builtin.lineinfile", "index": 8, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Ensure that '/etc/sudoers' includes '/etc/sudoers.d'", "when": "sudo__enabled|bool and not ansible_check_mode|bool"}, "module_options": {"dest": "/etc/sudoers", "regexp": "^(?:@|#)includedir\\s+\\/etc\\/sudoers.d$", "line": "{{ (\"#\" if ansible_local.sudo.version|d(\"0.0.0\") is version(\"1.9.1\", \"<\") else \"@\") + \"includedir /etc/sudoers.d\" }}", "insertafter": "EOF", "state": "present", "validate": "visudo -cf \"%s\"", "mode": "0440"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove sudoers configuration if requested", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Remove sudoers configuration if requested", "with_items": "{{ sudo__combined_sudoers | flatten | debops.debops.parse_kv_items }}", "notify": ["Refresh host facts"], "when": "sudo__enabled|bool and item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "/etc/sudoers.d/{{ item.filename | d(item.name) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure sudoers", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Configure sudoers", "with_items": "{{ sudo__combined_sudoers | flatten | debops.debops.parse_kv_items }}", "notify": ["Refresh host facts"], "when": "sudo__enabled|bool and item.name|d() and item.state|d('present') not in [ 'init', 'absent', 'ignore' ]"}, "module_options": {"src": "etc/sudoers.d/config.j2", "dest": "/etc/sudoers.d/{{ item.filename | d(item.name) }}", "owner": "root", "group": "root", "mode": "0440", "validate": "visudo -cf %s"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure workaround for logind sessions via sudo", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Configure workaround for logind sessions via sudo", "when": "sudo__enabled|bool and sudo__logind_session|bool"}, "module_options": {"src": "etc/profile.d/sudo_logind_session.sh.j2", "dest": "/etc/profile.d/sudo_logind_session.sh", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 12, "defined_in": "testdata/scm_repo/roles/sudo/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/sudo"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/bootstrap.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "unbound", "defined_in": "testdata/scm_repo/roles/unbound", "task_yamls": ["testdata/scm_repo/roles/unbound/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create a fact that knows the Ansible connection type", "module": "ansible.builtin.set_fact", "index": 2, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Create a fact that knows the Ansible connection type"}, "module_options": {"unbound__fact_ansible_connection": "{{ ansible_connection }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create Unbound configuration directory", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Create Unbound configuration directory"}, "module_options": {"path": "/etc/unbound/unbound.conf.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Unbound server configuration", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Remove Unbound server configuration", "notify": ["Check unbound configuration and reload"], "when": "not unbound__combined_server|d()"}, "module_options": {"path": "/etc/unbound/unbound.conf.d/ansible-server.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Unbound remote control configuration", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Remove Unbound remote control configuration", "notify": ["Check unbound configuration and reload"], "when": "not unbound__combined_remote_control|d()"}, "module_options": {"path": "/etc/unbound/unbound.conf.d/ansible-remote-control.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Unbound server configuration", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Generate Unbound server configuration", "notify": ["Check unbound configuration and reload"], "when": "unbound__combined_server|d()"}, "module_options": {"src": "etc/unbound/unbound.conf.d/ansible-server.conf.j2", "dest": "/etc/unbound/unbound.conf.d/ansible-server.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Unbound remote control configuration", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Generate Unbound remote control configuration", "notify": ["Check unbound configuration and reload"], "when": "unbound__combined_remote_control|d()"}, "module_options": {"src": "etc/unbound/unbound.conf.d/ansible-remote-control.conf.j2", "dest": "/etc/unbound/unbound.conf.d/ansible-remote-control.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove DNS zones if requested", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Remove DNS zones if requested", "with_flattened": ["{{ unbound__parsed_zones }}"], "notify": ["Check unbound configuration and reload"], "when": "item.name|d() and item.state|d('present') == 'absent'"}, "module_options": {"path": "/etc/unbound/unbound.conf.d/zone_{{ item.name }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure DNS zones", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Configure DNS zones", "with_flattened": ["{{ unbound__parsed_zones }}"], "notify": ["Check unbound configuration and reload"], "when": "item.name|d() and item.state|d('present') != 'absent'"}, "module_options": {"src": "etc/unbound/unbound.conf.d/zone.conf.j2", "dest": "/etc/unbound/unbound.conf.d/zone_{{ item.name }}.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install unbound APT packages", "module": "ansible.builtin.package", "index": 10, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Install unbound APT packages", "register": "unbound__register_packages", "until": "unbound__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (unbound__base_packages + unbound__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Unbound local facts", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Save Unbound local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/unbound.fact.j2", "dest": "/etc/ansible/facts.d/unbound.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 13, "defined_in": "testdata/scm_repo/roles/unbound/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/unbound"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "apt_cacher_ng", "defined_in": "testdata/scm_repo/roles/apt_cacher_ng", "task_yamls": ["testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml", "testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert Apt-Cacher NG configuration", "module": "dpkg_divert", "index": 1, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml", "options": {"name": "Divert Apt-Cacher NG configuration", "when": "(item.divert|d(True))", "with_items": "{{ apt_cacher_ng__configuration_files }}"}, "module_options": {"path": "/{{ item.path }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure apt-cacher-ng", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml", "options": {"name": "Configure apt-cacher-ng", "with_items": "{{ apt_cacher_ng__configuration_files }}", "notify": ["Restart apt-cacher-ng"]}, "module_options": {"src": "{{ item.src|d(item.path) }}.j2", "dest": "/{{ item.path }}", "owner": "{{ item.owner|d(\"root\") }}", "group": "{{ item.group|d(\"root\") }}", "mode": "{{ item.mode|d(\"0640\") }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the cache dir does exist", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml", "options": {"name": "Ensure the cache dir does exist"}, "module_options": {"state": "directory", "path": "{{ apt_cacher_ng__cache_dir }}", "owner": "{{ apt_cacher_ng__cache_dir_owner }}", "group": "{{ apt_cacher_ng__cache_dir_group }}", "mode": "{{ apt_cacher_ng__dir_perms }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if cache dir permissions need to be recursively changed", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml", "options": {"name": "Check if cache dir permissions need to be recursively changed", "when": "(apt_cacher_ng__cache_dir_enforce_permissions == 'lazy')", "failed_when": false, "register": "apt_cacher_ng__register_cache_perms"}, "module_options": {"state": "file", "path": "{{ apt_cacher_ng__cache_dir }}/_expending_damaged", "owner": "{{ apt_cacher_ng__cache_dir_owner }}", "group": "{{ apt_cacher_ng__cache_dir_group }}", "mode": "{{ apt_cacher_ng__file_perms }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if cache dir permissions should be changed", "module": "ansible.builtin.set_fact", "index": 5, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml", "options": {"name": "Check if cache dir permissions should be changed"}, "module_options": {"apt_cacher_ng__cache_dir_permissions_change": "{{ apt_cacher_ng__cache_dir_enforce_permissions != \"disabled\" and ( (apt_cacher_ng__register_cache_perms|d() and apt_cacher_ng__register_cache_perms is changed) or apt_cacher_ng__cache_dir_enforce_permissions == \"strict\" ) }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Change permissions of files and directories in the cache directory", "module": "ansible.builtin.shell", "index": 6, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml", "options": {"name": "Change permissions of files and directories in the cache directory", "args": {"chdir": "{{ apt_cacher_ng__cache_dir }}", "warn": false}, "when": "apt_cacher_ng__cache_dir_permissions_change"}, "module_options": "chown --recursive {{ apt_cacher_ng__cache_dir_owner }}:{{ apt_cacher_ng__cache_dir_group }} .\nfind . -type d -exec chmod {{ apt_cacher_ng__dir_perms }} {} \\;\nfind . -type f -exec chmod {{ apt_cacher_ng__file_perms }} {} \\;\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove obsolete debconf file from apt-cacher-ng package", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml", "options": {"name": "Remove obsolete debconf file from apt-cacher-ng package", "notify": ["Restart apt-cacher-ng"]}, "module_options": {"path": "/etc/apt-cacher-ng/zz_debconf.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove obsolete file from debops.apt", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml", "options": {"name": "Remove obsolete file from debops.apt", "notify": ["Assemble services.d"]}, "module_options": {"path": "/etc/services.d/acng.j2", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable apt-cacher-ng", "module": "ansible.builtin.service", "index": 9, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml", "options": {"name": "Enable apt-cacher-ng", "when": "(apt_cacher_ng__enabled|d())"}, "module_options": {"name": "apt-cacher-ng", "state": "started", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable apt-cacher-ng", "module": "ansible.builtin.service", "index": 10, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml", "options": {"name": "Disable apt-cacher-ng", "when": "not (apt_cacher_ng__enabled|d())"}, "module_options": {"name": "apt-cacher-ng", "state": "stopped", "enabled": false}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Apt-Cacher NG in debconf to not do autoconfiguration", "module": "ansible.builtin.debconf", "index": 2, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml", "options": {"name": "Configure Apt-Cacher NG in debconf to not do autoconfiguration", "when": "(apt_cacher_ng__deploy_state == 'present')"}, "module_options": {"name": "apt-cacher-ng", "question": "apt-cacher-ng/gentargetmode", "vtype": "select", "value": "No automated setup"}, "fqcn": "ansible.builtin.debconf", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Apt-Cacher NG configuration", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml", "options": {"name": "Remove Apt-Cacher NG configuration", "when": "(apt_cacher_ng__deploy_state in [ 'absent', 'purge' ] and not item.divert|d(True))", "with_items": "{{ apt_cacher_ng__configuration_files }}"}, "module_options": {"path": "/{{ item.path }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove diversion of Apt-Cacher NG configuration", "module": "dpkg_divert", "index": 4, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml", "options": {"name": "Remove diversion of Apt-Cacher NG configuration", "when": "(apt_cacher_ng__deploy_state in [ 'absent', 'purge' ] and item.divert|d(True))", "with_items": "{{ apt_cacher_ng__configuration_files }}"}, "module_options": {"path": "/{{ item.path }}", "state": "absent", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Ensure specified packages are in their desired state", "module": "ansible.builtin.package", "index": 5, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml", "options": {"name": "Ensure specified packages are in their desired state", "register": "apt_cacher_ng__register_packages", "until": "apt_cacher_ng__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", apt_cacher_ng__base_packages) }}", "state": "{{ \"present\" if (apt_cacher_ng__deploy_state == \"present\") else \"absent\" }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Run tasks related to deploy state present", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml", "options": {"name": "Run tasks related to deploy state present", "when": "(apt_cacher_ng__deploy_state == 'present')"}, "module_options": "state_present.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove cache directory if deploy state is purge", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml", "options": {"name": "Remove cache directory if deploy state is purge", "when": "(apt_cacher_ng__deploy_state == 'purge')"}, "module_options": {"path": "{{ apt_cacher_ng__cache_dir }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apt_cacher_ng"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "docker_gen", "defined_in": "testdata/scm_repo/roles/docker_gen", "task_yamls": ["testdata/scm_repo/roles/docker_gen/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/docker_gen/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/docker_gen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required directories", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/docker_gen/tasks/main.yml", "options": {"name": "Create required directories", "with_flattened": [["{{ docker_gen__src }}", "{{ docker_gen__lib }}", "{{ docker_gen__templates }}"], ["{{ ((docker_gen__nginx_dest | dirname) if (docker_gen__nginx|d() and docker_gen__nginx) else []) }}"]]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/docker_gen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download docker-gen sources", "module": "ansible.builtin.get_url", "index": 2, "defined_in": "testdata/scm_repo/roles/docker_gen/tasks/main.yml", "options": {"name": "Download docker-gen sources"}, "module_options": {"url": "{{ docker_gen__release }}", "dest": "{{ docker_gen__src + \"/\" + docker_gen__release | basename }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.get_url", "used_in": ["testdata/scm_repo/roles/docker_gen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Unpack docker-gen", "module": "ansible.builtin.unarchive", "index": 3, "defined_in": "testdata/scm_repo/roles/docker_gen/tasks/main.yml", "options": {"name": "Unpack docker-gen", "register": "docker_gen__register_install"}, "module_options": {"src": "{{ docker_gen__src + \"/\" + docker_gen__release | basename }}", "dest": "{{ docker_gen__lib }}", "copy": false, "owner": "root", "group": "root", "mode": "u=rwX,g=rX,o=rX"}, "fqcn": "ansible.builtin.unarchive", "used_in": ["testdata/scm_repo/roles/docker_gen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy docker-gen templates to remote host", "module": "ansible.builtin.copy", "index": 4, "defined_in": "testdata/scm_repo/roles/docker_gen/tasks/main.yml", "options": {"name": "Copy docker-gen templates to remote host", "notify": ["Restart docker-gen"]}, "module_options": {"src": "usr/local/lib/templates/", "dest": "{{ docker_gen__templates + \"/\" }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/docker_gen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure docker-gen", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/docker_gen/tasks/main.yml", "options": {"name": "Configure docker-gen", "notify": ["Restart docker-gen"]}, "module_options": {"src": "etc/docker-gen.conf.j2", "dest": "/etc/docker-gen.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_gen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure docker-gen service options", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/docker_gen/tasks/main.yml", "options": {"name": "Configure docker-gen service options", "notify": ["Restart docker-gen"]}, "module_options": {"src": "etc/default/docker-gen.j2", "dest": "/etc/default/docker-gen", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_gen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure docker-gen init script", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/docker_gen/tasks/main.yml", "options": {"name": "Configure docker-gen init script", "notify": ["Reload service manager", "Restart docker-gen"], "when": "ansible_service_mgr != 'systemd'"}, "module_options": {"src": "etc/init.d/docker-gen.j2", "dest": "/etc/init.d/docker-gen", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_gen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure docker-gen systemd service", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/docker_gen/tasks/main.yml", "options": {"name": "Configure docker-gen systemd service", "register": "docker_gen__register_service", "notify": ["Reload service manager", "Restart docker-gen"], "when": "ansible_service_mgr == 'systemd'"}, "module_options": {"src": "etc/systemd/system/docker-gen.service.j2", "dest": "/etc/systemd/system/docker-gen.service", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/docker_gen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd daemons", "module": "ansible.builtin.meta", "index": 9, "defined_in": "testdata/scm_repo/roles/docker_gen/tasks/main.yml", "options": {"name": "Reload systemd daemons"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/docker_gen"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Start docker-gen on install", "module": "ansible.builtin.service", "index": 10, "defined_in": "testdata/scm_repo/roles/docker_gen/tasks/main.yml", "options": {"name": "Start docker-gen on install", "when": "docker_gen__register_install|d() and docker_gen__register_install is changed"}, "module_options": {"name": "docker-gen", "state": "started", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/docker_gen"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "postwhite", "defined_in": "testdata/scm_repo/roles/postwhite", "task_yamls": ["testdata/scm_repo/roles/postwhite/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Install required packages", "register": "postwhite__register_packages", "until": "postwhite__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (postwhite__base_packages + postwhite__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create the UNIX system group", "module": "ansible.builtin.group", "index": 2, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Create the UNIX system group"}, "module_options": {"name": "{{ postwhite__group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create the UNIX system account", "module": "ansible.builtin.user", "index": 3, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Create the UNIX system account"}, "module_options": {"name": "{{ postwhite__user }}", "group": "{{ postwhite__group }}", "home": "{{ postwhite__home }}", "comment": "{{ postwhite__gecos }}", "shell": "{{ postwhite__shell }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create the source directory", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Create the source directory"}, "module_options": {"path": "{{ postwhite__src }}", "state": "directory", "owner": "{{ postwhite__user }}", "group": "{{ postwhite__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone and install the software stack", "module": "ansible.builtin.git", "index": 5, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Clone and install the software stack", "with_items": "{{ postwhite__software_stack }}", "become": true, "become_user": "{{ postwhite__user }}"}, "module_options": {"repo": "{{ item.git_repo }}", "dest": "{{ item.git_dest }}", "version": "{{ item.git_version }}", "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Postwhite configuration", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Generate Postwhite configuration"}, "module_options": {"src": "etc/postwhite.conf.j2", "dest": "/etc/postwhite.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install the Postwhite wrapper script", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Install the Postwhite wrapper script"}, "module_options": {"src": "usr/local/lib/postwhite.j2", "dest": "/usr/local/lib/postwhite", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Yahoo! static host list", "module": "ansible.builtin.command", "index": 8, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Update Yahoo! static host list", "become": true, "become_user": "{{ postwhite__user }}", "notify": ["Update Postwhite in the background using async", "Update Postwhite in the background using batch"], "when": "(ansible_local is undefined or (ansible_local|d() and ansible_local.postwhite is undefined or (ansible_local.postwhite|d() and not (ansible_local.postwhite.installed|d())|bool)))"}, "module_options": "bash {{ postwhite__git_dest }}/scrape_yahoo", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize whitelist/blacklist files", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Initialize whitelist/blacklist files", "with_items": ["{{ postwhite__spf_whitelist_path }}", "{{ postwhite__spf_blacklist_path }}"], "when": "(ansible_local is undefined or (ansible_local|d() and ansible_local.postwhite is undefined or (ansible_local.postwhite|d() and not (ansible_local.postwhite.installed|d())|bool)))"}, "module_options": {"path": "{{ item }}", "state": "touch", "owner": "{{ postwhite__user }}", "group": "{{ postwhite__group }}", "mode": "0644"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Postwhite access lists daily", "module": "ansible.builtin.cron", "index": 10, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Update Postwhite access lists daily"}, "module_options": {"job": "/usr/local/lib/postwhite", "cron_file": "postwhite", "name": "Update Postwhite access lists", "special_time": "{{ postwhite__cron_whitelist_update_frequency }}", "user": "root", "state": "present"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Yahoo IP address list weekly", "module": "ansible.builtin.cron", "index": 11, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Update Yahoo IP address list weekly"}, "module_options": {"job": "bash {{ postwhite__git_dest + \"/scrape_yahoo\" }} > /dev/null", "cron_file": "postwhite", "name": "Update Yahoo IP address list", "special_time": "{{ postwhite__cron_yahoo_update_frequency }}", "user": "postwhite", "state": "present"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 12, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Postwhite local facts", "module": "ansible.builtin.template", "index": 13, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Save Postwhite local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/postwhite.fact.j2", "dest": "/etc/ansible/facts.d/postwhite.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 14, "defined_in": "testdata/scm_repo/roles/postwhite/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/postwhite"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "firejail", "defined_in": "testdata/scm_repo/roles/firejail", "task_yamls": ["testdata/scm_repo/roles/firejail/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure specified packages are present", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Ensure specified packages are present", "when": "firejail__deploy_state in [\"present\"]", "register": "firejail__register_packages", "until": "firejail__register_packages is succeeded", "tags": ["role::firejail:pkgs"]}, "module_options": {"name": "{{ q(\"flattened\", (firejail__base_packages + firejail__packages + firejail__group_packages + firejail__host_packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get program file path of firejail", "module": "ansible.builtin.command", "index": 2, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Get program file path of firejail", "register": "firejail__register_program_file_path", "check_mode": false, "changed_when": false, "failed_when": "firejail__register_program_file_path.rc not in [ 0, 1 ]", "when": "(firejail__program_file_path == \"auto\")"}, "module_options": "which -a firejail", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set program file path of firejail for later use in the role", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Set program file path of firejail for later use in the role", "when": "(firejail__program_file_path == \"auto\")"}, "module_options": {"firejail__program_file_path": "{{ (firejail__register_program_file_path.stdout_lines + [\"/usr/bin/firejail\"]) | first }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of system wide profiles", "module": "ansible.builtin.find", "index": 4, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Get list of system wide profiles", "register": "firejail__register_find_system_wide_profiles"}, "module_options": {"file_type": "file", "paths": ["{{ firejail__config_path }}"], "patterns": "*.profile", "use_regex": false, "hidden": false, "recurse": false}, "fqcn": "ansible.builtin.find", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set list of system wide profiles", "module": "ansible.builtin.set_fact", "index": 5, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Set list of system wide profiles"}, "module_options": {"firejail__fact_system_wide_profiles": "{{ firejail__register_find_system_wide_profiles.files | map(attribute=\"path\") | map(\"basename\") | map(\"regex_replace\", \"\\.profile$\", \"\") | list }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if programs which should be sandboxed are installed", "module": "ansible.builtin.command", "index": 6, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Check if programs which should be sandboxed are installed", "check_mode": false, "changed_when": false, "failed_when": "firejail__register_cmd_which_programs.rc not in [ 0, 1 ]", "register": "firejail__register_cmd_which_programs", "when": "(item in ( firejail__combined_program_sandboxes.keys() | list + ( firejail__fact_system_wide_profiles if (firejail__global_profiles_system_wide_sandboxed == \"if_installed\") else [] ) ))", "with_items": "{{ firejail__combined_program_sandboxes.keys() | list | union(firejail__fact_system_wide_profiles) }}"}, "module_options": "which -a {{ item | quote }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set list of installed programs", "module": "ansible.builtin.set_fact", "index": 7, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Set list of installed programs"}, "module_options": {"firejail__fact_installed_programs": "{{ firejail__register_cmd_which_programs.results | selectattr(\"rc\", \"defined\") | selectattr(\"rc\", \"equalto\", 0) | map(attribute=\"stdout_lines\") | map(\"first\") | map(\"basename\") | list }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the local bin path exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Ensure that the local bin path exists"}, "module_options": {"path": "{{ firejail__system_local_bin_path }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create/remove symlinks for sandboxed programs", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Create/remove symlinks for sandboxed programs", "when": "not (item in firejail__combined_program_sandboxes and firejail__combined_program_sandboxes[item].system_wide_sandboxed|d(\"present\") in [\"ignored\"])", "with_items": "{{ firejail__combined_program_sandboxes.keys() | list | union(firejail__fact_system_wide_profiles) }}"}, "module_options": {"path": "{{ firejail__system_local_bin_path + \"/\" + item }}", "src": "{{ firejail__program_file_path }}", "state": "{{ \"link\" if ( firejail__deploy_state in [\"present\"] and ( (item in firejail__combined_program_sandboxes and ( (firejail__combined_program_sandboxes[item].system_wide_sandboxed | d(firejail__program_sandboxes_system_wide_sandboxed) == \"present\") or ( (firejail__combined_program_sandboxes[item].system_wide_sandboxed | d(firejail__program_sandboxes_system_wide_sandboxed) == \"if_installed\") and item in firejail__fact_installed_programs ) )) or (item not in firejail__combined_program_sandboxes and ( ( firejail__global_profiles_system_wide_sandboxed == \"present\" ) or ( firejail__global_profiles_system_wide_sandboxed == \"if_installed\" and item in firejail__fact_installed_programs ) )) ) ) else \"absent\" }}", "owner": "root", "group": "root", "mode": "0755", "force": "{{ ansible_check_mode|d(omit) }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Provide (additional) profiles", "module": "ansible.builtin.copy", "index": 10, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Provide (additional) profiles", "when": "(firejail__deploy_state in [\"present\"] and \"profile\" in item.value and item.value.profile.state|d(\"present\") == \"present\")", "with_dict": "{{ firejail__combined_program_sandboxes }}", "tags": ["role::firejail:profile"]}, "module_options": {"dest": "{{ item.value.profile.dest           | d(firejail__config_path + \"/\" + item.key + \".profile\") }}", "backup": "{{ item.value.profile.backup         | d(omit) }}", "content": "{{ item.value.profile.content        | d(omit) }}", "directory_mode": "{{ item.value.profile.directory_mode | d(omit) }}", "follow": "{{ item.value.profile.follow         | d(omit) }}", "force": "{{ item.value.profile.force          | d(omit) }}", "owner": "{{ item.value.profile.owner          | d(\"root\") }}", "group": "{{ item.value.profile.group          | d(\"root\") }}", "mode": "{{ item.value.profile.mode           | d(\"0644\") }}", "selevel": "{{ item.value.profile.selevel        | d(omit) }}", "serole": "{{ item.value.profile.serole         | d(omit) }}", "setype": "{{ item.value.profile.setype         | d(omit) }}", "seuser": "{{ item.value.profile.seuser         | d(omit) }}", "src": "{{ item.value.profile.src            | d(omit) }}", "validate": "{{ item.value.profile.validate       | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Delete profiles", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Delete profiles", "when": "(\"profile\" in item.value and (item.value.profile.state|d(\"present\") == \"absent\" or firejail__deploy_state in [\"absent\"]))", "with_dict": "{{ firejail__combined_program_sandboxes }}", "tags": ["role::firejail:profile"]}, "module_options": {"path": "{{ item.value.profile.dest | d(firejail__config_path + \"/\" + item.key + \".profile\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of files in local bin path", "module": "ansible.builtin.find", "index": 12, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Get list of files in local bin path", "register": "firejail__register_profile_program_symlinks_find", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"file_type": "file", "paths": ["{{ firejail__system_local_bin_path }}"], "hidden": false, "recurse": false}, "fqcn": "ansible.builtin.find", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Workaround to get the realpath", "module": "ansible.builtin.stat", "index": 13, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Workaround to get the realpath", "register": "firejail__register_profile_program_symlinks_stat", "no_log": "{{ debops__no_log | d(True) }}", "with_items": "{{ firejail__register_profile_program_symlinks_find.files }}"}, "module_options": {"path": "{{ item.path }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove program symlink when profiles is is not defined in any variable", "module": "ansible.builtin.file", "index": 14, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Remove program symlink when profiles is is not defined in any variable", "no_log": "{{ debops__no_log | d(True) }}", "when": "(item.stat.islnk and ( ( item.stat.lnk_source|basename == \"firejail\" and ( item.stat.lnk_source != firejail__program_file_path or firejail__deploy_state not in [\"present\"] ) ) or ( item.stat.lnk_source == firejail__program_file_path and (item.stat.path|basename not in (firejail__combined_program_sandboxes.keys() | list | union(firejail__fact_system_wide_profiles))) ) ))", "with_items": "{{ firejail__register_profile_program_symlinks_stat.results }}"}, "module_options": {"path": "{{ item.stat.path }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure ~/.local/share/applications exists", "module": "ansible.builtin.file", "index": 15, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Ensure ~/.local/share/applications exists", "become": true, "become_user": "{{ item.name }}", "no_log": "{{ debops__no_log | d(True) }}", "when": "firejail__deploy_state in [\"present\"] and item != \"root\" and item.state|d(\"present\") == \"present\"", "with_flattened": "{{ firejail__combined_fix_for_users }}"}, "module_options": {"path": "~/.local/share/applications", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Apply workaround for desktop files", "module": "ansible.builtin.command", "index": 16, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Apply workaround for desktop files", "register": "firejail__register_cmd_firecfg_fix", "changed_when": "(\"created\" in firejail__register_cmd_firecfg_fix.stdout)", "become": true, "become_user": "{{ item.name }}", "no_log": "{{ debops__no_log | d(True) }}", "when": "firejail__deploy_state in [\"present\"] and item != \"root\" and item.state|d(\"present\") == \"present\"", "with_flattened": "{{ firejail__combined_fix_for_users }}"}, "module_options": "firecfg --fix", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure specified packages are absent", "module": "ansible.builtin.package", "index": 17, "defined_in": "testdata/scm_repo/roles/firejail/tasks/main.yml", "options": {"name": "Ensure specified packages are absent", "when": "firejail__deploy_state in [\"absent\"]", "with_flattened": ["{{ firejail__base_packages }}", "{{ firejail__packages }}", "{{ firejail__group_packages }}", "{{ firejail__host_packages }}"], "tags": ["role::firejail:pkgs"]}, "module_options": {"name": "{{ item }}", "state": "absent"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/firejail"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "fcgiwrap", "defined_in": "testdata/scm_repo/roles/fcgiwrap", "task_yamls": ["testdata/scm_repo/roles/fcgiwrap/tasks/configure_systemd.yml", "testdata/scm_repo/roles/fcgiwrap/tasks/configure_sysvinit.yml", "testdata/scm_repo/roles/fcgiwrap/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Generate systemd units", "module": "ansible.builtin.template", "index": 0, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/configure_systemd.yml", "options": {"name": "Generate systemd units", "register": "fcgiwrap__register_systemd", "notify": ["Reload service manager"], "with_nested": ["{{ fcgiwrap__instances }}", ["socket", "service"]], "when": "fcgiwrap__instances"}, "module_options": {"src": "etc/systemd/system/fcgiwrap-instance.{{ item.1 }}.j2", "dest": "/etc/systemd/system/fcgiwrap-{{ item.0.name }}.{{ item.1 }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd units", "module": "ansible.builtin.meta", "index": 1, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/configure_systemd.yml", "options": {"name": "Reload systemd units"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable and start systemd units", "module": "ansible.builtin.service", "index": 2, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/configure_systemd.yml", "options": {"name": "Enable and start systemd units", "with_nested": ["{{ fcgiwrap__instances }}", ["socket", "service"]], "when": "fcgiwrap__instances and fcgiwrap__register_systemd is changed"}, "module_options": {"name": "fcgiwrap-{{ item.0.name }}.{{ item.1 }}", "state": "started", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create init script configuration", "module": "ansible.builtin.template", "index": 0, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/configure_sysvinit.yml", "options": {"name": "Create init script configuration", "with_items": "{{ fcgiwrap__instances }}", "register": "fcgiwrap__register_init_config"}, "module_options": {"src": "etc/default/fcgiwrap-instance.j2", "dest": "/etc/default/fcgiwrap-{{ item.name }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Copy fcgiwrap init script to new instance", "module": "ansible.builtin.command", "index": 1, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/configure_sysvinit.yml", "options": {"name": "Copy fcgiwrap init script to new instance", "args": {"creates": "/etc/init.d/fcgiwrap-{{ item.name }}"}, "register": "fcgiwrap__register_init_script", "with_items": "{{ fcgiwrap__instances }}"}, "module_options": "cp /etc/init.d/fcgiwrap /etc/init.d/fcgiwrap-{{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Modify fcgiwrap instance init script (insserv)", "module": "ansible.builtin.lineinfile", "index": 2, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/configure_sysvinit.yml", "options": {"name": "Modify fcgiwrap instance init script (insserv)", "with_items": "{{ fcgiwrap__instances }}"}, "module_options": {"dest": "/etc/init.d/fcgiwrap-{{ item.name }}", "regexp": "^# Provides:\\s+fcgiwrap.*$", "line": "# Provides:          fcgiwrap-{{ item.name }}", "state": "present", "mode": "0755"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Modify fcgiwrap instance init script (name)", "module": "ansible.builtin.lineinfile", "index": 3, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/configure_sysvinit.yml", "options": {"name": "Modify fcgiwrap instance init script (name)", "with_items": "{{ fcgiwrap__instances }}"}, "module_options": {"dest": "/etc/init.d/fcgiwrap-{{ item.name }}", "regexp": "^NAME=\"fcgiwrap.*\"$", "line": "NAME=\"fcgiwrap-{{ item.name }}\"", "state": "present", "mode": "0755"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable fcgiwrap instance init script", "module": "ansible.builtin.service", "index": 4, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/configure_sysvinit.yml", "options": {"name": "Enable fcgiwrap instance init script", "with_items": "{{ fcgiwrap__instances }}"}, "module_options": {"name": "fcgiwrap-{{ item.name }}", "state": "started", "enabled": true}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/main.yml", "options": {"name": "Install required packages", "register": "fcgiwrap__register_install", "until": "fcgiwrap__register_install is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", fcgiwrap__packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check the fcgiwrap version", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/main.yml", "options": {"name": "Check the fcgiwrap version", "environment": {"LC_MESSAGES": "C"}, "register": "fcgiwrap__register_version", "changed_when": false, "failed_when": false, "check_mode": false}, "module_options": "dpkg-query -W -f='${Version}\n' 'fcgiwrap'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure required system groups exist", "module": "ansible.builtin.group", "index": 3, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/main.yml", "options": {"name": "Make sure required system groups exist", "with_items": "{{ fcgiwrap__instances }}", "when": "fcgiwrap__instances and item.user | d(False)"}, "module_options": {"name": "{{ item.group  | d(item.user) }}", "system": "{{ item.system | d(True) }}", "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure required system accounts exist", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/main.yml", "options": {"name": "Make sure required system accounts exist", "with_items": "{{ fcgiwrap__instances }}", "when": "fcgiwrap__instances and item.user | d(False)"}, "module_options": {"name": "{{ item.user }}", "group": "{{ item.group      | d(item.user) }}", "shell": "{{ item.shell      | d(omit) }}", "home": "{{ item.home       | d(omit) }}", "createhome": "{{ item.createhome | d(False) }}", "system": "{{ item.system     | d(True) }}", "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable default fcgiwrap init script", "module": "ansible.builtin.service", "index": 5, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/main.yml", "options": {"name": "Disable default fcgiwrap init script", "when": "fcgiwrap__disable_default|bool and fcgiwrap__register_install is changed"}, "module_options": {"name": "fcgiwrap", "state": "stopped", "enabled": false}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure fcgiwrap instances in sysvinit", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/main.yml", "options": {"name": "Configure fcgiwrap instances in sysvinit", "when": "ansible_service_mgr != 'systemd'"}, "module_options": "configure_sysvinit.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure fcgiwrap instances in systemd", "module": "ansible.builtin.include_tasks", "index": 7, "defined_in": "testdata/scm_repo/roles/fcgiwrap/tasks/main.yml", "options": {"name": "Configure fcgiwrap instances in systemd", "when": "ansible_service_mgr == 'systemd'"}, "module_options": "configure_systemd.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/fcgiwrap"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "rabbitmq_management", "defined_in": "testdata/scm_repo/roles/rabbitmq_management", "task_yamls": ["testdata/scm_repo/roles/rabbitmq_management/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Manage RabbitMQ plugins", "module": "rabbitmq_plugin", "index": 0, "defined_in": "testdata/scm_repo/roles/rabbitmq_management/tasks/main.yml", "options": {"name": "Manage RabbitMQ plugins", "when": "rabbitmq_management__local|bool"}, "module_options": {"names": "{{ (rabbitmq_management__default_plugins + rabbitmq_management__plugins) | join(\",\") }}", "state": "{{ \"enabled\" if rabbitmq_management__deploy_state != \"absent\" else \"disabled\" }}", "new_only": true}, "fqcn": "community.rabbitmq.rabbitmq_plugin", "used_in": ["testdata/scm_repo/roles/rabbitmq_management"], "annotations": {"use-non-builtin-module": true}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "ansible_plugins", "defined_in": "testdata/scm_repo/roles/ansible_plugins", "task_yamls": [], "tasks": [], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "dhparam", "defined_in": "testdata/scm_repo/roles/dhparam", "task_yamls": ["testdata/scm_repo/roles/dhparam/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check Ansible Controller library version", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Check Ansible Controller library version", "args": {"executable": "bash"}, "changed_when": false, "register": "dhparam__register_version", "delegate_to": "localhost", "become": false, "run_once": true, "check_mode": false, "tags": ["meta::provision"]}, "module_options": "set -o nounset -o pipefail -o errexit &&\n{% if dhparam__source_library == 'gnutls' %}\ncerttool --version | head -n 1 | awk '{print $NF}'\n{% elif dhparam__source_library == 'openssl' %}\nopenssl version | awk '{print $2}'\n{% endif %}\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Assert that required software is installed", "module": "ansible.builtin.assert", "index": 3, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Assert that required software is installed", "delegate_to": "localhost", "become": false, "run_once": true, "tags": ["meta::provision"]}, "module_options": {"that": ["dhparam__register_version is defined and dhparam__register_version.stdout"]}, "fqcn": "ansible.builtin.assert", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required directories on Ansible Controller", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Create required directories on Ansible Controller", "delegate_to": "localhost", "become": false, "run_once": true, "tags": ["meta::provision"]}, "module_options": {"path": "{{ dhparam__source_path }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Diffie-Hellman params on Ansible Controller", "module": "ansible.builtin.command", "index": 5, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Generate Diffie-Hellman params on Ansible Controller", "args": {"creates": "{{ dhparam__source_path + \"/\" + dhparam__prefix + item + dhparam__suffix }}"}, "with_items": "{{ dhparam__bits }}", "delegate_to": "localhost", "become": false, "run_once": true, "tags": ["meta::provision"]}, "module_options": "{% if dhparam__source_library == 'gnutls' %}\ncerttool --generate-dh-params\n         --outfile {{ dhparam__source_path + \"/\" + dhparam__prefix + item + dhparam__suffix }}\n         --bits {{ item }}\n{% elif dhparam__source_library == 'openssl' %}\nopenssl dhparam {{ dhparam__openssl_options }} -out {{ dhparam__source_path + \"/\" + dhparam__prefix + item + dhparam__suffix }} {{ item }}\n{% endif %}\n", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install encryption software", "module": "ansible.builtin.package", "index": 6, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Install encryption software", "when": "dhparam__deploy_state in ['present']", "register": "dhparam__register_packages", "until": "dhparam__register_packages is succeeded", "tags": ["meta::provision"]}, "module_options": {"name": "{{ q(\"flattened\", (dhparam__base_packages + dhparam__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required directories", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Create required directories", "when": "dhparam__deploy_state in ['present']", "notify": ["Regenerate DH parameters on first install"]}, "module_options": {"path": "{{ dhparam__hook_path }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Preseed Diffie-Hellman parameters", "module": "ansible.builtin.copy", "index": 8, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Preseed Diffie-Hellman parameters", "when": "dhparam__deploy_state in ['present']", "with_sequence": "start=0 count={{ dhparam__sets }}", "notify": ["Execute DH parameter hooks"]}, "module_options": {"src": "{{ dhparam__source_path + \"/\" }}", "dest": "{{ dhparam__path + \"/params/\" + dhparam__set_prefix + item + \"/\" }}", "owner": "root", "group": "root", "mode": "0644", "force": false}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create default symlinks for all sets", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Create default symlinks for all sets", "when": "dhparam__deploy_state in ['present'] and not ansible_check_mode", "with_sequence": "start=0 count={{ dhparam__sets }}"}, "module_options": {"src": "{{ \"params/\" + dhparam__set_prefix + item + \"/\" + dhparam__prefix + dhparam__default_length + dhparam__suffix }}", "path": "{{ dhparam__path + \"/\" + dhparam__set_prefix + item }}", "state": "link", "mode": "0644"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install DHE generation script", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Install DHE generation script", "when": "dhparam__deploy_state in ['present']"}, "module_options": {"src": "usr/local/lib/dhparam-generate-params.j2", "dest": "{{ dhparam__generate_params }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable periodic DH parameters generation via cron", "module": "ansible.builtin.cron", "index": 11, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Enable periodic DH parameters generation via cron", "when": "not ansible_check_mode"}, "module_options": {"name": "Generate new Diffie-Hellman ephemeral parameters", "job": "test -x {{ dhparam__generate_params }} && {{ dhparam__generate_params }} schedule", "cron_file": "dhparam-generate-params", "user": "root", "special_time": "{{ dhparam__generate_cron_period }}", "state": "{{ \"present\" if (ansible_service_mgr != \"systemd\" and dhparam__generate_cron|bool and dhparam__deploy_state in [\"present\"]) else \"absent\" }}"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Setup systemd timer for periodic DH parameter regeneration", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Setup systemd timer for periodic DH parameter regeneration", "with_items": ["etc/systemd/system/dhparam-generate-params.service", "etc/systemd/system/dhparam-generate-params.timer"], "register": "dhparam__register_systemd", "when": "dhparam__deploy_state in ['present'] and ansible_service_mgr == 'systemd'"}, "module_options": {"src": "{{ item }}.j2", "dest": "/{{ item }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable systemd timer", "module": "ansible.builtin.systemd", "index": 13, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Enable systemd timer", "when": "dhparam__deploy_state in ['present'] and ansible_service_mgr == 'systemd' and not ansible_check_mode"}, "module_options": {"daemon_reload": true, "name": "dhparam-generate-params.timer", "enabled": "{{ True if (dhparam__generate_cron|bool) else False }}", "state": "{{ \"started\" if (dhparam__generate_cron|bool) else \"stopped\" }}"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure the Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 14, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Make sure the Ansible local facts directory exists", "when": "dhparam__deploy_state in ['present']"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save dhparam local facts", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Save dhparam local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/dhparam.fact.j2", "dest": "/etc/ansible/facts.d/dhparam.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Gather facts if they changed", "module": "ansible.builtin.meta", "index": 16, "defined_in": "testdata/scm_repo/roles/dhparam/tasks/main.yml", "options": {"name": "Gather facts if they changed"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/dhparam"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "swapfile", "defined_in": "testdata/scm_repo/roles/swapfile", "task_yamls": ["testdata/scm_repo/roles/swapfile/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Disable swap files when requested", "module": "ansible.builtin.shell", "index": 0, "defined_in": "testdata/scm_repo/roles/swapfile/tasks/main.yml", "options": {"name": "Disable swap files when requested", "changed_when": false, "with_items": "{{ swapfile__files }}", "when": "(item.state|d(\"present\") == 'absent' and ((ansible_system_capabilities_enforced|d())|bool and \"cap_sys_admin\" in ansible_system_capabilities) or not (ansible_system_capabilities_enforced|d(True))|bool)"}, "module_options": "test -f {{ item.path | d(item) }} && swapoff {{ item.path | d(item) }} || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/swapfile"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create swap files", "module": "ansible.builtin.command", "index": 1, "defined_in": "testdata/scm_repo/roles/swapfile/tasks/main.yml", "options": {"name": "Create swap files", "args": {"creates": "{{ item.path | d(item) }}"}, "register": "swapfile__register_allocation", "with_items": "{{ swapfile__files }}", "when": "(item.state|d(\"present\") != 'absent')"}, "module_options": "{% if swapfile__use_dd|bool %}\ndd if=/dev/zero of={{ item.path | d(item) }} bs=1M count={{ item.size | d(swapfile__size) }}\n{% else %}\nfallocate -l {{ ((item.size | d(swapfile__size))|int * 1024 * 1024) }} {{ item.path | d(item) }}\n{% endif %}\n", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/swapfile"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enforce permissions", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/swapfile/tasks/main.yml", "options": {"name": "Enforce permissions", "with_items": "{{ swapfile__files }}", "when": "(item.state|d(\"present\") != 'absent' and not ansible_check_mode)"}, "module_options": {"path": "{{ item.path | d(item) }}", "state": "file", "owner": "root", "group": "root", "mode": "0600"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/swapfile"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize swap files", "module": "ansible.builtin.command", "index": 3, "defined_in": "testdata/scm_repo/roles/swapfile/tasks/main.yml", "options": {"name": "Initialize swap files", "register": "swapfile__register_init", "with_items": "{{ swapfile__register_allocation.results|d([]) }}", "when": "(item is changed and item.state|d(\"present\") != 'absent')"}, "module_options": "mkswap {{ item.item.path | d(item.item) }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/swapfile"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable swap files", "module": "ansible.builtin.command", "index": 4, "defined_in": "testdata/scm_repo/roles/swapfile/tasks/main.yml", "options": {"name": "Enable swap files", "with_items": "{{ swapfile__register_allocation.results|d([]) }}", "when": "(item is changed and item.state|d(\"present\") != 'absent' and ((ansible_system_capabilities_enforced|d())|bool and \"cap_sys_admin\" in ansible_system_capabilities) or not (ansible_system_capabilities_enforced|d(True))|bool)"}, "module_options": "swapon -p {{ item.item.priority | d(swapfile__priority) }} {{ item.item.path | d(item.item) }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/swapfile"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage swap files in /etc/fstab", "module": "ansible.posix.mount", "index": 5, "defined_in": "testdata/scm_repo/roles/swapfile/tasks/main.yml", "options": {"name": "Manage swap files in /etc/fstab", "with_items": "{{ swapfile__files }}"}, "module_options": {"src": "{{ item.path | d(item) }}", "name": "none", "fstype": "swap", "opts": "sw,nofail,pri={{ item.priority | d(swapfile__priority) }}", "dump": "0", "passno": "0", "state": "{{ item.state | d(\"present\") }}"}, "fqcn": "ansible.posix.mount", "used_in": ["testdata/scm_repo/roles/swapfile"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove swap files", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/swapfile/tasks/main.yml", "options": {"name": "Remove swap files", "with_items": "{{ swapfile__files }}", "when": "(item.state|d(\"present\") == 'absent')"}, "module_options": {"path": "{{ item.path | d(item) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/swapfile"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove legacy kernel parameters file", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/swapfile/tasks/main.yml", "options": {"name": "Remove legacy kernel parameters file"}, "module_options": {"path": "{{ swapfile__sysctl_file|d(\"/etc/sysctl.d/30-debops.swapfile.conf\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/swapfile"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "radvd", "defined_in": "testdata/scm_repo/roles/radvd", "task_yamls": ["testdata/scm_repo/roles/radvd/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/radvd/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/radvd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/radvd/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/radvd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install radvd support", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/radvd/tasks/main.yml", "options": {"name": "Install radvd support", "register": "radvd__register_packages", "until": "radvd__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (radvd__base_packages + radvd__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/radvd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate radvd configuration", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/radvd/tasks/main.yml", "options": {"name": "Generate radvd configuration", "notify": ["Test radvd and restart"]}, "module_options": {"src": "etc/radvd.conf.j2", "dest": "/etc/radvd.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/radvd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/radvd/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/radvd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save radvd local facts", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/radvd/tasks/main.yml", "options": {"name": "Save radvd local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/radvd.fact.j2", "dest": "/etc/ansible/facts.d/radvd.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/radvd"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 6, "defined_in": "testdata/scm_repo/roles/radvd/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/radvd"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "tcpwrappers", "defined_in": "testdata/scm_repo/roles/tcpwrappers", "task_yamls": ["testdata/scm_repo/roles/tcpwrappers/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/tcpwrappers/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/tcpwrappers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/tcpwrappers/tasks/main.yml", "options": {"name": "Install required packages", "register": "tcpwrappers__register_packages", "until": "tcpwrappers__register_packages is succeeded", "when": "tcpwrappers__enabled | bool"}, "module_options": {"name": "{{ q(\"flattened\", (tcpwrappers__base_packages + tcpwrappers__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/tcpwrappers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure /etc/hosts.allow.d directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/tcpwrappers/tasks/main.yml", "options": {"name": "Make sure /etc/hosts.allow.d directory exists"}, "module_options": {"path": "/etc/hosts.allow.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tcpwrappers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create /etc/hosts.allow.d/00_ansible", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/tcpwrappers/tasks/main.yml", "options": {"name": "Create /etc/hosts.allow.d/00_ansible"}, "module_options": {"src": "etc/hosts.allow.d/00_ansible.j2", "dest": "/etc/hosts.allow.d/00_ansible", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tcpwrappers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add/remove diversion of /etc/hosts.allow", "module": "dpkg_divert", "index": 4, "defined_in": "testdata/scm_repo/roles/tcpwrappers/tasks/main.yml", "options": {"name": "Add/remove diversion of /etc/hosts.allow", "when": "not ansible_check_mode|bool"}, "module_options": {"path": "/etc/hosts.allow", "divert": "{{ tcpwrappers__divert_hosts_allow }}", "state": "{{ \"present\" if tcpwrappers__enabled|bool else \"absent\" }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/tcpwrappers"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Allow access from Ansible Controller to sshd", "module": "ansible.builtin.template", "index": 5, "defined_in": "testdata/scm_repo/roles/tcpwrappers/tasks/main.yml", "options": {"name": "Allow access from Ansible Controller to sshd"}, "module_options": {"src": "etc/hosts.allow.d/ansible_controller.j2", "dest": "/etc/hosts.allow.d/10_ansible_controller", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tcpwrappers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove hosts.allow entries if requested", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/tcpwrappers/tasks/main.yml", "options": {"name": "Remove hosts.allow entries if requested", "with_flattened": ["{{ tcpwrappers__allow }}", "{{ tcpwrappers__group_allow }}", "{{ tcpwrappers__host_allow }}", "{{ tcpwrappers__dependent_allow }}", "{{ tcpwrappers__localhost_allow }}", "{{ tcpwrappers_allow | d([]) }}", "{{ tcpwrappers_group_allow | d([]) }}", "{{ tcpwrappers_host_allow | d([]) }}", "{{ tcpwrappers_dependent_allow | d([]) }}"], "when": "((item.daemon|d() or item.daemons|d()) and item.state|d() and item.state == 'absent')"}, "module_options": {"path": "/etc/hosts.allow.d/{{ item.weight | default(\"50\") }}_{{ item.filename | d((item.daemon if item.daemon is string else item.daemon[0]) + \"_allow\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tcpwrappers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate hosts.allow entries", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/tcpwrappers/tasks/main.yml", "options": {"name": "Generate hosts.allow entries", "with_flattened": ["{{ tcpwrappers__allow }}", "{{ tcpwrappers__group_allow }}", "{{ tcpwrappers__host_allow }}", "{{ tcpwrappers__dependent_allow }}", "{{ tcpwrappers__localhost_allow }}", "{{ tcpwrappers_allow | d([]) }}", "{{ tcpwrappers_group_allow | d([]) }}", "{{ tcpwrappers_host_allow | d([]) }}", "{{ tcpwrappers_dependent_allow | d([]) }}"], "when": "((item.daemon|d() or item.daemons|d()) and (item.state is undefined or item.state != 'absent'))"}, "module_options": {"src": "etc/hosts.allow.d/allow.j2", "dest": "/etc/hosts.allow.d/{{ item.weight | default(\"50\") }}_{{ item.filename | d((item.daemon if item.daemon is string else item.daemon[0]) + \"_allow\") }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tcpwrappers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Assemble hosts.allow.d", "module": "ansible.builtin.assemble", "index": 8, "defined_in": "testdata/scm_repo/roles/tcpwrappers/tasks/main.yml", "options": {"name": "Assemble hosts.allow.d", "when": "tcpwrappers__enabled | bool"}, "module_options": {"src": "/etc/hosts.allow.d", "dest": "/etc/hosts.allow", "backup": false, "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.assemble", "used_in": ["testdata/scm_repo/roles/tcpwrappers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local fact directory exists", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/tcpwrappers/tasks/main.yml", "options": {"name": "Make sure that Ansible local fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/tcpwrappers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save tcpwrappers local facts", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/tcpwrappers/tasks/main.yml", "options": {"name": "Save tcpwrappers local facts", "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/tcpwrappers.fact.j2", "dest": "/etc/ansible/facts.d/tcpwrappers.fact", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/tcpwrappers"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure access in /etc/hosts.deny", "module": "ansible.builtin.lineinfile", "index": 11, "defined_in": "testdata/scm_repo/roles/tcpwrappers/tasks/main.yml", "options": {"name": "Configure access in /etc/hosts.deny"}, "module_options": {"dest": "/etc/hosts.deny", "regexp": "^ALL: ALL", "line": "ALL: ALL", "create": true, "owner": "root", "group": "root", "mode": "0644", "state": "{{ \"present\" if (tcpwrappers__enabled  | bool and tcpwrappers__deny_all | bool) else \"absent\" }}"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/tcpwrappers"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "elasticsearch", "defined_in": "testdata/scm_repo/roles/elasticsearch", "task_yamls": ["testdata/scm_repo/roles/elasticsearch/tasks/main_env.yml", "testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml", "testdata/scm_repo/roles/elasticsearch/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare debops.elasticsearch environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main_env.yml", "options": {"name": "Prepare debops.elasticsearch environment"}, "module_options": {"elasticsearch__secret__directories": "{{ lookup(\"template\", \"lookup/elasticsearch__secret__directories.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check status of built-in users via Elasticsearch API", "module": "ansible.builtin.uri", "index": 0, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml", "options": {"name": "Check status of built-in users via Elasticsearch API", "register": "elasticsearch__register_api_builtin_users", "until": "elasticsearch__register_api_builtin_users.status in [ 200, 401 ]", "retries": 10, "delay": 5, "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"url": "{{ elasticsearch__api_base_url + \"/_security/user/elastic\" }}", "user": "{{ elasticsearch__api_username }}", "password": "{{ elasticsearch__api_password }}", "force_basic_auth": true, "method": "GET", "status_code": ["200", "401"]}, "fqcn": "ansible.builtin.uri", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize built-in users in Elasticsearch", "module": "ansible.builtin.shell", "index": 1, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml", "options": {"name": "Initialize built-in users in Elasticsearch", "args": {"executable": "bash", "chdir": "/usr/share/elasticsearch"}, "register": "elasticsearch__register_builtin_users", "changed_when": false, "when": "((not (ansible_local.elasticsearch.configured|d())|bool) or elasticsearch__register_api_builtin_users.status == 401)", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": "set -o nounset -o pipefail -o errexit && bin/elasticsearch-setup-passwords auto --batch | awk '$1 ~ /^PASSWORD/ {print $2, $4}'", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create required directories on Ansible Controller", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml", "options": {"name": "Create required directories on Ansible Controller", "loop": "{{ elasticsearch__register_builtin_users.stdout_lines }}", "become": false, "delegate_to": "localhost", "when": "elasticsearch__register_builtin_users.stdout_lines|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"path": "{{ secret + \"/elasticsearch/credentials/built-in/\" + item.split()[0] }}", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save generated user passwords on Ansible Controller", "module": "ansible.builtin.copy", "index": 3, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml", "options": {"name": "Save generated user passwords on Ansible Controller", "loop": "{{ elasticsearch__register_builtin_users.stdout_lines }}", "become": false, "delegate_to": "localhost", "when": "elasticsearch__register_builtin_users.stdout_lines|d()", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"content": "{{ item.split()[1] }}", "dest": "{{ secret + \"/elasticsearch/credentials/built-in/\" + item.split()[0] + \"/password\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage native roles in Elasticsearch", "module": "ansible.builtin.uri", "index": 4, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml", "options": {"name": "Manage native roles in Elasticsearch", "loop": "{{ elasticsearch__combined_native_roles | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "when": "elasticsearch__api_base_url and item.state|d('present') not in [ 'init', 'ignore' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"url": "{{ elasticsearch__api_base_url + \"/_security/role/\" + item.name }}", "method": "{{ \"DELETE\"         if (item.state|d(\"present\") in [ \"absent\" ]) else \"POST\" }}", "body_format": "{{ omit             if (item.state|d(\"present\") in [ \"absent\" ]) else \"json\" }}", "body": "{{ omit             if (item.state|d(\"present\") in [ \"absent\" ]) else (item.data | to_json) }}", "status_code": "{{ [ \"200\", \"404\" ] if (item.state|d(\"present\") in [ \"absent\" ]) else \"200\" }}", "user": "{{ elasticsearch__api_username }}", "password": "{{ elasticsearch__api_password }}", "force_basic_auth": true}, "fqcn": "ansible.builtin.uri", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage native users in Elasticsearch", "module": "ansible.builtin.uri", "index": 5, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml", "options": {"name": "Manage native users in Elasticsearch", "loop": "{{ elasticsearch__combined_native_users | debops.debops.parse_kv_items }}", "loop_control": {"label": "{{ {\"name\": item.name, \"state\": item.state|d(\"present\")} }}"}, "when": "elasticsearch__api_base_url and item.state|d('present') not in [ 'init', 'ignore' ]", "no_log": "{{ debops__no_log | d(True) }}"}, "module_options": {"url": "{{ elasticsearch__api_base_url + \"/_security/user/\" + item.name }}", "method": "{{ \"DELETE\"         if (item.state|d(\"present\") in [ \"absent\" ]) else \"POST\" }}", "body_format": "{{ omit             if (item.state|d(\"present\") in [ \"absent\" ]) else \"json\" }}", "body": "{{ omit             if (item.state|d(\"present\") in [ \"absent\" ]) else (item.data | to_json) }}", "status_code": "{{ [ \"200\", \"404\" ] if (item.state|d(\"present\") in [ \"absent\" ]) else \"200\" }}", "user": "{{ elasticsearch__api_username }}", "password": "{{ elasticsearch__api_password }}", "force_basic_auth": true}, "fqcn": "ansible.builtin.uri", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Elasticsearch packages", "module": "ansible.builtin.package", "index": 3, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Install Elasticsearch packages", "notify": ["Refresh host facts"], "register": "elasticsearch__register_packages", "until": "elasticsearch__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (elasticsearch__base_packages + elasticsearch__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Add Elasticsearch UNIX account to selected groups", "module": "ansible.builtin.user", "index": 4, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Add Elasticsearch UNIX account to selected groups", "when": "elasticsearch__additional_groups|d()"}, "module_options": {"name": "{{ elasticsearch__user }}", "groups": "{{ elasticsearch__additional_groups }}", "append": true}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Elasticsearch local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Save Elasticsearch local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/elasticsearch.fact.j2", "dest": "/etc/ansible/facts.d/elasticsearch.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if the dependent config file exists", "module": "ansible.builtin.stat", "index": 8, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Check if the dependent config file exists", "register": "elasticsearch__register_dependent_config_file", "become": false, "delegate_to": "localhost", "when": "(ansible_local.elasticsearch.installed|d())", "tags": ["role::elasticsearch:config"]}, "module_options": {"path": "{{ secret + \"/elasticsearch/dependent_config/\" + inventory_hostname + \"/config.json\" }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Load the dependent configuration from Ansible Controller", "module": "ansible.builtin.slurp", "index": 9, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Load the dependent configuration from Ansible Controller", "register": "elasticsearch__register_dependent_config", "become": false, "delegate_to": "localhost", "when": "(ansible_local.elasticsearch.installed|d() and elasticsearch__register_dependent_config_file.stat.exists|bool)", "tags": ["role::elasticsearch:config"]}, "module_options": {"src": "{{ secret + \"/elasticsearch/dependent_config/\" + inventory_hostname + \"/config.json\" }}"}, "fqcn": "ansible.builtin.slurp", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original configuration files", "module": "dpkg_divert", "index": 10, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Divert original configuration files", "loop": ["/etc/elasticsearch/elasticsearch.yml", "/etc/elasticsearch/jvm.options", "/usr/lib/sysctl.d/elasticsearch.conf", "/usr/share/elasticsearch/jdk/conf/security/java.policy"], "notify": ["Start elasticsearch"], "tags": ["role::elasticsearch:config"]}, "module_options": {"path": "{{ item }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Create systemd configuration directory", "module": "ansible.builtin.file", "index": 11, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Create systemd configuration directory"}, "module_options": {"path": "/etc/systemd/system/elasticsearch.service.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate systemd configuration", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Generate systemd configuration", "notify": ["Reload service manager"]}, "module_options": {"src": "etc/systemd/system/elasticsearch.service.d/ansible.conf.j2", "dest": "/etc/systemd/system/elasticsearch.service.d/ansible.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Elasticsearch configuration", "module": "ansible.builtin.template", "index": 13, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Generate Elasticsearch configuration", "notify": ["Restart elasticsearch"], "tags": ["role::elasticsearch:config"]}, "module_options": {"src": "etc/elasticsearch/elasticsearch.yml.j2", "dest": "/etc/elasticsearch/elasticsearch.yml", "owner": "root", "group": "{{ elasticsearch__group }}", "mode": "0660"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Elasticsearch JVM configuration", "module": "ansible.builtin.template", "index": 14, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Generate Elasticsearch JVM configuration", "notify": ["Restart elasticsearch"], "when": "elasticsearch__version is version(\"5.0.0\", \">=\")", "tags": ["role::elasticsearch:config"]}, "module_options": {"src": "etc/elasticsearch/jvm.options.j2", "dest": "/etc/elasticsearch/jvm.options", "owner": "root", "group": "{{ elasticsearch__group }}", "mode": "0660"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Java Policy configuration file", "module": "ansible.builtin.template", "index": 15, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Generate Java Policy configuration file", "notify": ["Restart elasticsearch"], "when": "elasticsearch__version is version(\"7.0.0\", \">=\")"}, "module_options": {"src": "usr/share/elasticsearch/jdk/conf/security/java.policy.j2", "dest": "/usr/share/elasticsearch/jdk/conf/security/java.policy", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage data paths", "module": "ansible.builtin.file", "index": 16, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Manage data paths", "with_flattened": ["{{ elasticsearch__path_data }}"]}, "module_options": {"path": "{{ item }}", "state": "directory", "owner": "{{ elasticsearch__user }}", "group": "{{ elasticsearch__group }}", "mode": "0750"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload systemd daemons", "module": "ansible.builtin.meta", "index": 17, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Reload systemd daemons"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check state of installed Elasticsearch plugins", "module": "ansible.builtin.command", "index": 18, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Check state of installed Elasticsearch plugins", "args": {"chdir": "/usr/share/elasticsearch"}, "register": "elasticsearch__register_plugins", "changed_when": false, "check_mode": false}, "module_options": "bin/elasticsearch-plugin list", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Elasticsearch plugins", "module": "ansible.builtin.command", "index": 19, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Install Elasticsearch plugins", "args": {"chdir": "/usr/share/elasticsearch"}, "notify": ["Restart elasticsearch"], "with_flattened": ["{{ elasticsearch__combined_plugins }}"], "when": "(item.name|d() and item.state|d('present') != 'absent' and (item.name if ':' not in item.name else item.name.split(':')[1]) not in elasticsearch__register_plugins.stdout_lines)"}, "module_options": "bin/elasticsearch-plugin install {{ item.url | d(item.name) }} --batch", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove Elasticsearch plugins", "module": "ansible.builtin.command", "index": 20, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Remove Elasticsearch plugins", "args": {"chdir": "/usr/share/elasticsearch"}, "notify": ["Restart elasticsearch"], "with_flattened": ["{{ elasticsearch__combined_plugins }}"], "when": "(item.name|d() and item.state|d('present') == 'absent' and (item.name if ':' not in item.name else item.name.split(':')[1]) in elasticsearch__register_plugins.stdout_lines)"}, "module_options": "bin/elasticsearch-plugin remove {{ item.name }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save Elasticsearch dependent configuration on Ansible Controller", "module": "ansible.builtin.template", "index": 21, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Save Elasticsearch dependent configuration on Ansible Controller", "become": false, "delegate_to": "localhost", "tags": ["role::elasticsearch:config"]}, "module_options": {"src": "secret/elasticsearch/dependent_config/config.json.j2", "dest": "{{ secret + \"/elasticsearch/dependent_config/\" + inventory_hostname + \"/config.json\" }}", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that Elasticsearch is restarted", "module": "ansible.builtin.meta", "index": 22, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Ensure that Elasticsearch is restarted"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage Elasticsearch authentication", "module": "import_tasks", "index": 23, "defined_in": "testdata/scm_repo/roles/elasticsearch/tasks/main.yml", "options": {"name": "Manage Elasticsearch authentication", "run_once": true, "when": "elasticsearch__xpack_enabled|bool and elasticsearch__pki_enabled|bool"}, "module_options": "authentication.yml", "fqcn": "ansible.builtin.import_tasks", "used_in": ["testdata/scm_repo/roles/elasticsearch"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "apache", "defined_in": "testdata/scm_repo/roles/apache", "task_yamls": ["testdata/scm_repo/roles/apache/tasks/main_env.yml", "testdata/scm_repo/roles/apache/tasks/apache_module_state.yml", "testdata/scm_repo/roles/apache/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/apache/tasks/main_env.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure base packages are in there desired state", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/apache/tasks/main_env.yml", "options": {"name": "Ensure base packages are in there desired state", "with_flattened": ["{{ apache__base_packages  }}"], "register": "apache__register_base_packages", "until": "apache__register_base_packages is succeeded", "tags": ["role::apache:pkgs"]}, "module_options": {"name": "{{ item }}", "state": "{{ \"present\" if (apache__deploy_state == \"present\") else \"absent\" }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/apache/tasks/main_env.yml", "options": {"name": "Make sure Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create local facts of Apache", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/apache/tasks/main_env.yml", "options": {"name": "Create local facts of Apache", "notify": ["Refresh host facts"]}, "module_options": {"src": "etc/ansible/facts.d/apache.fact.j2", "dest": "/etc/ansible/facts.d/apache.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 4, "defined_in": "testdata/scm_repo/roles/apache/tasks/main_env.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable/disable Apache modules", "module": "debops.debops.apache2_module", "index": 0, "defined_in": "testdata/scm_repo/roles/apache/tasks/apache_module_state.yml", "options": {"name": "Enable/disable Apache modules", "notify": ["Test apache and reload"], "when": "(item.key in apache__tpl_available_modules and item.value.enabled|d(True) != omit and apache__deploy_state == \"present\")", "with_dict": "{{ apache__combined_modules }}", "tags": ["role::apache:modules"]}, "module_options": {"name": "{{ item.key }}", "state": "{{ (item.value.enabled if (item.value is mapping) else item.value) | bool | ternary(\"present\", \"absent\") }}", "force": "{{ item.value.force|d(False) | bool }}"}, "fqcn": "debops.debops.apache2_module", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure optional packages are in there desired state", "module": "ansible.builtin.package", "index": 1, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Ensure optional packages are in there desired state", "register": "apache__register_packages", "until": "apache__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (apache__packages + apache__group_packages + apache__host_packages + apache__dependent_packages)) }}", "state": "{{ \"present\" if (apache__deploy_state == \"present\") else \"absent\" }}"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of available modules", "module": "ansible.builtin.find", "index": 2, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Get list of available modules", "register": "apache__register_mods_available", "tags": ["role::apache:modules"]}, "module_options": {"file_type": "file", "paths": ["{{ apache__config_path + \"/mods-available/\" }}"], "patterns": ["*.load"]}, "fqcn": "ansible.builtin.find", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set list of available modules", "module": "ansible.builtin.set_fact", "index": 3, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Set list of available modules", "tags": ["role::apache:modules"]}, "module_options": {"apache__tpl_available_modules": "{{ apache__register_mods_available.files|d({}) | map(attribute=\"path\") | map(\"replace\", apache__config_path + \"/mods-available/\", \"\") | map(\"regex_replace\", \"\\.load$\", \"\") | list }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure Apache module state", "module": "ansible.builtin.include_tasks", "index": 4, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Configure Apache module state"}, "module_options": "apache_module_state.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert conf-available configuration", "module": "dpkg_divert", "index": 5, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Divert conf-available configuration", "when": "(item.value.type|d(\"default\") in [\"divert\"])", "with_dict": "{{ apache__combined_snippets }}"}, "module_options": {"path": "{{ apache__config_path + \"/conf-available/\" + item.key + \".conf\" }}", "divert": "{{ (item.value.divert | d(apache__config_path + \"/conf-available/\" + (item.value.divert_filename|d(item.key)) + \".conf\")) + item.value.divert_suffix|d(\".dpkg-divert\") }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove conf-available snippets", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Remove conf-available snippets", "when": "(item.value.state|d(\"present\") == \"absent\")", "with_dict": "{{ apache__combined_snippets }}", "tags": ["role::apache:vhosts"]}, "module_options": {"path": "{{ apache__config_path + \"/conf-available/\" + item.key + \".conf\" }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create conf-available snippets", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Create conf-available snippets", "when": "(item.value.state|d(\"present\") != \"absent\" and (item.value.type|d(\"default\") not in [\"divert\", \"dont-create\"] or item.value.raw|d()))", "with_dict": "{{ apache__combined_snippets }}", "notify": ["Test apache and reload"]}, "module_options": {"src": "etc/apache2/conf-available/{{ \"raw\" if (item.value.type|d(\"default\") in [\"divert\", \"raw\"] and item.value.raw|d()) else item.key }}.conf.j2", "dest": "{{ apache__config_path + \"/conf-available/\" + item.key + \".conf\" }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable/disable configuration snippets", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Enable/disable configuration snippets", "when": "(item.value.type|d(\"default\") not in [\"divert\"])", "with_dict": "{{ apache__combined_snippets }}", "notify": ["Test apache and reload"]}, "module_options": {"path": "{{ apache__config_path + \"/conf-enabled/\" + item.key + \".conf\" }}", "src": "{{ (((item.value.enabled|d(True) if (item.value is mapping) else item.value|d(True))) if (item.value.state|d(\"present\") != \"absent\") else False) | bool | ternary(\"../conf-available/\" + item.key + \".conf\", omit) }}", "mode": "0644", "force": "{{ ansible_check_mode|d() | bool }}", "state": "{{ (((item.value.enabled|d(True) if (item.value is mapping) else item.value|d(True))) if (item.value.state|d(\"present\") != \"absent\") else False) | bool | ternary(\"link\", \"absent\") }}"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert sites-available configuration", "module": "dpkg_divert", "index": 9, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Divert sites-available configuration", "when": "(item.type|d(apache__vhost_type) in [\"divert\"])", "with_flattened": "{{ apache__combined_vhosts }}"}, "module_options": {"path": "{{ apache__config_path + \"/sites-available/\" + item.filename|d([item.name] | flatten | first | d(\"default\")) + \".conf\" }}", "divert": "{{ (item.divert | d(apache__config_path + \"/sites-available/\" + item.divert_filename|d(item.filename|d([item.name] | flatten | first | d(\"default\"))) + \".conf\") + item.divert_suffix|d(\".dpkg-divert\")) }}"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove sites-available configuration", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Remove sites-available configuration", "when": "(item.state|d(\"present\") == 'absent')", "with_flattened": "{{ apache__combined_vhosts }}", "tags": ["role::apache:vhosts"]}, "module_options": {"path": "{{ apache__config_path }}/sites-available/{{ item.filename | d(item.name if (item.name is string) else item.name[0] | d(\"default\")) }}.conf", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create sites-available configuration", "module": "ansible.builtin.template", "index": 11, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Create sites-available configuration", "notify": ["Test apache and reload"], "when": "(item.state|d(\"present\") != \"absent\" and item.type|d(apache__vhost_type) not in [\"divert\", \"dont-create\"])", "with_flattened": "{{ apache__combined_vhosts }}", "tags": ["role::apache:vhosts"]}, "module_options": {"src": "etc/apache2/sites-available/{{ item.type | d(apache__vhost_type) }}.conf.j2", "dest": "{{ apache__config_path }}/sites-available/{{ item.filename | d(item.name if (item.name is string) else item.name[0] | d(\"default\")) }}.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable/disable Apache virtual hosts", "module": "ansible.builtin.file", "index": 12, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Enable/disable Apache virtual hosts", "notify": ["Test apache and reload"], "when": "(item.type|d(apache__vhost_type) not in [\"divert\"])", "with_flattened": "{{ apache__combined_vhosts }}", "tags": ["role::apache:vhosts"]}, "module_options": {"path": "{{ apache__config_path }}/sites-enabled/{{ item.filename | d(item.name if (item.name is string) else item.name[0] | d(\"default\")) }}.conf", "src": "{{ (\"../sites-available/\" + item.filename | d(item.name if (item.name is string) else item.name[0] | d(\"default\")) + \".conf\") if (item.enabled|d(True) | bool) else omit }}", "force": "{{ item.force|d(ansible_check_mode) | bool }}", "state": "{{ item.enabled|d(True) | bool | ternary(\"link\", \"absent\") if (item.state|d(\"present\") != \"absent\") else \"absent\" }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Detect if the rewrite module has been used in the active configuration", "module": "ansible.builtin.shell", "index": 13, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Detect if the rewrite module has been used in the active configuration", "register": "apache__register_mod_rewrite_used", "check_mode": false, "failed_when": "apache__register_mod_rewrite_used.rc not in [ 0, 1 ]", "changed_when": false, "when": "apache__register_mod_rewrite_used is undefined"}, "module_options": "grep --recursive --ignore-case '^\\s*RewriteEngine On' {{ apache__config_path | quote }}", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Finish configuration of Apache module state", "module": "ansible.builtin.include_tasks", "index": 14, "defined_in": "testdata/scm_repo/roles/apache/tasks/main.yml", "options": {"name": "Finish configuration of Apache module state"}, "module_options": "apache_module_state.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/apache"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "debops_legacy", "defined_in": "testdata/scm_repo/roles/debops_legacy", "task_yamls": ["testdata/scm_repo/roles/debops_legacy/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/debops_legacy/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/debops_legacy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove legacy diversions", "module": "dpkg_divert", "index": 1, "defined_in": "testdata/scm_repo/roles/debops_legacy/tasks/main.yml", "options": {"name": "Remove legacy diversions", "with_items": "{{ debops_legacy__remove_combined_diversions | debops.debops.parse_kv_items }}", "when": "debops_legacy__enabled|bool and item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ item.name }}", "divert": "{{ item.diversion|d(item.name + \".dpkg-divert\") }}", "state": "absent", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/debops_legacy"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove legacy packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/debops_legacy/tasks/main.yml", "options": {"name": "Remove legacy packages", "with_items": "{{ debops_legacy__remove_combined_packages | debops.debops.parse_kv_items }}", "when": "debops_legacy__enabled|bool and item.state|d('present') == 'absent'"}, "module_options": {"name": "{{ item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/debops_legacy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove legacy files and directories", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/debops_legacy/tasks/main.yml", "options": {"name": "Remove legacy files and directories", "with_items": "{{ debops_legacy__remove_combined_files | debops.debops.parse_kv_items }}", "when": "debops_legacy__enabled|bool and item.state|d('present') == 'absent'"}, "module_options": {"path": "{{ item.name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/debops_legacy"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "ruby", "defined_in": "testdata/scm_repo/roles/ruby", "task_yamls": ["testdata/scm_repo/roles/ruby/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Install Ruby packages", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/ruby/tasks/main.yml", "options": {"name": "Install Ruby packages", "register": "ruby__register_packages", "until": "ruby__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (ruby__base_packages + ruby__dev_packages + ruby__packages + ruby__group_packages + ruby__host_packages + ruby__dependent_packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/ruby"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Ruby gems", "module": "gem", "index": 1, "defined_in": "testdata/scm_repo/roles/ruby/tasks/main.yml", "options": {"name": "Install Ruby gems", "with_flattened": ["{{ ruby__gems }}", "{{ ruby__group_gems }}", "{{ ruby__host_gems }}", "{{ ruby__dependent_gems }}"]}, "module_options": {"name": "{{ item.name if item.name|d() else item }}", "state": "{{ item.state                | d(\"present\") }}", "user_install": "{{ item.user_install         | d(False) }}", "version": "{{ item.version              | d(omit) }}", "repository": "{{ item.repository           | d(omit) }}", "include_doc": "{{ item.include_doc          | d(omit) }}", "build_flags": "{{ item.build_flags          | d(omit) }}", "executable": "{{ item.executable           | d(omit) }}", "include_dependencies": "{{ item.include_dependencies | d(omit) }}"}, "fqcn": "community.general.gem", "used_in": ["testdata/scm_repo/roles/ruby"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Make sure that required groups exist", "module": "ansible.builtin.group", "index": 2, "defined_in": "testdata/scm_repo/roles/ruby/tasks/main.yml", "options": {"name": "Make sure that required groups exist", "with_flattened": ["{{ ruby__user_gems }}", "{{ ruby__group_user_gems }}", "{{ ruby__host_user_gems }}", "{{ ruby__dependent_user_gems }}"], "when": "(item.group|d() or item.owner|d())"}, "module_options": {"name": "{{ item.group | d(item.owner) }}", "system": "{{ (item.system | d(True)) | bool }}", "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/ruby"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that required users exist", "module": "ansible.builtin.user", "index": 3, "defined_in": "testdata/scm_repo/roles/ruby/tasks/main.yml", "options": {"name": "Make sure that required users exist", "with_flattened": ["{{ ruby__user_gems }}", "{{ ruby__group_user_gems }}", "{{ ruby__host_user_gems }}", "{{ ruby__dependent_user_gems }}"], "when": "item.owner|d()"}, "module_options": {"name": "{{ item.owner }}", "group": "{{ item.group | d(item.owner) }}", "home": "{{ item.home | d((ansible_local.fhs.home | d(\"/var/local\")) + \"/\" + item.owner) }}", "system": "{{ (item.system | d(True)) | bool }}", "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/ruby"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install Ruby user gems", "module": "gem", "index": 4, "defined_in": "testdata/scm_repo/roles/ruby/tasks/main.yml", "options": {"name": "Install Ruby user gems", "with_flattened": ["{{ ruby__user_gems }}", "{{ ruby__group_user_gems }}", "{{ ruby__host_user_gems }}", "{{ ruby__dependent_user_gems }}"], "become": true, "become_user": "{{ item.user | d(item.owner) }}", "when": "(item.user|d() or item.owner|d())"}, "module_options": {"name": "{{ item.name }}", "state": "{{ item.state                | d(\"present\") }}", "user_install": "{{ item.user_install         | d(True) }}", "version": "{{ item.version              | d(omit) }}", "repository": "{{ item.repository           | d(omit) }}", "include_doc": "{{ item.include_doc          | d(omit) }}", "build_flags": "{{ item.build_flags          | d(omit) }}", "executable": "{{ item.executable           | d(omit) }}", "include_dependencies": "{{ item.include_dependencies | d(omit) }}"}, "fqcn": "community.general.gem", "used_in": ["testdata/scm_repo/roles/ruby"], "annotations": {"use-non-builtin-module": true}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "dhcrelay", "defined_in": "testdata/scm_repo/roles/dhcrelay", "task_yamls": ["testdata/scm_repo/roles/dhcrelay/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/dhcrelay/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dhcrelay"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/dhcrelay/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dhcrelay"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install ISC DHCP relay packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/dhcrelay/tasks/main.yml", "options": {"name": "Install ISC DHCP relay packages", "register": "dhcrelay__register_packages", "until": "dhcrelay__register_packages is succeeded"}, "module_options": {"name": "{{ (dhcrelay__base_packages + dhcrelay__packages)|flatten }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/dhcrelay"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert ISC DHCP relay defaults", "module": "dpkg_divert", "index": 3, "defined_in": "testdata/scm_repo/roles/dhcrelay/tasks/main.yml", "options": {"name": "Divert ISC DHCP relay defaults"}, "module_options": {"path": "/etc/default/isc-dhcp-relay"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/dhcrelay"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure ISC DHCP relay defaults", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/dhcrelay/tasks/main.yml", "options": {"name": "Configure ISC DHCP relay defaults", "notify": ["Restart isc-dhcp-relay"]}, "module_options": {"src": "etc/default/isc-dhcp-relay.j2", "dest": "/etc/default/isc-dhcp-relay", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhcrelay"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/dhcrelay/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dhcrelay"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save local facts", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/dhcrelay/tasks/main.yml", "options": {"name": "Save local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/dhcrelay.fact.j2", "dest": "/etc/ansible/facts.d/dhcrelay.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dhcrelay"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 7, "defined_in": "testdata/scm_repo/roles/dhcrelay/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/dhcrelay"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "imapproxy", "defined_in": "testdata/scm_repo/roles/imapproxy", "task_yamls": ["testdata/scm_repo/roles/imapproxy/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/imapproxy/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/imapproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/imapproxy/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/imapproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install imapproxy packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/imapproxy/tasks/main.yml", "options": {"name": "Install imapproxy packages", "register": "imapproxy__register_packages", "until": "imapproxy__register_packages is succeeded", "tags": ["role::imapproxy:pkg"]}, "module_options": {"name": "{{ q(\"flattened\", (imapproxy__base_packages + imapproxy__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/imapproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/imapproxy/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/imapproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save imapproxy local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/imapproxy/tasks/main.yml", "options": {"name": "Save imapproxy local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/imapproxy.fact.j2", "dest": "/etc/ansible/facts.d/imapproxy.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/imapproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/imapproxy/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/imapproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original imapproxy configuration file", "module": "dpkg_divert", "index": 6, "defined_in": "testdata/scm_repo/roles/imapproxy/tasks/main.yml", "options": {"name": "Divert original imapproxy configuration file", "notify": ["Restart imapproxy"], "tags": ["role::imapproxy:config"]}, "module_options": {"path": "/etc/imapproxy.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/imapproxy"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate imapproxy configuration", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/imapproxy/tasks/main.yml", "options": {"name": "Generate imapproxy configuration", "notify": ["Restart imapproxy"], "tags": ["role::imapproxy:config"]}, "module_options": {"src": "etc/imapproxy.conf.j2", "dest": "/etc/imapproxy.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/imapproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that PKI hook directory exists", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/imapproxy/tasks/main.yml", "options": {"name": "Make sure that PKI hook directory exists", "when": "imapproxy__pki|bool"}, "module_options": {"path": "{{ imapproxy__pki_hook_path }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/imapproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage PKI imapproxy hook", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/imapproxy/tasks/main.yml", "options": {"name": "Manage PKI imapproxy hook", "when": "imapproxy__pki|bool"}, "module_options": {"src": "etc/pki/hooks/imapproxy.j2", "dest": "{{ imapproxy__pki_hook_path + \"/\" + imapproxy__pki_hook_name }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/imapproxy"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the PKI imapproxy hook is absent", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/imapproxy/tasks/main.yml", "options": {"name": "Ensure the PKI imapproxy hook is absent", "when": "not (imapproxy__pki|bool)"}, "module_options": {"path": "{{ imapproxy__pki_hook_path + \"/\" imapproxy__pki_hook_name }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/imapproxy"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "lvm", "defined_in": "testdata/scm_repo/roles/lvm", "task_yamls": ["testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml", "testdata/scm_repo/roles/lvm/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Rescan LVM Volume Groups", "module": "ansible.builtin.command", "index": 0, "defined_in": "testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml", "options": {"name": "Rescan LVM Volume Groups", "when": "((lvm__register_devices_filter|d() and lvm__register_devices_filter is changed) or (lvm__register_devices_global_filter|d() and lvm__register_devices_global_filter is changed))"}, "module_options": "vgscan", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Unmount filesystems if requested", "module": "ansible.posix.mount", "index": 1, "defined_in": "testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml", "options": {"name": "Unmount filesystems if requested", "with_items": "{{ lvm__logical_volumes }}", "when": "lvm__logical_volumes|d(False) and item.vg|d() and item.lv|d() and item.size|d() and item.mount|d(False) and item.state|d('present') == 'absent'"}, "module_options": {"name": "{{ item.mount }}", "src": "{{ \"/dev/mapper/\" + item.vg | regex_replace(\"-\", \"--\") + \"-\" + item.lv | regex_replace(\"-\", \"--\") }}", "fstype": "{{ item.fs_type | d(lvm__default_fs_type) }}", "state": "absent"}, "fqcn": "ansible.posix.mount", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Remove Logical Volumes if requested", "module": "lvol", "index": 2, "defined_in": "testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml", "options": {"name": "Remove Logical Volumes if requested", "with_items": "{{ lvm__logical_volumes }}", "when": "lvm__logical_volumes|d(False) and item.vg|d() and item.lv|d() and item.size|d() and item.state|d('present') == 'absent'"}, "module_options": {"vg": "{{ item.vg }}", "lv": "{{ item.lv }}", "size": "{{ item.size }}", "force": "{{ item.force | d(omit) }}", "state": "absent"}, "fqcn": "community.general.lvol", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage LVM Volume Groups", "module": "lvg", "index": 3, "defined_in": "testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml", "options": {"name": "Manage LVM Volume Groups", "with_items": "{{ lvm__volume_groups }}", "when": "item.vg|d(False) and item.pvs|d(False)"}, "module_options": {"vg": "{{ item.vg }}", "pvs": "{{ item.pvs if item.pvs is string else (item.pvs | join(\",\")) }}", "state": "{{ item.state   | d(\"present\") }}", "pesize": "{{ item.pesize  | d(omit) }}", "force": "{{ item.force   | d(omit) }}", "vg_options": "{{ item.options | d(omit) }}"}, "fqcn": "community.general.lvg", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage LVM Thin Pools", "module": "lvol", "index": 4, "defined_in": "testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml", "options": {"name": "Manage LVM Thin Pools", "with_items": "{{ lvm__thin_pools }}", "when": "lvm__thin_pools|d(False) and item.vg|d() and item.thinpool|d() and item.size|d() and item.state|d('present') != 'absent'"}, "module_options": {"vg": "{{ item.vg }}", "thinpool": "{{ item.thinpool }}", "size": "{{ item.size }}", "opts": "{{ item.opts | d(omit) }}"}, "fqcn": "community.general.lvol", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage LVM Logical Volumes", "module": "lvol", "index": 5, "defined_in": "testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml", "options": {"name": "Manage LVM Logical Volumes", "with_items": "{{ lvm__logical_volumes }}", "when": "lvm__logical_volumes|d(False) and item.vg|d() and item.lv|d() and item.size|d() and item.state|d('present') != 'absent'", "register": "lvm__register_logical_volumes"}, "module_options": {"lv": "{{ item.lv }}", "vg": "{{ item.vg }}", "size": "{{ item.size }}", "opts": "{{ item.opts | d(omit) }}", "thinpool": "{{ item.thinpool | d(omit) }}", "force": "{{ item.force | d(omit) }}", "shrink": "{{ item.force | d(False) }}", "state": "present"}, "fqcn": "community.general.lvol", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage filesystems", "module": "filesystem", "index": 6, "defined_in": "testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml", "options": {"name": "Manage filesystems", "with_items": "{{ lvm__logical_volumes }}", "when": "lvm__logical_volumes|d(False) and item.vg|d() and item.lv|d() and item.size|d() and item.state|d('present') != 'absent' and ((item.mount|d() and item.fs|d(True)) or item.fs|d()) and (not ansible_check_mode or (ansible_check_mode and lvm__register_logical_volumes is not changed))"}, "module_options": {"dev": "{{ \"/dev/mapper/\" + item.vg | regex_replace(\"-\", \"--\") + \"-\" + item.lv | regex_replace(\"-\", \"--\") }}", "fstype": "{{ item.fs_type  | d(lvm__default_fs_type) }}", "force": "{{ item.fs_force | d(omit) }}", "opts": "{{ item.fs_opts  | d(omit) }}", "resizefs": "{{ item.fs_resizefs | d(omit) }}"}, "fqcn": "community.general.filesystem", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Manage mount points", "module": "ansible.posix.mount", "index": 7, "defined_in": "testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml", "options": {"name": "Manage mount points", "with_items": "{{ lvm__logical_volumes }}", "when": "lvm__logical_volumes|d(False) and item.vg|d() and item.lv|d() and item.size|d() and item.fs|d(True) and item.mount|d() and item.state|d('present') != 'absent'"}, "module_options": {"name": "{{ item.mount }}", "src": "{{ \"/dev/mapper/\" + item.vg | regex_replace(\"-\", \"--\") + \"-\" + item.lv | regex_replace(\"-\", \"--\") }}", "fstype": "{{ item.fs_type      | d(lvm__default_fs_type) }}", "opts": "{{ item.mount_opts   | d(lvm__default_mount_options) }}", "state": "{{ item.mount_state  | d(\"mounted\") }}", "dump": "{{ item.mount_dump   | d(omit) }}", "passno": "{{ item.mount_passno | d(omit) }}", "fstab": "{{ item.mount_fstab  | d(omit) }}"}, "fqcn": "ansible.posix.mount", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Install LVM support", "module": "ansible.builtin.package", "index": 0, "defined_in": "testdata/scm_repo/roles/lvm/tasks/main.yml", "options": {"name": "Install LVM support", "register": "lvm__register_packages", "until": "lvm__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", lvm__packages) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original lvm.conf", "module": "dpkg_divert", "index": 1, "defined_in": "testdata/scm_repo/roles/lvm/tasks/main.yml", "options": {"name": "Divert original lvm.conf"}, "module_options": {"path": "/etc/lvm/lvm.conf"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Check LVM version", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/lvm/tasks/main.yml", "options": {"name": "Check LVM version", "environment": {"LC_MESSAGES": "C"}, "args": {"executable": "bash"}, "register": "lvm__register_version", "changed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && dpkg-query -W -f='${Version}\\n' 'lvm2' | grep -v '^$' | cut -d- -f1", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Lookup base LVM configuration", "module": "ansible.builtin.include_vars", "index": 3, "defined_in": "testdata/scm_repo/roles/lvm/tasks/main.yml", "options": {"name": "Lookup base LVM configuration", "with_first_found": ["{{ \"lvm_config_\" + lvm__config_lookup + \".yml\" }}", "{{ \"lvm_config_\" + lvm__register_version.stdout + \".yml\" }}", "{{ \"lvm_config_\" + ansible_distribution | lower + \"_\" + ansible_distribution_release + \".yml\" }}", "{{ \"lvm_config_\" + ansible_distribution | lower + \".yml\" }}", "lvm_config_default.yml"]}, "module_options": "{{ item }}", "fqcn": "ansible.builtin.include_vars", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure LVM", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/lvm/tasks/main.yml", "options": {"name": "Configure LVM"}, "module_options": {"src": "etc/lvm/lvm.conf.j2", "dest": "/etc/lvm/lvm.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable/disable lvm2-lvmetad socket", "module": "ansible.builtin.systemd", "index": 5, "defined_in": "testdata/scm_repo/roles/lvm/tasks/main.yml", "options": {"name": "Enable/disable lvm2-lvmetad socket", "when": "(ansible_distribution_release in [ 'stretch', 'trusty', 'xenial', 'bionic' ])"}, "module_options": {"name": "lvm2-lvmetad.socket", "state": "{{ \"started\" if lvm__global_use_lvmetad else \"stopped\" }}", "enabled": "{{ lvm__global_use_lvmetad }}"}, "fqcn": "ansible.builtin.systemd", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage LVM", "module": "ansible.builtin.include_tasks", "index": 6, "defined_in": "testdata/scm_repo/roles/lvm/tasks/main.yml", "options": {"name": "Manage LVM", "when": "(((ansible_system_capabilities_enforced|d())|bool and \"cap_sys_admin\" in ansible_system_capabilities) or not (ansible_system_capabilities_enforced|d(True))|bool)"}, "module_options": "manage_lvm.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/lvm"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "cron", "defined_in": "testdata/scm_repo/roles/cron", "task_yamls": ["testdata/scm_repo/roles/cron/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install cron packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Install cron packages", "register": "cron__register_packages", "until": "cron__register_packages is succeeded", "when": "cron__enabled|bool"}, "module_options": {"name": "{{ q(\"flattened\", (cron__base_packages + cron__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists", "tags": ["role::cron:crontab"]}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save cron local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Save cron local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts", "role::cron:crontab"]}, "module_options": {"src": "etc/ansible/facts.d/cron.fact.j2", "dest": "/etc/ansible/facts.d/cron.fact", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified", "tags": ["role::cron:crontab"]}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the original crontab configuration", "module": "dpkg_divert", "index": 6, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Divert the original crontab configuration", "when": "cron__enabled|bool and ansible_pkg_mgr == 'apt'", "tags": ["role::cron:crontab"]}, "module_options": {"path": "/etc/crontab", "state": "{{ cron__crontab_deploy_state }}", "delete": true}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate crontab configuration file", "module": "ansible.builtin.template", "index": 7, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Generate crontab configuration file", "when": "cron__enabled|bool and cron__crontab_deploy_state == 'present'", "tags": ["role::cron:crontab"]}, "module_options": {"src": "etc/crontab.j2", "dest": "/etc/crontab", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove custom cron files", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Remove custom cron files", "with_subelements": ["{{ cron__combined_jobs | selectattr(\"custom_files\", \"defined\") | list }}", "custom_files"], "when": "(cron__enabled|bool and (item.0.state|d('present') == 'absent' or item.1.state|d('present') == 'absent') and (item.1.src|d() or item.1.content|d()) and item.1.dest|d())"}, "module_options": {"dest": "{{ item.1.dest }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage custom cron files", "module": "ansible.builtin.copy", "index": 9, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Manage custom cron files", "with_subelements": ["{{ cron__combined_jobs | selectattr(\"custom_files\", \"defined\") | list }}", "custom_files"], "when": "(cron__enabled|bool and item.0.state|d('present') not in [ 'absent', 'ignore' ] and item.1.state|d('present') != 'absent' and (item.1.src|d() or item.1.content|d()) and item.1.dest|d())"}, "module_options": {"dest": "{{ item.1.dest }}", "src": "{{ item.1.src     | d(omit) }}", "content": "{{ item.1.content | d(omit) }}", "owner": "{{ item.1.owner   | d(\"root\") }}", "group": "{{ item.1.group   | d(\"root\") }}", "mode": "{{ item.1.mode    | d(\"0755\") }}", "force": "{{ item.1.force   | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove cron job files", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Remove cron job files", "with_subelements": ["{{ cron__combined_jobs }}", "jobs"], "when": "cron__enabled|bool and item.0.state|d('present') == 'absent'"}, "module_options": {"path": "/etc/cron.d/{{ item.0.file | d(item.0.cron_file) }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage cron environment variables", "module": "ansible.builtin.cron", "index": 11, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Manage cron environment variables", "with_subelements": ["{{ cron__combined_jobs | selectattr(\"environment\", \"defined\") | list }}", "environment"], "when": "cron__enabled|bool and item.0.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"cron_file": "{{ item.0.file | d(item.0.cron_file) }}", "name": "{{ item.1.keys() | list | first }}", "value": "{{ item.1.values() | list | first }}", "user": "{{ item.0.user | d(\"root\") }}", "state": "present", "env": true}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage cron jobs", "module": "ansible.builtin.cron", "index": 12, "defined_in": "testdata/scm_repo/roles/cron/tasks/main.yml", "options": {"name": "Manage cron jobs", "with_subelements": ["{{ cron__combined_jobs }}", "jobs"], "when": "cron__enabled|bool and item.0.state|d('present') not in [ 'absent', 'ignore' ]"}, "module_options": {"name": "{{ item.1.name }}", "job": "{{ item.1.job }}", "cron_file": "{{ item.0.file         | d(item.0.cron_file) }}", "disabled": "{{ item.1.disabled     | d(omit) }}", "minute": "{{ item.1.minute       | d(omit) }}", "hour": "{{ item.1.hour         | d(omit) }}", "day": "{{ item.1.day          | d(omit) }}", "month": "{{ item.1.month        | d(omit) }}", "weekday": "{{ item.1.weekday      | d(omit) }}", "special_time": "{{ item.1.special_time | d(omit) }}", "backup": "{{ item.1.backup       | d(omit) }}", "user": "{{ item.0.user         | d(\"root\") }}", "state": "{{ item.1.state        | d(\"present\") }}"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/cron"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml", "testdata/scm_repo/playbooks/service/php.yml"]}, {"py/object": "struct4.Role", "name": "dnsmasq", "defined_in": "testdata/scm_repo/roles/dnsmasq", "task_yamls": ["testdata/scm_repo/roles/dnsmasq/tasks/main_env.yml", "testdata/scm_repo/roles/dnsmasq/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Prepare environment for dependent Ansible roles", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main_env.yml", "options": {"name": "Prepare environment for dependent Ansible roles"}, "module_options": {"dnsmasq__env_tcpwrappers__dependent_allow": "{{ dnsmasq__tcpwrappers__dependent_allow }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install required packages", "module": "ansible.builtin.package", "index": 2, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Install required packages", "register": "dnsmasq__register_packages", "until": "dnsmasq__register_packages is succeeded"}, "module_options": {"name": "{{ q(\"flattened\", (dnsmasq__base_packages + dnsmasq__packages)) }}", "state": "present"}, "fqcn": "ansible.builtin.package", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure Ansible fact directory exists", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Make sure Ansible fact directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate dnsmasq Ansible local facts", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Generate dnsmasq Ansible local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/dnsmasq.fact.j2", "dest": "/etc/ansible/facts.d/dnsmasq.fact", "owner": "root", "group": "root", "mode": "0755", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Reload facts if they were modified", "module": "ansible.builtin.meta", "index": 5, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Reload facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure TFTP root directory exists", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Make sure TFTP root directory exists", "when": "dnsmasq__boot_enabled|bool"}, "module_options": {"path": "{{ dnsmasq__boot_tftp_root }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove dnsmasq configuration if requested", "module": "ansible.builtin.file", "index": 7, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Remove dnsmasq configuration if requested", "with_items": "{{ dnsmasq__combined_configuration | debops.debops.parse_kv_items }}", "notify": ["Test and restart dnsmasq"], "when": "(item.name|d() and item.state|d('present') == 'absent')"}, "module_options": {"path": "/etc/dnsmasq.d/{{ item.filename | d(item.name | regex_replace(\"\\.conf$\",\"\") + \".conf\") }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate dnsmasq configuration", "module": "ansible.builtin.template", "index": 8, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Generate dnsmasq configuration", "with_items": "{{ dnsmasq__combined_configuration | debops.debops.parse_kv_items }}", "notify": ["Test and restart dnsmasq"], "when": "(item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ])"}, "module_options": {"src": "etc/dnsmasq.d/template.conf.j2", "dest": "/etc/dnsmasq.d/{{ item.filename | d(item.name | regex_replace(\".conf$\",\"\") + \".conf\") }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Remove DHCP host configuration and DNS records if requested", "module": "ansible.builtin.file", "index": 9, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Remove DHCP host configuration and DNS records if requested", "notify": ["Test and restart dnsmasq"], "when": "not dnsmasq__dhcp_hosts|d() and not dnsmasq__dns_records|d()"}, "module_options": {"path": "/etc/dnsmasq.d/{{ dnsmasq__dhcp_dns_filename }}", "state": "absent"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate DHCP host configuration and DNS records", "module": "ansible.builtin.template", "index": 10, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Generate DHCP host configuration and DNS records", "notify": ["Test and restart dnsmasq"], "when": "dnsmasq__dhcp_hosts|d() or dnsmasq__dns_records|d()"}, "module_options": {"src": "etc/dnsmasq.d/dhcp-dns-options.conf.j2", "dest": "/etc/dnsmasq.d/{{ dnsmasq__dhcp_dns_filename }}", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert original dnsmasq environment file", "module": "dpkg_divert", "index": 11, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Divert original dnsmasq environment file", "notify": ["Test and restart dnsmasq"]}, "module_options": {"path": "/etc/default/dnsmasq"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Configure dnsmasq environment file", "module": "ansible.builtin.template", "index": 12, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Configure dnsmasq environment file", "notify": ["Test and restart dnsmasq"]}, "module_options": {"src": "etc/default/dnsmasq.j2", "dest": "/etc/default/dnsmasq", "owner": "root", "group": "root", "mode": "0644", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure custom nameservers in resolvconf", "module": "ansible.builtin.template", "index": 13, "defined_in": "testdata/scm_repo/roles/dnsmasq/tasks/main.yml", "options": {"name": "Configure custom nameservers in resolvconf", "notify": ["Test and restart dnsmasq"], "when": "dnsmasq__nameservers|d()"}, "module_options": {"src": "etc/resolvconf/upstream.conf.j2", "dest": "/etc/resolvconf/upstream.conf", "owner": "root", "group": "root", "mode": "0644", "unsafe_writes": "{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/dnsmasq"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": []}, {"py/object": "struct4.Role", "name": "debops_api", "defined_in": "testdata/scm_repo/roles/debops_api", "task_yamls": ["testdata/scm_repo/roles/debops_api/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Ensure specified packages are in there desired state", "module": "ansible.builtin.apt", "index": 0, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Ensure specified packages are in there desired state", "register": "debops_api__register_packages", "until": "debops_api__register_packages is succeeded", "tags": ["role::debops_api:pkts"]}, "module_options": {"name": "{{ q(\"flattened\", (debops_api__python3_packages if (debops_api__python_version|int == 3) else debops_api__python2_packages)) }}", "state": "{{ \"present\" if (debops_api__deploy_state == \"present\") else \"absent\" }}", "install_recommends": false, "purge": true}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure DebOps API system group is present", "module": "ansible.builtin.group", "index": 1, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Ensure DebOps API system group is present"}, "module_options": {"name": "{{ debops_api__group }}", "system": true, "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure DebOps API system user is present", "module": "ansible.builtin.user", "index": 2, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Ensure DebOps API system user is present"}, "module_options": {"name": "{{ debops_api__user }}", "group": "{{ debops_api__group }}", "home": "{{ debops_api__home }}", "shell": "/sbin/nologin", "comment": "DebOps API", "system": true, "state": "present"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure the webserver can access the public directory", "module": "ansible.builtin.file", "index": 3, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Ensure the webserver can access the public directory"}, "module_options": {"path": "{{ debops_api__home }}", "state": "directory", "owner": "{{ debops_api__user }}", "group": "{{ debops_api__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that input data directory is present", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Ensure that input data directory is present"}, "module_options": {"path": "{{ debops_api__input_data_dir }}", "state": "directory", "owner": "{{ debops_api__user }}", "group": "{{ debops_api__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone DebOps API input data", "module": "ansible.builtin.git", "index": 5, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Clone DebOps API input data", "become": true, "become_user": "{{ debops_api__user }}", "tags": ["role::debops_api:git"]}, "module_options": {"repo": "{{ debops_api__input_data_repo_url }}", "dest": "{{ debops_api__input_data_repo_dest }}", "update": "{{ debops_api__input_data_repo_update | bool }}", "version": "master", "recursive": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure DebOps API source code directory is owned by the DebOps API user", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Ensure DebOps API source code directory is owned by the DebOps API user"}, "module_options": {"path": "{{ debops_api__app_repo_dest }}", "state": "directory", "owner": "{{ debops_api__user }}", "group": "{{ debops_api__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone debops-api source code", "module": "ansible.builtin.git", "index": 7, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Clone debops-api source code", "become": true, "become_user": "{{ debops_api__user }}", "tags": ["role::debops_api:git"]}, "module_options": {"repo": "{{ debops_api__app_repo_url }}", "dest": "{{ debops_api__app_repo_dest }}", "version": "master", "update": true}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure DebOps API user bin directory is present", "module": "ansible.builtin.file", "index": 8, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Ensure DebOps API user bin directory is present"}, "module_options": {"path": "{{ debops_api__home + \"/bin\" }}", "state": "directory", "owner": "{{ debops_api__user }}", "group": "{{ debops_api__group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that the DebOps API data update script is present", "module": "ansible.builtin.template", "index": 9, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Ensure that the DebOps API data update script is present"}, "module_options": {"src": "srv/www/debops-api/bin/debops-api-update.j2", "dest": "{{ debops_api__cron_script }}", "owner": "root", "group": "{{ debops_api__group }}", "mode": "0754"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configuring cron jobs", "module": "ansible.builtin.cron", "index": 10, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Configuring cron jobs", "with_flattened": "{{ debops_api__cron_entries }}", "tags": ["role::debops_api:cron"]}, "module_options": {"cron_file": "{{ item.cron_file    | d(omit) }}", "day": "{{ item.day          | d(omit) }}", "hour": "{{ item.hour         | d(omit) }}", "job": "{{ item.job          | d(debops_api__cron_script) }}", "minute": "{{ item.minute       | d(omit) }}", "month": "{{ item.month        | d(omit) }}", "name": "{{ item.name         | d(item) }}", "special_time": "{{ item.special_time | d(omit) }}", "state": "{{ item.state        | d(omit) }}", "user": "{{ item.user         | d(debops_api__user) }}", "weekday": "{{ item.weekday      | d(omit) }}"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if DebOps API data build has run before", "module": "ansible.builtin.stat", "index": 11, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Check if DebOps API data build has run before", "register": "debops_api__register_public_api_dir"}, "module_options": {"path": "{{ debops_api__public_api_dir }}"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Run initial DebOps API data build", "module": "ansible.builtin.command", "index": 12, "defined_in": "testdata/scm_repo/roles/debops_api/tasks/main.yml", "options": {"name": "Run initial DebOps API data build", "when": "not debops_api__register_public_api_dir.stat.exists", "become": true, "become_user": "{{ debops_api__user }}"}, "module_options": "{{ debops_api__cron_script }}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/debops_api"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": []}, {"py/object": "struct4.Role", "name": "console", "defined_in": "testdata/scm_repo/roles/console", "task_yamls": ["testdata/scm_repo/roles/console/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/console/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/console"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install requested packages", "module": "ansible.builtin.apt", "index": 1, "defined_in": "testdata/scm_repo/roles/console/tasks/main.yml", "options": {"name": "Install requested packages", "register": "console__register_packages", "until": "console__register_packages is succeeded", "when": "item is defined and item", "tags": ["meta::provision"]}, "module_options": {"name": "{{ (console_base_packages + console_conditional_packages) | flatten }}", "state": "present", "install_recommends": false}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/console"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check if /etc/inittab exists", "module": "ansible.builtin.stat", "index": 2, "defined_in": "testdata/scm_repo/roles/console/tasks/main.yml", "options": {"name": "Check if /etc/inittab exists", "register": "console_register_inittab"}, "module_options": {"path": "/etc/inittab"}, "fqcn": "ansible.builtin.stat", "used_in": ["testdata/scm_repo/roles/console"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Disable serial console in /etc/inittab", "module": "ansible.builtin.lineinfile", "index": 3, "defined_in": "testdata/scm_repo/roles/console/tasks/main.yml", "options": {"name": "Disable serial console in /etc/inittab", "when": "((console_serial is undefined or (console_serial is defined and not console_serial)) and ((console_register_inittab is defined and console_register_inittab) and console_register_inittab.stat.exists))", "notify": ["Reload sysvinit"]}, "module_options": {"dest": "/etc/inittab", "regexp": "^{{ console_serial_inittab }}", "state": "absent"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/console"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Enable serial console in /etc/inittab", "module": "ansible.builtin.lineinfile", "index": 4, "defined_in": "testdata/scm_repo/roles/console/tasks/main.yml", "options": {"name": "Enable serial console in /etc/inittab", "when": "((console_serial is defined and console_serial) and ((console_register_inittab is defined and console_register_inittab) and console_register_inittab.stat.exists))", "notify": ["Reload sysvinit"]}, "module_options": {"dest": "/etc/inittab", "regexp": "^{{ console_serial_inittab }}", "state": "present", "line": "{{ console_serial_inittab }}", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/console"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure fsck behaviour on boot", "module": "ansible.builtin.lineinfile", "index": 5, "defined_in": "testdata/scm_repo/roles/console/tasks/main.yml", "options": {"name": "Configure fsck behaviour on boot", "when": "ansible_distribution_release in console_fsckfix_releases"}, "module_options": {"dest": "/etc/default/rcS", "regexp": "FSCKFIX=", "state": "present", "line": "FSCKFIX={{ console_fsckfix }}", "mode": "0644"}, "fqcn": "ansible.builtin.lineinfile", "used_in": ["testdata/scm_repo/roles/console"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/common.yml", "testdata/scm_repo/playbooks/service/console.yml"]}, {"py/object": "struct4.Role", "name": "nsswitch", "defined_in": "testdata/scm_repo/roles/nsswitch", "task_yamls": ["testdata/scm_repo/roles/nsswitch/tasks/main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/nsswitch/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/nsswitch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 1, "defined_in": "testdata/scm_repo/roles/nsswitch/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/nsswitch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save nsswitch local facts", "module": "ansible.builtin.template", "index": 2, "defined_in": "testdata/scm_repo/roles/nsswitch/tasks/main.yml", "options": {"name": "Save nsswitch local facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/nsswitch.fact.j2", "dest": "/etc/ansible/facts.d/nsswitch.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nsswitch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Update Ansible facts if they were modified", "module": "ansible.builtin.meta", "index": 3, "defined_in": "testdata/scm_repo/roles/nsswitch/tasks/main.yml", "options": {"name": "Update Ansible facts if they were modified"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/nsswitch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate Name Service Switch configuration", "module": "ansible.builtin.template", "index": 4, "defined_in": "testdata/scm_repo/roles/nsswitch/tasks/main.yml", "options": {"name": "Generate Name Service Switch configuration", "register": "nsswitch__register_config", "when": "nsswitch__enabled|bool"}, "module_options": {"src": "etc/nsswitch.conf.j2", "dest": "/etc/nsswitch.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/nsswitch"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Restart systemd-logind to fix NSS lookups", "module": "ansible.builtin.service", "index": 5, "defined_in": "testdata/scm_repo/roles/nsswitch/tasks/main.yml", "options": {"name": "Restart systemd-logind to fix NSS lookups", "when": "ansible_service_mgr == 'systemd' and nsswitch__register_config is changed and ansible_connection != 'local'"}, "module_options": {"name": "systemd-logind", "state": "restarted"}, "fqcn": "ansible.builtin.service", "used_in": ["testdata/scm_repo/roles/nsswitch"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml"]}, {"py/object": "struct4.Role", "name": "pki", "defined_in": "testdata/scm_repo/roles/pki", "task_yamls": ["testdata/scm_repo/roles/pki/tasks/acme_tiny.yml", "testdata/scm_repo/roles/pki/tasks/main_env.yml", "testdata/scm_repo/roles/pki/tasks/ca_certificates.yml", "testdata/scm_repo/roles/pki/tasks/certbot.yml", "testdata/scm_repo/roles/pki/tasks/main.yml", "testdata/scm_repo/roles/pki/tasks/pki/pre_main.yml", "testdata/scm_repo/roles/pki/tasks/pki/post_main.yml"], "tasks": [{"py/object": "struct4.Task", "name": "Create ACME system group", "module": "ansible.builtin.group", "index": 0, "defined_in": "testdata/scm_repo/roles/pki/tasks/acme_tiny.yml", "options": {"name": "Create ACME system group"}, "module_options": {"name": "{{ pki_acme_group }}", "state": "present", "system": true}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create ACME system account", "module": "ansible.builtin.user", "index": 1, "defined_in": "testdata/scm_repo/roles/pki/tasks/acme_tiny.yml", "options": {"name": "Create ACME system account"}, "module_options": {"name": "{{ pki_acme_user }}", "group": "{{ pki_acme_group }}", "home": "{{ pki_acme_home }}", "state": "present", "system": true, "createhome": false, "shell": "/bin/false"}, "fqcn": "ansible.builtin.user", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create source directory", "module": "ansible.builtin.file", "index": 2, "defined_in": "testdata/scm_repo/roles/pki/tasks/acme_tiny.yml", "options": {"name": "Create source directory"}, "module_options": {"path": "{{ pki_acme_tiny_src }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Clone acme-tiny source code", "module": "ansible.builtin.git", "index": 3, "defined_in": "testdata/scm_repo/roles/pki/tasks/acme_tiny.yml", "options": {"name": "Clone acme-tiny source code"}, "module_options": {"repo": "{{ pki_acme_tiny_repo }}", "dest": "{{ pki_acme_tiny_src + \"/acme-tiny\" }}", "version": "{{ pki_acme_tiny_version }}"}, "fqcn": "ansible.builtin.git", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install acme-tiny script", "module": "ansible.builtin.file", "index": 4, "defined_in": "testdata/scm_repo/roles/pki/tasks/acme_tiny.yml", "options": {"name": "Install acme-tiny script"}, "module_options": {"path": "{{ pki_acme_tiny_bin }}", "src": "{{ pki_acme_tiny_src }}/acme-tiny/acme_tiny.py", "state": "link", "force": true, "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create ACME challenge path", "module": "ansible.builtin.file", "index": 5, "defined_in": "testdata/scm_repo/roles/pki/tasks/acme_tiny.yml", "options": {"name": "Create ACME challenge path", "when": "pki_create_acme_challenge_dir"}, "module_options": {"path": "{{ pki_acme_challenge_dir | dirname }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create ACME challenge directory", "module": "ansible.builtin.file", "index": 6, "defined_in": "testdata/scm_repo/roles/pki/tasks/acme_tiny.yml", "options": {"name": "Create ACME challenge directory", "when": "pki_create_acme_challenge_dir"}, "module_options": {"path": "{{ pki_acme_challenge_dir }}", "state": "directory", "owner": "{{ pki_acme_user }}", "group": "{{ pki_acme_group }}", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Prepare debops.pki environment", "module": "ansible.builtin.set_fact", "index": 0, "defined_in": "testdata/scm_repo/roles/pki/tasks/main_env.yml", "options": {"name": "Prepare debops.pki environment"}, "module_options": {"pki_env_secret_directories": "{{ lookup(\"template\", \"lookup/pki_env_secret_directories.j2\") | from_yaml }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Set default trust policy for new certificates", "module": "ansible.builtin.debconf", "index": 0, "defined_in": "testdata/scm_repo/roles/pki/tasks/ca_certificates.yml", "options": {"name": "Set default trust policy for new certificates"}, "module_options": {"name": "ca-certificates", "question": "ca-certificates/trust_new_crts", "vtype": "select", "value": "{{ \"yes\" if (pki_system_ca_certificates_trust_new | bool) else \"no\" }}"}, "fqcn": "ansible.builtin.debconf", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of known certificates", "module": "ansible.builtin.shell", "index": 1, "defined_in": "testdata/scm_repo/roles/pki/tasks/ca_certificates.yml", "options": {"name": "Get list of known certificates", "args": {"executable": "bash"}, "register": "pki_register_ca_certificates_known", "changed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && grep -E -e '^[^#].*$' /etc/ca-certificates.conf | sed -e 's/^!//' || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of untrusted certificates", "module": "ansible.builtin.shell", "index": 2, "defined_in": "testdata/scm_repo/roles/pki/tasks/ca_certificates.yml", "options": {"name": "Get list of untrusted certificates", "args": {"executable": "bash"}, "register": "pki_register_ca_certificates_untrusted", "changed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && grep -E -e '^!+' /etc/ca-certificates.conf | sed -e 's/^!//' || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of trusted certificates", "module": "ansible.builtin.shell", "index": 3, "defined_in": "testdata/scm_repo/roles/pki/tasks/ca_certificates.yml", "options": {"name": "Get list of trusted certificates", "args": {"executable": "bash"}, "register": "pki_register_ca_certificates_trusted", "changed_when": false, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit && grep -E -e '^[^#!].*$' /etc/ca-certificates.conf | sed -e 's/^!//' || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of blacklisted certificates", "module": "ansible.builtin.shell", "index": 4, "defined_in": "testdata/scm_repo/roles/pki/tasks/ca_certificates.yml", "options": {"name": "Get list of blacklisted certificates", "args": {"executable": "bash"}, "register": "pki_register_ca_certificates_blacklist", "changed_when": false, "check_mode": false, "when": "pki_system_ca_certificates_blacklist is defined and pki_system_ca_certificates_blacklist"}, "module_options": "set -o nounset -o pipefail -o errexit && grep -E -e '{{ pki_system_ca_certificates_blacklist | join(\"' -e '\") }}' /etc/ca-certificates.conf | sed -e 's/^!//' || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Get list of whitelisted certificates", "module": "ansible.builtin.shell", "index": 5, "defined_in": "testdata/scm_repo/roles/pki/tasks/ca_certificates.yml", "options": {"name": "Get list of whitelisted certificates", "args": {"executable": "bash"}, "register": "pki_register_ca_certificates_whitelist", "changed_when": false, "check_mode": false, "when": "pki_system_ca_certificates_whitelist is defined and pki_system_ca_certificates_whitelist"}, "module_options": "set -o nounset -o pipefail -o errexit && grep -E -e '{{ pki_system_ca_certificates_whitelist | join(\"' -e '\") }}' /etc/ca-certificates.conf | sed -e 's/^!//' || true", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure system CA certificates", "module": "ansible.builtin.template", "index": 6, "defined_in": "testdata/scm_repo/roles/pki/tasks/ca_certificates.yml", "options": {"name": "Configure system CA certificates", "notify": ["Reconfigure ca-certificates"]}, "module_options": {"src": "etc/ca-certificates.conf.j2", "dest": "/etc/ca-certificates.conf", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that the post-hook directory exists", "module": "ansible.builtin.file", "index": 0, "defined_in": "testdata/scm_repo/roles/pki/tasks/certbot.yml", "options": {"name": "Make sure that the post-hook directory exists"}, "module_options": {"path": "/etc/letsencrypt/renewal-hooks/post", "state": "directory", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install post-hook scripts", "module": "ansible.builtin.copy", "index": 1, "defined_in": "testdata/scm_repo/roles/pki/tasks/certbot.yml", "options": {"name": "Install post-hook scripts"}, "module_options": {"src": "etc/letsencrypt/renewal-hooks/post/", "dest": "/etc/letsencrypt/renewal-hooks/post/", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Divert the original certbot configuration file", "module": "dpkg_divert", "index": 2, "defined_in": "testdata/scm_repo/roles/pki/tasks/certbot.yml", "options": {"name": "Divert the original certbot configuration file"}, "module_options": {"path": "/etc/letsencrypt/cli.ini", "state": "present"}, "fqcn": "debops.debops.dpkg_divert", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {"use-non-builtin-module": true}}, {"py/object": "struct4.Task", "name": "Generate certbot configuration file", "module": "ansible.builtin.template", "index": 3, "defined_in": "testdata/scm_repo/roles/pki/tasks/certbot.yml", "options": {"name": "Generate certbot configuration file"}, "module_options": {"src": "etc/letsencrypt/cli.ini.j2", "dest": "/etc/letsencrypt/cli.ini", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import custom Ansible plugins", "module": "ansible.builtin.import_role", "index": 0, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Import custom Ansible plugins"}, "module_options": {"name": "ansible_plugins"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps global handlers", "module": "ansible.builtin.import_role", "index": 1, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Import DebOps global handlers"}, "module_options": {"name": "global_handlers"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Import DebOps secret role", "module": "ansible.builtin.import_role", "index": 2, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Import DebOps secret role"}, "module_options": {"name": "secret"}, "fqcn": "ansible.builtin.import_role", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps pre_tasks hook", "module": "ansible.builtin.include_tasks", "index": 3, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "DebOps pre_tasks hook"}, "module_options": "{{ lookup('debops.debops.task_src', 'pki/pre_main.yml') }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Generate random session token", "module": "ansible.builtin.set_fact", "index": 4, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Generate random session token", "delegate_to": "localhost", "become": false, "run_once": true}, "module_options": {"pki_fact_session_token": "{{ 9999999999999999999999999999999999999 | random | string | hash(\"sha256\") }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Expose host FQDN and library path in temporary variables", "module": "ansible.builtin.set_fact", "index": 5, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Expose host FQDN and library path in temporary variables"}, "module_options": {"pki_fact_lib_path": "{{ (ansible_local.fhs.lib | d(\"/usr/local/lib\")) + \"/pki\" }}"}, "fqcn": "ansible.builtin.set_fact", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install PKI packages", "module": "ansible.builtin.apt", "index": 6, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Install PKI packages", "register": "pki__register_packages", "until": "pki__register_packages is succeeded", "when": "pki_enabled | bool"}, "module_options": {"name": "{{ (pki_base_packages + (pki_acme_packages if (pki_acme|bool or pki_acme_install|bool) else []) + pki_packages) | flatten }}", "state": "present", "install_recommends": false, "cache_valid_time": "{{ ansible_local.core.cache_valid_time|d(\"86400\") }}"}, "fqcn": "ansible.builtin.apt", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check Ansible Controller bash version", "module": "ansible.builtin.command", "index": 7, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Check Ansible Controller bash version", "changed_when": false, "register": "pki__register_bash_version", "delegate_to": "localhost", "become": false, "run_once": true, "check_mode": false}, "module_options": "/usr/bin/env bash -c 'echo $BASH_VERSION'", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Check Ansible Controller crypto library version", "module": "ansible.builtin.shell", "index": 8, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Check Ansible Controller crypto library version", "args": {"executable": "bash"}, "changed_when": false, "register": "pki__register_crypto_library_version", "delegate_to": "localhost", "become": false, "run_once": true, "check_mode": false}, "module_options": "set -o nounset -o pipefail -o errexit &&\n{% if pki_ca_library == 'gnutls' %}\ncerttool --version | head -n 1 | awk '{print $NF}'\n{% elif pki_ca_library == 'openssl' %}\nopenssl version | awk '{print $2}'\n{% endif %}\n", "fqcn": "ansible.builtin.shell", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Assert that required dependencies are met as documented", "module": "ansible.builtin.assert", "index": 9, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Assert that required dependencies are met as documented", "delegate_to": "localhost", "become": false, "run_once": true, "when": "pki_authorities|d() and pki_dependent_authorities|d()"}, "module_options": {"that": ["pki__register_bash_version.stdout | regex_replace(\"[^0-9.]\", \"\") is version_compare(\"4.3.0\", \">=\")", "pki__register_crypto_library_version.stdout | regex_replace(\"[a-z]\", \"\") is version_compare(\"1.0.1\" if (pki_ca_library == \"openssl\") else pki__register_crypto_library_version.stdout, \">=\")"]}, "fqcn": "ansible.builtin.assert", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create library directory", "module": "ansible.builtin.file", "index": 10, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Create library directory", "when": "pki_enabled | bool"}, "module_options": {"path": "{{ pki_fact_lib_path }}", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install local PKI scripts", "module": "ansible.builtin.copy", "index": 11, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Install local PKI scripts", "become": false, "delegate_to": "localhost", "run_once": true, "when": "(pki_authorities or pki_dependent_authorities)"}, "module_options": {"src": "secret/pki/lib/", "dest": "{{ secret + \"/pki/lib/\" }}", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Install remote PKI scripts", "module": "ansible.builtin.copy", "index": 12, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Install remote PKI scripts", "when": "pki_enabled | bool"}, "module_options": {"src": "usr/local/lib/pki/", "dest": "{{ pki_fact_lib_path }}", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create private groups if requested", "module": "ansible.builtin.group", "index": 13, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Create private groups if requested", "with_items": "{{ pki_private_groups_present }}", "when": "((pki_enabled|bool and pki_private_groups_present) and (item.when|d(True) | bool))"}, "module_options": {"name": "{{ item.name | d(item) }}", "system": "{{ (item.system | d(True)) | bool }}", "state": "present"}, "fqcn": "ansible.builtin.group", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure acme-tiny support", "module": "ansible.builtin.include_tasks", "index": 14, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Configure acme-tiny support", "when": "(pki_enabled|bool and (pki_acme|bool or pki_acme_install|bool))"}, "module_options": "acme_tiny.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Configure certbot support", "module": "ansible.builtin.include_tasks", "index": 15, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Configure certbot support", "when": "(pki_enabled|bool and (pki_acme|bool or pki_acme_install|bool) and pki_acme_type != 'acme-tiny')"}, "module_options": "certbot.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that /etc/pki directory exists", "module": "ansible.builtin.file", "index": 16, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Ensure that /etc/pki directory exists"}, "module_options": {"path": "/etc/pki", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Ensure that sensitive files are excluded from version control", "module": "ansible.builtin.template", "index": 17, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Ensure that sensitive files are excluded from version control"}, "module_options": {"src": "etc/pki/gitignore.j2", "dest": "/etc/pki/.gitignore", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize PKI realms", "module": "ansible.builtin.command", "index": 18, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Initialize PKI realms", "environment": {"PKI_ROOT": "{{ pki_root }}", "PKI_ACME": "{{ (item.acme | d(pki_acme)) | bool | lower }}", "PKI_INTERNAL": "{{ (item.internal | d(pki_internal)) | bool | lower }}", "PKI_LIBRARY": "{{ item.library | d(pki_library) }}", "PKI_ACME_LIBRARY": "{{ item.acme_library | d(pki_acme_library) }}"}, "args": {"creates": "{{ pki_root + \"/realms/\" + item.name + \"/config/realm.conf\" }}"}, "with_flattened": ["{{ pki_realms }}", "{{ pki_group_realms }}", "{{ pki_host_realms }}", "{{ pki_default_realms }}", "{{ pki_dependent_realms }}"], "when": "(pki_enabled|bool and item.name is defined and (item.enabled|d(True) | bool) and (item.when|d(True) | bool))"}, "module_options": "\"{{ pki_fact_lib_path }}/pki-realm\" init -n \"{{ item.name }}\"\n--authority-preference \"{{ (item.authority_preference | d(pki_authority_preference)) | join('/') }}\"\n--library \"{{ item.library | d(pki_library) }}\"\n--realm-key-size \"{{ item.realm_key_size | d(pki_realm_key_size) }}\"\n--internal \"{{ (item.internal | d(pki_internal)) | bool | lower }}\"\n--private-dir-group \"{{ item.private_dir_group | d(pki_private_group) }}\"\n--private-file-group \"{{ item.private_file_group | d(pki_private_group) }}\"\n--private-dir-acl-groups \"{{ (item.private_dir_acl_groups | d(pki_private_dir_acl_groups)) | join('/') }}\"\n--private-file-acl-groups \"{{ (item.private_file_acl_groups | d(pki_private_file_acl_groups)) | join('/') }}\"\n--acme-ca \"{{ item.acme_ca | d(pki_acme_ca) }}\"\n--acme-ca-api \"{{ item.acme_ca_api | d(pki_acme_ca_api_map[item.acme_ca|d(pki_acme_ca)]) }}\"\n--acme-type \"{{ item.type | d(pki_acme_type) }}\"\n--acme-contacts \"{{ item.acme_contacts | d(pki_acme_contacts) | join(',') }}\"\n--acme-default-subdomains \"{{ (item.acme_default_subdomains | d(pki_acme_default_subdomains)) | join('/') }}\"\n--acme-challenge-dir \"{{ item.acme_challenge_dir | d(pki_acme_challenge_dir) }}\"\n--default-domain \"{{ item.default_domain | d(pki_default_domain) }}\"\n--default-subdomains \"{{ (item.default_subdomains | d(pki_default_subdomains)) | join('/') }}\"\n--dhparam \"{{ (item.dhparam | d(pki_dhparam)) | bool | lower }}\"\n--dhparam-file \"{{ item.dhparam_file | d(pki_dhparam_file) }}\"\n--selfsigned-sign-days \"{{ item.selfsigned_sign_days|d('365') }}\"\n", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download custom private files", "module": "ansible.builtin.copy", "index": 19, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Download custom private files", "with_flattened": ["{{ pki_private_files }}", "{{ pki_group_private_files }}", "{{ pki_host_private_files }}"], "when": "(pki_enabled|bool and (item.src is defined or item.content is defined) and item.dest is defined)"}, "module_options": {"src": "{{ item.src | d(omit) }}", "content": "{{ item.content | d(omit) }}", "dest": "{{ item.dest }}", "owner": "{{ item.owner | d(\"root\") }}", "group": "{{ item.group | d(pki_private_group) }}", "mode": "{{ item.mode | d(\"0640\") }}", "directory_mode": "{{ item.directory_mode | d(omit) }}", "follow": "{{ item.follow | d(omit) }}", "force": "{{ item.force | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download private realm contents by host", "module": "ansible.builtin.copy", "index": 20, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Download private realm contents by host", "with_items": ["{{ pki_realms + pki_group_realms + pki_host_realms + pki_default_realms + pki_dependent_realms }}"], "when": "(pki_enabled|bool and item.name is defined and (item.enabled|d(True) | bool) and (item.when|d(True) | bool))"}, "module_options": {"src": "{{ secret + \"/pki/realms/by-host/\" + inventory_hostname + \"/\" + item.name + \"/private/\" }}", "dest": "/etc/pki/realms/{{ item.name }}/private/", "owner": "root", "group": "{{ item.private_file_group | d(pki_private_group) }}", "mode": "0640"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download private realm contents by group", "module": "ansible.builtin.copy", "index": 21, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Download private realm contents by group", "with_nested": ["{{ pki_group_realms + pki_default_realms }}", "{{ pki_inventory_groups }}"], "when": "(pki_enabled|bool and (item.0.name is defined and (item.0.enabled|d(True) | bool) and (item.0.when|d(True) | bool)) and (item.1 is defined and item.1 in group_names))"}, "module_options": {"src": "{{ secret + \"/pki/realms/by-group/\" + item.1 + \"/\" + item.0.name + \"/private/\" }}", "dest": "/etc/pki/realms/{{ item.0.name }}/private/", "owner": "root", "group": "{{ item.private_file_group | d(pki_private_group) }}", "mode": "0640", "force": false}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download private realm contents for all hosts", "module": "ansible.builtin.copy", "index": 22, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Download private realm contents for all hosts", "with_items": ["{{ pki_realms + pki_default_realms }}"], "when": "(pki_enabled|bool and item.name is defined and (item.enabled|d(True) | bool) and (item.when|d(True) | bool))"}, "module_options": {"src": "{{ secret + \"/pki/realms/by-group/all/\" + item.name + \"/private/\" }}", "dest": "/etc/pki/realms/{{ item.name }}/private/", "owner": "root", "group": "{{ item.private_file_group | d(pki_private_group) }}", "mode": "0640", "force": false}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create new PKI realms", "module": "ansible.builtin.command", "index": 23, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Create new PKI realms", "environment": {"PKI_SESSION_TOKEN": "{{ pki_fact_session_token }}"}, "args": {"creates": "/etc/pki/realms/{{ item.name }}/default.key"}, "with_flattened": ["{{ pki_realms }}", "{{ pki_group_realms }}", "{{ pki_host_realms }}", "{{ pki_default_realms }}", "{{ pki_dependent_realms }}"], "when": "(pki_enabled|bool and item.name is defined and (item.enabled|d(True) | bool) and (item.when|d(True) | bool))"}, "module_options": "\"{{ pki_fact_lib_path }}/pki-realm\" new-realm -n \"{{ item.name }}\"\n--subject \"{{ item.subject|d([]) | join('/') }}\"\n--domains \"{{ item.domains|d([]) | join('/') }}\"\n--subdomains \"{{ item.subdomains|d([]) | join('/') }}\"\n--acme \"{{ item.acme|d(pki_acme) | bool | lower }}\"\n--acme-type \"{{ item.type | d(pki_acme_type) }}\"\n--acme-subject \"{{ item.acme_subject|d([]) | join('/') }}\"\n--acme-domains \"{{ item.acme_domains|d([]) | join('/') }}\"\n--acme-subdomains \"{{ item.acme_subdomains|d([]) | join('/') }}\"\n--subject-alt-names \"{{ item.subject_alt_names | d([]) | join('|') }}\"\n--acme-alt-names \"{{ item.acme_alt_names | d([]) | join('|') }}\"\n", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Execute PKI realm commands", "module": "ansible.builtin.command", "index": 24, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Execute PKI realm commands", "environment": {"PKI_SESSION_TOKEN": "{{ pki_fact_session_token }}"}, "with_flattened": ["{{ pki_realms }}", "{{ pki_group_realms }}", "{{ pki_host_realms }}", "{{ pki_default_realms }}", "{{ pki_dependent_realms }}"], "changed_when": false, "when": "(pki_enabled|bool and item.name is defined and (item.enabled|d(True) | bool) and (item.when|d(True) | bool))"}, "module_options": "\"{{ pki_fact_lib_path }}/pki-realm\" run -n \"{{ item.name }}\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Upload internal certificate requests", "module": "ansible.builtin.fetch", "index": 25, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Upload internal certificate requests", "with_flattened": ["{{ pki_realms }}", "{{ pki_group_realms }}", "{{ pki_host_realms }}", "{{ pki_default_realms }}", "{{ pki_dependent_realms }}"], "when": "(pki_enabled|bool and item.name is defined and ((item.internal|d(True) | bool) and pki_internal|bool) and (item.enabled|d(True) | bool) and (item.when|d(True) | bool))"}, "module_options": {"src": "/etc/pki/realms/{{ item.name }}/internal/request.pem", "dest": "{{ secret + \"/pki/requests/\" + (item.authority | d(pki_default_authority)) + \"/\" + inventory_hostname + \"/\" + item.name + \"/request.pem\" }}", "flat": true}, "fqcn": "ansible.builtin.fetch", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Initialize PKI authorities", "module": "ansible.builtin.command", "index": 26, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Initialize PKI authorities", "environment": {"PKI_ROOT": "{{ secret + \"/pki\" }}", "PKI_LIBRARY": "{{ item.pki_ca_library | d(pki_ca_library) }}", "PKI_CA_CERTIFICATES": "{{ secret + \"/pki/ca-certificates/\" + (item.ca_certificates_path | d(pki_ca_certificates_path)) }}"}, "args": {"chdir": "{{ secret + \"/pki\" }}", "creates": "{{ secret + \"/pki/authorities/\" + item.name + \"/config/authority.conf\" }}"}, "delegate_to": "localhost", "become": false, "run_once": true, "with_flattened": ["{{ pki_authorities + pki_dependent_authorities }}"], "when": "(item.name is defined and (item.enabled|d(True) | bool))"}, "module_options": "./lib/pki-authority init --name \"{{ item.name }}\" --default-sign-base \"{{ pki_default_sign_base }}\" --root-sign-multiplier \"{{ pki_default_root_sign_multiplier }}\" --ca-sign-multiplier \"{{ pki_default_ca_sign_multiplier }}\" --cert-sign-multiplier \"{{ pki_default_cert_sign_multiplier }}\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Create PKI authorities", "module": "ansible.builtin.command", "index": 27, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Create PKI authorities", "environment": {"PKI_SESSION_TOKEN": "{{ pki_fact_session_token }}", "PKI_ROOT": "{{ secret + \"/pki\" }}", "PKI_LIBRARY": "{{ item.pki_ca_library | d(pki_ca_library) }}", "PKI_CA_CERTIFICATES": "{{ secret + \"/pki/ca-certificates/\" + (item.ca_certificates_path | d(pki_ca_certificates_path)) }}"}, "args": {"chdir": "{{ secret + \"/pki\" }}", "creates": "{{ secret + \"/pki/authorities/\" + item.name + \"/subject/cert.pem\" }}"}, "delegate_to": "localhost", "become": false, "run_once": true, "with_flattened": ["{{ pki_authorities + pki_dependent_authorities }}"], "when": "(item.name is defined and (item.enabled|d(True) | bool))"}, "module_options": "./lib/pki-authority new-ca --name \"{{ item.name }}\" --type \"{{ item.type | d('') }}\" --domain \"{{ item.domain | d(pki_ca_domain) }}\" --subdomain \"{{ item.subdomain }}\" --subject \"{{ item.subject | join('/') }}\" --issuer-name \"{{ item.issuer_name | d('') }}\" --root-sign-days \"{{ item.root_sign_days | d('') }}\" --ca-sign-days \"{{ item.ca_sign_days | d('') }}\" --cert-sign-days \"{{ item.cert_sign_days | d('') }}\" --system-ca \"{{ (item.system_ca | d(True)) | bool | lower }}\" --alt-authority \"{{ item.alt_authority | d('') }}\" --key-size \"{{ item.key_size | d('') }}\" --crl \"{{ item.crl | d(True) }}\" --ocsp \"{{ item.ocsp | d(True) }}\" --name-constraints \"{{ item.name_constraints | d(pki_ca_name_constraints) }}\" --name-constraints-critical \"{{ item.name_constraints_critical | d(pki_ca_name_constraints_critical) }}\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Sign certificate requests for current hosts", "module": "ansible.builtin.command", "index": 28, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Sign certificate requests for current hosts", "environment": {"PKI_SESSION_TOKEN": "{{ pki_fact_session_token }}"}, "args": {"chdir": "{{ secret + \"/pki\" }}"}, "delegate_to": "localhost", "register": "pki_register_sign_by_host", "become": false, "run_once": true, "when": "(pki_authorities or pki_dependent_authorities)", "changed_when": "pki_register_sign_by_host.stdout|d()"}, "module_options": "./lib/pki-authority sign-by-host {% for host in play_hosts %}{{ host }} {% endfor %}", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download public realm contents by host", "module": "ansible.builtin.copy", "index": 29, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Download public realm contents by host", "with_nested": ["{{ pki_realms + pki_group_realms + pki_host_realms + pki_default_realms + pki_dependent_realms }}", ["external", "internal"]], "when": "(pki_enabled|bool and item.0.name is defined and (item.0.enabled|d(True) | bool) and (item.0.when|d(True) | bool))"}, "module_options": {"src": "{{ secret + \"/pki/realms/by-host/\" + inventory_hostname + \"/\" + item.0.name + \"/\" + item.1 + \"/\" }}", "dest": "/etc/pki/realms/{{ item.0.name }}/{{ item.1 }}/", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download custom public files", "module": "ansible.builtin.copy", "index": 30, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Download custom public files", "with_flattened": ["{{ pki_public_files }}", "{{ pki_group_public_files }}", "{{ pki_host_public_files }}"], "when": "(pki_enabled|bool and (item.src is defined or item.content is defined) and item.dest is defined)"}, "module_options": {"src": "{{ item.src | d(omit) }}", "content": "{{ item.content | d(omit) }}", "dest": "{{ item.dest }}", "owner": "{{ item.owner | d(\"root\") }}", "group": "{{ item.group | d(pki_public_group) }}", "mode": "{{ item.mode | d(\"0644\") }}", "directory_mode": "{{ item.directory_mode | d(omit) }}", "follow": "{{ item.follow | d(omit) }}", "force": "{{ item.force | d(omit) }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download external realm contents by group", "module": "ansible.builtin.copy", "index": 31, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Download external realm contents by group", "with_nested": ["{{ pki_group_realms + pki_default_realms }}", "{{ pki_inventory_groups }}"], "when": "(pki_enabled|bool and (item.0.name is defined and (item.0.enabled|d(True) | bool) and (item.0.when|d(True) | bool)) and (item.1 is defined and item.1 in group_names))"}, "module_options": {"src": "{{ secret + \"/pki/realms/by-group/\" + item.1 + \"/\" + item.0.name + \"/external/\" }}", "dest": "/etc/pki/realms/{{ item.0.name }}/external/", "owner": "root", "group": "root", "mode": "0644", "force": false}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download external realm contents for all hosts", "module": "ansible.builtin.copy", "index": 32, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Download external realm contents for all hosts", "with_items": ["{{ pki_realms + pki_default_realms }}"], "when": "(pki_enabled|bool and item.name is defined and (item.enabled|d(True) | bool) and (item.when|d(True) | bool))"}, "module_options": {"src": "{{ secret + \"/pki/realms/by-group/all/\" + item.name + \"/external/\" }}", "dest": "/etc/pki/realms/{{ item.name }}/external/", "owner": "root", "group": "root", "mode": "0644", "force": false}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download custom CA certificates by host", "module": "ansible.builtin.copy", "index": 33, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Download custom CA certificates by host", "notify": ["Regenerate ca-certificates.crt"], "when": "pki_system_ca_certificates_download_by_host|d(pki_enabled) | bool"}, "module_options": {"src": "{{ secret + \"/pki/ca-certificates/by-host/\" + inventory_hostname + \"/\" }}", "dest": "/usr/local/share/ca-certificates/pki/", "owner": "root", "group": "root", "mode": "0644"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download custom CA certificates by group", "module": "ansible.builtin.copy", "index": 34, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Download custom CA certificates by group", "with_items": "{{ pki_inventory_groups }}", "notify": ["Regenerate ca-certificates.crt"], "when": "((pki_system_ca_certificates_download_by_group|d(pki_enabled) | bool) and item in group_names)"}, "module_options": {"src": "{{ secret + \"/pki/ca-certificates/by-group/\" + item + \"/\" }}", "dest": "/usr/local/share/ca-certificates/pki/", "owner": "root", "group": "root", "mode": "0644", "force": false}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Download custom CA certificates for all hosts", "module": "ansible.builtin.copy", "index": 35, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Download custom CA certificates for all hosts", "notify": ["Regenerate ca-certificates.crt"], "when": "pki_system_ca_certificates_download_all_hosts|d(pki_enabled) | bool"}, "module_options": {"src": "{{ secret + \"/pki/ca-certificates/by-group/all/\" }}", "dest": "/usr/local/share/ca-certificates/pki/", "owner": "root", "group": "root", "mode": "0644", "force": "{{ pki_system_ca_certificates_download_all_hosts_force|bool }}"}, "fqcn": "ansible.builtin.copy", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Execute PKI realm commands", "module": "ansible.builtin.command", "index": 36, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Execute PKI realm commands", "environment": {"PKI_SESSION_TOKEN": "{{ pki_fact_session_token }}"}, "with_flattened": ["{{ pki_realms }}", "{{ pki_group_realms }}", "{{ pki_host_realms }}", "{{ pki_default_realms }}", "{{ pki_dependent_realms }}"], "changed_when": false, "when": "(pki_enabled|bool and item.name is defined and (item.enabled|d(True) | bool) and (item.when|d(True) | bool))"}, "module_options": "\"{{ pki_fact_lib_path }}/pki-realm\" run -n \"{{ item.name }}\"", "fqcn": "ansible.builtin.command", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage PKI scheduler", "module": "ansible.builtin.cron", "index": 37, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Manage PKI scheduler", "when": "not ansible_check_mode"}, "module_options": {"name": "Process PKI system realms", "user": "root", "cron_file": "pki-realm-scheduler", "job": "test -x \"{{ pki_fact_lib_path }}/pki-realm\" && \"{{ pki_fact_lib_path }}/pki-realm\" schedule", "special_time": "{{ pki_scheduler_interval }}", "state": "{{ \"present\" if (pki_enabled|bool and pki_scheduler | bool) else \"absent\" }}"}, "fqcn": "ansible.builtin.cron", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Manage system CA certificates", "module": "ansible.builtin.include_tasks", "index": 38, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Manage system CA certificates", "when": "pki_enabled | bool"}, "module_options": "ca_certificates.yml", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Make sure that Ansible local facts directory exists", "module": "ansible.builtin.file", "index": 39, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Make sure that Ansible local facts directory exists"}, "module_options": {"path": "/etc/ansible/facts.d", "state": "directory", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.file", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Save local facts", "module": "ansible.builtin.template", "index": 40, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Save local facts", "register": "pki_register_facts", "notify": ["Refresh host facts"], "tags": ["meta::facts"]}, "module_options": {"src": "etc/ansible/facts.d/pki.fact.j2", "dest": "/etc/ansible/facts.d/pki.fact", "owner": "root", "group": "root", "mode": "0755"}, "fqcn": "ansible.builtin.template", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "Flush handlers for PKI", "module": "ansible.builtin.meta", "index": 41, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "Flush handlers for PKI"}, "module_options": "flush_handlers", "fqcn": "ansible.builtin.meta", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}, {"py/object": "struct4.Task", "name": "DebOps post_tasks hook", "module": "ansible.builtin.include_tasks", "index": 42, "defined_in": "testdata/scm_repo/roles/pki/tasks/main.yml", "options": {"name": "DebOps post_tasks hook"}, "module_options": "{{ lookup('debops.debops.task_src', 'pki/post_main.yml') }}", "fqcn": "ansible.builtin.include_tasks", "used_in": ["testdata/scm_repo/roles/pki"], "annotations": {}}], "modules": [], "source": "", "fqcn": "", "annotations": {"use-non-builtin-module": true}, "used_in": ["testdata/scm_repo/playbooks/bootstrap-ldap.yml", "testdata/scm_repo/playbooks/bootstrap-sss.yml", "testdata/scm_repo/playbooks/common.yml"]}], "collections_path": "testdata/installed_collections_path", "collections": [{"py/object": "struct4.Collection", "name": "community.mysql", "path": "testdata/installed_collections_path/ansible_collections/community/mysql", "modules": [{"py/object": "struct4.Module", "name": "mysql_info", "fqcn": "community.mysql.mysql_info", "collection": "community.mysql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/mysql/plugins/modules/mysql_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mysql_variables", "fqcn": "community.mysql.mysql_variables", "collection": "community.mysql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/mysql/plugins/modules/mysql_variables.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mysql_replication", "fqcn": "community.mysql.mysql_replication", "collection": "community.mysql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/mysql/plugins/modules/mysql_replication.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mysql_query", "fqcn": "community.mysql.mysql_query", "collection": "community.mysql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/mysql/plugins/modules/mysql_query.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mysql_role", "fqcn": "community.mysql.mysql_role", "collection": "community.mysql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/mysql/plugins/modules/mysql_role.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mysql_db", "fqcn": "community.mysql.mysql_db", "collection": "community.mysql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/mysql/plugins/modules/mysql_db.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/secure_installation.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/phpmyadmin/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/phpmyadmin/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/database.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/configure_mysql.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/configure_mysql.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 10}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "mysql_user", "fqcn": "community.mysql.mysql_user", "collection": "community.mysql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/mysql/plugins/modules/mysql_user.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/secure_installation.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/phpmyadmin/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/database.yml\", \"index\": 2}"], "annotations": {}}], "playbooks": [], "roles": [], "annotations": {}}, {"py/object": "struct4.Collection", "name": "community.general", "path": "testdata/installed_collections_path/ansible_collections/community/general", "modules": [{"py/object": "struct4.Module", "name": "bundler", "fqcn": "community.general.bundler", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/bundler.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 7}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "pip_package_info", "fqcn": "community.general.pip_package_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/pip_package_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "easy_install", "fqcn": "community.general.easy_install", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/easy_install.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "composer", "fqcn": "community.general.composer", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/composer.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 8}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "maven_artifact", "fqcn": "community.general.maven_artifact", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/maven_artifact.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "cargo", "fqcn": "community.general.cargo", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/cargo.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "npm", "fqcn": "community.general.npm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/npm.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/nodejs/tasks/main.yml\", \"index\": 4}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "yarn", "fqcn": "community.general.yarn", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/yarn.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "bower", "fqcn": "community.general.bower", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/bower.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pear", "fqcn": "community.general.pear", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/pear.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "cpanm", "fqcn": "community.general.cpanm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/cpanm.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ansible_galaxy_install", "fqcn": "community.general.ansible_galaxy_install", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/ansible_galaxy_install.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pipx", "fqcn": "community.general.pipx", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/pipx.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gem", "fqcn": "community.general.gem", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/language/gem.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/ruby/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ruby/tasks/main.yml\", \"index\": 4}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "xbps", "fqcn": "community.general.xbps", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/xbps.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pkgutil", "fqcn": "community.general.pkgutil", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/pkgutil.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pacman", "fqcn": "community.general.pacman", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/pacman.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pulp_repo", "fqcn": "community.general.pulp_repo", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/pulp_repo.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pkgng", "fqcn": "community.general.pkgng", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/pkgng.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "copr", "fqcn": "community.general.copr", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/copr.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "snap_alias", "fqcn": "community.general.snap_alias", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/snap_alias.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "zypper", "fqcn": "community.general.zypper", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/zypper.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "apt_repo", "fqcn": "community.general.apt_repo", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/apt_repo.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "swdepot", "fqcn": "community.general.swdepot", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/swdepot.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "flatpak_remote", "fqcn": "community.general.flatpak_remote", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/flatpak_remote.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "layman", "fqcn": "community.general.layman", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/layman.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pacman_key", "fqcn": "community.general.pacman_key", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/pacman_key.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "portage", "fqcn": "community.general.portage", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/portage.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "apk", "fqcn": "community.general.apk", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/apk.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "snap", "fqcn": "community.general.snap", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/snap.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "homebrew", "fqcn": "community.general.homebrew", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/homebrew.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mas", "fqcn": "community.general.mas", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/mas.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "redhat_subscription", "fqcn": "community.general.redhat_subscription", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/redhat_subscription.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openbsd_pkg", "fqcn": "community.general.openbsd_pkg", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/openbsd_pkg.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "zypper_repository", "fqcn": "community.general.zypper_repository", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/zypper_repository.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "dnf_versionlock", "fqcn": "community.general.dnf_versionlock", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/dnf_versionlock.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "urpmi", "fqcn": "community.general.urpmi", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/urpmi.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "swupd", "fqcn": "community.general.swupd", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/swupd.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "homebrew_tap", "fqcn": "community.general.homebrew_tap", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/homebrew_tap.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rhn_channel", "fqcn": "community.general.rhn_channel", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/rhn_channel.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pkgin", "fqcn": "community.general.pkgin", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/pkgin.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "svr4pkg", "fqcn": "community.general.svr4pkg", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/svr4pkg.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "installp", "fqcn": "community.general.installp", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/installp.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "homebrew_cask", "fqcn": "community.general.homebrew_cask", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/homebrew_cask.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sorcery", "fqcn": "community.general.sorcery", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/sorcery.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "slackpkg", "fqcn": "community.general.slackpkg", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/slackpkg.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "flatpak", "fqcn": "community.general.flatpak", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/flatpak.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rpm_ostree_pkg", "fqcn": "community.general.rpm_ostree_pkg", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/rpm_ostree_pkg.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "portinstall", "fqcn": "community.general.portinstall", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/portinstall.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rhsm_repository", "fqcn": "community.general.rhsm_repository", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/rhsm_repository.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "yum_versionlock", "fqcn": "community.general.yum_versionlock", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/yum_versionlock.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pkg5", "fqcn": "community.general.pkg5", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/pkg5.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rhsm_release", "fqcn": "community.general.rhsm_release", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/rhsm_release.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "opkg", "fqcn": "community.general.opkg", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/opkg.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pkg5_publisher", "fqcn": "community.general.pkg5_publisher", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/pkg5_publisher.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rhn_register", "fqcn": "community.general.rhn_register", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/rhn_register.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "apt_rpm", "fqcn": "community.general.apt_rpm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/apt_rpm.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "macports", "fqcn": "community.general.macports", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/packaging/os/macports.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "odbc", "fqcn": "community.general.odbc", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/misc/odbc.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "redis_data_info", "fqcn": "community.general.redis_data_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/misc/redis_data_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "redis_data_incr", "fqcn": "community.general.redis_data_incr", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/misc/redis_data_incr.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "kibana_plugin", "fqcn": "community.general.kibana_plugin", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/misc/kibana_plugin.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "elasticsearch_plugin", "fqcn": "community.general.elasticsearch_plugin", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/misc/elasticsearch_plugin.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "riak", "fqcn": "community.general.riak", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/misc/riak.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "redis", "fqcn": "community.general.redis", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/misc/redis.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 26}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "redis_data", "fqcn": "community.general.redis_data", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/misc/redis_data.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "redis_info", "fqcn": "community.general.redis_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/misc/redis_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "influxdb_user", "fqcn": "community.general.influxdb_user", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/influxdb/influxdb_user.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/manage_contents.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/manage_contents.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 5}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "influxdb_write", "fqcn": "community.general.influxdb_write", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/influxdb/influxdb_write.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "influxdb_query", "fqcn": "community.general.influxdb_query", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/influxdb/influxdb_query.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "influxdb_database", "fqcn": "community.general.influxdb_database", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/influxdb/influxdb_database.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/manage_contents.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/manage_contents.yml\", \"index\": 1}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "influxdb_retention_policy", "fqcn": "community.general.influxdb_retention_policy", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/influxdb/influxdb_retention_policy.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/manage_contents.yml\", \"index\": 2}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "aerospike_migrations", "fqcn": "community.general.aerospike_migrations", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/aerospike/aerospike_migrations.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "vertica_role", "fqcn": "community.general.vertica_role", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/vertica/vertica_role.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "vertica_user", "fqcn": "community.general.vertica_user", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/vertica/vertica_user.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "vertica_configuration", "fqcn": "community.general.vertica_configuration", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/vertica/vertica_configuration.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "vertica_info", "fqcn": "community.general.vertica_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/vertica/vertica_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "vertica_schema", "fqcn": "community.general.vertica_schema", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/vertica/vertica_schema.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mssql_script", "fqcn": "community.general.mssql_script", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/mssql/mssql_script.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mssql_db", "fqcn": "community.general.mssql_db", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/mssql/mssql_db.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hana_query", "fqcn": "community.general.hana_query", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/database/saphana/hana_query.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "onepassword_info", "fqcn": "community.general.onepassword_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/onepassword_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_role", "fqcn": "community.general.ipa_role", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_role.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_hbacrule", "fqcn": "community.general.ipa_hbacrule", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_hbacrule.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_host", "fqcn": "community.general.ipa_host", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_host.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_group", "fqcn": "community.general.ipa_group", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_group.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_vault", "fqcn": "community.general.ipa_vault", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_vault.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_sudocmdgroup", "fqcn": "community.general.ipa_sudocmdgroup", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_sudocmdgroup.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_user", "fqcn": "community.general.ipa_user", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_user.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_otptoken", "fqcn": "community.general.ipa_otptoken", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_otptoken.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_dnszone", "fqcn": "community.general.ipa_dnszone", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_dnszone.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_otpconfig", "fqcn": "community.general.ipa_otpconfig", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_otpconfig.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_sudorule", "fqcn": "community.general.ipa_sudorule", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_sudorule.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_service", "fqcn": "community.general.ipa_service", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_service.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_subca", "fqcn": "community.general.ipa_subca", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_subca.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_pwpolicy", "fqcn": "community.general.ipa_pwpolicy", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_pwpolicy.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_sudocmd", "fqcn": "community.general.ipa_sudocmd", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_sudocmd.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_hostgroup", "fqcn": "community.general.ipa_hostgroup", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_hostgroup.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_dnsrecord", "fqcn": "community.general.ipa_dnsrecord", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_dnsrecord.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipa_config", "fqcn": "community.general.ipa_config", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/ipa/ipa_config.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "keycloak_group", "fqcn": "community.general.keycloak_group", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/keycloak/keycloak_group.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "keycloak_user_federation", "fqcn": "community.general.keycloak_user_federation", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/keycloak/keycloak_user_federation.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "keycloak_realm_info", "fqcn": "community.general.keycloak_realm_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/keycloak/keycloak_realm_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "keycloak_authentication", "fqcn": "community.general.keycloak_authentication", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/keycloak/keycloak_authentication.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "keycloak_client", "fqcn": "community.general.keycloak_client", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/keycloak/keycloak_client.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "keycloak_realm", "fqcn": "community.general.keycloak_realm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/keycloak/keycloak_realm.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "keycloak_identity_provider", "fqcn": "community.general.keycloak_identity_provider", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/keycloak/keycloak_identity_provider.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "keycloak_clienttemplate", "fqcn": "community.general.keycloak_clienttemplate", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/keycloak/keycloak_clienttemplate.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "keycloak_client_rolemapping", "fqcn": "community.general.keycloak_client_rolemapping", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/keycloak/keycloak_client_rolemapping.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "keycloak_role", "fqcn": "community.general.keycloak_role", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/keycloak/keycloak_role.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "keycloak_clientscope", "fqcn": "community.general.keycloak_clientscope", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/keycloak/keycloak_clientscope.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "opendj_backendprop", "fqcn": "community.general.opendj_backendprop", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/identity/opendj/opendj_backendprop.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mail", "fqcn": "community.general.mail", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/mail.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 16}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "matrix", "fqcn": "community.general.matrix", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/matrix.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "grove", "fqcn": "community.general.grove", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/grove.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "jabber", "fqcn": "community.general.jabber", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/jabber.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hipchat", "fqcn": "community.general.hipchat", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/hipchat.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "bearychat", "fqcn": "community.general.bearychat", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/bearychat.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "telegram", "fqcn": "community.general.telegram", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/telegram.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "say", "fqcn": "community.general.say", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/say.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pushover", "fqcn": "community.general.pushover", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/pushover.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "discord", "fqcn": "community.general.discord", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/discord.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "irc", "fqcn": "community.general.irc", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/irc.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mattermost", "fqcn": "community.general.mattermost", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/mattermost.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "nexmo", "fqcn": "community.general.nexmo", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/nexmo.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "typetalk", "fqcn": "community.general.typetalk", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/typetalk.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mqtt", "fqcn": "community.general.mqtt", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/mqtt.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "office_365_connector_card", "fqcn": "community.general.office_365_connector_card", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/office_365_connector_card.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "syslogger", "fqcn": "community.general.syslogger", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/syslogger.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "campfire", "fqcn": "community.general.campfire", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/campfire.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "flowdock", "fqcn": "community.general.flowdock", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/flowdock.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sendgrid", "fqcn": "community.general.sendgrid", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/sendgrid.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "cisco_webex", "fqcn": "community.general.cisco_webex", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/cisco_webex.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "twilio", "fqcn": "community.general.twilio", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/twilio.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pushbullet", "fqcn": "community.general.pushbullet", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/pushbullet.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "slack", "fqcn": "community.general.slack", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/slack.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rocketchat", "fqcn": "community.general.rocketchat", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/rocketchat.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "logentries_msg", "fqcn": "community.general.logentries_msg", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/logentries_msg.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "catapult", "fqcn": "community.general.catapult", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/notification/catapult.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "wakeonlan", "fqcn": "community.general.wakeonlan", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/wakeonlan.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "imc_rest", "fqcn": "community.general.imc_rest", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/imc/imc_rest.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "lxca_nodes", "fqcn": "community.general.lxca_nodes", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/lxca/lxca_nodes.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "lxca_cmms", "fqcn": "community.general.lxca_cmms", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/lxca/lxca_cmms.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "stacki_host", "fqcn": "community.general.stacki_host", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/stacki/stacki_host.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ilo_redfish_config", "fqcn": "community.general.ilo_redfish_config", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/redfish/ilo_redfish_config.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ilo_redfish_info", "fqcn": "community.general.ilo_redfish_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/redfish/ilo_redfish_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "idrac_redfish_config", "fqcn": "community.general.idrac_redfish_config", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/redfish/idrac_redfish_config.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "idrac_redfish_info", "fqcn": "community.general.idrac_redfish_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/redfish/idrac_redfish_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "redfish_config", "fqcn": "community.general.redfish_config", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/redfish/redfish_config.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "idrac_redfish_command", "fqcn": "community.general.idrac_redfish_command", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/redfish/idrac_redfish_command.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "redfish_command", "fqcn": "community.general.redfish_command", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/redfish/redfish_command.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "redfish_info", "fqcn": "community.general.redfish_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/redfish/redfish_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_san_manager", "fqcn": "community.general.oneview_san_manager", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_san_manager.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_fcoe_network", "fqcn": "community.general.oneview_fcoe_network", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_fcoe_network.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_logical_interconnect_group_info", "fqcn": "community.general.oneview_logical_interconnect_group_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_logical_interconnect_group_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_logical_interconnect_group", "fqcn": "community.general.oneview_logical_interconnect_group", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_logical_interconnect_group.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_network_set_info", "fqcn": "community.general.oneview_network_set_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_network_set_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_san_manager_info", "fqcn": "community.general.oneview_san_manager_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_san_manager_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_fc_network_info", "fqcn": "community.general.oneview_fc_network_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_fc_network_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_network_set", "fqcn": "community.general.oneview_network_set", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_network_set.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_fc_network", "fqcn": "community.general.oneview_fc_network", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_fc_network.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_fcoe_network_info", "fqcn": "community.general.oneview_fcoe_network_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_fcoe_network_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_ethernet_network", "fqcn": "community.general.oneview_ethernet_network", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_ethernet_network.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_datacenter_info", "fqcn": "community.general.oneview_datacenter_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_datacenter_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_enclosure_info", "fqcn": "community.general.oneview_enclosure_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_enclosure_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneview_ethernet_network_info", "fqcn": "community.general.oneview_ethernet_network_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/oneview/oneview_ethernet_network_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "xcc_redfish_command", "fqcn": "community.general.xcc_redfish_command", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/lenovoxcc/xcc_redfish_command.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "cobbler_sync", "fqcn": "community.general.cobbler_sync", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/cobbler/cobbler_sync.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "cobbler_system", "fqcn": "community.general.cobbler_system", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/cobbler/cobbler_system.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hpilo_boot", "fqcn": "community.general.hpilo_boot", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/hpilo/hpilo_boot.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hpilo_info", "fqcn": "community.general.hpilo_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/hpilo/hpilo_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hponcfg", "fqcn": "community.general.hponcfg", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/hpilo/hponcfg.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipmi_boot", "fqcn": "community.general.ipmi_boot", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/ipmi/ipmi_boot.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipmi_power", "fqcn": "community.general.ipmi_power", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/ipmi/ipmi_power.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "manageiq_tags", "fqcn": "community.general.manageiq_tags", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/manageiq/manageiq_tags.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "manageiq_user", "fqcn": "community.general.manageiq_user", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/manageiq/manageiq_user.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "manageiq_policies", "fqcn": "community.general.manageiq_policies", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/manageiq/manageiq_policies.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "manageiq_group", "fqcn": "community.general.manageiq_group", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/manageiq/manageiq_group.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "manageiq_provider", "fqcn": "community.general.manageiq_provider", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/manageiq/manageiq_provider.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "manageiq_tenant", "fqcn": "community.general.manageiq_tenant", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/manageiq/manageiq_tenant.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "manageiq_alert_profiles", "fqcn": "community.general.manageiq_alert_profiles", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/manageiq/manageiq_alert_profiles.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "manageiq_alerts", "fqcn": "community.general.manageiq_alerts", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/remote_management/manageiq/manageiq_alerts.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rundeck_job_run", "fqcn": "community.general.rundeck_job_run", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/rundeck_job_run.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "supervisorctl", "fqcn": "community.general.supervisorctl", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/supervisorctl.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "htpasswd", "fqcn": "community.general.htpasswd", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/htpasswd.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_htpasswd.yml\", \"index\": 2}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "jboss", "fqcn": "community.general.jboss", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/jboss.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "apache2_module", "fqcn": "community.general.apache2_module", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/apache2_module.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 5}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "taiga_issue", "fqcn": "community.general.taiga_issue", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/taiga_issue.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "nginx_status_info", "fqcn": "community.general.nginx_status_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/nginx_status_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "jenkins_build", "fqcn": "community.general.jenkins_build", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/jenkins_build.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rundeck_project", "fqcn": "community.general.rundeck_project", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/rundeck_project.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "jenkins_job_info", "fqcn": "community.general.jenkins_job_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/jenkins_job_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gunicorn", "fqcn": "community.general.gunicorn", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/gunicorn.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rundeck_job_executions_info", "fqcn": "community.general.rundeck_job_executions_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/rundeck_job_executions_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "jenkins_script", "fqcn": "community.general.jenkins_script", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/jenkins_script.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "jenkins_job", "fqcn": "community.general.jenkins_job", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/jenkins_job.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "django_manage", "fqcn": "community.general.django_manage", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/django_manage.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 20}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "jira", "fqcn": "community.general.jira", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/jira.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "jenkins_plugin", "fqcn": "community.general.jenkins_plugin", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/jenkins_plugin.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "apache2_mod_proxy", "fqcn": "community.general.apache2_mod_proxy", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/apache2_mod_proxy.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "deploy_helper", "fqcn": "community.general.deploy_helper", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/deploy_helper.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rundeck_acl_policy", "fqcn": "community.general.rundeck_acl_policy", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/rundeck_acl_policy.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ejabberd_user", "fqcn": "community.general.ejabberd_user", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/ejabberd_user.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_ca_host_key_cert", "fqcn": "community.general.utm_ca_host_key_cert", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_ca_host_key_cert.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_ca_host_key_cert_info", "fqcn": "community.general.utm_ca_host_key_cert_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_ca_host_key_cert_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_proxy_location_info", "fqcn": "community.general.utm_proxy_location_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_proxy_location_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_network_interface_address", "fqcn": "community.general.utm_network_interface_address", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_network_interface_address.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_proxy_frontend", "fqcn": "community.general.utm_proxy_frontend", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_proxy_frontend.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_network_interface_address_info", "fqcn": "community.general.utm_network_interface_address_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_network_interface_address_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_proxy_location", "fqcn": "community.general.utm_proxy_location", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_proxy_location.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_aaa_group_info", "fqcn": "community.general.utm_aaa_group_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_aaa_group_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_aaa_group", "fqcn": "community.general.utm_aaa_group", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_aaa_group.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_dns_host", "fqcn": "community.general.utm_dns_host", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_dns_host.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_proxy_frontend_info", "fqcn": "community.general.utm_proxy_frontend_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_proxy_frontend_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_proxy_exception", "fqcn": "community.general.utm_proxy_exception", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_proxy_exception.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "utm_proxy_auth_profile", "fqcn": "community.general.utm_proxy_auth_profile", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/web_infrastructure/sophos_utm/utm_proxy_auth_profile.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "etcd3", "fqcn": "community.general.etcd3", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/clustering/etcd3.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "znode", "fqcn": "community.general.znode", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/clustering/znode.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pacemaker_cluster", "fqcn": "community.general.pacemaker_cluster", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/clustering/pacemaker_cluster.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "nomad_job_info", "fqcn": "community.general.nomad_job_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/clustering/nomad/nomad_job_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "nomad_job", "fqcn": "community.general.nomad_job", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/clustering/nomad/nomad_job.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "consul_acl", "fqcn": "community.general.consul_acl", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/clustering/consul/consul_acl.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "consul_session", "fqcn": "community.general.consul_session", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/clustering/consul/consul_session.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "consul", "fqcn": "community.general.consul", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/clustering/consul/consul.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "consul_kv", "fqcn": "community.general.consul_kv", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/clustering/consul/consul_kv.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ss_3par_cpg", "fqcn": "community.general.ss_3par_cpg", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/hpe3par/ss_3par_cpg.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "vexata_volume", "fqcn": "community.general.vexata_volume", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/vexata/vexata_volume.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "vexata_eg", "fqcn": "community.general.vexata_eg", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/vexata/vexata_eg.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pmem", "fqcn": "community.general.pmem", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/pmem/pmem.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ibm_sa_host", "fqcn": "community.general.ibm_sa_host", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/ibm/ibm_sa_host.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ibm_sa_domain", "fqcn": "community.general.ibm_sa_domain", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/ibm/ibm_sa_domain.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ibm_sa_host_ports", "fqcn": "community.general.ibm_sa_host_ports", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/ibm/ibm_sa_host_ports.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ibm_sa_vol_map", "fqcn": "community.general.ibm_sa_vol_map", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/ibm/ibm_sa_vol_map.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ibm_sa_pool", "fqcn": "community.general.ibm_sa_pool", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/ibm/ibm_sa_pool.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ibm_sa_vol", "fqcn": "community.general.ibm_sa_vol", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/ibm/ibm_sa_vol.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "zfs_facts", "fqcn": "community.general.zfs_facts", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/zfs/zfs_facts.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "zfs", "fqcn": "community.general.zfs", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/zfs/zfs.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "zfs_delegate_admin", "fqcn": "community.general.zfs_delegate_admin", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/zfs/zfs_delegate_admin.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "zpool_facts", "fqcn": "community.general.zpool_facts", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/zfs/zpool_facts.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "emc_vnx_sg_member", "fqcn": "community.general.emc_vnx_sg_member", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/storage/emc/emc_vnx_sg_member.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "cronvar", "fqcn": "community.general.cronvar", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/cronvar.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "osx_defaults", "fqcn": "community.general.osx_defaults", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/osx_defaults.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "aix_lvg", "fqcn": "community.general.aix_lvg", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/aix_lvg.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "iptables_state", "fqcn": "community.general.iptables_state", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/iptables_state.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "selogin", "fqcn": "community.general.selogin", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/selogin.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sefcontext", "fqcn": "community.general.sefcontext", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/sefcontext.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "syspatch", "fqcn": "community.general.syspatch", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/syspatch.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "crypttab", "fqcn": "community.general.crypttab", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/crypttab.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 26}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "gconftool2", "fqcn": "community.general.gconftool2", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/gconftool2.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "open_iscsi", "fqcn": "community.general.open_iscsi", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/open_iscsi.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 9}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "aix_inittab", "fqcn": "community.general.aix_inittab", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/aix_inittab.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "dpkg_divert", "fqcn": "community.general.dpkg_divert", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/dpkg_divert.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ohai", "fqcn": "community.general.ohai", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/ohai.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "xfconf", "fqcn": "community.general.xfconf", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/xfconf.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "modprobe", "fqcn": "community.general.modprobe", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/modprobe.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/modprobe.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/modprobe.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/samba/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 5}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "filesystem", "fqcn": "community.general.filesystem", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/filesystem.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml\", \"index\": 6}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "homectl", "fqcn": "community.general.homectl", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/homectl.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "facter", "fqcn": "community.general.facter", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/facter.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "shutdown", "fqcn": "community.general.shutdown", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/shutdown.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gconftool2_info", "fqcn": "community.general.gconftool2_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/gconftool2_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "dconf", "fqcn": "community.general.dconf", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/dconf.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "beadm", "fqcn": "community.general.beadm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/beadm.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mksysb", "fqcn": "community.general.mksysb", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/mksysb.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "xfs_quota", "fqcn": "community.general.xfs_quota", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/xfs_quota.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ufw", "fqcn": "community.general.ufw", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/ufw.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "solaris_zone", "fqcn": "community.general.solaris_zone", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/solaris_zone.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "xfconf_info", "fqcn": "community.general.xfconf_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/xfconf_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "listen_ports_facts", "fqcn": "community.general.listen_ports_facts", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/listen_ports_facts.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "nosh", "fqcn": "community.general.nosh", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/nosh.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "lbu", "fqcn": "community.general.lbu", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/lbu.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "aix_filesystem", "fqcn": "community.general.aix_filesystem", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/aix_filesystem.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pamd", "fqcn": "community.general.pamd", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/pamd.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "aix_lvol", "fqcn": "community.general.aix_lvol", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/aix_lvol.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sysupgrade", "fqcn": "community.general.sysupgrade", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/sysupgrade.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "svc", "fqcn": "community.general.svc", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/svc.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "vdo", "fqcn": "community.general.vdo", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/vdo.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openwrt_init", "fqcn": "community.general.openwrt_init", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/openwrt_init.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ssh_config", "fqcn": "community.general.ssh_config", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/ssh_config.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "capabilities", "fqcn": "community.general.capabilities", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/capabilities.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 15}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "java_keystore", "fqcn": "community.general.java_keystore", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/java_keystore.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "puppet", "fqcn": "community.general.puppet", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/puppet.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "runit", "fqcn": "community.general.runit", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/runit.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sudoers", "fqcn": "community.general.sudoers", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/sudoers.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pam_limits", "fqcn": "community.general.pam_limits", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/pam_limits.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pids", "fqcn": "community.general.pids", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/pids.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "awall", "fqcn": "community.general.awall", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/awall.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "kernel_blacklist", "fqcn": "community.general.kernel_blacklist", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/kernel_blacklist.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "parted", "fqcn": "community.general.parted", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/parted.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "lvol", "fqcn": "community.general.lvol", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/lvol.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml\", \"index\": 5}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "sap_task_list_execute", "fqcn": "community.general.sap_task_list_execute", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/sap_task_list_execute.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "make", "fqcn": "community.general.make", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/make.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml\", \"index\": 10}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "launchd", "fqcn": "community.general.launchd", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/launchd.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "java_cert", "fqcn": "community.general.java_cert", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/java_cert.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "lvg", "fqcn": "community.general.lvg", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/lvg.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml\", \"index\": 3}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "locale_gen", "fqcn": "community.general.locale_gen", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/locale_gen.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/locales/tasks/main.yml\", \"index\": 2}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "sysrc", "fqcn": "community.general.sysrc", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/sysrc.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "timezone", "fqcn": "community.general.timezone", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/timezone.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/main.yml\", \"index\": 5}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "seport", "fqcn": "community.general.seport", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/seport.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "python_requirements_info", "fqcn": "community.general.python_requirements_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/python_requirements_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "alternatives", "fqcn": "community.general.alternatives", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/alternatives.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 4}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "interfaces_file", "fqcn": "community.general.interfaces_file", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/interfaces_file.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "aix_devices", "fqcn": "community.general.aix_devices", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/aix_devices.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "selinux_permissive", "fqcn": "community.general.selinux_permissive", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/system/selinux_permissive.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ali_instance", "fqcn": "community.general.ali_instance", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/alicloud/ali_instance.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ali_instance_info", "fqcn": "community.general.ali_instance_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/alicloud/ali_instance_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "webfaction_site", "fqcn": "community.general.webfaction_site", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/webfaction/webfaction_site.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "webfaction_domain", "fqcn": "community.general.webfaction_domain", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/webfaction/webfaction_domain.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "webfaction_db", "fqcn": "community.general.webfaction_db", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/webfaction/webfaction_db.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "webfaction_mailbox", "fqcn": "community.general.webfaction_mailbox", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/webfaction/webfaction_mailbox.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "webfaction_app", "fqcn": "community.general.webfaction_app", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/webfaction/webfaction_app.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "serverless", "fqcn": "community.general.serverless", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/serverless.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "proxmox_domain_info", "fqcn": "community.general.proxmox_domain_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/proxmox_domain_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rhevm", "fqcn": "community.general.rhevm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/rhevm.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "proxmox_tasks_info", "fqcn": "community.general.proxmox_tasks_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/proxmox_tasks_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "proxmox_snap", "fqcn": "community.general.proxmox_snap", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/proxmox_snap.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "cloud_init_data_facts", "fqcn": "community.general.cloud_init_data_facts", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/cloud_init_data_facts.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "terraform", "fqcn": "community.general.terraform", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/terraform.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "proxmox_user_info", "fqcn": "community.general.proxmox_user_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/proxmox_user_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "proxmox_storage_info", "fqcn": "community.general.proxmox_storage_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/proxmox_storage_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "proxmox", "fqcn": "community.general.proxmox", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/proxmox.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "proxmox_template", "fqcn": "community.general.proxmox_template", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/proxmox_template.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "proxmox_group_info", "fqcn": "community.general.proxmox_group_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/proxmox_group_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "proxmox_nic", "fqcn": "community.general.proxmox_nic", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/proxmox_nic.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "xenserver_facts", "fqcn": "community.general.xenserver_facts", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/xenserver_facts.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "proxmox_kvm", "fqcn": "community.general.proxmox_kvm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/misc/proxmox_kvm.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ovh_monthly_billing", "fqcn": "community.general.ovh_monthly_billing", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/ovh/ovh_monthly_billing.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ovh_ip_loadbalancing_backend", "fqcn": "community.general.ovh_ip_loadbalancing_backend", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/ovh/ovh_ip_loadbalancing_backend.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ovh_ip_failover", "fqcn": "community.general.ovh_ip_failover", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/ovh/ovh_ip_failover.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hwc_vpc_security_group", "fqcn": "community.general.hwc_vpc_security_group", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/huawei/hwc_vpc_security_group.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hwc_evs_disk", "fqcn": "community.general.hwc_evs_disk", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/huawei/hwc_evs_disk.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hwc_vpc_subnet", "fqcn": "community.general.hwc_vpc_subnet", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/huawei/hwc_vpc_subnet.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hwc_vpc_security_group_rule", "fqcn": "community.general.hwc_vpc_security_group_rule", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/huawei/hwc_vpc_security_group_rule.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hwc_vpc_private_ip", "fqcn": "community.general.hwc_vpc_private_ip", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/huawei/hwc_vpc_private_ip.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hwc_vpc_port", "fqcn": "community.general.hwc_vpc_port", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/huawei/hwc_vpc_port.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hwc_smn_topic", "fqcn": "community.general.hwc_smn_topic", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/huawei/hwc_smn_topic.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hwc_ecs_instance", "fqcn": "community.general.hwc_ecs_instance", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/huawei/hwc_ecs_instance.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hwc_network_vpc", "fqcn": "community.general.hwc_network_vpc", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/huawei/hwc_network_vpc.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hwc_vpc_eip", "fqcn": "community.general.hwc_vpc_eip", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/huawei/hwc_vpc_eip.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hwc_vpc_route", "fqcn": "community.general.hwc_vpc_route", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/huawei/hwc_vpc_route.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hwc_vpc_peering_connect", "fqcn": "community.general.hwc_vpc_peering_connect", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/huawei/hwc_vpc_peering_connect.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sl_vm", "fqcn": "community.general.sl_vm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/softlayer/sl_vm.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "profitbricks_datacenter", "fqcn": "community.general.profitbricks_datacenter", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/profitbricks/profitbricks_datacenter.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "profitbricks_nic", "fqcn": "community.general.profitbricks_nic", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/profitbricks/profitbricks_nic.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "profitbricks", "fqcn": "community.general.profitbricks", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/profitbricks/profitbricks.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "profitbricks_volume_attachments", "fqcn": "community.general.profitbricks_volume_attachments", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/profitbricks/profitbricks_volume_attachments.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "profitbricks_volume", "fqcn": "community.general.profitbricks_volume", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/profitbricks/profitbricks_volume.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "memset_dns_reload", "fqcn": "community.general.memset_dns_reload", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/memset/memset_dns_reload.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "memset_server_info", "fqcn": "community.general.memset_server_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/memset/memset_server_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "memset_zone_domain", "fqcn": "community.general.memset_zone_domain", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/memset/memset_zone_domain.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "memset_zone_record", "fqcn": "community.general.memset_zone_record", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/memset/memset_zone_record.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "memset_memstore_info", "fqcn": "community.general.memset_memstore_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/memset/memset_memstore_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "memset_zone", "fqcn": "community.general.memset_zone", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/memset/memset_zone.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "heroku_collaborator", "fqcn": "community.general.heroku_collaborator", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/heroku/heroku_collaborator.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "linode", "fqcn": "community.general.linode", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/linode/linode.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "linode_v4", "fqcn": "community.general.linode_v4", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/linode/linode_v4.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_cdb_user", "fqcn": "community.general.rax_cdb_user", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_cdb_user.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_dns_record", "fqcn": "community.general.rax_dns_record", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_dns_record.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_mon_notification", "fqcn": "community.general.rax_mon_notification", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_mon_notification.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_files_objects", "fqcn": "community.general.rax_files_objects", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_files_objects.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_cbs", "fqcn": "community.general.rax_cbs", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_cbs.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_facts", "fqcn": "community.general.rax_facts", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_facts.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_files", "fqcn": "community.general.rax_files", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_files.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_queue", "fqcn": "community.general.rax_queue", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_queue.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_clb_nodes", "fqcn": "community.general.rax_clb_nodes", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_clb_nodes.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_network", "fqcn": "community.general.rax_network", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_network.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_meta", "fqcn": "community.general.rax_meta", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_meta.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_scaling_policy", "fqcn": "community.general.rax_scaling_policy", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_scaling_policy.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_clb", "fqcn": "community.general.rax_clb", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_clb.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_mon_entity", "fqcn": "community.general.rax_mon_entity", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_mon_entity.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax", "fqcn": "community.general.rax", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_keypair", "fqcn": "community.general.rax_keypair", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_keypair.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_cdb_database", "fqcn": "community.general.rax_cdb_database", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_cdb_database.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_dns", "fqcn": "community.general.rax_dns", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_dns.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_clb_ssl", "fqcn": "community.general.rax_clb_ssl", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_clb_ssl.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_mon_check", "fqcn": "community.general.rax_mon_check", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_mon_check.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_identity", "fqcn": "community.general.rax_identity", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_identity.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_cdb", "fqcn": "community.general.rax_cdb", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_cdb.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_cbs_attachments", "fqcn": "community.general.rax_cbs_attachments", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_cbs_attachments.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_mon_notification_plan", "fqcn": "community.general.rax_mon_notification_plan", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_mon_notification_plan.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_scaling_group", "fqcn": "community.general.rax_scaling_group", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_scaling_group.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rax_mon_alarm", "fqcn": "community.general.rax_mon_alarm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/rackspace/rax_mon_alarm.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pubnub_blocks", "fqcn": "community.general.pubnub_blocks", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/pubnub/pubnub_blocks.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oci_vcn", "fqcn": "community.general.oci_vcn", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/oracle/oci_vcn.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "clc_group", "fqcn": "community.general.clc_group", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/centurylink/clc_group.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "clc_firewall_policy", "fqcn": "community.general.clc_firewall_policy", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/centurylink/clc_firewall_policy.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "clc_loadbalancer", "fqcn": "community.general.clc_loadbalancer", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/centurylink/clc_loadbalancer.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "clc_server", "fqcn": "community.general.clc_server", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/centurylink/clc_server.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "clc_aa_policy", "fqcn": "community.general.clc_aa_policy", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/centurylink/clc_aa_policy.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "clc_publicip", "fqcn": "community.general.clc_publicip", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/centurylink/clc_publicip.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "clc_server_snapshot", "fqcn": "community.general.clc_server_snapshot", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/centurylink/clc_server_snapshot.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "clc_modify_server", "fqcn": "community.general.clc_modify_server", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/centurylink/clc_modify_server.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "clc_blueprint_package", "fqcn": "community.general.clc_blueprint_package", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/centurylink/clc_blueprint_package.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "clc_alert_policy", "fqcn": "community.general.clc_alert_policy", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/centurylink/clc_alert_policy.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "atomic_image", "fqcn": "community.general.atomic_image", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/atomic/atomic_image.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "atomic_container", "fqcn": "community.general.atomic_container", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/atomic/atomic_container.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "atomic_host", "fqcn": "community.general.atomic_host", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/atomic/atomic_host.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneandone_public_ip", "fqcn": "community.general.oneandone_public_ip", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/oneandone/oneandone_public_ip.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneandone_monitoring_policy", "fqcn": "community.general.oneandone_monitoring_policy", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/oneandone/oneandone_monitoring_policy.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneandone_firewall_policy", "fqcn": "community.general.oneandone_firewall_policy", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/oneandone/oneandone_firewall_policy.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneandone_server", "fqcn": "community.general.oneandone_server", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/oneandone/oneandone_server.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneandone_private_network", "fqcn": "community.general.oneandone_private_network", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/oneandone/oneandone_private_network.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneandone_load_balancer", "fqcn": "community.general.oneandone_load_balancer", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/oneandone/oneandone_load_balancer.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "lxc_container", "fqcn": "community.general.lxc_container", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/lxc/lxc_container.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 27}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "lxd_container", "fqcn": "community.general.lxd_container", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/lxd/lxd_container.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "lxd_project", "fqcn": "community.general.lxd_project", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/lxd/lxd_project.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "lxd_profile", "fqcn": "community.general.lxd_profile", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/lxd/lxd_profile.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "spotinst_aws_elastigroup", "fqcn": "community.general.spotinst_aws_elastigroup", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/spotinst/spotinst_aws_elastigroup.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "imgadm", "fqcn": "community.general.imgadm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/smartos/imgadm.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "nictagadm", "fqcn": "community.general.nictagadm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/smartos/nictagadm.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "smartos_image_info", "fqcn": "community.general.smartos_image_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/smartos/smartos_image_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "vmadm", "fqcn": "community.general.vmadm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/smartos/vmadm.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_compute", "fqcn": "community.general.scaleway_compute", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_compute.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_volume", "fqcn": "community.general.scaleway_volume", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_volume.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_sshkey", "fqcn": "community.general.scaleway_sshkey", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_sshkey.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_organization_info", "fqcn": "community.general.scaleway_organization_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_organization_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_server_info", "fqcn": "community.general.scaleway_server_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_server_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_database_backup", "fqcn": "community.general.scaleway_database_backup", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_database_backup.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_image_info", "fqcn": "community.general.scaleway_image_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_image_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_ip", "fqcn": "community.general.scaleway_ip", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_ip.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_security_group", "fqcn": "community.general.scaleway_security_group", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_security_group.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_security_group_info", "fqcn": "community.general.scaleway_security_group_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_security_group_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_user_data", "fqcn": "community.general.scaleway_user_data", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_user_data.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_private_network", "fqcn": "community.general.scaleway_private_network", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_private_network.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_volume_info", "fqcn": "community.general.scaleway_volume_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_volume_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_ip_info", "fqcn": "community.general.scaleway_ip_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_ip_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_security_group_rule", "fqcn": "community.general.scaleway_security_group_rule", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_security_group_rule.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_snapshot_info", "fqcn": "community.general.scaleway_snapshot_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_snapshot_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "scaleway_lb", "fqcn": "community.general.scaleway_lb", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/scaleway/scaleway_lb.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "xenserver_guest", "fqcn": "community.general.xenserver_guest", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/xenserver/xenserver_guest.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "xenserver_guest_powerstate", "fqcn": "community.general.xenserver_guest_powerstate", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/xenserver/xenserver_guest_powerstate.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "xenserver_guest_info", "fqcn": "community.general.xenserver_guest_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/xenserver/xenserver_guest_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "online_server_info", "fqcn": "community.general.online_server_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/online/online_server_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "online_user_info", "fqcn": "community.general.online_user_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/online/online_user_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "dimensiondata_network", "fqcn": "community.general.dimensiondata_network", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/dimensiondata/dimensiondata_network.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "dimensiondata_vlan", "fqcn": "community.general.dimensiondata_vlan", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/dimensiondata/dimensiondata_vlan.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "packet_device", "fqcn": "community.general.packet_device", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/packet/packet_device.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "packet_project", "fqcn": "community.general.packet_project", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/packet/packet_project.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "packet_ip_subnet", "fqcn": "community.general.packet_ip_subnet", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/packet/packet_ip_subnet.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "packet_volume_attachment", "fqcn": "community.general.packet_volume_attachment", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/packet/packet_volume_attachment.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "packet_volume", "fqcn": "community.general.packet_volume", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/packet/packet_volume.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "packet_sshkey", "fqcn": "community.general.packet_sshkey", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/packet/packet_sshkey.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "udm_user", "fqcn": "community.general.udm_user", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/univention/udm_user.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "udm_share", "fqcn": "community.general.udm_share", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/univention/udm_share.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "udm_group", "fqcn": "community.general.udm_group", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/univention/udm_group.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "udm_dns_record", "fqcn": "community.general.udm_dns_record", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/univention/udm_dns_record.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "udm_dns_zone", "fqcn": "community.general.udm_dns_zone", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/univention/udm_dns_zone.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "one_image", "fqcn": "community.general.one_image", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/opennebula/one_image.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "one_template", "fqcn": "community.general.one_template", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/opennebula/one_template.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "one_image_info", "fqcn": "community.general.one_image_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/opennebula/one_image_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "one_vm", "fqcn": "community.general.one_vm", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/opennebula/one_vm.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "one_service", "fqcn": "community.general.one_service", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/opennebula/one_service.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "one_host", "fqcn": "community.general.one_host", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/cloud/opennebula/one_host.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "read_csv", "fqcn": "community.general.read_csv", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/files/read_csv.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "filesize", "fqcn": "community.general.filesize", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/files/filesize.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "xml", "fqcn": "community.general.xml", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/files/xml.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "xattr", "fqcn": "community.general.xattr", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/files/xattr.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "archive", "fqcn": "community.general.archive", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/files/archive.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml\", \"index\": 8}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "iso_create", "fqcn": "community.general.iso_create", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/files/iso_create.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "iso_extract", "fqcn": "community.general.iso_extract", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/files/iso_extract.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sapcar_extract", "fqcn": "community.general.sapcar_extract", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/files/sapcar_extract.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ini_file", "fqcn": "community.general.ini_file", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/files/ini_file.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/configure_server.yml\", \"index\": 2}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "spectrum_model_attrs", "fqcn": "community.general.spectrum_model_attrs", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/spectrum_model_attrs.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "nagios", "fqcn": "community.general.nagios", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/nagios.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "circonus_annotation", "fqcn": "community.general.circonus_annotation", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/circonus_annotation.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "bigpanda", "fqcn": "community.general.bigpanda", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/bigpanda.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "statusio_maintenance", "fqcn": "community.general.statusio_maintenance", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/statusio_maintenance.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "monit", "fqcn": "community.general.monit", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/monit.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "honeybadger_deployment", "fqcn": "community.general.honeybadger_deployment", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/honeybadger_deployment.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "icinga2_host", "fqcn": "community.general.icinga2_host", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/icinga2_host.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "logstash_plugin", "fqcn": "community.general.logstash_plugin", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/logstash_plugin.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "logentries", "fqcn": "community.general.logentries", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/logentries.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pagerduty_alert", "fqcn": "community.general.pagerduty_alert", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/pagerduty_alert.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pagerduty_user", "fqcn": "community.general.pagerduty_user", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/pagerduty_user.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "newrelic_deployment", "fqcn": "community.general.newrelic_deployment", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/newrelic_deployment.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "uptimerobot", "fqcn": "community.general.uptimerobot", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/uptimerobot.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "librato_annotation", "fqcn": "community.general.librato_annotation", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/librato_annotation.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "icinga2_feature", "fqcn": "community.general.icinga2_feature", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/icinga2_feature.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rollbar_deployment", "fqcn": "community.general.rollbar_deployment", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/rollbar_deployment.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "airbrake_deployment", "fqcn": "community.general.airbrake_deployment", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/airbrake_deployment.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pingdom", "fqcn": "community.general.pingdom", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/pingdom.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "statsd", "fqcn": "community.general.statsd", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/statsd.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pagerduty", "fqcn": "community.general.pagerduty", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/pagerduty.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "alerta_customer", "fqcn": "community.general.alerta_customer", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/alerta_customer.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pagerduty_change", "fqcn": "community.general.pagerduty_change", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/pagerduty_change.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "stackdriver", "fqcn": "community.general.stackdriver", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/stackdriver.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "spectrum_device", "fqcn": "community.general.spectrum_device", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/spectrum_device.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "datadog_monitor", "fqcn": "community.general.datadog_monitor", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/datadog/datadog_monitor.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "datadog_downtime", "fqcn": "community.general.datadog_downtime", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/datadog/datadog_downtime.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "datadog_event", "fqcn": "community.general.datadog_event", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/datadog/datadog_event.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sensu_check", "fqcn": "community.general.sensu_check", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/sensu/sensu_check.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sensu_handler", "fqcn": "community.general.sensu_handler", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/sensu/sensu_handler.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sensu_silence", "fqcn": "community.general.sensu_silence", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/sensu/sensu_silence.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sensu_client", "fqcn": "community.general.sensu_client", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/sensu/sensu_client.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sensu_subscription", "fqcn": "community.general.sensu_subscription", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/monitoring/sensu/sensu_subscription.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "netcup_dns", "fqcn": "community.general.netcup_dns", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/netcup_dns.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "snmp_facts", "fqcn": "community.general.snmp_facts", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/snmp_facts.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipinfoio_facts", "fqcn": "community.general.ipinfoio_facts", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/ipinfoio_facts.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ip_netns", "fqcn": "community.general.ip_netns", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/ip_netns.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "cloudflare_dns", "fqcn": "community.general.cloudflare_dns", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/cloudflare_dns.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "haproxy", "fqcn": "community.general.haproxy", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/haproxy.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gandi_livedns", "fqcn": "community.general.gandi_livedns", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/gandi_livedns.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "dnsimple", "fqcn": "community.general.dnsimple", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/dnsimple.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "omapi_host", "fqcn": "community.general.omapi_host", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/omapi_host.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "lldp", "fqcn": "community.general.lldp", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/lldp.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "nsupdate", "fqcn": "community.general.nsupdate", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/nsupdate.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipwcli_dns", "fqcn": "community.general.ipwcli_dns", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/ipwcli_dns.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ipify_facts", "fqcn": "community.general.ipify_facts", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/ipify_facts.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "nmcli", "fqcn": "community.general.nmcli", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/nmcli.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "dnsmadeeasy", "fqcn": "community.general.dnsmadeeasy", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/dnsmadeeasy.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "dnsimple_info", "fqcn": "community.general.dnsimple_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/dnsimple_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pritunl_org_info", "fqcn": "community.general.pritunl_org_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/pritunl/pritunl_org_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pritunl_user_info", "fqcn": "community.general.pritunl_user_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/pritunl/pritunl_user_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pritunl_user", "fqcn": "community.general.pritunl_user", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/pritunl/pritunl_user.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pritunl_org", "fqcn": "community.general.pritunl_org", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/pritunl/pritunl_org.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ldap_passwd", "fqcn": "community.general.ldap_passwd", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/ldap/ldap_passwd.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ldap_search", "fqcn": "community.general.ldap_search", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/ldap/ldap_search.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ldap_attrs", "fqcn": "community.general.ldap_attrs", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/ldap/ldap_attrs.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/slapd/tasks/slapd_tasks.yml\", \"index\": 1}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "ldap_entry", "fqcn": "community.general.ldap_entry", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/ldap/ldap_entry.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/ldap/tasks/ldap_tasks.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/slapd_tasks.yml\", \"index\": 0}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "infinity", "fqcn": "community.general.infinity", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/net_tools/infinity/infinity.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "bzr", "fqcn": "community.general.bzr", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/bzr.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "git_config", "fqcn": "community.general.git_config", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/git_config.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "hg", "fqcn": "community.general.hg", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/hg.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gitlab_protected_branch", "fqcn": "community.general.gitlab_protected_branch", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/gitlab/gitlab_protected_branch.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gitlab_branch", "fqcn": "community.general.gitlab_branch", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/gitlab/gitlab_branch.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gitlab_group_variable", "fqcn": "community.general.gitlab_group_variable", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/gitlab/gitlab_group_variable.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gitlab_deploy_key", "fqcn": "community.general.gitlab_deploy_key", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/gitlab/gitlab_deploy_key.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gitlab_project_variable", "fqcn": "community.general.gitlab_project_variable", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/gitlab/gitlab_project_variable.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gitlab_runner", "fqcn": "community.general.gitlab_runner", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/gitlab/gitlab_runner.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gitlab_group", "fqcn": "community.general.gitlab_group", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/gitlab/gitlab_group.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gitlab_project_members", "fqcn": "community.general.gitlab_project_members", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/gitlab/gitlab_project_members.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gitlab_user", "fqcn": "community.general.gitlab_user", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/gitlab/gitlab_user.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gitlab_hook", "fqcn": "community.general.gitlab_hook", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/gitlab/gitlab_hook.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gitlab_project", "fqcn": "community.general.gitlab_project", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/gitlab/gitlab_project.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gitlab_group_members", "fqcn": "community.general.gitlab_group_members", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/gitlab/gitlab_group_members.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "github_deploy_key", "fqcn": "community.general.github_deploy_key", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/github/github_deploy_key.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "github_webhook_info", "fqcn": "community.general.github_webhook_info", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/github/github_webhook_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "github_issue", "fqcn": "community.general.github_issue", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/github/github_issue.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "github_release", "fqcn": "community.general.github_release", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/github/github_release.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "github_webhook", "fqcn": "community.general.github_webhook", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/github/github_webhook.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "github_repo", "fqcn": "community.general.github_repo", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/github/github_repo.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "github_key", "fqcn": "community.general.github_key", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/github/github_key.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "bitbucket_pipeline_variable", "fqcn": "community.general.bitbucket_pipeline_variable", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/bitbucket/bitbucket_pipeline_variable.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "bitbucket_pipeline_key_pair", "fqcn": "community.general.bitbucket_pipeline_key_pair", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/bitbucket/bitbucket_pipeline_key_pair.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "bitbucket_access_key", "fqcn": "community.general.bitbucket_access_key", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/bitbucket/bitbucket_access_key.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "bitbucket_pipeline_known_host", "fqcn": "community.general.bitbucket_pipeline_known_host", "collection": "community.general", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/general/plugins/modules/source_control/bitbucket/bitbucket_pipeline_known_host.py", "builtin": false, "used_in": [], "annotations": {}}], "playbooks": [], "roles": [], "annotations": {}}, {"py/object": "struct4.Collection", "name": "ansible.posix", "path": "testdata/installed_collections_path/ansible_collections/ansible/posix", "modules": [{"py/object": "struct4.Module", "name": "patch", "fqcn": "ansible.posix.patch", "collection": "ansible.posix", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/ansible/posix/plugins/modules/patch.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 21}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "selinux", "fqcn": "ansible.posix.selinux", "collection": "ansible.posix", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/ansible/posix/plugins/modules/selinux.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "__init__", "fqcn": "ansible.posix.__init__", "collection": "ansible.posix", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/ansible/posix/plugins/modules/__init__.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "firewalld", "fqcn": "ansible.posix.firewalld", "collection": "ansible.posix", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/ansible/posix/plugins/modules/firewalld.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "at", "fqcn": "ansible.posix.at", "collection": "ansible.posix", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/ansible/posix/plugins/modules/at.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "authorized_key", "fqcn": "ansible.posix.authorized_key", "collection": "ansible.posix", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/ansible/posix/plugins/modules/authorized_key.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/authorized_keys/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/sshkeys.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/system.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 14}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "acl", "fqcn": "ansible.posix.acl", "collection": "ansible.posix", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/ansible/posix/plugins/modules/acl.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/mount/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 11}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "synchronize", "fqcn": "ansible.posix.synchronize", "collection": "ansible.posix", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/ansible/posix/plugins/modules/synchronize.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "mount", "fqcn": "ansible.posix.mount", "collection": "ansible.posix", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/ansible/posix/plugins/modules/mount.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/manage_lvm.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/mount/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/mount/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/nfs/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/nfs_server/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/swapfile/tasks/main.yml\", \"index\": 5}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "sysctl", "fqcn": "ansible.posix.sysctl", "collection": "ansible.posix", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/ansible/posix/plugins/modules/sysctl.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "firewalld_info", "fqcn": "ansible.posix.firewalld_info", "collection": "ansible.posix", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/ansible/posix/plugins/modules/firewalld_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "seboolean", "fqcn": "ansible.posix.seboolean", "collection": "ansible.posix", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/ansible/posix/plugins/modules/seboolean.py", "builtin": false, "used_in": [], "annotations": {}}], "playbooks": [], "roles": [], "annotations": {}}, {"py/object": "struct4.Collection", "name": "community.postgresql", "path": "testdata/installed_collections_path/ansible_collections/community/postgresql", "modules": [{"py/object": "struct4.Module", "name": "postgresql_sequence", "fqcn": "community.postgresql.postgresql_sequence", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_sequence.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_script", "fqcn": "community.postgresql.postgresql_script", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_script.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_user", "fqcn": "community.postgresql.postgresql_user", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_user.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/secure_installation.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/database.yml\", \"index\": 0}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_lang", "fqcn": "community.postgresql.postgresql_lang", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_lang.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_privs", "fqcn": "community.postgresql.postgresql_privs", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_privs.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/secure_installation.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/secure_installation.yml\", \"index\": 2}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_publication", "fqcn": "community.postgresql.postgresql_publication", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_publication.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_schema", "fqcn": "community.postgresql.postgresql_schema", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_schema.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_pg_hba", "fqcn": "community.postgresql.postgresql_pg_hba", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_pg_hba.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_membership", "fqcn": "community.postgresql.postgresql_membership", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_membership.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_table", "fqcn": "community.postgresql.postgresql_table", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_table.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_copy", "fqcn": "community.postgresql.postgresql_copy", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_copy.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_slot", "fqcn": "community.postgresql.postgresql_slot", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_slot.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_subscription", "fqcn": "community.postgresql.postgresql_subscription", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_subscription.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_query", "fqcn": "community.postgresql.postgresql_query", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_query.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_ext", "fqcn": "community.postgresql.postgresql_ext", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_ext.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 14}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_user_obj_stat_info", "fqcn": "community.postgresql.postgresql_user_obj_stat_info", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_user_obj_stat_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_set", "fqcn": "community.postgresql.postgresql_set", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_set.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_info", "fqcn": "community.postgresql.postgresql_info", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_db", "fqcn": "community.postgresql.postgresql_db", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_db.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/pdns/tasks/init_postgresql.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/pdns/tasks/init_postgresql.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/database.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/configure_postgresql.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/configure_postgresql.yml\", \"index\": 1}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_idx", "fqcn": "community.postgresql.postgresql_idx", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_idx.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_owner", "fqcn": "community.postgresql.postgresql_owner", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_owner.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_tablespace", "fqcn": "community.postgresql.postgresql_tablespace", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_tablespace.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "postgresql_ping", "fqcn": "community.postgresql.postgresql_ping", "collection": "community.postgresql", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/postgresql/plugins/modules/postgresql_ping.py", "builtin": false, "used_in": [], "annotations": {}}], "playbooks": [], "roles": [], "annotations": {}}, {"py/object": "struct4.Collection", "name": "community.crypto", "path": "testdata/installed_collections_path/ansible_collections/community/crypto", "modules": [{"py/object": "struct4.Module", "name": "x509_certificate_info", "fqcn": "community.crypto.x509_certificate_info", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/x509_certificate_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "acme_challenge_cert_helper", "fqcn": "community.crypto.acme_challenge_cert_helper", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/acme_challenge_cert_helper.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "acme_account", "fqcn": "community.crypto.acme_account", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/acme_account.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_privatekey_info", "fqcn": "community.crypto.openssl_privatekey_info", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_privatekey_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "get_certificate", "fqcn": "community.crypto.get_certificate", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/get_certificate.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "certificate_complete_chain", "fqcn": "community.crypto.certificate_complete_chain", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/certificate_complete_chain.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_privatekey_pipe", "fqcn": "community.crypto.openssl_privatekey_pipe", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_privatekey_pipe.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_certificate", "fqcn": "community.crypto.openssl_certificate", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_certificate.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "luks_device", "fqcn": "community.crypto.luks_device", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/luks_device.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "x509_certificate_pipe", "fqcn": "community.crypto.x509_certificate_pipe", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/x509_certificate_pipe.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_signature", "fqcn": "community.crypto.openssl_signature", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_signature.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "x509_crl_info", "fqcn": "community.crypto.x509_crl_info", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/x509_crl_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_publickey", "fqcn": "community.crypto.openssl_publickey", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_publickey.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "acme_certificate_revoke", "fqcn": "community.crypto.acme_certificate_revoke", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/acme_certificate_revoke.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_dhparam", "fqcn": "community.crypto.openssl_dhparam", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_dhparam.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_publickey_info", "fqcn": "community.crypto.openssl_publickey_info", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_publickey_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "acme_certificate", "fqcn": "community.crypto.acme_certificate", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/acme_certificate.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "acme_inspect", "fqcn": "community.crypto.acme_inspect", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/acme_inspect.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssh_cert", "fqcn": "community.crypto.openssh_cert", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssh_cert.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_csr_info", "fqcn": "community.crypto.openssl_csr_info", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_csr_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_privatekey", "fqcn": "community.crypto.openssl_privatekey", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_privatekey.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 14}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_signature_info", "fqcn": "community.crypto.openssl_signature_info", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_signature_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_csr_pipe", "fqcn": "community.crypto.openssl_csr_pipe", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_csr_pipe.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ecs_domain", "fqcn": "community.crypto.ecs_domain", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/ecs_domain.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssh_keypair", "fqcn": "community.crypto.openssh_keypair", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssh_keypair.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "x509_crl", "fqcn": "community.crypto.x509_crl", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/x509_crl.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "acme_account_facts", "fqcn": "community.crypto.acme_account_facts", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/acme_account_facts.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "x509_certificate", "fqcn": "community.crypto.x509_certificate", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/x509_certificate.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ecs_certificate", "fqcn": "community.crypto.ecs_certificate", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/ecs_certificate.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_csr", "fqcn": "community.crypto.openssl_csr", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_csr.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_pkcs12", "fqcn": "community.crypto.openssl_pkcs12", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_pkcs12.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "acme_account_info", "fqcn": "community.crypto.acme_account_info", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/acme_account_info.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "openssl_certificate_info", "fqcn": "community.crypto.openssl_certificate_info", "collection": "community.crypto", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/crypto/plugins/modules/openssl_certificate_info.py", "builtin": false, "used_in": [], "annotations": {}}], "playbooks": [], "roles": [], "annotations": {}}, {"py/object": "struct4.Collection", "name": "community.rabbitmq", "path": "testdata/installed_collections_path/ansible_collections/community/rabbitmq", "modules": [{"py/object": "struct4.Module", "name": "rabbitmq_exchange", "fqcn": "community.rabbitmq.rabbitmq_exchange", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_exchange.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_policy", "fqcn": "community.rabbitmq.rabbitmq_policy", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_policy.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 18}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_user", "fqcn": "community.rabbitmq.rabbitmq_user", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_user.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 19}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_publish", "fqcn": "community.rabbitmq.rabbitmq_publish", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_publish.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_user_limits", "fqcn": "community.rabbitmq.rabbitmq_user_limits", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_user_limits.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_binding", "fqcn": "community.rabbitmq.rabbitmq_binding", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_binding.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_vhost_limits", "fqcn": "community.rabbitmq.rabbitmq_vhost_limits", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_vhost_limits.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_vhost", "fqcn": "community.rabbitmq.rabbitmq_vhost", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_vhost.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 16}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_queue", "fqcn": "community.rabbitmq.rabbitmq_queue", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_queue.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_upgrade", "fqcn": "community.rabbitmq.rabbitmq_upgrade", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_upgrade.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_parameter", "fqcn": "community.rabbitmq.rabbitmq_parameter", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_parameter.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 17}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_feature_flag", "fqcn": "community.rabbitmq.rabbitmq_feature_flag", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_feature_flag.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_plugin", "fqcn": "community.rabbitmq.rabbitmq_plugin", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_plugin.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/rabbitmq_management/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 15}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "rabbitmq_global_parameter", "fqcn": "community.rabbitmq.rabbitmq_global_parameter", "collection": "community.rabbitmq", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/rabbitmq/plugins/modules/rabbitmq_global_parameter.py", "builtin": false, "used_in": [], "annotations": {}}], "playbooks": [], "roles": [], "annotations": {}}, {"py/object": "struct4.Collection", "name": "community.libvirt", "path": "testdata/installed_collections_path/ansible_collections/community/libvirt", "modules": [{"py/object": "struct4.Module", "name": "virt", "fqcn": "community.libvirt.virt", "collection": "community.libvirt", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/libvirt/plugins/modules/virt.py", "builtin": false, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "virt_net", "fqcn": "community.libvirt.virt_net", "collection": "community.libvirt", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/libvirt/plugins/modules/virt_net.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/manage_networks.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/manage_networks.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/manage_networks.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/manage_networks.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/manage_networks.yml\", \"index\": 4}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "virt_pool", "fqcn": "community.libvirt.virt_pool", "collection": "community.libvirt", "role": "", "defined_in": "testdata/installed_collections_path/ansible_collections/community/libvirt/plugins/modules/virt_pool.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/manage_pools.yml\", \"index\": 6}"], "annotations": {}}], "playbooks": [], "roles": [], "annotations": {}}, {"py/object": "struct4.Collection", "name": "ansible.builtin", "path": "", "modules": [{"py/object": "struct4.Module", "name": "apt_key", "fqcn": "ansible.builtin.apt_key", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 7}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "reboot", "fqcn": "ansible.builtin.reboot", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/reboot/tasks/main.yml\", \"index\": 1}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "get_url", "fqcn": "ansible.builtin.get_url", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/docker_gen/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/tarball.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/tarball.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/wpcli/tasks/main.yml\", \"index\": 3}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/atd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/atd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/avahi_alias.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/backup2l/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/console/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/console/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/console/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/configure_sysvinit.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/configure_sysvinit.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 34}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 35}", "{\"path\": \"testdata/scm_repo/roles/netbase/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/netbase/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/samba/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/configure_snapper_volume.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/tcpwrappers/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 16}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "url", "fqcn": "ansible.builtin.url", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pipe", "fqcn": "ansible.builtin.pipe", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "slurp", "fqcn": "ansible.builtin.slurp", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/etc_aliases/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy_keys.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main.yml\", \"index\": 5}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "package", "fqcn": "ansible.builtin.package", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/ansible/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main_env.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/apt_listchanges/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/apt_proxy/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/backup2l/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/bitcoind/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/btrfs/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/controller/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/core/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/cran/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/debops_legacy/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/dhcpd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/dhcrelay/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/elastic_co/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/etc_services/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/fuse/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/homeassistant/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/icinga_db/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/imapproxy/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/influxdata/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/java/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/keepalived/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/kodi/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ldap/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/libuser/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/lldpd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/locales/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/logrotate/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/memcached/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/monit/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/mount/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/netbase/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/neurodebian/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/neurodebian/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/nfs/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nfs_server/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/nodejs/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/nscd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/nslcd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/install.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/system_package_management.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/pdns/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/install_postgresql.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/prosody/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/python/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/radvd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/resolvconf/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/ruby/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/salt/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/samba/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/prepare_rfc2307bis.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/sssd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/stunnel/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/sysnews/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/tcpwrappers/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/tftpd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/tgt/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/tinyproxy/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/wpcli/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/main.yml\", \"index\": 2}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "user", "fqcn": "ansible.builtin.user", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/bitcoind/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/fuse/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/gitusers.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/gitusers.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/gitusers.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/gitusers.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/homeassistant/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/kodi/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/tarball.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/acme_tiny.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/postldap/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/system.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/ruby/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/stunnel/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/telegraf/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/tinyproxy/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/zabbix_agent/tasks/main.yml\", \"index\": 4}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "password", "fqcn": "ansible.builtin.password", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "fetch", "fqcn": "ansible.builtin.fetch", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/system.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 21}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "package_facts", "fqcn": "ansible.builtin.package_facts", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "rpm_key", "fqcn": "ansible.builtin.rpm_key", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "config", "fqcn": "ansible.builtin.config", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "winrm", "fqcn": "ansible.builtin.winrm", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "systemd", "fqcn": "ansible.builtin.systemd", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/avahi/tasks/avahi_alias.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/bitcoind/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/homeassistant/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 26}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/ifup_systemd.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 26}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 31}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 37}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 38}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/minidlna/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/mount/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/mount/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/mount/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/nfs/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 30}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/main.yml\", \"index\": 9}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "sudo", "fqcn": "ansible.builtin.sudo", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "import_tasks", "fqcn": "ansible.builtin.import_tasks", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 8}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "jsonfile", "fqcn": "ansible.builtin.jsonfile", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "inventory_hostnames", "fqcn": "ansible.builtin.inventory_hostnames", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "yum_repository", "fqcn": "ansible.builtin.yum_repository", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "file", "fqcn": "ansible.builtin.file", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/ansible/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main_env.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/apt_listchanges/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/apt_mark/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/apt_preferences/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/apt_preferences/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/apt_proxy/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/atd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/atd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/auth/tasks/pam_pwhistory.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/authorized_keys/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/authorized_keys/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/authorized_keys/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/avahi_alias.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/backup2l/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/backup2l/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/bitcoind/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_servers.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/btrfs/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/core/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/cran/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/debops_fact/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/debops_legacy/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/dhcpd/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/dhcrelay/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/docker_gen/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/dpkg_cleanup/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/dpkg_cleanup/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/dpkg_cleanup/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/elastic_co/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/environment/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/etc_aliases/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/etc_services/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/etc_services/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 27}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/fhs/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/fuse/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/fuse/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/git-shell.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/git-shell.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/git-shell.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/git-shell.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/gitusers.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/sshkeys.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/older_releases.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/older_releases.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/homeassistant/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/homeassistant/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/homeassistant/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/icinga_db/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/icinga_db/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 28}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/imapproxy/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/imapproxy/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/imapproxy/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/influxdata/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/autoinfluxdbbackup.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/java/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/keepalived/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/keepalived/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/modprobe.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/kodi/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/ldap/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/libuser/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/lldpd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/lldpd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/locales/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/logrotate/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 28}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 29}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/mcli/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/memcached/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/minidlna/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/monit/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/monit/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/mount/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/mount/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/mount/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/netbase/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/neurodebian/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/neurodebian/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/nfs/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/nfs_server/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/nfs_server/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 30}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 32}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_htpasswd.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_htpasswd.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/nodejs/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/nodejs/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/nscd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/nslcd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/nsswitch/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/systemd-timesyncd.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/copy.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/copy.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/deploy_state_absent.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main_env.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main_env.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/tarball.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/tarball.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/tarball.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/theme.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/theme.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/theme.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/theme.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/pam_access/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/pdns/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/persistent_paths/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/persistent_paths/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/persistent_paths/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main_env.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/acme_tiny.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/acme_tiny.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/acme_tiny.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/acme_tiny.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/certbot.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 39}", "{\"path\": \"testdata/scm_repo/roles/postconf/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/postldap/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/postldap/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/postscreen/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/preseed/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/preseed/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/preseed/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/prosody/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/prosody/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/python/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/radvd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/local_facts.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/system.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/system.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/resolvconf/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/resolvconf/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/configure_skins.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_cfgdir.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_cfgdir.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/salt/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/samba/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/secret/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/sks/tasks/sks_frontend.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/prepare_rfc2307bis.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/authorized_keys_lookup.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/authorized_keys_lookup.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/sssd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/stunnel/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/swapfile/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/swapfile/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/swapfile/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/sysctl/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/sysctl/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/sysnews/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/sysnews/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/sysnews/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/tcpwrappers/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/tcpwrappers/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/tcpwrappers/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/telegraf/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/telegraf/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/tftpd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/tftpd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/tgt/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/tgt/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 28}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 33}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/tinyproxy/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/legacy.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/wpcli/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/wpcli/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/manage_dotfiles.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/upstream_yadm.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/zabbix_agent/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/zabbix_agent/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/zabbix_agent/tasks/main.yml\", \"index\": 9}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "stat", "fqcn": "ansible.builtin.stat", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/auth/tasks/pam_pwhistory.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/console/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 27}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/etc_aliases/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/install_postgresql.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/reboot/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/sks/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/sks/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/sks/tasks/sks_frontend.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/legacy.yml\", \"index\": 3}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "generator", "fqcn": "ansible.builtin.generator", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "validate_argument_spec", "fqcn": "ansible.builtin.validate_argument_spec", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "debug", "fqcn": "ansible.builtin.debug", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 26}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "pause", "fqcn": "ansible.builtin.pause", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "items", "fqcn": "ansible.builtin.items", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "replace", "fqcn": "ansible.builtin.replace", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 15}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "find", "fqcn": "ansible.builtin.find", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_cfgdir.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/telegraf/tasks/main.yml\", \"index\": 6}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "tree", "fqcn": "ansible.builtin.tree", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "unvault", "fqcn": "ansible.builtin.unvault", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "gather_facts", "fqcn": "ansible.builtin.gather_facts", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "host_group_vars", "fqcn": "ansible.builtin.host_group_vars", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "wait_for_connection", "fqcn": "ansible.builtin.wait_for_connection", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "setup", "fqcn": "ansible.builtin.setup", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 12}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "powershell", "fqcn": "ansible.builtin.powershell", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "group_by", "fqcn": "ansible.builtin.group_by", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "getent", "fqcn": "ansible.builtin.getent", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/authorized_keys/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/authorized_keys/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 8}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "toml", "fqcn": "ansible.builtin.toml", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sequence", "fqcn": "ansible.builtin.sequence", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "dnf", "fqcn": "ansible.builtin.dnf", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "tempfile", "fqcn": "ansible.builtin.tempfile", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "unarchive", "fqcn": "ansible.builtin.unarchive", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/docker_gen/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/tarball.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 10}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "runas", "fqcn": "ansible.builtin.runas", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "fileglob", "fqcn": "ansible.builtin.fileglob", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "uri", "fqcn": "ansible.builtin.uri", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy_keys.yml\", \"index\": 3}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "paramiko_ssh", "fqcn": "ansible.builtin.paramiko_ssh", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "host_pinned", "fqcn": "ansible.builtin.host_pinned", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "random_choice", "fqcn": "ansible.builtin.random_choice", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "pip", "fqcn": "ansible.builtin.pip", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/controller/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/homeassistant/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/homeassistant/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 16}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "yum", "fqcn": "ansible.builtin.yum", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "iptables", "fqcn": "ansible.builtin.iptables", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "import_role", "fqcn": "ansible.builtin.import_role", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/playbooks/bootstrap-ldap.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/playbooks/bootstrap-ldap.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/playbooks/bootstrap-ldap.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/playbooks/bootstrap-sss.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/playbooks/bootstrap-sss.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/playbooks/bootstrap-sss.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/playbooks/bootstrap.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/playbooks/common.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/playbooks/common.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/playbooks/common.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/playbooks/service/minio.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/playbooks/service/minio.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/playbooks/service/php.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/playbooks/service/php.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/playbooks/service/redis_server.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/playbooks/service/redis_server.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ansible/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/apt_mark/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/atd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/auth/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/auth/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/authorized_keys/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/authorized_keys/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/authorized_keys/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/backup2l/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/backup2l/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/console/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/core/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/cran/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/debops_fact/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/debops_legacy/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/dhcpd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/dhcpd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/dhcpd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/dhcrelay/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/dhcrelay/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/docker_gen/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/elastic_co/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/etc_aliases/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/etc_aliases/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/etc_aliases/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/etc_services/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/fhs/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/fhs/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/fuse/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/icinga_db/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/imapproxy/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/imapproxy/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/influxdata/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/java/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/keepalived/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/keepalived/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ldap/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ldap/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ldap/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/libuser/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/libuser/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/lldpd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/lldpd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/locales/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/mcli/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/memcached/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/minidlna/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/minidlna/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/monit/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/monit/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/monit/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/netbase/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/netbase/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/neurodebian/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nfs_server/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/nodejs/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nscd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nscd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/nslcd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nslcd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/nslcd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/nsswitch/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/pam_access/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/pam_access/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/pdns/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/pdns/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/pdns/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/persistent_paths/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/phpmyadmin/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/postconf/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postconf/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/postconf/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/postldap/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postldap/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/postldap/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/postscreen/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/preseed/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/preseed/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/prosody/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/python/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/radvd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/radvd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/resolvconf/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/resolvconf/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/salt/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/samba/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/sks/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/sssd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/sssd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/stunnel/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/stunnel/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/sysctl/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/sysctl/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/sysnews/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/sysnews/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/tcpwrappers/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/telegraf/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/telegraf/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/telegraf/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/tftpd/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/tgt/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/tgt/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/tgt/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/tinyproxy/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/tinyproxy/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/tor/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/wpcli/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/zabbix_agent/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/zabbix_agent/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/zabbix_agent/tasks/main.yml\", \"index\": 2}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "cmd", "fqcn": "ansible.builtin.cmd", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "set_fact", "fqcn": "ansible.builtin.set_fact", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/apt_mark/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/atd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/btrfs/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/core/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/etc_aliases/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/hwraid/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/hwraid/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ldap/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/ldap/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/mcli/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/passenger_config.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/passenger_config.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main_env.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/run_occ.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/run_occ.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/run_occ.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/theme.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main_env.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main_env.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postconf/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main_env.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy_keys.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/configure_skins.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_cfgdir.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 2}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "subversion", "fqcn": "ansible.builtin.subversion", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "local", "fqcn": "ansible.builtin.local", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "lines", "fqcn": "ansible.builtin.lines", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "memory", "fqcn": "ansible.builtin.memory", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "apt", "fqcn": "ansible.builtin.apt", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/playbooks/upgrade.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/atd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/auth/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_servers.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/console/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/core/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/hwraid/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/minidlna/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/neurodebian/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/nodejs/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/system_package_management.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/packages_absent_for_version.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/phpmyadmin/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/phpmyadmin/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/system.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/sks/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/x2go_server/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/zabbix_agent/tasks/main.yml\", \"index\": 3}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "hostname", "fqcn": "ansible.builtin.hostname", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/netbase/tasks/main.yml\", \"index\": 6}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "wait_for", "fqcn": "ansible.builtin.wait_for", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 4}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "su", "fqcn": "ansible.builtin.su", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "junit", "fqcn": "ansible.builtin.junit", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "fail", "fqcn": "ansible.builtin.fail", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 5}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "first_found", "fqcn": "ansible.builtin.first_found", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "async_status", "fqcn": "ansible.builtin.async_status", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "set_stats", "fqcn": "ansible.builtin.set_stats", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sh", "fqcn": "ansible.builtin.sh", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "free", "fqcn": "ansible.builtin.free", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "minimal", "fqcn": "ansible.builtin.minimal", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "env", "fqcn": "ansible.builtin.env", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "cron", "fqcn": "ansible.builtin.cron", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 37}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/wpcli/tasks/main.yml\", \"index\": 6}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "raw", "fqcn": "ansible.builtin.raw", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/python/tasks/main_raw.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/python/tasks/main_raw.yml\", \"index\": 1}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "service_facts", "fqcn": "ansible.builtin.service_facts", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/ntp/tasks/install.yml\", \"index\": 1}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "csvfile", "fqcn": "ansible.builtin.csvfile", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "blockinfile", "fqcn": "ansible.builtin.blockinfile", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/environment/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/sysnews/tasks/main.yml\", \"index\": 7}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "template", "fqcn": "ansible.builtin.template", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/ansible/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main_env.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/apt_listchanges/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/apt_listchanges/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/apt_mark/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/apt_mark/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/apt_preferences/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/apt_proxy/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/atd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/atd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/atd/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/auth/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/auth/tasks/pam_pwhistory.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/authorized_keys/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/avahi_alias.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/backup2l/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/backup2l/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/bitcoind/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/bitcoind/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_servers.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/controller/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/core/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/cran/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/debops_fact/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/debops_fact/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/debops_fact/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/dhcpd/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/dhcpd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/dhcpd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/dhcpd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/dhcpd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/dhcrelay/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/dhcrelay/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/docker_gen/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/docker_gen/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/docker_gen/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/docker_gen/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/dpkg_cleanup/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/dpkg_cleanup/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/dropbear_initramfs/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/elastic_co/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/environment/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/etc_aliases/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/etc_aliases/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/etc_aliases/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/etc_services/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/etc_services/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 28}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/configure_systemd.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/configure_sysvinit.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/fhs/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/fuse/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/fuse/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/git-shell.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/older_releases.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/homeassistant/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/icinga_db/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 29}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/ifup_systemd.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/imapproxy/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/imapproxy/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/imapproxy/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/influxdata/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/autoinfluxdbbackup.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/java/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/java/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/keepalived/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/keepalived/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/modprobe.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/kodi/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/ldap/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/ldap/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/libuser/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/libuser/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/lldpd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/lldpd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/lldpd/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/locales/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/logrotate/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/logrotate/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 30}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/configure_server.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/configure_server.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/mcli/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/memcached/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/memcached/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/minidlna/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/minidlna/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/monit/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/monit/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/mount/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/netbase/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/netbase/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/neurodebian/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/neurodebian/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/nfs/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/nfs_server/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/nfs_server/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 31}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 33}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_configs.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/nodejs/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/nscd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/nscd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/nslcd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/nslcd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/nslcd/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/nsswitch/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/nsswitch/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/chrony.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/ntpd.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/openntpd.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/systemd-timesyncd.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/ldap.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main_env.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/system_package_management.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/system_package_management.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/theme.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/theme.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/pam_access/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/pdns/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/pdns/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/persistent_paths/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/persistent_paths/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/phpmyadmin/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/ca_certificates.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/certbot.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 40}", "{\"path\": \"testdata/scm_repo/roles/postconf/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/postldap/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/postscreen/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/postscreen/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/preseed/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/preseed/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/preseed/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/prosody/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/prosody/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/python/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/python/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/python/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/radvd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/radvd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/local_facts.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/system.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/system.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/system.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/system.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/resolvconf/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/resolvconf/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/resolvconf/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/resolvconf/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_cfgdir.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/salt/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/samba/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/samba/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/samba/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/sks/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/sks/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/sks/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/authorized_keys_lookup.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/authorized_keys_lookup.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/authorized_keys_lookup.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 26}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/sssd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/sssd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/sssd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/stunnel/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/stunnel/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/sysctl/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/sysctl/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/sysnews/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/sysnews/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/tcpwrappers/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/tcpwrappers/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/tcpwrappers/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/tcpwrappers/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/telegraf/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/telegraf/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/telegraf/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/tftpd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/tftpd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/tgt/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/tgt/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/tgt/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 26}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 27}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 29}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 34}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/tinyproxy/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/tinyproxy/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/wpcli/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/zabbix_agent/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/zabbix_agent/tasks/main.yml\", \"index\": 5}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "known_hosts", "fqcn": "ansible.builtin.known_hosts", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "together", "fqcn": "ansible.builtin.together", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "service", "fqcn": "ansible.builtin.service", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/docker_gen/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/configure_systemd.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/configure_sysvinit.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/start_gitlab_ce.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/start_gitlab_ce.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/hwraid/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/ifup_systemd.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/nscd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/nslcd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/nsswitch/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/install.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/prosody/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/sssd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 31}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 32}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 8}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "subelements", "fqcn": "ansible.builtin.subelements", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "constructed", "fqcn": "ansible.builtin.constructed", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "include_vars", "fqcn": "ansible.builtin.include_vars", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/main.yml\", \"index\": 3}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "varnames", "fqcn": "ansible.builtin.varnames", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "assert", "fqcn": "ansible.builtin.assert", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/playbooks/common.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main_env.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 9}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "linear", "fqcn": "ansible.builtin.linear", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "list", "fqcn": "ansible.builtin.list", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "script", "fqcn": "ansible.builtin.script", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/ansible/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/apt_mark/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 3}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "import_playbook", "fqcn": "ansible.builtin.import_playbook", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "dpkg_selections", "fqcn": "ansible.builtin.dpkg_selections", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "dict", "fqcn": "ansible.builtin.dict", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "yaml", "fqcn": "ansible.builtin.yaml", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "shell", "fqcn": "ansible.builtin.shell", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_servers.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/hwraid/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/ifup_systemd.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/debian_netboot.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/logrotate/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 39}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 26}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/passenger_config.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/nslcd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/ldap.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/tarball.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/tarball.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/tarball.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main_env.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main_env.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/ca_certificates.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/ca_certificates.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/ca_certificates.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/ca_certificates.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/ca_certificates.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/install_postgresql.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/shell_commands.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/prepare_rfc2307bis.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main_env.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/sssd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/swapfile/tasks/main.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/sysctl/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/sysctl/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/wpcli/tasks/main.yml\", \"index\": 4}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "add_host", "fqcn": "ansible.builtin.add_host", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "apt_repository", "fqcn": "ansible.builtin.apt_repository", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/elastic_co/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/hwraid/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/influxdata/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 8}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "include_tasks", "fqcn": "ansible.builtin.include_tasks", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/auth/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/auth/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/auth/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 26}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/iscsi/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/ldap/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 40}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 27}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 28}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 29}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 35}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/install.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/install.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/install.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/install.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/copy.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/run_occ_app_set.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/pdns/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 38}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 42}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/sks/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 27}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/stunnel/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/stunnel/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/sysctl/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/sysctl/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/tgt/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/tgt/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 26}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/main.yml\", \"index\": 5}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "psrp", "fqcn": "ansible.builtin.psrp", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "auto", "fqcn": "ansible.builtin.auto", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "assemble", "fqcn": "ansible.builtin.assemble", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/etc_services/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/tcpwrappers/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 20}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "advanced_host_list", "fqcn": "ansible.builtin.advanced_host_list", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ini", "fqcn": "ansible.builtin.ini", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "host_list", "fqcn": "ansible.builtin.host_list", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "meta", "fqcn": "ansible.builtin.meta", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/ansible/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main_env.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/atd/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/authorized_keys/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/backup2l/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/core/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/core/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/cran/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/debops_fact/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/dhcp_probe/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/dhcpd/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/dhcrelay/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/docker_gen/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/docker_server/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/elastic_co/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/etc_aliases/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 29}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/configure_systemd.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/fhs/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/icinga_db/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 30}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/imapproxy/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/influxdata/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/influxdb/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/java/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/keepalived/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/kmod/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/ldap/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/libuser/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/lldpd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/locales/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/mariadb_server/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/mcli/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/memcached/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/minidlna/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/monit/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/netbase/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/netbase/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/neurodebian/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 34}", "{\"path\": \"testdata/scm_repo/roles/nodejs/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/nscd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/nslcd/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/nsswitch/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/ldap.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/main_env.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/pam_access/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/pdns/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/persistent_paths/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main_env.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 41}", "{\"path\": \"testdata/scm_repo/roles/postconf/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/postldap/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/postscreen/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/preseed/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/python/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/python/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/python/tasks/main_raw.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/radvd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/resolvconf/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/sssd/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/sudo/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/sysctl/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/sysfs/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/sysnews/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 26}", "{\"path\": \"testdata/scm_repo/roles/telegraf/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/tftpd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 35}", "{\"path\": \"testdata/scm_repo/roles/tinyproxy/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/unbound/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/wpcli/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/zabbix_agent/tasks/main.yml\", \"index\": 11}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "indexed_items", "fqcn": "ansible.builtin.indexed_items", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "include_role", "fqcn": "ansible.builtin.include_role", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "command", "fqcn": "ansible.builtin.command", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/apparmor/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/apt_mark/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/apt_mark/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/apt_mark/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/apt_mark/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/controller/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/controller/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/cran/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 28}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 29}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/other_vcs.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/other_vcs.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/other_vcs.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/configure_sysvinit.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab_ce.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/gitlab_ce_pre_upgrade.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 27}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/ifup_systemd.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/java/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/libvirt/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/locales/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/manage_lvm.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 33}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/nginx_servers.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/passenger_config.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/ldap.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/ldap.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/run_occ.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/system_package_management.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 26}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 27}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 28}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 36}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/install_postgresql.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_clusters.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy_keys.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy_keys.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_gnupg.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/configure_skins.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/sks/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/configure_snmpv3_credentials.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/swapfile/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/swapfile/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/swapfile/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/telegraf/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/legacy.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 12}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "debconf", "fqcn": "ansible.builtin.debconf", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/apt_install/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/icinga_db/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/locales/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/neurodebian/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/ca_certificates.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/legacy.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/legacy.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml\", \"index\": 1}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "include", "fqcn": "ansible.builtin.include", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "default", "fqcn": "ansible.builtin.default", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "group", "fqcn": "ansible.builtin.group", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/authorized_keys/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/bitcoind/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/debops_fact/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/fcgiwrap/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/fuse/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/groups_absent.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/groups_present.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/groups_present.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/gunicorn/tasks/newer_releases.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/hashicorp/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/homeassistant/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/kodi/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/lxd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/minio/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/mosquitto/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/tarball.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/acme_tiny.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/postgresql/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/postldap/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/proc_hidepid/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/system.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/redis_sentinel/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/root_account/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/rstudio_server/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/ruby/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/saslauthd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/smstools/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/system_groups/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/tinyproxy/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 3}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "ssh", "fqcn": "ansible.builtin.ssh", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "copy", "fqcn": "ansible.builtin.copy", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/apt_proxy/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/avahi_alias.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/backup2l/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_clients.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/boxbackup/tasks/configure_servers.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/cryptsetup/tasks/manage_devices.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/dhparam/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/docker_gen/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/authentication.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/firejail/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/gitlab_runner/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitusers/tasks/git-shell.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 17}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/main.yml\", \"index\": 18}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/autoinfluxdbbackup.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ipxe/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/journald/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/keepalived/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 36}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/mailman/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/mariadb/tasks/manage_contents.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/nullmailer/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 16}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/copy.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/theme.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/certbot.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 19}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 29}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 30}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 31}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 32}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 33}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 34}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/main.yml\", \"index\": 35}", "{\"path\": \"testdata/scm_repo/roles/postfix/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/rabbitmq_server/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/redis_server/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/reprepro/tasks/configure_reprepro.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/rsnapshot/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/rspamd/tasks/main_dkim.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/sks/tasks/sks_frontend.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/sysnews/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/system_users/tasks/main.yml\", \"index\": 21}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 22}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 23}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 24}", "{\"path\": \"testdata/scm_repo/roles/tinc/tasks/main.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/tzdata/tasks/legacy.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/users/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/wpcli/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/zabbix_agent/tasks/main.yml\", \"index\": 6}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "git", "fqcn": "ansible.builtin.git", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/controller/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/debops_api/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 14}", "{\"path\": \"testdata/scm_repo/roles/dokuwiki/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/etesync/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/etherpad/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/foodsoft/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitaly.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-pages.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-shell.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/configure_gitlab-workhorse.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/gitlab/tasks/download_gitlab_ce.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/golang/tasks/golang_build_install.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/homeassistant/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/icinga_web/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/librenms/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/netbox/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam-scripts.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/phpipam/tasks/phpipam.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/acme_tiny.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/postwhite/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/rails_deploy/tasks/deploy.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/resources/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/roundcube/tasks/deploy_roundcube.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/volkszaehler/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/manage_dotfiles.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/yadm/tasks/upstream_yadm.yml\", \"index\": 0}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "nested", "fqcn": "ansible.builtin.nested", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "ping", "fqcn": "ansible.builtin.ping", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "sysvinit", "fqcn": "ansible.builtin.sysvinit", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "oneline", "fqcn": "ansible.builtin.oneline", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "expect", "fqcn": "ansible.builtin.expect", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": [], "annotations": {}}, {"py/object": "struct4.Module", "name": "vars", "fqcn": "ansible.builtin.vars", "collection": "ansible.builtin", "role": "", "defined_in": "", "builtin": true, "used_in": ["{\"path\": \"testdata/scm_repo/roles/freeradius/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/keyring/tasks/main.yml\", \"index\": 15}", "{\"path\": \"testdata/scm_repo/roles/lxc/tasks/main.yml\", \"index\": 32}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/pam_access/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/pam_access/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/pam_access/tasks/main.yml\", \"index\": 4}"], "annotations": {}}], "playbooks": [], "roles": [], "annotations": {}}], "modules": [{"py/object": "struct4.Module", "name": "dpkg_divert", "fqcn": "debops.debops.dpkg_divert", "collection": "debops.debops", "role": "", "defined_in": "testdata/scm_repo/plugins/modules/dpkg_divert.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/apache/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/apt/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/apt_cacher_ng/tasks/state_present.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/avahi/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/backup2l/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/cron/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/debops_legacy/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/dhcpd/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/dhcrelay/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/dnsmasq/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/docker_registry/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/dovecot/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/elasticsearch/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/etc_services/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/etckeeper/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/extrepo/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/fail2ban/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/ferm/tasks/main.yml\", \"index\": 8}", "{\"path\": \"testdata/scm_repo/roles/filebeat/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/fuse/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/grub/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/icinga/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/ifupdown/tasks/divert_interfaces.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/imapproxy/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/influxdb_server/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/java/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/kibana/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/ldap/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/libuser/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/libvirtd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/libvirtd_qemu/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/lldpd/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/logrotate/tasks/main.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/logrotate/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/logrotate/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/logrotate/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/lvm/tasks/main.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/machine/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 10}", "{\"path\": \"testdata/scm_repo/roles/metricbeat/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/minidlna/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 12}", "{\"path\": \"testdata/scm_repo/roles/nginx/tasks/main.yml\", \"index\": 20}", "{\"path\": \"testdata/scm_repo/roles/nscd/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/ntpd.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/ntp/tasks/openntpd.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/opendkim/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/pdns/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/php/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/pki/tasks/certbot.yml\", \"index\": 2}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/postgresql_server/tasks/manage_autopostgresqlbackup.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/resolvconf/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 11}", "{\"path\": \"testdata/scm_repo/roles/rsyslog/tasks/main.yml\", \"index\": 13}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/main.yml\", \"index\": 7}", "{\"path\": \"testdata/scm_repo/roles/slapd/tasks/prepare_rfc2307bis.yml\", \"index\": 1}", "{\"path\": \"testdata/scm_repo/roles/snapshot_snapper/tasks/main.yml\", \"index\": 3}", "{\"path\": \"testdata/scm_repo/roles/snmpd/tasks/main.yml\", \"index\": 9}", "{\"path\": \"testdata/scm_repo/roles/sshd/tasks/main.yml\", \"index\": 25}", "{\"path\": \"testdata/scm_repo/roles/sysctl/tasks/main.yml\", \"index\": 6}", "{\"path\": \"testdata/scm_repo/roles/tcpwrappers/tasks/main.yml\", \"index\": 4}", "{\"path\": \"testdata/scm_repo/roles/tinyproxy/tasks/main.yml\", \"index\": 5}", "{\"path\": \"testdata/scm_repo/roles/unattended_upgrades/tasks/main.yml\", \"index\": 4}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "apache2_module", "fqcn": "debops.debops.apache2_module", "collection": "debops.debops", "role": "", "defined_in": "testdata/scm_repo/plugins/modules/apache2_module.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/apache/tasks/apache_module_state.yml\", \"index\": 0}", "{\"path\": \"testdata/scm_repo/roles/owncloud/tasks/setup_owncloud.yml\", \"index\": 0}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "cran", "fqcn": "debops.debops.cran", "collection": "debops.debops", "role": "", "defined_in": "testdata/scm_repo/plugins/modules/cran.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/cran/tasks/main.yml\", \"index\": 3}"], "annotations": {}}, {"py/object": "struct4.Module", "name": "ldap_attrs", "fqcn": "debops.debops.ldap_attrs", "collection": "debops.debops", "role": "", "defined_in": "testdata/scm_repo/plugins/modules/ldap_attrs.py", "builtin": false, "used_in": ["{\"path\": \"testdata/scm_repo/roles/ldap/tasks/ldap_tasks.yml\", \"index\": 1}"], "annotations": {}}], "version": "", "module_dict": {"debops.debops.dpkg_divert": {"py/id": 21105}, "debops.debops.apache2_module": {"py/id": 21108}, "debops.debops.cran": {"py/id": 21111}, "debops.debops.ldap_attrs": {"py/id": 21114}, "btrfs_subvolume": {"py/id": 1160}, "community.mysql.mysql_info": {"py/id": 18792}, "community.mysql.mysql_variables": {"py/id": 18795}, "community.mysql.mysql_replication": {"py/id": 18798}, "community.mysql.mysql_query": {"py/id": 18801}, "community.mysql.mysql_role": {"py/id": 18804}, "community.mysql.mysql_db": {"py/id": 18807}, "community.mysql.mysql_user": {"py/id": 18810}, "community.general.bundler": {"py/id": 18818}, "community.general.pip_package_info": {"py/id": 18821}, "community.general.easy_install": {"py/id": 18824}, "community.general.composer": {"py/id": 18827}, "community.general.maven_artifact": {"py/id": 18830}, "community.general.cargo": {"py/id": 18833}, "community.general.npm": {"py/id": 18836}, "community.general.yarn": {"py/id": 18839}, "community.general.bower": {"py/id": 18842}, "community.general.pear": {"py/id": 18845}, "community.general.cpanm": {"py/id": 18848}, "community.general.ansible_galaxy_install": {"py/id": 18851}, "community.general.pipx": {"py/id": 18854}, "community.general.gem": {"py/id": 18857}, "community.general.xbps": {"py/id": 18860}, "community.general.pkgutil": {"py/id": 18863}, "community.general.pacman": {"py/id": 18866}, "community.general.pulp_repo": {"py/id": 18869}, "community.general.pkgng": {"py/id": 18872}, "community.general.copr": {"py/id": 18875}, "community.general.snap_alias": {"py/id": 18878}, "community.general.zypper": {"py/id": 18881}, "community.general.apt_repo": {"py/id": 18884}, "community.general.swdepot": {"py/id": 18887}, "community.general.flatpak_remote": {"py/id": 18890}, "community.general.layman": {"py/id": 18893}, "community.general.pacman_key": {"py/id": 18896}, "community.general.portage": {"py/id": 18899}, "community.general.apk": {"py/id": 18902}, "community.general.snap": {"py/id": 18905}, "community.general.homebrew": {"py/id": 18908}, "community.general.mas": {"py/id": 18911}, "community.general.redhat_subscription": {"py/id": 18914}, "community.general.openbsd_pkg": {"py/id": 18917}, "community.general.zypper_repository": {"py/id": 18920}, "community.general.dnf_versionlock": {"py/id": 18923}, "community.general.urpmi": {"py/id": 18926}, "community.general.swupd": {"py/id": 18929}, "community.general.homebrew_tap": {"py/id": 18932}, "community.general.rhn_channel": {"py/id": 18935}, "community.general.pkgin": {"py/id": 18938}, "community.general.svr4pkg": {"py/id": 18941}, "community.general.installp": {"py/id": 18944}, "community.general.homebrew_cask": {"py/id": 18947}, "community.general.sorcery": {"py/id": 18950}, "community.general.slackpkg": {"py/id": 18953}, "community.general.flatpak": {"py/id": 18956}, "community.general.rpm_ostree_pkg": {"py/id": 18959}, "community.general.portinstall": {"py/id": 18962}, "community.general.rhsm_repository": {"py/id": 18965}, "community.general.yum_versionlock": {"py/id": 18968}, "community.general.pkg5": {"py/id": 18971}, "community.general.rhsm_release": {"py/id": 18974}, "community.general.opkg": {"py/id": 18977}, "community.general.pkg5_publisher": {"py/id": 18980}, "community.general.rhn_register": {"py/id": 18983}, "community.general.apt_rpm": {"py/id": 18986}, "community.general.macports": {"py/id": 18989}, "community.general.odbc": {"py/id": 18992}, "community.general.redis_data_info": {"py/id": 18995}, "community.general.redis_data_incr": {"py/id": 18998}, "community.general.kibana_plugin": {"py/id": 19001}, "community.general.elasticsearch_plugin": {"py/id": 19004}, "community.general.riak": {"py/id": 19007}, "community.general.redis": {"py/id": 19010}, "community.general.redis_data": {"py/id": 19013}, "community.general.redis_info": {"py/id": 19016}, "community.general.influxdb_user": {"py/id": 19019}, "community.general.influxdb_write": {"py/id": 19022}, "community.general.influxdb_query": {"py/id": 19025}, "community.general.influxdb_database": {"py/id": 19028}, "community.general.influxdb_retention_policy": {"py/id": 19031}, "community.general.aerospike_migrations": {"py/id": 19034}, "community.general.vertica_role": {"py/id": 19037}, "community.general.vertica_user": {"py/id": 19040}, "community.general.vertica_configuration": {"py/id": 19043}, "community.general.vertica_info": {"py/id": 19046}, "community.general.vertica_schema": {"py/id": 19049}, "community.general.mssql_script": {"py/id": 19052}, "community.general.mssql_db": {"py/id": 19055}, "community.general.hana_query": {"py/id": 19058}, "community.general.onepassword_info": {"py/id": 19061}, "community.general.ipa_role": {"py/id": 19064}, "community.general.ipa_hbacrule": {"py/id": 19067}, "community.general.ipa_host": {"py/id": 19070}, "community.general.ipa_group": {"py/id": 19073}, "community.general.ipa_vault": {"py/id": 19076}, "community.general.ipa_sudocmdgroup": {"py/id": 19079}, "community.general.ipa_user": {"py/id": 19082}, "community.general.ipa_otptoken": {"py/id": 19085}, "community.general.ipa_dnszone": {"py/id": 19088}, "community.general.ipa_otpconfig": {"py/id": 19091}, "community.general.ipa_sudorule": {"py/id": 19094}, "community.general.ipa_service": {"py/id": 19097}, "community.general.ipa_subca": {"py/id": 19100}, "community.general.ipa_pwpolicy": {"py/id": 19103}, "community.general.ipa_sudocmd": {"py/id": 19106}, "community.general.ipa_hostgroup": {"py/id": 19109}, "community.general.ipa_dnsrecord": {"py/id": 19112}, "community.general.ipa_config": {"py/id": 19115}, "community.general.keycloak_group": {"py/id": 19118}, "community.general.keycloak_user_federation": {"py/id": 19121}, "community.general.keycloak_realm_info": {"py/id": 19124}, "community.general.keycloak_authentication": {"py/id": 19127}, "community.general.keycloak_client": {"py/id": 19130}, "community.general.keycloak_realm": {"py/id": 19133}, "community.general.keycloak_identity_provider": {"py/id": 19136}, "community.general.keycloak_clienttemplate": {"py/id": 19139}, "community.general.keycloak_client_rolemapping": {"py/id": 19142}, "community.general.keycloak_role": {"py/id": 19145}, "community.general.keycloak_clientscope": {"py/id": 19148}, "community.general.opendj_backendprop": {"py/id": 19151}, "community.general.mail": {"py/id": 19154}, "community.general.matrix": {"py/id": 19157}, "community.general.grove": {"py/id": 19160}, "community.general.jabber": {"py/id": 19163}, "community.general.hipchat": {"py/id": 19166}, "community.general.bearychat": {"py/id": 19169}, "community.general.telegram": {"py/id": 19172}, "community.general.say": {"py/id": 19175}, "community.general.pushover": {"py/id": 19178}, "community.general.discord": {"py/id": 19181}, "community.general.irc": {"py/id": 19184}, "community.general.mattermost": {"py/id": 19187}, "community.general.nexmo": {"py/id": 19190}, "community.general.typetalk": {"py/id": 19193}, "community.general.mqtt": {"py/id": 19196}, "community.general.office_365_connector_card": {"py/id": 19199}, "community.general.syslogger": {"py/id": 19202}, "community.general.campfire": {"py/id": 19205}, "community.general.flowdock": {"py/id": 19208}, "community.general.sendgrid": {"py/id": 19211}, "community.general.cisco_webex": {"py/id": 19214}, "community.general.twilio": {"py/id": 19217}, "community.general.pushbullet": {"py/id": 19220}, "community.general.slack": {"py/id": 19223}, "community.general.rocketchat": {"py/id": 19226}, "community.general.logentries_msg": {"py/id": 19229}, "community.general.catapult": {"py/id": 19232}, "community.general.wakeonlan": {"py/id": 19235}, "community.general.imc_rest": {"py/id": 19238}, "community.general.lxca_nodes": {"py/id": 19241}, "community.general.lxca_cmms": {"py/id": 19244}, "community.general.stacki_host": {"py/id": 19247}, "community.general.ilo_redfish_config": {"py/id": 19250}, "community.general.ilo_redfish_info": {"py/id": 19253}, "community.general.idrac_redfish_config": {"py/id": 19256}, "community.general.idrac_redfish_info": {"py/id": 19259}, "community.general.redfish_config": {"py/id": 19262}, "community.general.idrac_redfish_command": {"py/id": 19265}, "community.general.redfish_command": {"py/id": 19268}, "community.general.redfish_info": {"py/id": 19271}, "community.general.oneview_san_manager": {"py/id": 19274}, "community.general.oneview_fcoe_network": {"py/id": 19277}, "community.general.oneview_logical_interconnect_group_info": {"py/id": 19280}, "community.general.oneview_logical_interconnect_group": {"py/id": 19283}, "community.general.oneview_network_set_info": {"py/id": 19286}, "community.general.oneview_san_manager_info": {"py/id": 19289}, "community.general.oneview_fc_network_info": {"py/id": 19292}, "community.general.oneview_network_set": {"py/id": 19295}, "community.general.oneview_fc_network": {"py/id": 19298}, "community.general.oneview_fcoe_network_info": {"py/id": 19301}, "community.general.oneview_ethernet_network": {"py/id": 19304}, "community.general.oneview_datacenter_info": {"py/id": 19307}, "community.general.oneview_enclosure_info": {"py/id": 19310}, "community.general.oneview_ethernet_network_info": {"py/id": 19313}, "community.general.xcc_redfish_command": {"py/id": 19316}, "community.general.cobbler_sync": {"py/id": 19319}, "community.general.cobbler_system": {"py/id": 19322}, "community.general.hpilo_boot": {"py/id": 19325}, "community.general.hpilo_info": {"py/id": 19328}, "community.general.hponcfg": {"py/id": 19331}, "community.general.ipmi_boot": {"py/id": 19334}, "community.general.ipmi_power": {"py/id": 19337}, "community.general.manageiq_tags": {"py/id": 19340}, "community.general.manageiq_user": {"py/id": 19343}, "community.general.manageiq_policies": {"py/id": 19346}, "community.general.manageiq_group": {"py/id": 19349}, "community.general.manageiq_provider": {"py/id": 19352}, "community.general.manageiq_tenant": {"py/id": 19355}, "community.general.manageiq_alert_profiles": {"py/id": 19358}, "community.general.manageiq_alerts": {"py/id": 19361}, "community.general.rundeck_job_run": {"py/id": 19364}, "community.general.supervisorctl": {"py/id": 19367}, "community.general.htpasswd": {"py/id": 19370}, "community.general.jboss": {"py/id": 19373}, "community.general.apache2_module": {"py/id": 19376}, "community.general.taiga_issue": {"py/id": 19379}, "community.general.nginx_status_info": {"py/id": 19382}, "community.general.jenkins_build": {"py/id": 19385}, "community.general.rundeck_project": {"py/id": 19388}, "community.general.jenkins_job_info": {"py/id": 19391}, "community.general.gunicorn": {"py/id": 19394}, "community.general.rundeck_job_executions_info": {"py/id": 19397}, "community.general.jenkins_script": {"py/id": 19400}, "community.general.jenkins_job": {"py/id": 19403}, "community.general.django_manage": {"py/id": 19406}, "community.general.jira": {"py/id": 19409}, "community.general.jenkins_plugin": {"py/id": 19412}, "community.general.apache2_mod_proxy": {"py/id": 19415}, "community.general.deploy_helper": {"py/id": 19418}, "community.general.rundeck_acl_policy": {"py/id": 19421}, "community.general.ejabberd_user": {"py/id": 19424}, "community.general.utm_ca_host_key_cert": {"py/id": 19427}, "community.general.utm_ca_host_key_cert_info": {"py/id": 19430}, "community.general.utm_proxy_location_info": {"py/id": 19433}, "community.general.utm_network_interface_address": {"py/id": 19436}, "community.general.utm_proxy_frontend": {"py/id": 19439}, "community.general.utm_network_interface_address_info": {"py/id": 19442}, "community.general.utm_proxy_location": {"py/id": 19445}, "community.general.utm_aaa_group_info": {"py/id": 19448}, "community.general.utm_aaa_group": {"py/id": 19451}, "community.general.utm_dns_host": {"py/id": 19454}, "community.general.utm_proxy_frontend_info": {"py/id": 19457}, "community.general.utm_proxy_exception": {"py/id": 19460}, "community.general.utm_proxy_auth_profile": {"py/id": 19463}, "community.general.etcd3": {"py/id": 19466}, "community.general.znode": {"py/id": 19469}, "community.general.pacemaker_cluster": {"py/id": 19472}, "community.general.nomad_job_info": {"py/id": 19475}, "community.general.nomad_job": {"py/id": 19478}, "community.general.consul_acl": {"py/id": 19481}, "community.general.consul_session": {"py/id": 19484}, "community.general.consul": {"py/id": 19487}, "community.general.consul_kv": {"py/id": 19490}, "community.general.ss_3par_cpg": {"py/id": 19493}, "community.general.vexata_volume": {"py/id": 19496}, "community.general.vexata_eg": {"py/id": 19499}, "community.general.pmem": {"py/id": 19502}, "community.general.ibm_sa_host": {"py/id": 19505}, "community.general.ibm_sa_domain": {"py/id": 19508}, "community.general.ibm_sa_host_ports": {"py/id": 19511}, "community.general.ibm_sa_vol_map": {"py/id": 19514}, "community.general.ibm_sa_pool": {"py/id": 19517}, "community.general.ibm_sa_vol": {"py/id": 19520}, "community.general.zfs_facts": {"py/id": 19523}, "community.general.zfs": {"py/id": 19526}, "community.general.zfs_delegate_admin": {"py/id": 19529}, "community.general.zpool_facts": {"py/id": 19532}, "community.general.emc_vnx_sg_member": {"py/id": 19535}, "community.general.cronvar": {"py/id": 19538}, "community.general.osx_defaults": {"py/id": 19541}, "community.general.aix_lvg": {"py/id": 19544}, "community.general.iptables_state": {"py/id": 19547}, "community.general.selogin": {"py/id": 19550}, "community.general.sefcontext": {"py/id": 19553}, "community.general.syspatch": {"py/id": 19556}, "community.general.crypttab": {"py/id": 19559}, "community.general.gconftool2": {"py/id": 19562}, "community.general.open_iscsi": {"py/id": 19565}, "community.general.aix_inittab": {"py/id": 19568}, "community.general.dpkg_divert": {"py/id": 19571}, "community.general.ohai": {"py/id": 19574}, "community.general.xfconf": {"py/id": 19577}, "community.general.modprobe": {"py/id": 19580}, "community.general.filesystem": {"py/id": 19583}, "community.general.homectl": {"py/id": 19586}, "community.general.facter": {"py/id": 19589}, "community.general.shutdown": {"py/id": 19592}, "community.general.gconftool2_info": {"py/id": 19595}, "community.general.dconf": {"py/id": 19598}, "community.general.beadm": {"py/id": 19601}, "community.general.mksysb": {"py/id": 19604}, "community.general.xfs_quota": {"py/id": 19607}, "community.general.ufw": {"py/id": 19610}, "community.general.solaris_zone": {"py/id": 19613}, "community.general.xfconf_info": {"py/id": 19616}, "community.general.listen_ports_facts": {"py/id": 19619}, "community.general.nosh": {"py/id": 19622}, "community.general.lbu": {"py/id": 19625}, "community.general.aix_filesystem": {"py/id": 19628}, "community.general.pamd": {"py/id": 19631}, "community.general.aix_lvol": {"py/id": 19634}, "community.general.sysupgrade": {"py/id": 19637}, "community.general.svc": {"py/id": 19640}, "community.general.vdo": {"py/id": 19643}, "community.general.openwrt_init": {"py/id": 19646}, "community.general.ssh_config": {"py/id": 19649}, "community.general.capabilities": {"py/id": 19652}, "community.general.java_keystore": {"py/id": 19655}, "community.general.puppet": {"py/id": 19658}, "community.general.runit": {"py/id": 19661}, "community.general.sudoers": {"py/id": 19664}, "community.general.pam_limits": {"py/id": 19667}, "community.general.pids": {"py/id": 19670}, "community.general.awall": {"py/id": 19673}, "community.general.kernel_blacklist": {"py/id": 19676}, "community.general.parted": {"py/id": 19679}, "community.general.lvol": {"py/id": 19682}, "community.general.sap_task_list_execute": {"py/id": 19685}, "community.general.make": {"py/id": 19688}, "community.general.launchd": {"py/id": 19691}, "community.general.java_cert": {"py/id": 19694}, "community.general.lvg": {"py/id": 19697}, "community.general.locale_gen": {"py/id": 19700}, "community.general.sysrc": {"py/id": 19703}, "community.general.timezone": {"py/id": 19706}, "community.general.seport": {"py/id": 19709}, "community.general.python_requirements_info": {"py/id": 19712}, "community.general.alternatives": {"py/id": 19715}, "community.general.interfaces_file": {"py/id": 19718}, "community.general.aix_devices": {"py/id": 19721}, "community.general.selinux_permissive": {"py/id": 19724}, "community.general.ali_instance": {"py/id": 19727}, "community.general.ali_instance_info": {"py/id": 19730}, "community.general.webfaction_site": {"py/id": 19733}, "community.general.webfaction_domain": {"py/id": 19736}, "community.general.webfaction_db": {"py/id": 19739}, "community.general.webfaction_mailbox": {"py/id": 19742}, "community.general.webfaction_app": {"py/id": 19745}, "community.general.serverless": {"py/id": 19748}, "community.general.proxmox_domain_info": {"py/id": 19751}, "community.general.rhevm": {"py/id": 19754}, "community.general.proxmox_tasks_info": {"py/id": 19757}, "community.general.proxmox_snap": {"py/id": 19760}, "community.general.cloud_init_data_facts": {"py/id": 19763}, "community.general.terraform": {"py/id": 19766}, "community.general.proxmox_user_info": {"py/id": 19769}, "community.general.proxmox_storage_info": {"py/id": 19772}, "community.general.proxmox": {"py/id": 19775}, "community.general.proxmox_template": {"py/id": 19778}, "community.general.proxmox_group_info": {"py/id": 19781}, "community.general.proxmox_nic": {"py/id": 19784}, "community.general.xenserver_facts": {"py/id": 19787}, "community.general.proxmox_kvm": {"py/id": 19790}, "community.general.ovh_monthly_billing": {"py/id": 19793}, "community.general.ovh_ip_loadbalancing_backend": {"py/id": 19796}, "community.general.ovh_ip_failover": {"py/id": 19799}, "community.general.hwc_vpc_security_group": {"py/id": 19802}, "community.general.hwc_evs_disk": {"py/id": 19805}, "community.general.hwc_vpc_subnet": {"py/id": 19808}, "community.general.hwc_vpc_security_group_rule": {"py/id": 19811}, "community.general.hwc_vpc_private_ip": {"py/id": 19814}, "community.general.hwc_vpc_port": {"py/id": 19817}, "community.general.hwc_smn_topic": {"py/id": 19820}, "community.general.hwc_ecs_instance": {"py/id": 19823}, "community.general.hwc_network_vpc": {"py/id": 19826}, "community.general.hwc_vpc_eip": {"py/id": 19829}, "community.general.hwc_vpc_route": {"py/id": 19832}, "community.general.hwc_vpc_peering_connect": {"py/id": 19835}, "community.general.sl_vm": {"py/id": 19838}, "community.general.profitbricks_datacenter": {"py/id": 19841}, "community.general.profitbricks_nic": {"py/id": 19844}, "community.general.profitbricks": {"py/id": 19847}, "community.general.profitbricks_volume_attachments": {"py/id": 19850}, "community.general.profitbricks_volume": {"py/id": 19853}, "community.general.memset_dns_reload": {"py/id": 19856}, "community.general.memset_server_info": {"py/id": 19859}, "community.general.memset_zone_domain": {"py/id": 19862}, "community.general.memset_zone_record": {"py/id": 19865}, "community.general.memset_memstore_info": {"py/id": 19868}, "community.general.memset_zone": {"py/id": 19871}, "community.general.heroku_collaborator": {"py/id": 19874}, "community.general.linode": {"py/id": 19877}, "community.general.linode_v4": {"py/id": 19880}, "community.general.rax_cdb_user": {"py/id": 19883}, "community.general.rax_dns_record": {"py/id": 19886}, "community.general.rax_mon_notification": {"py/id": 19889}, "community.general.rax_files_objects": {"py/id": 19892}, "community.general.rax_cbs": {"py/id": 19895}, "community.general.rax_facts": {"py/id": 19898}, "community.general.rax_files": {"py/id": 19901}, "community.general.rax_queue": {"py/id": 19904}, "community.general.rax_clb_nodes": {"py/id": 19907}, "community.general.rax_network": {"py/id": 19910}, "community.general.rax_meta": {"py/id": 19913}, "community.general.rax_scaling_policy": {"py/id": 19916}, "community.general.rax_clb": {"py/id": 19919}, "community.general.rax_mon_entity": {"py/id": 19922}, "community.general.rax": {"py/id": 19925}, "community.general.rax_keypair": {"py/id": 19928}, "community.general.rax_cdb_database": {"py/id": 19931}, "community.general.rax_dns": {"py/id": 19934}, "community.general.rax_clb_ssl": {"py/id": 19937}, "community.general.rax_mon_check": {"py/id": 19940}, "community.general.rax_identity": {"py/id": 19943}, "community.general.rax_cdb": {"py/id": 19946}, "community.general.rax_cbs_attachments": {"py/id": 19949}, "community.general.rax_mon_notification_plan": {"py/id": 19952}, "community.general.rax_scaling_group": {"py/id": 19955}, "community.general.rax_mon_alarm": {"py/id": 19958}, "community.general.pubnub_blocks": {"py/id": 19961}, "community.general.oci_vcn": {"py/id": 19964}, "community.general.clc_group": {"py/id": 19967}, "community.general.clc_firewall_policy": {"py/id": 19970}, "community.general.clc_loadbalancer": {"py/id": 19973}, "community.general.clc_server": {"py/id": 19976}, "community.general.clc_aa_policy": {"py/id": 19979}, "community.general.clc_publicip": {"py/id": 19982}, "community.general.clc_server_snapshot": {"py/id": 19985}, "community.general.clc_modify_server": {"py/id": 19988}, "community.general.clc_blueprint_package": {"py/id": 19991}, "community.general.clc_alert_policy": {"py/id": 19994}, "community.general.atomic_image": {"py/id": 19997}, "community.general.atomic_container": {"py/id": 20000}, "community.general.atomic_host": {"py/id": 20003}, "community.general.oneandone_public_ip": {"py/id": 20006}, "community.general.oneandone_monitoring_policy": {"py/id": 20009}, "community.general.oneandone_firewall_policy": {"py/id": 20012}, "community.general.oneandone_server": {"py/id": 20015}, "community.general.oneandone_private_network": {"py/id": 20018}, "community.general.oneandone_load_balancer": {"py/id": 20021}, "community.general.lxc_container": {"py/id": 20024}, "community.general.lxd_container": {"py/id": 20027}, "community.general.lxd_project": {"py/id": 20030}, "community.general.lxd_profile": {"py/id": 20033}, "community.general.spotinst_aws_elastigroup": {"py/id": 20036}, "community.general.imgadm": {"py/id": 20039}, "community.general.nictagadm": {"py/id": 20042}, "community.general.smartos_image_info": {"py/id": 20045}, "community.general.vmadm": {"py/id": 20048}, "community.general.scaleway_compute": {"py/id": 20051}, "community.general.scaleway_volume": {"py/id": 20054}, "community.general.scaleway_sshkey": {"py/id": 20057}, "community.general.scaleway_organization_info": {"py/id": 20060}, "community.general.scaleway_server_info": {"py/id": 20063}, "community.general.scaleway_database_backup": {"py/id": 20066}, "community.general.scaleway_image_info": {"py/id": 20069}, "community.general.scaleway_ip": {"py/id": 20072}, "community.general.scaleway_security_group": {"py/id": 20075}, "community.general.scaleway_security_group_info": {"py/id": 20078}, "community.general.scaleway_user_data": {"py/id": 20081}, "community.general.scaleway_private_network": {"py/id": 20084}, "community.general.scaleway_volume_info": {"py/id": 20087}, "community.general.scaleway_ip_info": {"py/id": 20090}, "community.general.scaleway_security_group_rule": {"py/id": 20093}, "community.general.scaleway_snapshot_info": {"py/id": 20096}, "community.general.scaleway_lb": {"py/id": 20099}, "community.general.xenserver_guest": {"py/id": 20102}, "community.general.xenserver_guest_powerstate": {"py/id": 20105}, "community.general.xenserver_guest_info": {"py/id": 20108}, "community.general.online_server_info": {"py/id": 20111}, "community.general.online_user_info": {"py/id": 20114}, "community.general.dimensiondata_network": {"py/id": 20117}, "community.general.dimensiondata_vlan": {"py/id": 20120}, "community.general.packet_device": {"py/id": 20123}, "community.general.packet_project": {"py/id": 20126}, "community.general.packet_ip_subnet": {"py/id": 20129}, "community.general.packet_volume_attachment": {"py/id": 20132}, "community.general.packet_volume": {"py/id": 20135}, "community.general.packet_sshkey": {"py/id": 20138}, "community.general.udm_user": {"py/id": 20141}, "community.general.udm_share": {"py/id": 20144}, "community.general.udm_group": {"py/id": 20147}, "community.general.udm_dns_record": {"py/id": 20150}, "community.general.udm_dns_zone": {"py/id": 20153}, "community.general.one_image": {"py/id": 20156}, "community.general.one_template": {"py/id": 20159}, "community.general.one_image_info": {"py/id": 20162}, "community.general.one_vm": {"py/id": 20165}, "community.general.one_service": {"py/id": 20168}, "community.general.one_host": {"py/id": 20171}, "community.general.read_csv": {"py/id": 20174}, "community.general.filesize": {"py/id": 20177}, "community.general.xml": {"py/id": 20180}, "community.general.xattr": {"py/id": 20183}, "community.general.archive": {"py/id": 20186}, "community.general.iso_create": {"py/id": 20189}, "community.general.iso_extract": {"py/id": 20192}, "community.general.sapcar_extract": {"py/id": 20195}, "community.general.ini_file": {"py/id": 20198}, "community.general.spectrum_model_attrs": {"py/id": 20201}, "community.general.nagios": {"py/id": 20204}, "community.general.circonus_annotation": {"py/id": 20207}, "community.general.bigpanda": {"py/id": 20210}, "community.general.statusio_maintenance": {"py/id": 20213}, "community.general.monit": {"py/id": 20216}, "community.general.honeybadger_deployment": {"py/id": 20219}, "community.general.icinga2_host": {"py/id": 20222}, "community.general.logstash_plugin": {"py/id": 20225}, "community.general.logentries": {"py/id": 20228}, "community.general.pagerduty_alert": {"py/id": 20231}, "community.general.pagerduty_user": {"py/id": 20234}, "community.general.newrelic_deployment": {"py/id": 20237}, "community.general.uptimerobot": {"py/id": 20240}, "community.general.librato_annotation": {"py/id": 20243}, "community.general.icinga2_feature": {"py/id": 20246}, "community.general.rollbar_deployment": {"py/id": 20249}, "community.general.airbrake_deployment": {"py/id": 20252}, "community.general.pingdom": {"py/id": 20255}, "community.general.statsd": {"py/id": 20258}, "community.general.pagerduty": {"py/id": 20261}, "community.general.alerta_customer": {"py/id": 20264}, "community.general.pagerduty_change": {"py/id": 20267}, "community.general.stackdriver": {"py/id": 20270}, "community.general.spectrum_device": {"py/id": 20273}, "community.general.datadog_monitor": {"py/id": 20276}, "community.general.datadog_downtime": {"py/id": 20279}, "community.general.datadog_event": {"py/id": 20282}, "community.general.sensu_check": {"py/id": 20285}, "community.general.sensu_handler": {"py/id": 20288}, "community.general.sensu_silence": {"py/id": 20291}, "community.general.sensu_client": {"py/id": 20294}, "community.general.sensu_subscription": {"py/id": 20297}, "community.general.netcup_dns": {"py/id": 20300}, "community.general.snmp_facts": {"py/id": 20303}, "community.general.ipinfoio_facts": {"py/id": 20306}, "community.general.ip_netns": {"py/id": 20309}, "community.general.cloudflare_dns": {"py/id": 20312}, "community.general.haproxy": {"py/id": 20315}, "community.general.gandi_livedns": {"py/id": 20318}, "community.general.dnsimple": {"py/id": 20321}, "community.general.omapi_host": {"py/id": 20324}, "community.general.lldp": {"py/id": 20327}, "community.general.nsupdate": {"py/id": 20330}, "community.general.ipwcli_dns": {"py/id": 20333}, "community.general.ipify_facts": {"py/id": 20336}, "community.general.nmcli": {"py/id": 20339}, "community.general.dnsmadeeasy": {"py/id": 20342}, "community.general.dnsimple_info": {"py/id": 20345}, "community.general.pritunl_org_info": {"py/id": 20348}, "community.general.pritunl_user_info": {"py/id": 20351}, "community.general.pritunl_user": {"py/id": 20354}, "community.general.pritunl_org": {"py/id": 20357}, "community.general.ldap_passwd": {"py/id": 20360}, "community.general.ldap_search": {"py/id": 20363}, "community.general.ldap_attrs": {"py/id": 20366}, "community.general.ldap_entry": {"py/id": 20369}, "community.general.infinity": {"py/id": 20372}, "community.general.bzr": {"py/id": 20375}, "community.general.git_config": {"py/id": 20378}, "community.general.hg": {"py/id": 20381}, "community.general.gitlab_protected_branch": {"py/id": 20384}, "community.general.gitlab_branch": {"py/id": 20387}, "community.general.gitlab_group_variable": {"py/id": 20390}, "community.general.gitlab_deploy_key": {"py/id": 20393}, "community.general.gitlab_project_variable": {"py/id": 20396}, "community.general.gitlab_runner": {"py/id": 20399}, "community.general.gitlab_group": {"py/id": 20402}, "community.general.gitlab_project_members": {"py/id": 20405}, "community.general.gitlab_user": {"py/id": 20408}, "community.general.gitlab_hook": {"py/id": 20411}, "community.general.gitlab_project": {"py/id": 20414}, "community.general.gitlab_group_members": {"py/id": 20417}, "community.general.github_deploy_key": {"py/id": 20420}, "community.general.github_webhook_info": {"py/id": 20423}, "community.general.github_issue": {"py/id": 20426}, "community.general.github_release": {"py/id": 20429}, "community.general.github_webhook": {"py/id": 20432}, "community.general.github_repo": {"py/id": 20435}, "community.general.github_key": {"py/id": 20438}, "community.general.bitbucket_pipeline_variable": {"py/id": 20441}, "community.general.bitbucket_pipeline_key_pair": {"py/id": 20444}, "community.general.bitbucket_access_key": {"py/id": 20447}, "community.general.bitbucket_pipeline_known_host": {"py/id": 20450}, "ansible.posix.patch": {"py/id": 20458}, "ansible.posix.selinux": {"py/id": 20461}, "ansible.posix.__init__": {"py/id": 20464}, "ansible.posix.firewalld": {"py/id": 20467}, "ansible.posix.at": {"py/id": 20470}, "ansible.posix.authorized_key": {"py/id": 20473}, "ansible.posix.acl": {"py/id": 20476}, "ansible.posix.synchronize": {"py/id": 20479}, "ansible.posix.mount": {"py/id": 20482}, "ansible.posix.sysctl": {"py/id": 20485}, "ansible.posix.firewalld_info": {"py/id": 20488}, "ansible.posix.seboolean": {"py/id": 20491}, "community.postgresql.postgresql_sequence": {"py/id": 20499}, "community.postgresql.postgresql_script": {"py/id": 20502}, "community.postgresql.postgresql_user": {"py/id": 20505}, "community.postgresql.postgresql_lang": {"py/id": 20508}, "community.postgresql.postgresql_privs": {"py/id": 20511}, "community.postgresql.postgresql_publication": {"py/id": 20514}, "community.postgresql.postgresql_schema": {"py/id": 20517}, "community.postgresql.postgresql_pg_hba": {"py/id": 20520}, "community.postgresql.postgresql_membership": {"py/id": 20523}, "community.postgresql.postgresql_table": {"py/id": 20526}, "community.postgresql.postgresql_copy": {"py/id": 20529}, "community.postgresql.postgresql_slot": {"py/id": 20532}, "community.postgresql.postgresql_subscription": {"py/id": 20535}, "community.postgresql.postgresql_query": {"py/id": 20538}, "community.postgresql.postgresql_ext": {"py/id": 20541}, "community.postgresql.postgresql_user_obj_stat_info": {"py/id": 20544}, "community.postgresql.postgresql_set": {"py/id": 20547}, "community.postgresql.postgresql_info": {"py/id": 20550}, "community.postgresql.postgresql_db": {"py/id": 20553}, "community.postgresql.postgresql_idx": {"py/id": 20556}, "community.postgresql.postgresql_owner": {"py/id": 20559}, "community.postgresql.postgresql_tablespace": {"py/id": 20562}, "community.postgresql.postgresql_ping": {"py/id": 20565}, "community.crypto.x509_certificate_info": {"py/id": 20573}, "community.crypto.acme_challenge_cert_helper": {"py/id": 20576}, "community.crypto.acme_account": {"py/id": 20579}, "community.crypto.openssl_privatekey_info": {"py/id": 20582}, "community.crypto.get_certificate": {"py/id": 20585}, "community.crypto.certificate_complete_chain": {"py/id": 20588}, "community.crypto.openssl_privatekey_pipe": {"py/id": 20591}, "community.crypto.openssl_certificate": {"py/id": 20594}, "community.crypto.luks_device": {"py/id": 20597}, "community.crypto.x509_certificate_pipe": {"py/id": 20600}, "community.crypto.openssl_signature": {"py/id": 20603}, "community.crypto.x509_crl_info": {"py/id": 20606}, "community.crypto.openssl_publickey": {"py/id": 20609}, "community.crypto.acme_certificate_revoke": {"py/id": 20612}, "community.crypto.openssl_dhparam": {"py/id": 20615}, "community.crypto.openssl_publickey_info": {"py/id": 20618}, "community.crypto.acme_certificate": {"py/id": 20621}, "community.crypto.acme_inspect": {"py/id": 20624}, "community.crypto.openssh_cert": {"py/id": 20627}, "community.crypto.openssl_csr_info": {"py/id": 20630}, "community.crypto.openssl_privatekey": {"py/id": 20633}, "community.crypto.openssl_signature_info": {"py/id": 20636}, "community.crypto.openssl_csr_pipe": {"py/id": 20639}, "community.crypto.ecs_domain": {"py/id": 20642}, "community.crypto.openssh_keypair": {"py/id": 20645}, "community.crypto.x509_crl": {"py/id": 20648}, "community.crypto.acme_account_facts": {"py/id": 20651}, "community.crypto.x509_certificate": {"py/id": 20654}, "community.crypto.ecs_certificate": {"py/id": 20657}, "community.crypto.openssl_csr": {"py/id": 20660}, "community.crypto.openssl_pkcs12": {"py/id": 20663}, "community.crypto.acme_account_info": {"py/id": 20666}, "community.crypto.openssl_certificate_info": {"py/id": 20669}, "community.rabbitmq.rabbitmq_exchange": {"py/id": 20677}, "community.rabbitmq.rabbitmq_policy": {"py/id": 20680}, "community.rabbitmq.rabbitmq_user": {"py/id": 20683}, "community.rabbitmq.rabbitmq_publish": {"py/id": 20686}, "community.rabbitmq.rabbitmq_user_limits": {"py/id": 20689}, "community.rabbitmq.rabbitmq_binding": {"py/id": 20692}, "community.rabbitmq.rabbitmq_vhost_limits": {"py/id": 20695}, "community.rabbitmq.rabbitmq_vhost": {"py/id": 20698}, "community.rabbitmq.rabbitmq_queue": {"py/id": 20701}, "community.rabbitmq.rabbitmq_upgrade": {"py/id": 20704}, "community.rabbitmq.rabbitmq_parameter": {"py/id": 20707}, "community.rabbitmq.rabbitmq_feature_flag": {"py/id": 20710}, "community.rabbitmq.rabbitmq_plugin": {"py/id": 20713}, "community.rabbitmq.rabbitmq_global_parameter": {"py/id": 20716}, "community.libvirt.virt": {"py/id": 20724}, "community.libvirt.virt_net": {"py/id": 20727}, "community.libvirt.virt_pool": {"py/id": 20730}, "ansible.builtin.apt_key": {"py/id": 20738}, "ansible.builtin.reboot": {"py/id": 20741}, "ansible.builtin.get_url": {"py/id": 20744}, "ansible.builtin.lineinfile": {"py/id": 20747}, "ansible.builtin.url": {"py/id": 20750}, "ansible.builtin.pipe": {"py/id": 20753}, "ansible.builtin.slurp": {"py/id": 20756}, "ansible.builtin.package": {"py/id": 20759}, "ansible.builtin.user": {"py/id": 20762}, "ansible.builtin.password": {"py/id": 20765}, "ansible.builtin.fetch": {"py/id": 20768}, "ansible.builtin.package_facts": {"py/id": 20771}, "ansible.builtin.rpm_key": {"py/id": 20774}, "ansible.builtin.config": {"py/id": 20777}, "ansible.builtin.winrm": {"py/id": 20780}, "ansible.builtin.systemd": {"py/id": 20783}, "ansible.builtin.sudo": {"py/id": 20786}, "ansible.builtin.import_tasks": {"py/id": 20789}, "ansible.builtin.jsonfile": {"py/id": 20792}, "ansible.builtin.inventory_hostnames": {"py/id": 20795}, "ansible.builtin.yum_repository": {"py/id": 20798}, "ansible.builtin.file": {"py/id": 20801}, "ansible.builtin.stat": {"py/id": 20804}, "ansible.builtin.generator": {"py/id": 20807}, "ansible.builtin.validate_argument_spec": {"py/id": 20810}, "ansible.builtin.debug": {"py/id": 20813}, "ansible.builtin.pause": {"py/id": 20816}, "ansible.builtin.items": {"py/id": 20819}, "ansible.builtin.replace": {"py/id": 20822}, "ansible.builtin.find": {"py/id": 20825}, "ansible.builtin.tree": {"py/id": 20828}, "ansible.builtin.unvault": {"py/id": 20831}, "ansible.builtin.gather_facts": {"py/id": 20834}, "ansible.builtin.host_group_vars": {"py/id": 20837}, "ansible.builtin.wait_for_connection": {"py/id": 20840}, "ansible.builtin.setup": {"py/id": 20843}, "ansible.builtin.powershell": {"py/id": 20846}, "ansible.builtin.group_by": {"py/id": 20849}, "ansible.builtin.getent": {"py/id": 20852}, "ansible.builtin.toml": {"py/id": 20855}, "ansible.builtin.sequence": {"py/id": 20858}, "ansible.builtin.dnf": {"py/id": 20861}, "ansible.builtin.tempfile": {"py/id": 20864}, "ansible.builtin.unarchive": {"py/id": 20867}, "ansible.builtin.runas": {"py/id": 20870}, "ansible.builtin.fileglob": {"py/id": 20873}, "ansible.builtin.uri": {"py/id": 20876}, "ansible.builtin.paramiko_ssh": {"py/id": 20879}, "ansible.builtin.host_pinned": {"py/id": 20882}, "ansible.builtin.random_choice": {"py/id": 20885}, "ansible.builtin.pip": {"py/id": 20888}, "ansible.builtin.yum": {"py/id": 20891}, "ansible.builtin.iptables": {"py/id": 20894}, "ansible.builtin.import_role": {"py/id": 20897}, "ansible.builtin.cmd": {"py/id": 20900}, "ansible.builtin.set_fact": {"py/id": 20903}, "ansible.builtin.subversion": {"py/id": 20906}, "ansible.builtin.local": {"py/id": 20909}, "ansible.builtin.lines": {"py/id": 20912}, "ansible.builtin.memory": {"py/id": 20915}, "ansible.builtin.apt": {"py/id": 20918}, "ansible.builtin.hostname": {"py/id": 20921}, "ansible.builtin.wait_for": {"py/id": 20924}, "ansible.builtin.su": {"py/id": 20927}, "ansible.builtin.junit": {"py/id": 20930}, "ansible.builtin.fail": {"py/id": 20933}, "ansible.builtin.first_found": {"py/id": 20936}, "ansible.builtin.async_status": {"py/id": 20939}, "ansible.builtin.set_stats": {"py/id": 20942}, "ansible.builtin.sh": {"py/id": 20945}, "ansible.builtin.free": {"py/id": 20948}, "ansible.builtin.minimal": {"py/id": 20951}, "ansible.builtin.env": {"py/id": 20954}, "ansible.builtin.cron": {"py/id": 20957}, "ansible.builtin.raw": {"py/id": 20960}, "ansible.builtin.service_facts": {"py/id": 20963}, "ansible.builtin.csvfile": {"py/id": 20966}, "ansible.builtin.blockinfile": {"py/id": 20969}, "ansible.builtin.template": {"py/id": 20972}, "ansible.builtin.known_hosts": {"py/id": 20975}, "ansible.builtin.together": {"py/id": 20978}, "ansible.builtin.service": {"py/id": 20981}, "ansible.builtin.subelements": {"py/id": 20984}, "ansible.builtin.constructed": {"py/id": 20987}, "ansible.builtin.include_vars": {"py/id": 20990}, "ansible.builtin.varnames": {"py/id": 20993}, "ansible.builtin.assert": {"py/id": 20996}, "ansible.builtin.linear": {"py/id": 20999}, "ansible.builtin.list": {"py/id": 21002}, "ansible.builtin.script": {"py/id": 21005}, "ansible.builtin.import_playbook": {"py/id": 21008}, "ansible.builtin.dpkg_selections": {"py/id": 21011}, "ansible.builtin.dict": {"py/id": 21014}, "ansible.builtin.yaml": {"py/id": 21017}, "ansible.builtin.shell": {"py/id": 21020}, "ansible.builtin.add_host": {"py/id": 21023}, "ansible.builtin.apt_repository": {"py/id": 21026}, "ansible.builtin.include_tasks": {"py/id": 21029}, "ansible.builtin.psrp": {"py/id": 21032}, "ansible.builtin.auto": {"py/id": 21035}, "ansible.builtin.assemble": {"py/id": 21038}, "ansible.builtin.advanced_host_list": {"py/id": 21041}, "ansible.builtin.ini": {"py/id": 21044}, "ansible.builtin.host_list": {"py/id": 21047}, "ansible.builtin.meta": {"py/id": 21050}, "ansible.builtin.indexed_items": {"py/id": 21053}, "ansible.builtin.include_role": {"py/id": 21056}, "ansible.builtin.command": {"py/id": 21059}, "ansible.builtin.debconf": {"py/id": 21062}, "ansible.builtin.include": {"py/id": 21065}, "ansible.builtin.default": {"py/id": 21068}, "ansible.builtin.group": {"py/id": 21071}, "ansible.builtin.ssh": {"py/id": 21074}, "ansible.builtin.copy": {"py/id": 21077}, "ansible.builtin.git": {"py/id": 21080}, "ansible.builtin.nested": {"py/id": 21083}, "ansible.builtin.ping": {"py/id": 21086}, "ansible.builtin.sysvinit": {"py/id": 21089}, "ansible.builtin.oneline": {"py/id": 21092}, "ansible.builtin.expect": {"py/id": 21095}, "ansible.builtin.vars": {"py/id": 21098}}, "role_dict": {"freeradius": {"py/id": 886}, "mosquitto": {"py/id": 970}, "btrfs": {"py/id": 1127}, "postgresql_server": {"py/id": 1165}, "iscsi": {"py/id": 1455}, "docker_registry": {"py/id": 1564}, "nfs_server": {"py/id": 1685}, "redis_sentinel": {"py/id": 1731}, "tftpd": {"py/id": 1847}, "system_groups": {"py/id": 1890}, "lldpd": {"py/id": 1964}, "postgresql": {"py/id": 2027}, "netbase": {"py/id": 2152}, "saslauthd": {"py/id": 2218}, "etesync": {"py/id": 2321}, "netbox": {"py/id": 2438}, "nodejs": {"py/id": 2589}, "rspamd": {"py/id": 2638}, "bitcoind": {"py/id": 2770}, "slapd": {"py/id": 2812}, "ipxe": {"py/id": 2986}, "extrepo": {"py/id": 3079}, "influxdata": {"py/id": 3152}, "journald": {"py/id": 3190}, "ferm": {"py/id": 3281}, "etherpad": {"py/id": 3418}, "locales": {"py/id": 3589}, "core": {"py/id": 3636}, "gitlab": {"py/id": 3688}, "postldap": {"py/id": 4280}, "dokuwiki": {"py/id": 4335}, "apt_mark": {"py/id": 4489}, "homeassistant": {"py/id": 4541}, "mariadb": {"py/id": 4605}, "dovecot": {"py/id": 4759}, "telegraf": {"py/id": 4905}, "kibana": {"py/id": 4980}, "nfs": {"py/id": 5114}, "apt_preferences": {"py/id": 5148}, "boxbackup": {"py/id": 5172}, "zabbix_agent": {"py/id": 5270}, "system_users": {"py/id": 5340}, "python": {"py/id": 5501}, "reboot": {"py/id": 5563}, "hashicorp": {"py/id": 5579}, "atd": {"py/id": 5703}, "auth": {"py/id": 5773}, "golang": {"py/id": 5828}, "rabbitmq_server": {"py/id": 5953}, "sysctl": {"py/id": 6089}, "metricbeat": {"py/id": 6156}, "sshd": {"py/id": 6269}, "filebeat": {"py/id": 6454}, "etc_aliases": {"py/id": 6560}, "reprepro": {"py/id": 6623}, "ldap": {"py/id": 6818}, "phpmyadmin": {"py/id": 6901}, "avahi": {"py/id": 6937}, "gitlab_runner": {"py/id": 7054}, "roundcube": {"py/id": 7193}, "phpipam": {"py/id": 7395}, "elastic_co": {"py/id": 7517}, "x2go_server": {"py/id": 7555}, "foodsoft": {"py/id": 7566}, "authorized_keys": {"py/id": 7662}, "fail2ban": {"py/id": 7732}, "tzdata": {"py/id": 7841}, "resources": {"py/id": 7930}, "sysfs": {"py/id": 8051}, "prosody": {"py/id": 8125}, "logrotate": {"py/id": 8168}, "pdns": {"py/id": 8219}, "rsyslog": {"py/id": 8286}, "fuse": {"py/id": 8390}, "debops_fact": {"py/id": 8441}, "snmpd": {"py/id": 8482}, "owncloud": {"py/id": 8640}, "rsnapshot": {"py/id": 9051}, "smstools": {"py/id": 9185}, "apparmor": {"py/id": 9294}, "opendkim": {"py/id": 9387}, "hwraid": {"py/id": 9504}, "etckeeper": {"py/id": 9542}, "tgt": {"py/id": 9655}, "sssd": {"py/id": 9718}, "librenms": {"py/id": 9774}, "kodi": {"py/id": 9904}, "mailman": {"py/id": 9936}, "java": {"py/id": 10029}, "preseed": {"py/id": 10075}, "postscreen": {"py/id": 10131}, "gunicorn": {"py/id": 10165}, "libvirt": {"py/id": 10316}, "php": {"py/id": 10417}, "minio": {"py/id": 10595}, "wpcli": {"py/id": 10715}, "snapshot_snapper": {"py/id": 10772}, "cryptsetup": {"py/id": 10865}, "neurodebian": {"py/id": 11079}, "controller": {"py/id": 11137}, "rails_deploy": {"py/id": 11172}, "influxdb": {"py/id": 11380}, "ntp": {"py/id": 11453}, "ansible": {"py/id": 11566}, "docker_server": {"py/id": 11602}, "tinc": {"py/id": 11709}, "postconf": {"py/id": 11911}, "memcached": {"py/id": 11953}, "dhcpd": {"py/id": 11991}, "redis_server": {"py/id": 12068}, "lxc": {"py/id": 12219}, "lxd": {"py/id": 12458}, "proc_hidepid": {"py/id": 12533}, "salt": {"py/id": 12609}, "unattended_upgrades": {"py/id": 12637}, "cran": {"py/id": 12684}, "apt_listchanges": {"py/id": 12726}, "resolvconf": {"py/id": 12753}, "nscd": {"py/id": 12819}, "global_handlers": {"py/id": 12871}, "libuser": {"py/id": 12877}, "persistent_paths": {"py/id": 12924}, "kmod": {"py/id": 12968}, "icinga": {"py/id": 13063}, "tor": {"py/id": 13187}, "samba": {"py/id": 13198}, "nginx": {"py/id": 13246}, "keyring": {"py/id": 13631}, "dhcp_probe": {"py/id": 13722}, "apt": {"py/id": 13806}, "stunnel": {"py/id": 13936}, "machine": {"py/id": 13988}, "pam_access": {"py/id": 14082}, "sks": {"py/id": 14135}, "users": {"py/id": 14204}, "dpkg_cleanup": {"py/id": 14364}, "grub": {"py/id": 14399}, "icinga_db": {"py/id": 14511}, "apt_install": {"py/id": 14556}, "etc_services": {"py/id": 14629}, "nslcd": {"py/id": 14675}, "yadm": {"py/id": 14736}, "minidlna": {"py/id": 14809}, "monit": {"py/id": 14861}, "rstudio_server": {"py/id": 14915}, "icinga_web": {"py/id": 15000}, "mount": {"py/id": 15175}, "nullmailer": {"py/id": 15238}, "gitusers": {"py/id": 15331}, "libvirtd": {"py/id": 15458}, "environment": {"py/id": 15535}, "backup2l": {"py/id": 15557}, "tinyproxy": {"py/id": 15624}, "dropbear_initramfs": {"py/id": 15683}, "mariadb_server": {"py/id": 15732}, "apt_proxy": {"py/id": 15845}, "libvirtd_qemu": {"py/id": 15871}, "fhs": {"py/id": 15909}, "ifupdown": {"py/id": 15943}, "root_account": {"py/id": 16118}, "postfix": {"py/id": 16207}, "volkszaehler": {"py/id": 16329}, "secret": {"py/id": 16421}, "mcli": {"py/id": 16432}, "keepalived": {"py/id": 16464}, "influxdb_server": {"py/id": 16517}, "sysnews": {"py/id": 16636}, "sudo": {"py/id": 16698}, "unbound": {"py/id": 16772}, "apt_cacher_ng": {"py/id": 16857}, "docker_gen": {"py/id": 16960}, "postwhite": {"py/id": 17028}, "firejail": {"py/id": 17111}, "fcgiwrap": {"py/id": 17211}, "rabbitmq_management": {"py/id": 17299}, "ansible_plugins": {"py/id": 17310}, "dhparam": {"py/id": 17316}, "swapfile": {"py/id": 17417}, "radvd": {"py/id": 17460}, "tcpwrappers": {"py/id": 17503}, "elasticsearch": {"py/id": 17572}, "apache": {"py/id": 17752}, "debops_legacy": {"py/id": 17876}, "ruby": {"py/id": 17902}, "dhcrelay": {"py/id": 17937}, "imapproxy": {"py/id": 17985}, "lvm": {"py/id": 18052}, "cron": {"py/id": 18132}, "dnsmasq": {"py/id": 18213}, "debops_api": {"py/id": 18302}, "console": {"py/id": 18376}, "nsswitch": {"py/id": 18415}, "pki": {"py/id": 18452}}, "annotations": {}}